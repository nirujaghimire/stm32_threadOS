
stm32_threadOS_v_1_1_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  080031bc  080031bc  000131bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032f4  080032f4  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  080032f4  080032f4  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032f4  080032f4  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032f4  080032f4  000132f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032f8  080032f8  000132f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080032fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e44  200000b0  080033ac  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ef4  080033ac  00020ef4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008424  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019dc  00000000  00000000  000284fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  00029ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000708  00000000  00000000  0002a690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017be6  00000000  00000000  0002ad98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009176  00000000  00000000  0004297e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083a2c  00000000  00000000  0004baf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf520  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002578  00000000  00000000  000cf570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b0 	.word	0x200000b0
 8000128:	00000000 	.word	0x00000000
 800012c:	080031a4 	.word	0x080031a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b4 	.word	0x200000b4
 8000148:	080031a4 	.word	0x080031a4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 ff18 	bl	8000f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f807 	bl	8000166 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f874 	bl	8000244 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015c:	f000 f848 	bl	80001f0 <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  extern void run();
  run();
 8000160:	f000 fed4 	bl	8000f0c <run>
  while (1)
 8000164:	e7fe      	b.n	8000164 <main+0x18>

08000166 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000166:	b580      	push	{r7, lr}
 8000168:	b090      	sub	sp, #64	; 0x40
 800016a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800016c:	f107 0318 	add.w	r3, r7, #24
 8000170:	2228      	movs	r2, #40	; 0x28
 8000172:	2100      	movs	r1, #0
 8000174:	4618      	mov	r0, r3
 8000176:	f002 f805 	bl	8002184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800017a:	1d3b      	adds	r3, r7, #4
 800017c:	2200      	movs	r2, #0
 800017e:	601a      	str	r2, [r3, #0]
 8000180:	605a      	str	r2, [r3, #4]
 8000182:	609a      	str	r2, [r3, #8]
 8000184:	60da      	str	r2, [r3, #12]
 8000186:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000188:	2301      	movs	r3, #1
 800018a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800018c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000190:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000192:	2300      	movs	r3, #0
 8000194:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000196:	2301      	movs	r3, #1
 8000198:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800019a:	2302      	movs	r3, #2
 800019c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800019e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001a4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001aa:	f107 0318 	add.w	r3, r7, #24
 80001ae:	4618      	mov	r0, r3
 80001b0:	f001 f9d6 	bl	8001560 <HAL_RCC_OscConfig>
 80001b4:	4603      	mov	r3, r0
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d001      	beq.n	80001be <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001ba:	f000 f865 	bl	8000288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001be:	230f      	movs	r3, #15
 80001c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001c2:	2302      	movs	r3, #2
 80001c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001c6:	2300      	movs	r3, #0
 80001c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d0:	2300      	movs	r3, #0
 80001d2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	2102      	movs	r1, #2
 80001d8:	4618      	mov	r0, r3
 80001da:	f001 fc43 	bl	8001a64 <HAL_RCC_ClockConfig>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d001      	beq.n	80001e8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001e4:	f000 f850 	bl	8000288 <Error_Handler>
  }
}
 80001e8:	bf00      	nop
 80001ea:	3740      	adds	r7, #64	; 0x40
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}

080001f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80001f4:	4b11      	ldr	r3, [pc, #68]	; (800023c <MX_USART1_UART_Init+0x4c>)
 80001f6:	4a12      	ldr	r2, [pc, #72]	; (8000240 <MX_USART1_UART_Init+0x50>)
 80001f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80001fa:	4b10      	ldr	r3, [pc, #64]	; (800023c <MX_USART1_UART_Init+0x4c>)
 80001fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000200:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000202:	4b0e      	ldr	r3, [pc, #56]	; (800023c <MX_USART1_UART_Init+0x4c>)
 8000204:	2200      	movs	r2, #0
 8000206:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000208:	4b0c      	ldr	r3, [pc, #48]	; (800023c <MX_USART1_UART_Init+0x4c>)
 800020a:	2200      	movs	r2, #0
 800020c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800020e:	4b0b      	ldr	r3, [pc, #44]	; (800023c <MX_USART1_UART_Init+0x4c>)
 8000210:	2200      	movs	r2, #0
 8000212:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000214:	4b09      	ldr	r3, [pc, #36]	; (800023c <MX_USART1_UART_Init+0x4c>)
 8000216:	220c      	movs	r2, #12
 8000218:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800021a:	4b08      	ldr	r3, [pc, #32]	; (800023c <MX_USART1_UART_Init+0x4c>)
 800021c:	2200      	movs	r2, #0
 800021e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000220:	4b06      	ldr	r3, [pc, #24]	; (800023c <MX_USART1_UART_Init+0x4c>)
 8000222:	2200      	movs	r2, #0
 8000224:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000226:	4805      	ldr	r0, [pc, #20]	; (800023c <MX_USART1_UART_Init+0x4c>)
 8000228:	f001 fdaa 	bl	8001d80 <HAL_HalfDuplex_Init>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000232:	f000 f829 	bl	8000288 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000236:	bf00      	nop
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	200000cc 	.word	0x200000cc
 8000240:	40013800 	.word	0x40013800

08000244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800024a:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <MX_GPIO_Init+0x40>)
 800024c:	699b      	ldr	r3, [r3, #24]
 800024e:	4a0d      	ldr	r2, [pc, #52]	; (8000284 <MX_GPIO_Init+0x40>)
 8000250:	f043 0320 	orr.w	r3, r3, #32
 8000254:	6193      	str	r3, [r2, #24]
 8000256:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <MX_GPIO_Init+0x40>)
 8000258:	699b      	ldr	r3, [r3, #24]
 800025a:	f003 0320 	and.w	r3, r3, #32
 800025e:	607b      	str	r3, [r7, #4]
 8000260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000262:	4b08      	ldr	r3, [pc, #32]	; (8000284 <MX_GPIO_Init+0x40>)
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	4a07      	ldr	r2, [pc, #28]	; (8000284 <MX_GPIO_Init+0x40>)
 8000268:	f043 0304 	orr.w	r3, r3, #4
 800026c:	6193      	str	r3, [r2, #24]
 800026e:	4b05      	ldr	r3, [pc, #20]	; (8000284 <MX_GPIO_Init+0x40>)
 8000270:	699b      	ldr	r3, [r3, #24]
 8000272:	f003 0304 	and.w	r3, r3, #4
 8000276:	603b      	str	r3, [r7, #0]
 8000278:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800027a:	bf00      	nop
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr
 8000284:	40021000 	.word	0x40021000

08000288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800028c:	b672      	cpsid	i
}
 800028e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000290:	e7fe      	b.n	8000290 <Error_Handler+0x8>
	...

08000294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800029a:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <HAL_MspInit+0x40>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	4a0d      	ldr	r2, [pc, #52]	; (80002d4 <HAL_MspInit+0x40>)
 80002a0:	f043 0301 	orr.w	r3, r3, #1
 80002a4:	6193      	str	r3, [r2, #24]
 80002a6:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <HAL_MspInit+0x40>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	607b      	str	r3, [r7, #4]
 80002b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <HAL_MspInit+0x40>)
 80002b4:	69db      	ldr	r3, [r3, #28]
 80002b6:	4a07      	ldr	r2, [pc, #28]	; (80002d4 <HAL_MspInit+0x40>)
 80002b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002bc:	61d3      	str	r3, [r2, #28]
 80002be:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <HAL_MspInit+0x40>)
 80002c0:	69db      	ldr	r3, [r3, #28]
 80002c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002c6:	603b      	str	r3, [r7, #0]
 80002c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr
 80002d4:	40021000 	.word	0x40021000

080002d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e0:	f107 0310 	add.w	r3, r7, #16
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
 80002ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a16      	ldr	r2, [pc, #88]	; (800034c <HAL_UART_MspInit+0x74>)
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d124      	bne.n	8000342 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80002f8:	4b15      	ldr	r3, [pc, #84]	; (8000350 <HAL_UART_MspInit+0x78>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a14      	ldr	r2, [pc, #80]	; (8000350 <HAL_UART_MspInit+0x78>)
 80002fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b12      	ldr	r3, [pc, #72]	; (8000350 <HAL_UART_MspInit+0x78>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000310:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <HAL_UART_MspInit+0x78>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a0e      	ldr	r2, [pc, #56]	; (8000350 <HAL_UART_MspInit+0x78>)
 8000316:	f043 0304 	orr.w	r3, r3, #4
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <HAL_UART_MspInit+0x78>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0304 	and.w	r3, r3, #4
 8000324:	60bb      	str	r3, [r7, #8]
 8000326:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000328:	f44f 7300 	mov.w	r3, #512	; 0x200
 800032c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800032e:	2312      	movs	r3, #18
 8000330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000332:	2303      	movs	r3, #3
 8000334:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000336:	f107 0310 	add.w	r3, r7, #16
 800033a:	4619      	mov	r1, r3
 800033c:	4805      	ldr	r0, [pc, #20]	; (8000354 <HAL_UART_MspInit+0x7c>)
 800033e:	f000 ff8b 	bl	8001258 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000342:	bf00      	nop
 8000344:	3720      	adds	r7, #32
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40013800 	.word	0x40013800
 8000350:	40021000 	.word	0x40021000
 8000354:	40010800 	.word	0x40010800

08000358 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800035c:	e7fe      	b.n	800035c <NMI_Handler+0x4>

0800035e <MemManage_Handler>:
//}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 800035e:	b480      	push	{r7}
 8000360:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8000362:	e7fe      	b.n	8000362 <MemManage_Handler+0x4>

08000364 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8000368:	e7fe      	b.n	8000368 <BusFault_Handler+0x4>

0800036a <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 800036a:	b480      	push	{r7}
 800036c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 800036e:	e7fe      	b.n	800036e <UsageFault_Handler+0x4>

08000370 <DebugMon_Handler>:
//}

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr

0800037c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b086      	sub	sp, #24
 8000380:	af00      	add	r7, sp, #0
 8000382:	60f8      	str	r0, [r7, #12]
 8000384:	60b9      	str	r1, [r7, #8]
 8000386:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000388:	2300      	movs	r3, #0
 800038a:	617b      	str	r3, [r7, #20]
 800038c:	e00a      	b.n	80003a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800038e:	f3af 8000 	nop.w
 8000392:	4601      	mov	r1, r0
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	1c5a      	adds	r2, r3, #1
 8000398:	60ba      	str	r2, [r7, #8]
 800039a:	b2ca      	uxtb	r2, r1
 800039c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800039e:	697b      	ldr	r3, [r7, #20]
 80003a0:	3301      	adds	r3, #1
 80003a2:	617b      	str	r3, [r7, #20]
 80003a4:	697a      	ldr	r2, [r7, #20]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	429a      	cmp	r2, r3
 80003aa:	dbf0      	blt.n	800038e <_read+0x12>
  }

  return len;
 80003ac:	687b      	ldr	r3, [r7, #4]
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3718      	adds	r7, #24
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80003b6:	b480      	push	{r7}
 80003b8:	b083      	sub	sp, #12
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80003be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr

080003cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003dc:	605a      	str	r2, [r3, #4]
  return 0;
 80003de:	2300      	movs	r3, #0
}
 80003e0:	4618      	mov	r0, r3
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bc80      	pop	{r7}
 80003e8:	4770      	bx	lr

080003ea <_isatty>:

int _isatty(int file)
{
 80003ea:	b480      	push	{r7}
 80003ec:	b083      	sub	sp, #12
 80003ee:	af00      	add	r7, sp, #0
 80003f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80003f2:	2301      	movs	r3, #1
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	370c      	adds	r7, #12
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr

080003fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003fe:	b480      	push	{r7}
 8000400:	b085      	sub	sp, #20
 8000402:	af00      	add	r7, sp, #0
 8000404:	60f8      	str	r0, [r7, #12]
 8000406:	60b9      	str	r1, [r7, #8]
 8000408:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800040a:	2300      	movs	r3, #0
}
 800040c:	4618      	mov	r0, r3
 800040e:	3714      	adds	r7, #20
 8000410:	46bd      	mov	sp, r7
 8000412:	bc80      	pop	{r7}
 8000414:	4770      	bx	lr
	...

08000418 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000420:	4a14      	ldr	r2, [pc, #80]	; (8000474 <_sbrk+0x5c>)
 8000422:	4b15      	ldr	r3, [pc, #84]	; (8000478 <_sbrk+0x60>)
 8000424:	1ad3      	subs	r3, r2, r3
 8000426:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800042c:	4b13      	ldr	r3, [pc, #76]	; (800047c <_sbrk+0x64>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d102      	bne.n	800043a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000434:	4b11      	ldr	r3, [pc, #68]	; (800047c <_sbrk+0x64>)
 8000436:	4a12      	ldr	r2, [pc, #72]	; (8000480 <_sbrk+0x68>)
 8000438:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800043a:	4b10      	ldr	r3, [pc, #64]	; (800047c <_sbrk+0x64>)
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4413      	add	r3, r2
 8000442:	693a      	ldr	r2, [r7, #16]
 8000444:	429a      	cmp	r2, r3
 8000446:	d207      	bcs.n	8000458 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000448:	f001 fe72 	bl	8002130 <__errno>
 800044c:	4603      	mov	r3, r0
 800044e:	220c      	movs	r2, #12
 8000450:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000452:	f04f 33ff 	mov.w	r3, #4294967295
 8000456:	e009      	b.n	800046c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <_sbrk+0x64>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800045e:	4b07      	ldr	r3, [pc, #28]	; (800047c <_sbrk+0x64>)
 8000460:	681a      	ldr	r2, [r3, #0]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4413      	add	r3, r2
 8000466:	4a05      	ldr	r2, [pc, #20]	; (800047c <_sbrk+0x64>)
 8000468:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800046a:	68fb      	ldr	r3, [r7, #12]
}
 800046c:	4618      	mov	r0, r3
 800046e:	3718      	adds	r7, #24
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	20005000 	.word	0x20005000
 8000478:	00000400 	.word	0x00000400
 800047c:	20000114 	.word	0x20000114
 8000480:	20000ef8 	.word	0x20000ef8

08000484 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr

08000490 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000490:	f7ff fff8 	bl	8000484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000494:	480b      	ldr	r0, [pc, #44]	; (80004c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000496:	490c      	ldr	r1, [pc, #48]	; (80004c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000498:	4a0c      	ldr	r2, [pc, #48]	; (80004cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800049a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800049c:	e002      	b.n	80004a4 <LoopCopyDataInit>

0800049e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800049e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004a2:	3304      	adds	r3, #4

080004a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a8:	d3f9      	bcc.n	800049e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004aa:	4a09      	ldr	r2, [pc, #36]	; (80004d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004ac:	4c09      	ldr	r4, [pc, #36]	; (80004d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004b0:	e001      	b.n	80004b6 <LoopFillZerobss>

080004b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b4:	3204      	adds	r2, #4

080004b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b8:	d3fb      	bcc.n	80004b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004ba:	f001 fe3f 	bl	800213c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004be:	f7ff fe45 	bl	800014c <main>
  bx lr
 80004c2:	4770      	bx	lr
  ldr r0, =_sdata
 80004c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c8:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 80004cc:	080032fc 	.word	0x080032fc
  ldr r2, =_sbss
 80004d0:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80004d4:	20000ef4 	.word	0x20000ef4

080004d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004d8:	e7fe      	b.n	80004d8 <ADC1_2_IRQHandler>
	...

080004dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	6039      	str	r1, [r7, #0]
 80004e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	db0a      	blt.n	8000506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	b2da      	uxtb	r2, r3
 80004f4:	490c      	ldr	r1, [pc, #48]	; (8000528 <__NVIC_SetPriority+0x4c>)
 80004f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fa:	0112      	lsls	r2, r2, #4
 80004fc:	b2d2      	uxtb	r2, r2
 80004fe:	440b      	add	r3, r1
 8000500:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000504:	e00a      	b.n	800051c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	b2da      	uxtb	r2, r3
 800050a:	4908      	ldr	r1, [pc, #32]	; (800052c <__NVIC_SetPriority+0x50>)
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	f003 030f 	and.w	r3, r3, #15
 8000512:	3b04      	subs	r3, #4
 8000514:	0112      	lsls	r2, r2, #4
 8000516:	b2d2      	uxtb	r2, r2
 8000518:	440b      	add	r3, r1
 800051a:	761a      	strb	r2, [r3, #24]
}
 800051c:	bf00      	nop
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	bc80      	pop	{r7}
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	e000e100 	.word	0xe000e100
 800052c:	e000ed00 	.word	0xe000ed00

08000530 <idleThread>:
static volatile int countThread;
static volatile uint8_t mutexLock = 0;

static uint32_t idleThreadStack[64];
uint32_t stm32_thread_idle_count;
static void idleThread() {
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
	stm32_thread_idle_count = 0;
 8000534:	4b04      	ldr	r3, [pc, #16]	; (8000548 <idleThread+0x18>)
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
	while (1) {
		stm32_thread_idle_count++;
 800053a:	4b03      	ldr	r3, [pc, #12]	; (8000548 <idleThread+0x18>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	3301      	adds	r3, #1
 8000540:	4a01      	ldr	r2, [pc, #4]	; (8000548 <idleThread+0x18>)
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	e7f9      	b.n	800053a <idleThread+0xa>
 8000546:	bf00      	nop
 8000548:	200002d4 	.word	0x200002d4

0800054c <addThread>:
	}
}

static void addThread(int freeIndex, void (*threadTask)(), uint32_t *stack,
		uint32_t stackLen,int argLen,void**args) {
 800054c:	b480      	push	{r7}
 800054e:	b087      	sub	sp, #28
 8000550:	af00      	add	r7, sp, #0
 8000552:	60f8      	str	r0, [r7, #12]
 8000554:	60b9      	str	r1, [r7, #8]
 8000556:	607a      	str	r2, [r7, #4]
 8000558:	603b      	str	r3, [r7, #0]
	int i = freeIndex;
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	617b      	str	r3, [r7, #20]
	//Empty thread found
	thread[i].ID = freeIndex;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	b2d8      	uxtb	r0, r3
 8000562:	4963      	ldr	r1, [pc, #396]	; (80006f0 <addThread+0x1a4>)
 8000564:	697a      	ldr	r2, [r7, #20]
 8000566:	4613      	mov	r3, r2
 8000568:	00db      	lsls	r3, r3, #3
 800056a:	4413      	add	r3, r2
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	440b      	add	r3, r1
 8000570:	4602      	mov	r2, r0
 8000572:	701a      	strb	r2, [r3, #0]
	thread[i].stack = stack;
 8000574:	495e      	ldr	r1, [pc, #376]	; (80006f0 <addThread+0x1a4>)
 8000576:	697a      	ldr	r2, [r7, #20]
 8000578:	4613      	mov	r3, r2
 800057a:	00db      	lsls	r3, r3, #3
 800057c:	4413      	add	r3, r2
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	440b      	add	r3, r1
 8000582:	3304      	adds	r3, #4
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	601a      	str	r2, [r3, #0]
	thread[i].stackLen = stackLen;
 8000588:	4959      	ldr	r1, [pc, #356]	; (80006f0 <addThread+0x1a4>)
 800058a:	697a      	ldr	r2, [r7, #20]
 800058c:	4613      	mov	r3, r2
 800058e:	00db      	lsls	r3, r3, #3
 8000590:	4413      	add	r3, r2
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	440b      	add	r3, r1
 8000596:	3308      	adds	r3, #8
 8000598:	683a      	ldr	r2, [r7, #0]
 800059a:	601a      	str	r2, [r3, #0]
	thread[i].threadFunc = threadTask;
 800059c:	4954      	ldr	r1, [pc, #336]	; (80006f0 <addThread+0x1a4>)
 800059e:	697a      	ldr	r2, [r7, #20]
 80005a0:	4613      	mov	r3, r2
 80005a2:	00db      	lsls	r3, r3, #3
 80005a4:	4413      	add	r3, r2
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	440b      	add	r3, r1
 80005aa:	3314      	adds	r3, #20
 80005ac:	68ba      	ldr	r2, [r7, #8]
 80005ae:	601a      	str	r2, [r3, #0]
	thread[i].action = STM32_THREAD_ACTION_RUNNING;
 80005b0:	494f      	ldr	r1, [pc, #316]	; (80006f0 <addThread+0x1a4>)
 80005b2:	697a      	ldr	r2, [r7, #20]
 80005b4:	4613      	mov	r3, r2
 80005b6:	00db      	lsls	r3, r3, #3
 80005b8:	4413      	add	r3, r2
 80005ba:	009b      	lsls	r3, r3, #2
 80005bc:	440b      	add	r3, r1
 80005be:	3310      	adds	r3, #16
 80005c0:	2201      	movs	r2, #1
 80005c2:	701a      	strb	r2, [r3, #0]
	thread[i].argLen = argLen;
 80005c4:	494a      	ldr	r1, [pc, #296]	; (80006f0 <addThread+0x1a4>)
 80005c6:	697a      	ldr	r2, [r7, #20]
 80005c8:	4613      	mov	r3, r2
 80005ca:	00db      	lsls	r3, r3, #3
 80005cc:	4413      	add	r3, r2
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	440b      	add	r3, r1
 80005d2:	331c      	adds	r3, #28
 80005d4:	6a3a      	ldr	r2, [r7, #32]
 80005d6:	601a      	str	r2, [r3, #0]
	thread[i].args = args;
 80005d8:	4945      	ldr	r1, [pc, #276]	; (80006f0 <addThread+0x1a4>)
 80005da:	697a      	ldr	r2, [r7, #20]
 80005dc:	4613      	mov	r3, r2
 80005de:	00db      	lsls	r3, r3, #3
 80005e0:	4413      	add	r3, r2
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	440b      	add	r3, r1
 80005e6:	3320      	adds	r3, #32
 80005e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005ea:	601a      	str	r2, [r3, #0]


	uint32_t *psp = (uint32_t*) &stack[stackLen];
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	4413      	add	r3, r2
 80005f4:	613b      	str	r3, [r7, #16]

	// fill dummy stack frame
	*(--psp) = 0x01000000u; // Dummy xPSR, just enable Thumb State bit;
 80005f6:	693b      	ldr	r3, [r7, #16]
 80005f8:	3b04      	subs	r3, #4
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
 80005fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000602:	601a      	str	r2, [r3, #0]
	*(--psp) = (uint32_t) threadTask; // PC
 8000604:	693b      	ldr	r3, [r7, #16]
 8000606:	3b04      	subs	r3, #4
 8000608:	613b      	str	r3, [r7, #16]
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	693b      	ldr	r3, [r7, #16]
 800060e:	601a      	str	r2, [r3, #0]
	*(--psp) = 0xFFFFFFFDu; // LR with EXC_RETURN to return to Thread using PSP
 8000610:	693b      	ldr	r3, [r7, #16]
 8000612:	3b04      	subs	r3, #4
 8000614:	613b      	str	r3, [r7, #16]
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	f06f 0202 	mvn.w	r2, #2
 800061c:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x12121212u; // Dummy R12
 800061e:	693b      	ldr	r3, [r7, #16]
 8000620:	3b04      	subs	r3, #4
 8000622:	613b      	str	r3, [r7, #16]
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800062a:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x03030303u; // Dummy R3
 800062c:	693b      	ldr	r3, [r7, #16]
 800062e:	3b04      	subs	r3, #4
 8000630:	613b      	str	r3, [r7, #16]
 8000632:	693b      	ldr	r3, [r7, #16]
 8000634:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 8000638:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x02020202u; // Dummy R2
 800063a:	693b      	ldr	r3, [r7, #16]
 800063c:	3b04      	subs	r3, #4
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693b      	ldr	r3, [r7, #16]
 8000642:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8000646:	601a      	str	r2, [r3, #0]
	*(--psp) = (uint32_t)args; // Dummy R1
 8000648:	693b      	ldr	r3, [r7, #16]
 800064a:	3b04      	subs	r3, #4
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000650:	693b      	ldr	r3, [r7, #16]
 8000652:	601a      	str	r2, [r3, #0]
	*(--psp) = (uint32_t)argLen; // Dummy R0
 8000654:	693b      	ldr	r3, [r7, #16]
 8000656:	3b04      	subs	r3, #4
 8000658:	613b      	str	r3, [r7, #16]
 800065a:	6a3a      	ldr	r2, [r7, #32]
 800065c:	693b      	ldr	r3, [r7, #16]
 800065e:	601a      	str	r2, [r3, #0]

	*(--psp) = 0x11111111u; // Dummy R11
 8000660:	693b      	ldr	r3, [r7, #16]
 8000662:	3b04      	subs	r3, #4
 8000664:	613b      	str	r3, [r7, #16]
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800066c:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x10101010u; // Dummy R10
 800066e:	693b      	ldr	r3, [r7, #16]
 8000670:	3b04      	subs	r3, #4
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800067a:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x09090909u; // Dummy R9
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	3b04      	subs	r3, #4
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8000688:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x08080808u; // Dummy R8
 800068a:	693b      	ldr	r3, [r7, #16]
 800068c:	3b04      	subs	r3, #4
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]
 8000692:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8000696:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x07070707u; // Dummy R7
 8000698:	693b      	ldr	r3, [r7, #16]
 800069a:	3b04      	subs	r3, #4
 800069c:	613b      	str	r3, [r7, #16]
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 80006a4:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x06060606u; // Dummy R6
 80006a6:	693b      	ldr	r3, [r7, #16]
 80006a8:	3b04      	subs	r3, #4
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	693b      	ldr	r3, [r7, #16]
 80006ae:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 80006b2:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x05050505u; // Dummy R5
 80006b4:	693b      	ldr	r3, [r7, #16]
 80006b6:	3b04      	subs	r3, #4
 80006b8:	613b      	str	r3, [r7, #16]
 80006ba:	693b      	ldr	r3, [r7, #16]
 80006bc:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 80006c0:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x04040404u; // Dummy R4
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	3b04      	subs	r3, #4
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 80006ce:	601a      	str	r2, [r3, #0]
	thread[i].sp = (uint32_t) psp;
 80006d0:	6939      	ldr	r1, [r7, #16]
 80006d2:	4807      	ldr	r0, [pc, #28]	; (80006f0 <addThread+0x1a4>)
 80006d4:	697a      	ldr	r2, [r7, #20]
 80006d6:	4613      	mov	r3, r2
 80006d8:	00db      	lsls	r3, r3, #3
 80006da:	4413      	add	r3, r2
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	4403      	add	r3, r0
 80006e0:	330c      	adds	r3, #12
 80006e2:	6019      	str	r1, [r3, #0]
}
 80006e4:	bf00      	nop
 80006e6:	371c      	adds	r7, #28
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	20000118 	.word	0x20000118

080006f4 <new>:
 * @param argLen		: Length of arguments
 * @param args			: Pointer to arguments
 * @return				: ID of created thread (This ID is required for restart or delete of thread)
 * 						: -1 if MAX_THREAD limit exceeds
 */
static int new(void (*threadTask)(int argLen,void**args), uint32_t *stack, uint32_t stackLen,int argLen,void**args) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af02      	add	r7, sp, #8
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
 8000700:	603b      	str	r3, [r7, #0]
	mutexLock = 1;
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <new+0x70>)
 8000704:	2201      	movs	r2, #1
 8000706:	701a      	strb	r2, [r3, #0]
	int freeIndex = 1;
 8000708:	2301      	movs	r3, #1
 800070a:	617b      	str	r3, [r7, #20]
	for (; freeIndex < MAX_THREAD; freeIndex++)
 800070c:	e00d      	b.n	800072a <new+0x36>
		if (thread[freeIndex].ID == 0)
 800070e:	4916      	ldr	r1, [pc, #88]	; (8000768 <new+0x74>)
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	4613      	mov	r3, r2
 8000714:	00db      	lsls	r3, r3, #3
 8000716:	4413      	add	r3, r2
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	440b      	add	r3, r1
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	b2db      	uxtb	r3, r3
 8000720:	2b00      	cmp	r3, #0
 8000722:	d006      	beq.n	8000732 <new+0x3e>
	for (; freeIndex < MAX_THREAD; freeIndex++)
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	3301      	adds	r3, #1
 8000728:	617b      	str	r3, [r7, #20]
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	2b04      	cmp	r3, #4
 800072e:	ddee      	ble.n	800070e <new+0x1a>
 8000730:	e000      	b.n	8000734 <new+0x40>
			break; //empty thread found
 8000732:	bf00      	nop
	if (freeIndex >= MAX_THREAD)
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	2b04      	cmp	r3, #4
 8000738:	dd02      	ble.n	8000740 <new+0x4c>
		return -1;
 800073a:	f04f 33ff 	mov.w	r3, #4294967295
 800073e:	e00d      	b.n	800075c <new+0x68>
	addThread(freeIndex, threadTask, stack, stackLen,argLen,args);
 8000740:	6a3b      	ldr	r3, [r7, #32]
 8000742:	9301      	str	r3, [sp, #4]
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	9300      	str	r3, [sp, #0]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	68f9      	ldr	r1, [r7, #12]
 800074e:	6978      	ldr	r0, [r7, #20]
 8000750:	f7ff fefc 	bl	800054c <addThread>
	mutexLock = 0;
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <new+0x70>)
 8000756:	2200      	movs	r2, #0
 8000758:	701a      	strb	r2, [r3, #0]
	return freeIndex;
 800075a:	697b      	ldr	r3, [r7, #20]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3718      	adds	r7, #24
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200001d0 	.word	0x200001d0
 8000768:	20000118 	.word	0x20000118

0800076c <startScheduler>:

/**
 * This starts threading
 */
static void startScheduler() {
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af02      	add	r7, sp, #8
	// Adding idle thread
	addThread(0, idleThread, idleThreadStack,
 8000772:	2300      	movs	r3, #0
 8000774:	9301      	str	r3, [sp, #4]
 8000776:	2300      	movs	r3, #0
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2340      	movs	r3, #64	; 0x40
 800077c:	4a17      	ldr	r2, [pc, #92]	; (80007dc <startScheduler+0x70>)
 800077e:	4918      	ldr	r1, [pc, #96]	; (80007e0 <startScheduler+0x74>)
 8000780:	2000      	movs	r0, #0
 8000782:	f7ff fee3 	bl	800054c <addThread>
			sizeof(idleThreadStack) / sizeof(uint32_t),0,NULL);
	NVIC_SetPriority(PendSV_IRQn, 0xFF);
 8000786:	21ff      	movs	r1, #255	; 0xff
 8000788:	f06f 0001 	mvn.w	r0, #1
 800078c:	f7ff fea6 	bl	80004dc <__NVIC_SetPriority>

	uint32_t sp = thread[0].sp;
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <startScheduler+0x78>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	607b      	str	r3, [r7, #4]

	__asm volatile("MOV R0, %0"::"r"(sp));
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4618      	mov	r0, r3
	__asm volatile("MSR PSP, R0");
 800079a:	f380 8809 	msr	PSP, r0

	//Stack to PSP
	__asm volatile(
 800079e:	f3ef 8014 	mrs	r0, CONTROL
 80007a2:	f040 0002 	orr.w	r0, r0, #2
 80007a6:	f380 8814 	msr	CONTROL, r0
			"ORR R0, R0, #2\n\t"
			"MSR CONTROL, r0"
	);

	//Unprivileged Mode
	__asm volatile(
 80007aa:	f3ef 8014 	mrs	r0, CONTROL
 80007ae:	f040 0001 	orr.w	r0, r0, #1
 80007b2:	f380 8814 	msr	CONTROL, r0
			"MRS R0, CONTROL\n\t"
			"ORR R0, R0, #1\n\t"
			"MSR CONTROL, r0"
	);

	currentThread = 0;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <startScheduler+0x7c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
	void (*task)(int argLen,void**args) = (void (*)(int argLen,void**args))((uint32_t*)sp)[14];
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3338      	adds	r3, #56	; 0x38
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	603b      	str	r3, [r7, #0]
	task(thread[0].argLen,thread[0].args);
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <startScheduler+0x78>)
 80007c6:	69da      	ldr	r2, [r3, #28]
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <startScheduler+0x78>)
 80007ca:	6a19      	ldr	r1, [r3, #32]
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	4610      	mov	r0, r2
 80007d0:	4798      	blx	r3
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200001d4 	.word	0x200001d4
 80007e0:	08000531 	.word	0x08000531
 80007e4:	20000118 	.word	0x20000118
 80007e8:	20000004 	.word	0x20000004

080007ec <threadSwitching>:

static void threadSwitching() {
 80007ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af02      	add	r7, sp, #8
	if (mutexLock)
 80007f2:	4b62      	ldr	r3, [pc, #392]	; (800097c <threadSwitching+0x190>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	f040 80ba 	bne.w	8000972 <threadSwitching+0x186>
		return;
	for (countThread = 0; countThread <= MAX_THREAD; countThread++) {
 80007fe:	4b60      	ldr	r3, [pc, #384]	; (8000980 <threadSwitching+0x194>)
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	e0a8      	b.n	8000958 <threadSwitching+0x16c>
		currentThread = (currentThread + 1) % MAX_THREAD;
 8000806:	4b5f      	ldr	r3, [pc, #380]	; (8000984 <threadSwitching+0x198>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	1c59      	adds	r1, r3, #1
 800080c:	4b5e      	ldr	r3, [pc, #376]	; (8000988 <threadSwitching+0x19c>)
 800080e:	fb83 2301 	smull	r2, r3, r3, r1
 8000812:	105a      	asrs	r2, r3, #1
 8000814:	17cb      	asrs	r3, r1, #31
 8000816:	1ad2      	subs	r2, r2, r3
 8000818:	4613      	mov	r3, r2
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	4413      	add	r3, r2
 800081e:	1aca      	subs	r2, r1, r3
 8000820:	4b58      	ldr	r3, [pc, #352]	; (8000984 <threadSwitching+0x198>)
 8000822:	601a      	str	r2, [r3, #0]
		if (thread[currentThread].ID == 0)
 8000824:	4b57      	ldr	r3, [pc, #348]	; (8000984 <threadSwitching+0x198>)
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	4958      	ldr	r1, [pc, #352]	; (800098c <threadSwitching+0x1a0>)
 800082a:	4613      	mov	r3, r2
 800082c:	00db      	lsls	r3, r3, #3
 800082e:	4413      	add	r3, r2
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	440b      	add	r3, r1
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	2b00      	cmp	r3, #0
 800083a:	f000 8083 	beq.w	8000944 <threadSwitching+0x158>
			continue; //Empty or idle thread

		if (HAL_GetTick() <= thread[currentThread].waitTill)
 800083e:	f000 fbf9 	bl	8001034 <HAL_GetTick>
 8000842:	4601      	mov	r1, r0
 8000844:	4b4f      	ldr	r3, [pc, #316]	; (8000984 <threadSwitching+0x198>)
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	4850      	ldr	r0, [pc, #320]	; (800098c <threadSwitching+0x1a0>)
 800084a:	4613      	mov	r3, r2
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	4413      	add	r3, r2
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4403      	add	r3, r0
 8000854:	3318      	adds	r3, #24
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4299      	cmp	r1, r3
 800085a:	d975      	bls.n	8000948 <threadSwitching+0x15c>
			continue; //Delay has been executing

		if (thread[currentThread].action == STM32_THREAD_ACTION_DELETE) {
 800085c:	4b49      	ldr	r3, [pc, #292]	; (8000984 <threadSwitching+0x198>)
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	494a      	ldr	r1, [pc, #296]	; (800098c <threadSwitching+0x1a0>)
 8000862:	4613      	mov	r3, r2
 8000864:	00db      	lsls	r3, r3, #3
 8000866:	4413      	add	r3, r2
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	440b      	add	r3, r1
 800086c:	3310      	adds	r3, #16
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2b02      	cmp	r3, #2
 8000874:	d10a      	bne.n	800088c <threadSwitching+0xa0>
			thread[currentThread].ID = 0;
 8000876:	4b43      	ldr	r3, [pc, #268]	; (8000984 <threadSwitching+0x198>)
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	4944      	ldr	r1, [pc, #272]	; (800098c <threadSwitching+0x1a0>)
 800087c:	4613      	mov	r3, r2
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	4413      	add	r3, r2
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	440b      	add	r3, r1
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
			continue;
 800088a:	e060      	b.n	800094e <threadSwitching+0x162>
		} else if (thread[currentThread].action
 800088c:	4b3d      	ldr	r3, [pc, #244]	; (8000984 <threadSwitching+0x198>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	493e      	ldr	r1, [pc, #248]	; (800098c <threadSwitching+0x1a0>)
 8000892:	4613      	mov	r3, r2
 8000894:	00db      	lsls	r3, r3, #3
 8000896:	4413      	add	r3, r2
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	440b      	add	r3, r1
 800089c:	3310      	adds	r3, #16
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	2b03      	cmp	r3, #3
 80008a4:	d13d      	bne.n	8000922 <threadSwitching+0x136>
				== STM32_THREAD_ACTION_RESTART) {
			addThread(currentThread, thread[currentThread].threadFunc,
 80008a6:	4b37      	ldr	r3, [pc, #220]	; (8000984 <threadSwitching+0x198>)
 80008a8:	6818      	ldr	r0, [r3, #0]
 80008aa:	4b36      	ldr	r3, [pc, #216]	; (8000984 <threadSwitching+0x198>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	4937      	ldr	r1, [pc, #220]	; (800098c <threadSwitching+0x1a0>)
 80008b0:	4613      	mov	r3, r2
 80008b2:	00db      	lsls	r3, r3, #3
 80008b4:	4413      	add	r3, r2
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	440b      	add	r3, r1
 80008ba:	3314      	adds	r3, #20
 80008bc:	681c      	ldr	r4, [r3, #0]
 80008be:	4b31      	ldr	r3, [pc, #196]	; (8000984 <threadSwitching+0x198>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	4932      	ldr	r1, [pc, #200]	; (800098c <threadSwitching+0x1a0>)
 80008c4:	4613      	mov	r3, r2
 80008c6:	00db      	lsls	r3, r3, #3
 80008c8:	4413      	add	r3, r2
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	440b      	add	r3, r1
 80008ce:	3304      	adds	r3, #4
 80008d0:	681d      	ldr	r5, [r3, #0]
 80008d2:	4b2c      	ldr	r3, [pc, #176]	; (8000984 <threadSwitching+0x198>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	492d      	ldr	r1, [pc, #180]	; (800098c <threadSwitching+0x1a0>)
 80008d8:	4613      	mov	r3, r2
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	4413      	add	r3, r2
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	440b      	add	r3, r1
 80008e2:	3308      	adds	r3, #8
 80008e4:	681e      	ldr	r6, [r3, #0]
 80008e6:	4b27      	ldr	r3, [pc, #156]	; (8000984 <threadSwitching+0x198>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	4928      	ldr	r1, [pc, #160]	; (800098c <threadSwitching+0x1a0>)
 80008ec:	4613      	mov	r3, r2
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	4413      	add	r3, r2
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	440b      	add	r3, r1
 80008f6:	331c      	adds	r3, #28
 80008f8:	6819      	ldr	r1, [r3, #0]
 80008fa:	4b22      	ldr	r3, [pc, #136]	; (8000984 <threadSwitching+0x198>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	4b23      	ldr	r3, [pc, #140]	; (800098c <threadSwitching+0x1a0>)
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4613      	mov	r3, r2
 8000904:	00db      	lsls	r3, r3, #3
 8000906:	4413      	add	r3, r2
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	4413      	add	r3, r2
 800090e:	3320      	adds	r3, #32
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	9301      	str	r3, [sp, #4]
 8000914:	9100      	str	r1, [sp, #0]
 8000916:	4633      	mov	r3, r6
 8000918:	462a      	mov	r2, r5
 800091a:	4621      	mov	r1, r4
 800091c:	f7ff fe16 	bl	800054c <addThread>
 8000920:	e00c      	b.n	800093c <threadSwitching+0x150>
					thread[currentThread].stack,
					thread[currentThread].stackLen,thread[currentThread].argLen,thread[currentThread].args);
		} else if (thread[currentThread].action == STM32_THREAD_ACTION_BLOCK) {
 8000922:	4b18      	ldr	r3, [pc, #96]	; (8000984 <threadSwitching+0x198>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	4919      	ldr	r1, [pc, #100]	; (800098c <threadSwitching+0x1a0>)
 8000928:	4613      	mov	r3, r2
 800092a:	00db      	lsls	r3, r3, #3
 800092c:	4413      	add	r3, r2
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	440b      	add	r3, r1
 8000932:	3310      	adds	r3, #16
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	b2db      	uxtb	r3, r3
 8000938:	2b00      	cmp	r3, #0
 800093a:	d007      	beq.n	800094c <threadSwitching+0x160>
			continue;
		}

		countThread = 0;
 800093c:	4b10      	ldr	r3, [pc, #64]	; (8000980 <threadSwitching+0x194>)
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
		break;
 8000942:	e00e      	b.n	8000962 <threadSwitching+0x176>
			continue; //Empty or idle thread
 8000944:	bf00      	nop
 8000946:	e002      	b.n	800094e <threadSwitching+0x162>
			continue; //Delay has been executing
 8000948:	bf00      	nop
 800094a:	e000      	b.n	800094e <threadSwitching+0x162>
			continue;
 800094c:	bf00      	nop
	for (countThread = 0; countThread <= MAX_THREAD; countThread++) {
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <threadSwitching+0x194>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	3301      	adds	r3, #1
 8000954:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <threadSwitching+0x194>)
 8000956:	6013      	str	r3, [r2, #0]
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <threadSwitching+0x194>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b05      	cmp	r3, #5
 800095e:	f77f af52 	ble.w	8000806 <threadSwitching+0x1a>
	}
	if (countThread > 0) {
 8000962:	4b07      	ldr	r3, [pc, #28]	; (8000980 <threadSwitching+0x194>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	dd04      	ble.n	8000974 <threadSwitching+0x188>
		//No thread remaining so assign idle
		currentThread = 0;
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <threadSwitching+0x198>)
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	e000      	b.n	8000974 <threadSwitching+0x188>
		return;
 8000972:	bf00      	nop
	}
}
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800097a:	bf00      	nop
 800097c:	200001d0 	.word	0x200001d0
 8000980:	200001cc 	.word	0x200001cc
 8000984:	20000004 	.word	0x20000004
 8000988:	66666667 	.word	0x66666667
 800098c:	20000118 	.word	0x20000118

08000990 <threadSysTickHandler>:

/**
 * This should be called in SysTick_Handler
 */
void threadSysTickHandler() {
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
	if (currentThread >= 0)
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <threadSysTickHandler+0x20>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	db05      	blt.n	80009a8 <threadSysTickHandler+0x18>
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <threadSysTickHandler+0x24>)
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <threadSysTickHandler+0x24>)
 80009a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a6:	6053      	str	r3, [r2, #4]
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	20000004 	.word	0x20000004
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <threadPendSVHandler>:

/**
 * This should be called in PendSV_Handler
 */
__attribute__((naked)) void threadPendSVHandler() {
	__asm volatile("POP {R7,LR}");
 80009b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}

	//Making this function as if __attribute__((naked))
	__asm volatile("PUSH {LR}");
 80009bc:	b500      	push	{lr}

	/* Save the context of current task */

	// get current PSP
	__asm volatile("MRS R0, PSP");
 80009be:	f3ef 8009 	mrs	r0, PSP
	// save R4 to R11 to PSP Frame Stack
	__asm volatile("STMDB R0!, {R4-R11}");
 80009c2:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	// save current value of PSP
	__asm volatile("MOV %0, R0":"=r"(thread[currentThread].sp));
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <threadPendSVHandler+0x50>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	4601      	mov	r1, r0
 80009cc:	480f      	ldr	r0, [pc, #60]	; (8000a0c <threadPendSVHandler+0x54>)
 80009ce:	4613      	mov	r3, r2
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	4413      	add	r3, r2
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	4403      	add	r3, r0
 80009d8:	330c      	adds	r3, #12
 80009da:	6019      	str	r1, [r3, #0]

	/* Scheduling */
	threadSwitching();
 80009dc:	f7ff ff06 	bl	80007ec <threadSwitching>

	/* Retrieve the context of next task */

	// get its past PSP value
	__asm volatile("MOV R0, %0"::"r"(thread[currentThread].sp));
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <threadPendSVHandler+0x50>)
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	4909      	ldr	r1, [pc, #36]	; (8000a0c <threadPendSVHandler+0x54>)
 80009e6:	4613      	mov	r3, r2
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	4413      	add	r3, r2
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	440b      	add	r3, r1
 80009f0:	330c      	adds	r3, #12
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4618      	mov	r0, r3
	// retrieve R4-R11 from PSP Fram Stack
	__asm volatile("LDMIA R0!, {R4-R11}");
 80009f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	// update PSP
	__asm volatile("MSR PSP, R0");
 80009fa:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}");
 80009fe:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("NOP");
 8000a02:	bf00      	nop
	__asm volatile("BX LR");
 8000a04:	4770      	bx	lr
}
 8000a06:	bf00      	nop
 8000a08:	20000004 	.word	0x20000004
 8000a0c:	20000118 	.word	0x20000118

08000a10 <reschedule>:

static void reschedule(){
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
	__asm volatile("SVC #0");
 8000a14:	df00      	svc	0
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
	...

08000a20 <threadSVCHandler>:

/**
 * This should be called in SVC_Handler
 */
void threadSVCHandler(){
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
	if (currentThread >= 0)
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <threadSVCHandler+0x20>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	db05      	blt.n	8000a38 <threadSVCHandler+0x18>
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <threadSVCHandler+0x24>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <threadSVCHandler+0x24>)
 8000a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a36:	6053      	str	r3, [r2, #4]
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr
 8000a40:	20000004 	.word	0x20000004
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <threadDelete>:
/**
 * This deletes this thread
 * @param threadID 	: ID of thread to be deleted
 * 					: 0 for self delete
 */
static void threadDelete(int threadID) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	mutexLock = 1;
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <threadDelete+0x60>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	701a      	strb	r2, [r3, #0]
	if(threadID==0)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d102      	bne.n	8000a62 <threadDelete+0x1a>
		threadID = currentThread;
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <threadDelete+0x64>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	607b      	str	r3, [r7, #4]

	if (threadID > 0 && threadID<MAX_THREAD)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	dd0c      	ble.n	8000a82 <threadDelete+0x3a>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2b04      	cmp	r3, #4
 8000a6c:	dc09      	bgt.n	8000a82 <threadDelete+0x3a>
		thread[threadID].action = STM32_THREAD_ACTION_DELETE;
 8000a6e:	4910      	ldr	r1, [pc, #64]	; (8000ab0 <threadDelete+0x68>)
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	4613      	mov	r3, r2
 8000a74:	00db      	lsls	r3, r3, #3
 8000a76:	4413      	add	r3, r2
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	3310      	adds	r3, #16
 8000a7e:	2202      	movs	r2, #2
 8000a80:	701a      	strb	r2, [r3, #0]
	mutexLock = 0;
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <threadDelete+0x60>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
	if (threadID == 0 && threadID != currentThread)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d104      	bne.n	8000a98 <threadDelete+0x50>
 8000a8e:	4b07      	ldr	r3, [pc, #28]	; (8000aac <threadDelete+0x64>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d102      	bne.n	8000a9e <threadDelete+0x56>
		return;
	reschedule();
 8000a98:	f7ff ffba 	bl	8000a10 <reschedule>
 8000a9c:	e000      	b.n	8000aa0 <threadDelete+0x58>
		return;
 8000a9e:	bf00      	nop
}
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200001d0 	.word	0x200001d0
 8000aac:	20000004 	.word	0x20000004
 8000ab0:	20000118 	.word	0x20000118

08000ab4 <threadRestart>:
/**
 * This restarts this thread
 * @param threadID 	: ID of thread to be restarted
 * 					: 0 for self restart
 */
static void threadRestart(int threadID) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	mutexLock = 1;
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <threadRestart+0x60>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	701a      	strb	r2, [r3, #0]
	if(threadID==0)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d102      	bne.n	8000ace <threadRestart+0x1a>
		threadID = currentThread;
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <threadRestart+0x64>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	607b      	str	r3, [r7, #4]
	if (threadID > 0 && threadID<MAX_THREAD)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	dd0c      	ble.n	8000aee <threadRestart+0x3a>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2b04      	cmp	r3, #4
 8000ad8:	dc09      	bgt.n	8000aee <threadRestart+0x3a>
		thread[threadID].action = STM32_THREAD_ACTION_RESTART;
 8000ada:	4910      	ldr	r1, [pc, #64]	; (8000b1c <threadRestart+0x68>)
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	4413      	add	r3, r2
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	3310      	adds	r3, #16
 8000aea:	2203      	movs	r2, #3
 8000aec:	701a      	strb	r2, [r3, #0]
	mutexLock = 0;
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <threadRestart+0x60>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
	if (threadID == 0 && threadID != currentThread)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d104      	bne.n	8000b04 <threadRestart+0x50>
 8000afa:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <threadRestart+0x64>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d102      	bne.n	8000b0a <threadRestart+0x56>
		return;
	reschedule();
 8000b04:	f7ff ff84 	bl	8000a10 <reschedule>
 8000b08:	e000      	b.n	8000b0c <threadRestart+0x58>
		return;
 8000b0a:	bf00      	nop
}
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200001d0 	.word	0x200001d0
 8000b18:	20000004 	.word	0x20000004
 8000b1c:	20000118 	.word	0x20000118

08000b20 <threadBlock>:
/**
 * This blocks this thread
 * @param threadID  : ID of thread to be blocked
 * 					: 0 for self block
 */
static void threadBlock(int threadID) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	mutexLock = 1;
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <threadBlock+0x60>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	701a      	strb	r2, [r3, #0]
	if(threadID==0)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d102      	bne.n	8000b3a <threadBlock+0x1a>
		threadID = currentThread;
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <threadBlock+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	607b      	str	r3, [r7, #4]
	if (threadID > 0 && threadID<MAX_THREAD)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	dd0c      	ble.n	8000b5a <threadBlock+0x3a>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b04      	cmp	r3, #4
 8000b44:	dc09      	bgt.n	8000b5a <threadBlock+0x3a>
		thread[threadID].action = STM32_THREAD_ACTION_BLOCK;
 8000b46:	4910      	ldr	r1, [pc, #64]	; (8000b88 <threadBlock+0x68>)
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	4413      	add	r3, r2
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	440b      	add	r3, r1
 8000b54:	3310      	adds	r3, #16
 8000b56:	2200      	movs	r2, #0
 8000b58:	701a      	strb	r2, [r3, #0]
	mutexLock = 0;
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <threadBlock+0x60>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]
	if (threadID == 0 && threadID != currentThread)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d104      	bne.n	8000b70 <threadBlock+0x50>
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <threadBlock+0x64>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d102      	bne.n	8000b76 <threadBlock+0x56>
		return;
	reschedule();
 8000b70:	f7ff ff4e 	bl	8000a10 <reschedule>
 8000b74:	e000      	b.n	8000b78 <threadBlock+0x58>
		return;
 8000b76:	bf00      	nop
}
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200001d0 	.word	0x200001d0
 8000b84:	20000004 	.word	0x20000004
 8000b88:	20000118 	.word	0x20000118

08000b8c <threadUnblock>:

/**
 * This unblocks this thread
 * @param threadID  : ID of thread to be unblocked
 */
static void threadUnblock(int threadID) {
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	mutexLock = 1;
 8000b94:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <threadUnblock+0x40>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	701a      	strb	r2, [r3, #0]
	if (threadID > 0 && threadID<MAX_THREAD)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	dd0c      	ble.n	8000bba <threadUnblock+0x2e>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	dc09      	bgt.n	8000bba <threadUnblock+0x2e>
		thread[threadID].action = STM32_THREAD_ACTION_RUNNING;
 8000ba6:	490a      	ldr	r1, [pc, #40]	; (8000bd0 <threadUnblock+0x44>)
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	4613      	mov	r3, r2
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	4413      	add	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	440b      	add	r3, r1
 8000bb4:	3310      	adds	r3, #16
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
	mutexLock = 0;
 8000bba:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <threadUnblock+0x40>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	701a      	strb	r2, [r3, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	200001d0 	.word	0x200001d0
 8000bd0:	20000118 	.word	0x20000118

08000bd4 <threadDelay>:

/**
 * This is delay for thread which do not comsume clock cycle
 * @param millis	 : duration for delay in millis
 */
static void threadDelay(uint32_t millis) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	mutexLock = 1;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <threadDelay+0x50>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	701a      	strb	r2, [r3, #0]
	if (currentThread > 0 && currentThread<MAX_THREAD)
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <threadDelay+0x54>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	dd12      	ble.n	8000c10 <threadDelay+0x3c>
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <threadDelay+0x54>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	dc0e      	bgt.n	8000c10 <threadDelay+0x3c>
		thread[currentThread].waitTill = HAL_GetTick() + millis;
 8000bf2:	f000 fa1f 	bl	8001034 <HAL_GetTick>
 8000bf6:	4601      	mov	r1, r0
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <threadDelay+0x54>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4419      	add	r1, r3
 8000c00:	480a      	ldr	r0, [pc, #40]	; (8000c2c <threadDelay+0x58>)
 8000c02:	4613      	mov	r3, r2
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	4413      	add	r3, r2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	4403      	add	r3, r0
 8000c0c:	3318      	adds	r3, #24
 8000c0e:	6019      	str	r1, [r3, #0]
	mutexLock = 0;
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <threadDelay+0x50>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
	reschedule();
 8000c16:	f7ff fefb 	bl	8000a10 <reschedule>
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200001d0 	.word	0x200001d0
 8000c28:	20000004 	.word	0x20000004
 8000c2c:	20000118 	.word	0x20000118

08000c30 <threadPrint>:

/**
 * This is printf for thread which prints completely this text
 */
static void threadPrint(const char *msg, ...) {
 8000c30:	b40f      	push	{r0, r1, r2, r3}
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
	mutexLock = 1;
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <threadPrint+0x30>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	701a      	strb	r2, [r3, #0]
	va_list args;
	va_start(args, msg);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	607b      	str	r3, [r7, #4]
	vprintf(msg, args);
 8000c44:	6879      	ldr	r1, [r7, #4]
 8000c46:	6938      	ldr	r0, [r7, #16]
 8000c48:	f001 fb1a 	bl	8002280 <viprintf>
	va_end(args);
	mutexLock = 0;
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <threadPrint+0x30>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	701a      	strb	r2, [r3, #0]
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c5c:	b004      	add	sp, #16
 8000c5e:	4770      	bx	lr
 8000c60:	200001d0 	.word	0x200001d0

08000c64 <threadMutexLock>:

/**
 * This blocks all thread except current thread (this thread)
 */
static void threadMutexLock(){
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
	mutexLock = 1;
 8000c68:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <threadMutexLock+0x14>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	701a      	strb	r2, [r3, #0]
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	200001d0 	.word	0x200001d0

08000c7c <threadMutexUnlock>:

/**
 * This unlocks mutex lock
 */
static void threadMutexUnlock(){
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
	mutexLock = 0;
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <threadMutexUnlock+0x14>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	200001d0 	.word	0x200001d0

08000c94 <threadTakeBinarySemaphore>:

/**
 * This blocks this thread unless other thread give binary semaphore for this thread
 * @param threadIDptr	: binary semaphore ID which is also thread ID of this thread
 */
static void threadTakeBinarySemaphore(int *threadIDptr){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	mutexLock = 1;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <threadTakeBinarySemaphore+0x54>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	701a      	strb	r2, [r3, #0]
	if(threadIDptr!=NULL && (currentThread>0 && currentThread<MAX_THREAD)){
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d016      	beq.n	8000cd6 <threadTakeBinarySemaphore+0x42>
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <threadTakeBinarySemaphore+0x58>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	dd12      	ble.n	8000cd6 <threadTakeBinarySemaphore+0x42>
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <threadTakeBinarySemaphore+0x58>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b04      	cmp	r3, #4
 8000cb6:	dc0e      	bgt.n	8000cd6 <threadTakeBinarySemaphore+0x42>
		*threadIDptr = currentThread;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <threadTakeBinarySemaphore+0x58>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	601a      	str	r2, [r3, #0]
		thread[currentThread].action = STM32_THREAD_ACTION_BLOCK;
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <threadTakeBinarySemaphore+0x58>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	490a      	ldr	r1, [pc, #40]	; (8000cf0 <threadTakeBinarySemaphore+0x5c>)
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	4413      	add	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	440b      	add	r3, r1
 8000cd0:	3310      	adds	r3, #16
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
	}
	mutexLock = 0;
 8000cd6:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <threadTakeBinarySemaphore+0x54>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
	reschedule();
 8000cdc:	f7ff fe98 	bl	8000a10 <reschedule>
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	200001d0 	.word	0x200001d0
 8000cec:	20000004 	.word	0x20000004
 8000cf0:	20000118 	.word	0x20000118

08000cf4 <threadGiveBinarySemaphore>:

/**
 * This blocks this thread corresponding to this threadID
 * @param threadID	: binary semaphore ID which is also thread ID of this thread to be unblocked
 */
static void threadGiveBinarySemaphore(int threadID){
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	mutexLock = 1;
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <threadGiveBinarySemaphore+0x40>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]
	if(threadID>0 && threadID<MAX_THREAD)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	dd0c      	ble.n	8000d22 <threadGiveBinarySemaphore+0x2e>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	dc09      	bgt.n	8000d22 <threadGiveBinarySemaphore+0x2e>
		thread[threadID].action = STM32_THREAD_ACTION_RUNNING;
 8000d0e:	490a      	ldr	r1, [pc, #40]	; (8000d38 <threadGiveBinarySemaphore+0x44>)
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	4613      	mov	r3, r2
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	4413      	add	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	3310      	adds	r3, #16
 8000d1e:	2201      	movs	r2, #1
 8000d20:	701a      	strb	r2, [r3, #0]
	mutexLock = 0;
 8000d22:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <threadGiveBinarySemaphore+0x40>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	200001d0 	.word	0x200001d0
 8000d38:	20000118 	.word	0x20000118

08000d3c <_write>:
#include "stdio.h"
#include "stdarg.h"

extern UART_HandleTypeDef huart1;

int _write(int file, char *data, int len) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
	StaticThread.mutexLock();
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <_write+0x34>)
 8000d4a:	6a1b      	ldr	r3, [r3, #32]
 8000d4c:	4798      	blx	r3
	HAL_UART_Transmit(&huart1, (uint8_t*) data, len, HAL_MAX_DELAY);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295
 8000d56:	68b9      	ldr	r1, [r7, #8]
 8000d58:	4806      	ldr	r0, [pc, #24]	; (8000d74 <_write+0x38>)
 8000d5a:	f001 f869 	bl	8001e30 <HAL_UART_Transmit>
	StaticThread.mutexUnlock();
 8000d5e:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <_write+0x34>)
 8000d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d62:	4798      	blx	r3
	return len;
 8000d64:	687b      	ldr	r3, [r7, #4]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000008 	.word	0x20000008
 8000d74:	200000cc 	.word	0x200000cc

08000d78 <HardFault_Handler>:

///////////////////////////HANDLER///////////////////////
void HardFault_Handler(void) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	printf("Hard Fault\n");
 8000d7c:	4801      	ldr	r0, [pc, #4]	; (8000d84 <HardFault_Handler+0xc>)
 8000d7e:	f001 fa77 	bl	8002270 <puts>
	while (1) {
 8000d82:	e7fe      	b.n	8000d82 <HardFault_Handler+0xa>
 8000d84:	080031bc 	.word	0x080031bc

08000d88 <SVC_Handler>:

	}
}

void SVC_Handler(void) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	StaticThread.SVCHandler();
 8000d8c:	4b02      	ldr	r3, [pc, #8]	; (8000d98 <SVC_Handler+0x10>)
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d90:	4798      	blx	r3
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000008 	.word	0x20000008

08000d9c <PendSV_Handler>:

void PendSV_Handler(void) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	StaticThread.PendSVHandler();
 8000da0:	4b02      	ldr	r3, [pc, #8]	; (8000dac <PendSV_Handler+0x10>)
 8000da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000da4:	4798      	blx	r3
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000008 	.word	0x20000008

08000db0 <SysTick_Handler>:

void SysTick_Handler(void) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000db4:	f000 f92c 	bl	8001010 <HAL_IncTick>
	StaticThread.SysTickHandler();
 8000db8:	4b02      	ldr	r3, [pc, #8]	; (8000dc4 <SysTick_Handler+0x14>)
 8000dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dbc:	4798      	blx	r3
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000008 	.word	0x20000008

08000dc8 <calculatSum>:

uint32_t stack1[STACK_SIZE];
uint32_t stack2[STACK_SIZE];
uint32_t stack3[STACK_SIZE];

static void calculatSum(int argLen, void **args) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
	int len = (int)args[0];
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	613b      	str	r3, [r7, #16]
	int *arr = args[1];
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	60fb      	str	r3, [r7, #12]
	int *sum = args[2];
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	60bb      	str	r3, [r7, #8]

	*sum = 0;
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	e011      	b.n	8000e14 <calculatSum+0x4c>
		StaticThread.delay(500);
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <calculatSum+0x64>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000df8:	4798      	blx	r3
		*sum += arr[i];
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	68f9      	ldr	r1, [r7, #12]
 8000e04:	440b      	add	r3, r1
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	441a      	add	r2, r3
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	3301      	adds	r3, #1
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	dbe9      	blt.n	8000df0 <calculatSum+0x28>
	}

	StaticThread.delete(0);
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <calculatSum+0x64>)
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	2000      	movs	r0, #0
 8000e22:	4798      	blx	r3
}
 8000e24:	bf00      	nop
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000008 	.word	0x20000008

08000e30 <task1>:

static void task1(int argLen, void **args) {
 8000e30:	b5b0      	push	{r4, r5, r7, lr}
 8000e32:	b092      	sub	sp, #72	; 0x48
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
	StaticThread.print("%s(INIT) : %d-%p\n", __func__, argLen, args);
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <task1+0x74>)
 8000e3c:	69dc      	ldr	r4, [r3, #28]
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	4919      	ldr	r1, [pc, #100]	; (8000ea8 <task1+0x78>)
 8000e44:	4819      	ldr	r0, [pc, #100]	; (8000eac <task1+0x7c>)
 8000e46:	47a0      	blx	r4
	int sum = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
	int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
 8000e4c:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <task1+0x80>)
 8000e4e:	f107 0414 	add.w	r4, r7, #20
 8000e52:	461d      	mov	r5, r3
 8000e54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e5c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e60:	e884 0003 	stmia.w	r4, {r0, r1}
	void *parameters[3] = {(void*)10, arr, &sum};
 8000e64:	230a      	movs	r3, #10
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e72:	613b      	str	r3, [r7, #16]
	StaticThread.new(calculatSum, stack3, sizeof(stack3) / sizeof(uint32_t), 3,
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <task1+0x74>)
 8000e76:	681c      	ldr	r4, [r3, #0]
 8000e78:	f107 0308 	add.w	r3, r7, #8
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	2303      	movs	r3, #3
 8000e80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e84:	490b      	ldr	r1, [pc, #44]	; (8000eb4 <task1+0x84>)
 8000e86:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <task1+0x88>)
 8000e88:	47a0      	blx	r4
			parameters);

	while (1) {
		StaticThread.print("%s : %d\n", __func__, sum);
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <task1+0x74>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e90:	4905      	ldr	r1, [pc, #20]	; (8000ea8 <task1+0x78>)
 8000e92:	480a      	ldr	r0, [pc, #40]	; (8000ebc <task1+0x8c>)
 8000e94:	4798      	blx	r3
		StaticThread.delay(1000);
 8000e96:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <task1+0x74>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e9e:	4798      	blx	r3
		StaticThread.print("%s : %d\n", __func__, sum);
 8000ea0:	e7f3      	b.n	8000e8a <task1+0x5a>
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	08003238 	.word	0x08003238
 8000eac:	080031c8 	.word	0x080031c8
 8000eb0:	080031e8 	.word	0x080031e8
 8000eb4:	20000ae0 	.word	0x20000ae0
 8000eb8:	08000dc9 	.word	0x08000dc9
 8000ebc:	080031dc 	.word	0x080031dc

08000ec0 <task2>:
	}
}

static void task2(int argLen, void **args) {
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
	StaticThread.print("%s(INIT) : %d-%p\n", __func__, argLen, args);
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <task2+0x3c>)
 8000ecc:	69dc      	ldr	r4, [r3, #28]
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	490b      	ldr	r1, [pc, #44]	; (8000f00 <task2+0x40>)
 8000ed4:	480b      	ldr	r0, [pc, #44]	; (8000f04 <task2+0x44>)
 8000ed6:	47a0      	blx	r4
	int y = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
	while (1) {
		y++;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	60fb      	str	r3, [r7, #12]
		StaticThread.print("%s : %d\n", __func__, y);
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <task2+0x3c>)
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	4905      	ldr	r1, [pc, #20]	; (8000f00 <task2+0x40>)
 8000eea:	4807      	ldr	r0, [pc, #28]	; (8000f08 <task2+0x48>)
 8000eec:	4798      	blx	r3
		StaticThread.delay(1000);
 8000eee:	4b03      	ldr	r3, [pc, #12]	; (8000efc <task2+0x3c>)
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef6:	4798      	blx	r3
		y++;
 8000ef8:	e7f0      	b.n	8000edc <task2+0x1c>
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008
 8000f00:	08003240 	.word	0x08003240
 8000f04:	080031c8 	.word	0x080031c8
 8000f08:	080031dc 	.word	0x080031dc

08000f0c <run>:

	}
}

void run() {
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af02      	add	r7, sp, #8
	printf("Initiating....\n");
 8000f12:	4814      	ldr	r0, [pc, #80]	; (8000f64 <run+0x58>)
 8000f14:	f001 f9ac 	bl	8002270 <puts>
	HAL_Delay(3000);
 8000f18:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f1c:	f000 f894 	bl	8001048 <HAL_Delay>

	id1 = StaticThread.new(task1, stack1, sizeof(stack1) / sizeof(uint32_t), 0,
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <run+0x5c>)
 8000f22:	681c      	ldr	r4, [r3, #0]
 8000f24:	2300      	movs	r3, #0
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f2e:	490f      	ldr	r1, [pc, #60]	; (8000f6c <run+0x60>)
 8000f30:	480f      	ldr	r0, [pc, #60]	; (8000f70 <run+0x64>)
 8000f32:	47a0      	blx	r4
 8000f34:	4603      	mov	r3, r0
 8000f36:	4a0f      	ldr	r2, [pc, #60]	; (8000f74 <run+0x68>)
 8000f38:	6013      	str	r3, [r2, #0]
			NULL);
	id2 = StaticThread.new(task2, stack2, sizeof(stack2) / sizeof(uint32_t), 0,
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <run+0x5c>)
 8000f3c:	681c      	ldr	r4, [r3, #0]
 8000f3e:	2300      	movs	r3, #0
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2300      	movs	r3, #0
 8000f44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f48:	490b      	ldr	r1, [pc, #44]	; (8000f78 <run+0x6c>)
 8000f4a:	480c      	ldr	r0, [pc, #48]	; (8000f7c <run+0x70>)
 8000f4c:	47a0      	blx	r4
 8000f4e:	4603      	mov	r3, r0
 8000f50:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <run+0x74>)
 8000f52:	6013      	str	r3, [r2, #0]
			NULL);
	StaticThread.startScheduler();
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <run+0x5c>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	4798      	blx	r3
}
 8000f5a:	bf00      	nop
 8000f5c:	3704      	adds	r7, #4
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd90      	pop	{r4, r7, pc}
 8000f62:	bf00      	nop
 8000f64:	08003210 	.word	0x08003210
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	200002e0 	.word	0x200002e0
 8000f70:	08000e31 	.word	0x08000e31
 8000f74:	200002d8 	.word	0x200002d8
 8000f78:	200006e0 	.word	0x200006e0
 8000f7c:	08000ec1 	.word	0x08000ec1
 8000f80:	200002dc 	.word	0x200002dc

08000f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <HAL_Init+0x28>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a07      	ldr	r2, [pc, #28]	; (8000fac <HAL_Init+0x28>)
 8000f8e:	f043 0310 	orr.w	r3, r3, #16
 8000f92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f94:	2003      	movs	r0, #3
 8000f96:	f000 f92b 	bl	80011f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f9a:	200f      	movs	r0, #15
 8000f9c:	f000 f808 	bl	8000fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa0:	f7ff f978 	bl	8000294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40022000 	.word	0x40022000

08000fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_InitTick+0x54>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <HAL_InitTick+0x58>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 f935 	bl	800123e <HAL_SYSTICK_Config>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00e      	b.n	8000ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b0f      	cmp	r3, #15
 8000fe2:	d80a      	bhi.n	8000ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	f000 f90b 	bl	8001206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff0:	4a06      	ldr	r2, [pc, #24]	; (800100c <HAL_InitTick+0x5c>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e000      	b.n	8000ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000000 	.word	0x20000000
 8001008:	20000048 	.word	0x20000048
 800100c:	20000044 	.word	0x20000044

08001010 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <HAL_IncTick+0x1c>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x20>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4413      	add	r3, r2
 8001020:	4a03      	ldr	r2, [pc, #12]	; (8001030 <HAL_IncTick+0x20>)
 8001022:	6013      	str	r3, [r2, #0]
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	20000048 	.word	0x20000048
 8001030:	20000ee0 	.word	0x20000ee0

08001034 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return uwTick;
 8001038:	4b02      	ldr	r3, [pc, #8]	; (8001044 <HAL_GetTick+0x10>)
 800103a:	681b      	ldr	r3, [r3, #0]
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr
 8001044:	20000ee0 	.word	0x20000ee0

08001048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001050:	f7ff fff0 	bl	8001034 <HAL_GetTick>
 8001054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001060:	d005      	beq.n	800106e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_Delay+0x44>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4413      	add	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800106e:	bf00      	nop
 8001070:	f7ff ffe0 	bl	8001034 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	429a      	cmp	r2, r3
 800107e:	d8f7      	bhi.n	8001070 <HAL_Delay+0x28>
  {
  }
}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000048 	.word	0x20000048

08001090 <__NVIC_SetPriorityGrouping>:
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ac:	4013      	ands	r3, r2
 80010ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c2:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	60d3      	str	r3, [r2, #12]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_GetPriorityGrouping>:
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <__NVIC_GetPriorityGrouping+0x18>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	0a1b      	lsrs	r3, r3, #8
 80010e2:	f003 0307 	and.w	r3, r3, #7
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <__NVIC_SetPriority>:
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	db0a      	blt.n	800111e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	490c      	ldr	r1, [pc, #48]	; (8001140 <__NVIC_SetPriority+0x4c>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	0112      	lsls	r2, r2, #4
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	440b      	add	r3, r1
 8001118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800111c:	e00a      	b.n	8001134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4908      	ldr	r1, [pc, #32]	; (8001144 <__NVIC_SetPriority+0x50>)
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	3b04      	subs	r3, #4
 800112c:	0112      	lsls	r2, r2, #4
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	440b      	add	r3, r1
 8001132:	761a      	strb	r2, [r3, #24]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000e100 	.word	0xe000e100
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001148:	b480      	push	{r7}
 800114a:	b089      	sub	sp, #36	; 0x24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f1c3 0307 	rsb	r3, r3, #7
 8001162:	2b04      	cmp	r3, #4
 8001164:	bf28      	it	cs
 8001166:	2304      	movcs	r3, #4
 8001168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3304      	adds	r3, #4
 800116e:	2b06      	cmp	r3, #6
 8001170:	d902      	bls.n	8001178 <NVIC_EncodePriority+0x30>
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3b03      	subs	r3, #3
 8001176:	e000      	b.n	800117a <NVIC_EncodePriority+0x32>
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	f04f 32ff 	mov.w	r2, #4294967295
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	401a      	ands	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001190:	f04f 31ff 	mov.w	r1, #4294967295
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	fa01 f303 	lsl.w	r3, r1, r3
 800119a:	43d9      	mvns	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	4313      	orrs	r3, r2
         );
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3724      	adds	r7, #36	; 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr

080011ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011bc:	d301      	bcc.n	80011c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011be:	2301      	movs	r3, #1
 80011c0:	e00f      	b.n	80011e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <SysTick_Config+0x40>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ca:	210f      	movs	r1, #15
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f7ff ff90 	bl	80010f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <SysTick_Config+0x40>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011da:	4b04      	ldr	r3, [pc, #16]	; (80011ec <SysTick_Config+0x40>)
 80011dc:	2207      	movs	r2, #7
 80011de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	e000e010 	.word	0xe000e010

080011f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ff49 	bl	8001090 <__NVIC_SetPriorityGrouping>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001206:	b580      	push	{r7, lr}
 8001208:	b086      	sub	sp, #24
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001218:	f7ff ff5e 	bl	80010d8 <__NVIC_GetPriorityGrouping>
 800121c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	68b9      	ldr	r1, [r7, #8]
 8001222:	6978      	ldr	r0, [r7, #20]
 8001224:	f7ff ff90 	bl	8001148 <NVIC_EncodePriority>
 8001228:	4602      	mov	r2, r0
 800122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff5f 	bl	80010f4 <__NVIC_SetPriority>
}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ffb0 	bl	80011ac <SysTick_Config>
 800124c:	4603      	mov	r3, r0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001258:	b480      	push	{r7}
 800125a:	b08b      	sub	sp, #44	; 0x2c
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001262:	2300      	movs	r3, #0
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001266:	2300      	movs	r3, #0
 8001268:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800126a:	e169      	b.n	8001540 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800126c:	2201      	movs	r2, #1
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	69fa      	ldr	r2, [r7, #28]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	429a      	cmp	r2, r3
 8001286:	f040 8158 	bne.w	800153a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	4a9a      	ldr	r2, [pc, #616]	; (80014f8 <HAL_GPIO_Init+0x2a0>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d05e      	beq.n	8001352 <HAL_GPIO_Init+0xfa>
 8001294:	4a98      	ldr	r2, [pc, #608]	; (80014f8 <HAL_GPIO_Init+0x2a0>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d875      	bhi.n	8001386 <HAL_GPIO_Init+0x12e>
 800129a:	4a98      	ldr	r2, [pc, #608]	; (80014fc <HAL_GPIO_Init+0x2a4>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d058      	beq.n	8001352 <HAL_GPIO_Init+0xfa>
 80012a0:	4a96      	ldr	r2, [pc, #600]	; (80014fc <HAL_GPIO_Init+0x2a4>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d86f      	bhi.n	8001386 <HAL_GPIO_Init+0x12e>
 80012a6:	4a96      	ldr	r2, [pc, #600]	; (8001500 <HAL_GPIO_Init+0x2a8>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d052      	beq.n	8001352 <HAL_GPIO_Init+0xfa>
 80012ac:	4a94      	ldr	r2, [pc, #592]	; (8001500 <HAL_GPIO_Init+0x2a8>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d869      	bhi.n	8001386 <HAL_GPIO_Init+0x12e>
 80012b2:	4a94      	ldr	r2, [pc, #592]	; (8001504 <HAL_GPIO_Init+0x2ac>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d04c      	beq.n	8001352 <HAL_GPIO_Init+0xfa>
 80012b8:	4a92      	ldr	r2, [pc, #584]	; (8001504 <HAL_GPIO_Init+0x2ac>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d863      	bhi.n	8001386 <HAL_GPIO_Init+0x12e>
 80012be:	4a92      	ldr	r2, [pc, #584]	; (8001508 <HAL_GPIO_Init+0x2b0>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d046      	beq.n	8001352 <HAL_GPIO_Init+0xfa>
 80012c4:	4a90      	ldr	r2, [pc, #576]	; (8001508 <HAL_GPIO_Init+0x2b0>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d85d      	bhi.n	8001386 <HAL_GPIO_Init+0x12e>
 80012ca:	2b12      	cmp	r3, #18
 80012cc:	d82a      	bhi.n	8001324 <HAL_GPIO_Init+0xcc>
 80012ce:	2b12      	cmp	r3, #18
 80012d0:	d859      	bhi.n	8001386 <HAL_GPIO_Init+0x12e>
 80012d2:	a201      	add	r2, pc, #4	; (adr r2, 80012d8 <HAL_GPIO_Init+0x80>)
 80012d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d8:	08001353 	.word	0x08001353
 80012dc:	0800132d 	.word	0x0800132d
 80012e0:	0800133f 	.word	0x0800133f
 80012e4:	08001381 	.word	0x08001381
 80012e8:	08001387 	.word	0x08001387
 80012ec:	08001387 	.word	0x08001387
 80012f0:	08001387 	.word	0x08001387
 80012f4:	08001387 	.word	0x08001387
 80012f8:	08001387 	.word	0x08001387
 80012fc:	08001387 	.word	0x08001387
 8001300:	08001387 	.word	0x08001387
 8001304:	08001387 	.word	0x08001387
 8001308:	08001387 	.word	0x08001387
 800130c:	08001387 	.word	0x08001387
 8001310:	08001387 	.word	0x08001387
 8001314:	08001387 	.word	0x08001387
 8001318:	08001387 	.word	0x08001387
 800131c:	08001335 	.word	0x08001335
 8001320:	08001349 	.word	0x08001349
 8001324:	4a79      	ldr	r2, [pc, #484]	; (800150c <HAL_GPIO_Init+0x2b4>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d013      	beq.n	8001352 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800132a:	e02c      	b.n	8001386 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	623b      	str	r3, [r7, #32]
          break;
 8001332:	e029      	b.n	8001388 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	3304      	adds	r3, #4
 800133a:	623b      	str	r3, [r7, #32]
          break;
 800133c:	e024      	b.n	8001388 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	3308      	adds	r3, #8
 8001344:	623b      	str	r3, [r7, #32]
          break;
 8001346:	e01f      	b.n	8001388 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	330c      	adds	r3, #12
 800134e:	623b      	str	r3, [r7, #32]
          break;
 8001350:	e01a      	b.n	8001388 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d102      	bne.n	8001360 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800135a:	2304      	movs	r3, #4
 800135c:	623b      	str	r3, [r7, #32]
          break;
 800135e:	e013      	b.n	8001388 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d105      	bne.n	8001374 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001368:	2308      	movs	r3, #8
 800136a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	611a      	str	r2, [r3, #16]
          break;
 8001372:	e009      	b.n	8001388 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001374:	2308      	movs	r3, #8
 8001376:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	69fa      	ldr	r2, [r7, #28]
 800137c:	615a      	str	r2, [r3, #20]
          break;
 800137e:	e003      	b.n	8001388 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001380:	2300      	movs	r3, #0
 8001382:	623b      	str	r3, [r7, #32]
          break;
 8001384:	e000      	b.n	8001388 <HAL_GPIO_Init+0x130>
          break;
 8001386:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	2bff      	cmp	r3, #255	; 0xff
 800138c:	d801      	bhi.n	8001392 <HAL_GPIO_Init+0x13a>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	e001      	b.n	8001396 <HAL_GPIO_Init+0x13e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3304      	adds	r3, #4
 8001396:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	2bff      	cmp	r3, #255	; 0xff
 800139c:	d802      	bhi.n	80013a4 <HAL_GPIO_Init+0x14c>
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	e002      	b.n	80013aa <HAL_GPIO_Init+0x152>
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	3b08      	subs	r3, #8
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	210f      	movs	r1, #15
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	fa01 f303 	lsl.w	r3, r1, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	401a      	ands	r2, r3
 80013bc:	6a39      	ldr	r1, [r7, #32]
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	fa01 f303 	lsl.w	r3, r1, r3
 80013c4:	431a      	orrs	r2, r3
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 80b1 	beq.w	800153a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013d8:	4b4d      	ldr	r3, [pc, #308]	; (8001510 <HAL_GPIO_Init+0x2b8>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	4a4c      	ldr	r2, [pc, #304]	; (8001510 <HAL_GPIO_Init+0x2b8>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	6193      	str	r3, [r2, #24]
 80013e4:	4b4a      	ldr	r3, [pc, #296]	; (8001510 <HAL_GPIO_Init+0x2b8>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013f0:	4a48      	ldr	r2, [pc, #288]	; (8001514 <HAL_GPIO_Init+0x2bc>)
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	089b      	lsrs	r3, r3, #2
 80013f6:	3302      	adds	r3, #2
 80013f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	220f      	movs	r2, #15
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	4013      	ands	r3, r2
 8001412:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a40      	ldr	r2, [pc, #256]	; (8001518 <HAL_GPIO_Init+0x2c0>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d013      	beq.n	8001444 <HAL_GPIO_Init+0x1ec>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a3f      	ldr	r2, [pc, #252]	; (800151c <HAL_GPIO_Init+0x2c4>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d00d      	beq.n	8001440 <HAL_GPIO_Init+0x1e8>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a3e      	ldr	r2, [pc, #248]	; (8001520 <HAL_GPIO_Init+0x2c8>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d007      	beq.n	800143c <HAL_GPIO_Init+0x1e4>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a3d      	ldr	r2, [pc, #244]	; (8001524 <HAL_GPIO_Init+0x2cc>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d101      	bne.n	8001438 <HAL_GPIO_Init+0x1e0>
 8001434:	2303      	movs	r3, #3
 8001436:	e006      	b.n	8001446 <HAL_GPIO_Init+0x1ee>
 8001438:	2304      	movs	r3, #4
 800143a:	e004      	b.n	8001446 <HAL_GPIO_Init+0x1ee>
 800143c:	2302      	movs	r3, #2
 800143e:	e002      	b.n	8001446 <HAL_GPIO_Init+0x1ee>
 8001440:	2301      	movs	r3, #1
 8001442:	e000      	b.n	8001446 <HAL_GPIO_Init+0x1ee>
 8001444:	2300      	movs	r3, #0
 8001446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001448:	f002 0203 	and.w	r2, r2, #3
 800144c:	0092      	lsls	r2, r2, #2
 800144e:	4093      	lsls	r3, r2
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	4313      	orrs	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001456:	492f      	ldr	r1, [pc, #188]	; (8001514 <HAL_GPIO_Init+0x2bc>)
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	089b      	lsrs	r3, r3, #2
 800145c:	3302      	adds	r3, #2
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d006      	beq.n	800147e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001470:	4b2d      	ldr	r3, [pc, #180]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	492c      	ldr	r1, [pc, #176]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	4313      	orrs	r3, r2
 800147a:	608b      	str	r3, [r1, #8]
 800147c:	e006      	b.n	800148c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800147e:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	43db      	mvns	r3, r3
 8001486:	4928      	ldr	r1, [pc, #160]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 8001488:	4013      	ands	r3, r2
 800148a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d006      	beq.n	80014a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001498:	4b23      	ldr	r3, [pc, #140]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	4922      	ldr	r1, [pc, #136]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	60cb      	str	r3, [r1, #12]
 80014a4:	e006      	b.n	80014b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014a6:	4b20      	ldr	r3, [pc, #128]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 80014a8:	68da      	ldr	r2, [r3, #12]
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	43db      	mvns	r3, r3
 80014ae:	491e      	ldr	r1, [pc, #120]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 80014b0:	4013      	ands	r3, r2
 80014b2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d006      	beq.n	80014ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014c0:	4b19      	ldr	r3, [pc, #100]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	4918      	ldr	r1, [pc, #96]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	604b      	str	r3, [r1, #4]
 80014cc:	e006      	b.n	80014dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014ce:	4b16      	ldr	r3, [pc, #88]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	4914      	ldr	r1, [pc, #80]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 80014d8:	4013      	ands	r3, r2
 80014da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d021      	beq.n	800152c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014e8:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	490e      	ldr	r1, [pc, #56]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]
 80014f4:	e021      	b.n	800153a <HAL_GPIO_Init+0x2e2>
 80014f6:	bf00      	nop
 80014f8:	10320000 	.word	0x10320000
 80014fc:	10310000 	.word	0x10310000
 8001500:	10220000 	.word	0x10220000
 8001504:	10210000 	.word	0x10210000
 8001508:	10120000 	.word	0x10120000
 800150c:	10110000 	.word	0x10110000
 8001510:	40021000 	.word	0x40021000
 8001514:	40010000 	.word	0x40010000
 8001518:	40010800 	.word	0x40010800
 800151c:	40010c00 	.word	0x40010c00
 8001520:	40011000 	.word	0x40011000
 8001524:	40011400 	.word	0x40011400
 8001528:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <HAL_GPIO_Init+0x304>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	43db      	mvns	r3, r3
 8001534:	4909      	ldr	r1, [pc, #36]	; (800155c <HAL_GPIO_Init+0x304>)
 8001536:	4013      	ands	r3, r2
 8001538:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	3301      	adds	r3, #1
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	fa22 f303 	lsr.w	r3, r2, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	f47f ae8e 	bne.w	800126c <HAL_GPIO_Init+0x14>
  }
}
 8001550:	bf00      	nop
 8001552:	bf00      	nop
 8001554:	372c      	adds	r7, #44	; 0x2c
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	40010400 	.word	0x40010400

08001560 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e272      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 8087 	beq.w	800168e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001580:	4b92      	ldr	r3, [pc, #584]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 030c 	and.w	r3, r3, #12
 8001588:	2b04      	cmp	r3, #4
 800158a:	d00c      	beq.n	80015a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800158c:	4b8f      	ldr	r3, [pc, #572]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 030c 	and.w	r3, r3, #12
 8001594:	2b08      	cmp	r3, #8
 8001596:	d112      	bne.n	80015be <HAL_RCC_OscConfig+0x5e>
 8001598:	4b8c      	ldr	r3, [pc, #560]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a4:	d10b      	bne.n	80015be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a6:	4b89      	ldr	r3, [pc, #548]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d06c      	beq.n	800168c <HAL_RCC_OscConfig+0x12c>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d168      	bne.n	800168c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e24c      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c6:	d106      	bne.n	80015d6 <HAL_RCC_OscConfig+0x76>
 80015c8:	4b80      	ldr	r3, [pc, #512]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a7f      	ldr	r2, [pc, #508]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	e02e      	b.n	8001634 <HAL_RCC_OscConfig+0xd4>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10c      	bne.n	80015f8 <HAL_RCC_OscConfig+0x98>
 80015de:	4b7b      	ldr	r3, [pc, #492]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a7a      	ldr	r2, [pc, #488]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	4b78      	ldr	r3, [pc, #480]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a77      	ldr	r2, [pc, #476]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	e01d      	b.n	8001634 <HAL_RCC_OscConfig+0xd4>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001600:	d10c      	bne.n	800161c <HAL_RCC_OscConfig+0xbc>
 8001602:	4b72      	ldr	r3, [pc, #456]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a71      	ldr	r2, [pc, #452]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	4b6f      	ldr	r3, [pc, #444]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a6e      	ldr	r2, [pc, #440]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e00b      	b.n	8001634 <HAL_RCC_OscConfig+0xd4>
 800161c:	4b6b      	ldr	r3, [pc, #428]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a6a      	ldr	r2, [pc, #424]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	4b68      	ldr	r3, [pc, #416]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a67      	ldr	r2, [pc, #412]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 800162e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001632:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d013      	beq.n	8001664 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff fcfa 	bl	8001034 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001644:	f7ff fcf6 	bl	8001034 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b64      	cmp	r3, #100	; 0x64
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e200      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001656:	4b5d      	ldr	r3, [pc, #372]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f0      	beq.n	8001644 <HAL_RCC_OscConfig+0xe4>
 8001662:	e014      	b.n	800168e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff fce6 	bl	8001034 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800166c:	f7ff fce2 	bl	8001034 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b64      	cmp	r3, #100	; 0x64
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e1ec      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800167e:	4b53      	ldr	r3, [pc, #332]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0x10c>
 800168a:	e000      	b.n	800168e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800168c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d063      	beq.n	8001762 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800169a:	4b4c      	ldr	r3, [pc, #304]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00b      	beq.n	80016be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016a6:	4b49      	ldr	r3, [pc, #292]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	2b08      	cmp	r3, #8
 80016b0:	d11c      	bne.n	80016ec <HAL_RCC_OscConfig+0x18c>
 80016b2:	4b46      	ldr	r3, [pc, #280]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d116      	bne.n	80016ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016be:	4b43      	ldr	r3, [pc, #268]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d005      	beq.n	80016d6 <HAL_RCC_OscConfig+0x176>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d001      	beq.n	80016d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e1c0      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d6:	4b3d      	ldr	r3, [pc, #244]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	4939      	ldr	r1, [pc, #228]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ea:	e03a      	b.n	8001762 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d020      	beq.n	8001736 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f4:	4b36      	ldr	r3, [pc, #216]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fa:	f7ff fc9b 	bl	8001034 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001702:	f7ff fc97 	bl	8001034 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e1a1      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001714:	4b2d      	ldr	r3, [pc, #180]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f0      	beq.n	8001702 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001720:	4b2a      	ldr	r3, [pc, #168]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	4927      	ldr	r1, [pc, #156]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001730:	4313      	orrs	r3, r2
 8001732:	600b      	str	r3, [r1, #0]
 8001734:	e015      	b.n	8001762 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001736:	4b26      	ldr	r3, [pc, #152]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7ff fc7a 	bl	8001034 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001744:	f7ff fc76 	bl	8001034 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e180      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001756:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f0      	bne.n	8001744 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b00      	cmp	r3, #0
 800176c:	d03a      	beq.n	80017e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d019      	beq.n	80017aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001776:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001778:	2201      	movs	r2, #1
 800177a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177c:	f7ff fc5a 	bl	8001034 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001784:	f7ff fc56 	bl	8001034 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e160      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001796:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017a2:	2001      	movs	r0, #1
 80017a4:	f000 face 	bl	8001d44 <RCC_Delay>
 80017a8:	e01c      	b.n	80017e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b0:	f7ff fc40 	bl	8001034 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b6:	e00f      	b.n	80017d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b8:	f7ff fc3c 	bl	8001034 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d908      	bls.n	80017d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e146      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
 80017ca:	bf00      	nop
 80017cc:	40021000 	.word	0x40021000
 80017d0:	42420000 	.word	0x42420000
 80017d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d8:	4b92      	ldr	r3, [pc, #584]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1e9      	bne.n	80017b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80a6 	beq.w	800193e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017f2:	2300      	movs	r3, #0
 80017f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017f6:	4b8b      	ldr	r3, [pc, #556]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10d      	bne.n	800181e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	4b88      	ldr	r3, [pc, #544]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	4a87      	ldr	r2, [pc, #540]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180c:	61d3      	str	r3, [r2, #28]
 800180e:	4b85      	ldr	r3, [pc, #532]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800181a:	2301      	movs	r3, #1
 800181c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181e:	4b82      	ldr	r3, [pc, #520]	; (8001a28 <HAL_RCC_OscConfig+0x4c8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001826:	2b00      	cmp	r3, #0
 8001828:	d118      	bne.n	800185c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800182a:	4b7f      	ldr	r3, [pc, #508]	; (8001a28 <HAL_RCC_OscConfig+0x4c8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a7e      	ldr	r2, [pc, #504]	; (8001a28 <HAL_RCC_OscConfig+0x4c8>)
 8001830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001836:	f7ff fbfd 	bl	8001034 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800183e:	f7ff fbf9 	bl	8001034 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b64      	cmp	r3, #100	; 0x64
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e103      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001850:	4b75      	ldr	r3, [pc, #468]	; (8001a28 <HAL_RCC_OscConfig+0x4c8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d106      	bne.n	8001872 <HAL_RCC_OscConfig+0x312>
 8001864:	4b6f      	ldr	r3, [pc, #444]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	4a6e      	ldr	r2, [pc, #440]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	6213      	str	r3, [r2, #32]
 8001870:	e02d      	b.n	80018ce <HAL_RCC_OscConfig+0x36e>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10c      	bne.n	8001894 <HAL_RCC_OscConfig+0x334>
 800187a:	4b6a      	ldr	r3, [pc, #424]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	4a69      	ldr	r2, [pc, #420]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001880:	f023 0301 	bic.w	r3, r3, #1
 8001884:	6213      	str	r3, [r2, #32]
 8001886:	4b67      	ldr	r3, [pc, #412]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	4a66      	ldr	r2, [pc, #408]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800188c:	f023 0304 	bic.w	r3, r3, #4
 8001890:	6213      	str	r3, [r2, #32]
 8001892:	e01c      	b.n	80018ce <HAL_RCC_OscConfig+0x36e>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	2b05      	cmp	r3, #5
 800189a:	d10c      	bne.n	80018b6 <HAL_RCC_OscConfig+0x356>
 800189c:	4b61      	ldr	r3, [pc, #388]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	4a60      	ldr	r2, [pc, #384]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018a2:	f043 0304 	orr.w	r3, r3, #4
 80018a6:	6213      	str	r3, [r2, #32]
 80018a8:	4b5e      	ldr	r3, [pc, #376]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	4a5d      	ldr	r2, [pc, #372]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	6213      	str	r3, [r2, #32]
 80018b4:	e00b      	b.n	80018ce <HAL_RCC_OscConfig+0x36e>
 80018b6:	4b5b      	ldr	r3, [pc, #364]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	4a5a      	ldr	r2, [pc, #360]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018bc:	f023 0301 	bic.w	r3, r3, #1
 80018c0:	6213      	str	r3, [r2, #32]
 80018c2:	4b58      	ldr	r3, [pc, #352]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	4a57      	ldr	r2, [pc, #348]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018c8:	f023 0304 	bic.w	r3, r3, #4
 80018cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d015      	beq.n	8001902 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d6:	f7ff fbad 	bl	8001034 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018dc:	e00a      	b.n	80018f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018de:	f7ff fba9 	bl	8001034 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e0b1      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f4:	4b4b      	ldr	r3, [pc, #300]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0ee      	beq.n	80018de <HAL_RCC_OscConfig+0x37e>
 8001900:	e014      	b.n	800192c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001902:	f7ff fb97 	bl	8001034 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001908:	e00a      	b.n	8001920 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800190a:	f7ff fb93 	bl	8001034 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	f241 3288 	movw	r2, #5000	; 0x1388
 8001918:	4293      	cmp	r3, r2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e09b      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001920:	4b40      	ldr	r3, [pc, #256]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1ee      	bne.n	800190a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800192c:	7dfb      	ldrb	r3, [r7, #23]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d105      	bne.n	800193e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001932:	4b3c      	ldr	r3, [pc, #240]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	4a3b      	ldr	r2, [pc, #236]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800193c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 8087 	beq.w	8001a56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001948:	4b36      	ldr	r3, [pc, #216]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 030c 	and.w	r3, r3, #12
 8001950:	2b08      	cmp	r3, #8
 8001952:	d061      	beq.n	8001a18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d146      	bne.n	80019ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195c:	4b33      	ldr	r3, [pc, #204]	; (8001a2c <HAL_RCC_OscConfig+0x4cc>)
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001962:	f7ff fb67 	bl	8001034 <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196a:	f7ff fb63 	bl	8001034 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e06d      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800197c:	4b29      	ldr	r3, [pc, #164]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1f0      	bne.n	800196a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001990:	d108      	bne.n	80019a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001992:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	4921      	ldr	r1, [pc, #132]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019a4:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a19      	ldr	r1, [r3, #32]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b4:	430b      	orrs	r3, r1
 80019b6:	491b      	ldr	r1, [pc, #108]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019bc:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <HAL_RCC_OscConfig+0x4cc>)
 80019be:	2201      	movs	r2, #1
 80019c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c2:	f7ff fb37 	bl	8001034 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ca:	f7ff fb33 	bl	8001034 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e03d      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x46a>
 80019e8:	e035      	b.n	8001a56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <HAL_RCC_OscConfig+0x4cc>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7ff fb20 	bl	8001034 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f8:	f7ff fb1c 	bl	8001034 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e026      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x498>
 8001a16:	e01e      	b.n	8001a56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d107      	bne.n	8001a30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e019      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40007000 	.word	0x40007000
 8001a2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_RCC_OscConfig+0x500>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d106      	bne.n	8001a52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d001      	beq.n	8001a56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40021000 	.word	0x40021000

08001a64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0d0      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a78:	4b6a      	ldr	r3, [pc, #424]	; (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d910      	bls.n	8001aa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a86:	4b67      	ldr	r3, [pc, #412]	; (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f023 0207 	bic.w	r2, r3, #7
 8001a8e:	4965      	ldr	r1, [pc, #404]	; (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a96:	4b63      	ldr	r3, [pc, #396]	; (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0b8      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d020      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ac0:	4b59      	ldr	r3, [pc, #356]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	4a58      	ldr	r2, [pc, #352]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001aca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ad8:	4b53      	ldr	r3, [pc, #332]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	4a52      	ldr	r2, [pc, #328]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ade:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ae2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae4:	4b50      	ldr	r3, [pc, #320]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	494d      	ldr	r1, [pc, #308]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d040      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0a:	4b47      	ldr	r3, [pc, #284]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d115      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e07f      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d107      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b22:	4b41      	ldr	r3, [pc, #260]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e073      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b32:	4b3d      	ldr	r3, [pc, #244]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e06b      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b42:	4b39      	ldr	r3, [pc, #228]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f023 0203 	bic.w	r2, r3, #3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	4936      	ldr	r1, [pc, #216]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b54:	f7ff fa6e 	bl	8001034 <HAL_GetTick>
 8001b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5a:	e00a      	b.n	8001b72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b5c:	f7ff fa6a 	bl	8001034 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e053      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b72:	4b2d      	ldr	r3, [pc, #180]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 020c 	and.w	r2, r3, #12
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d1eb      	bne.n	8001b5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b84:	4b27      	ldr	r3, [pc, #156]	; (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d210      	bcs.n	8001bb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b92:	4b24      	ldr	r3, [pc, #144]	; (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 0207 	bic.w	r2, r3, #7
 8001b9a:	4922      	ldr	r1, [pc, #136]	; (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba2:	4b20      	ldr	r3, [pc, #128]	; (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d001      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e032      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d008      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc0:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	4916      	ldr	r1, [pc, #88]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d009      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bde:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	490e      	ldr	r1, [pc, #56]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bf2:	f000 f821 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	091b      	lsrs	r3, r3, #4
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	490a      	ldr	r1, [pc, #40]	; (8001c2c <HAL_RCC_ClockConfig+0x1c8>)
 8001c04:	5ccb      	ldrb	r3, [r1, r3]
 8001c06:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0a:	4a09      	ldr	r2, [pc, #36]	; (8001c30 <HAL_RCC_ClockConfig+0x1cc>)
 8001c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_RCC_ClockConfig+0x1d0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff f9cc 	bl	8000fb0 <HAL_InitTick>

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40022000 	.word	0x40022000
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	08003220 	.word	0x08003220
 8001c30:	20000000 	.word	0x20000000
 8001c34:	20000044 	.word	0x20000044

08001c38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c52:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x94>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d002      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0x30>
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d003      	beq.n	8001c6e <HAL_RCC_GetSysClockFreq+0x36>
 8001c66:	e027      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c68:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c6a:	613b      	str	r3, [r7, #16]
      break;
 8001c6c:	e027      	b.n	8001cbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	0c9b      	lsrs	r3, r3, #18
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	4a17      	ldr	r2, [pc, #92]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c78:	5cd3      	ldrb	r3, [r2, r3]
 8001c7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d010      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c86:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x94>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	0c5b      	lsrs	r3, r3, #17
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	4a11      	ldr	r2, [pc, #68]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c92:	5cd3      	ldrb	r3, [r2, r3]
 8001c94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a0d      	ldr	r2, [pc, #52]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c9a:	fb03 f202 	mul.w	r2, r3, r2
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	e004      	b.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a0c      	ldr	r2, [pc, #48]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001cac:	fb02 f303 	mul.w	r3, r2, r3
 8001cb0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	613b      	str	r3, [r7, #16]
      break;
 8001cb6:	e002      	b.n	8001cbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cb8:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cba:	613b      	str	r3, [r7, #16]
      break;
 8001cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cbe:	693b      	ldr	r3, [r7, #16]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	371c      	adds	r7, #28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	007a1200 	.word	0x007a1200
 8001cd4:	08003248 	.word	0x08003248
 8001cd8:	08003258 	.word	0x08003258
 8001cdc:	003d0900 	.word	0x003d0900

08001ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce4:	4b02      	ldr	r3, [pc, #8]	; (8001cf0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	20000000 	.word	0x20000000

08001cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cf8:	f7ff fff2 	bl	8001ce0 <HAL_RCC_GetHCLKFreq>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	0a1b      	lsrs	r3, r3, #8
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	4903      	ldr	r1, [pc, #12]	; (8001d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d0a:	5ccb      	ldrb	r3, [r1, r3]
 8001d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40021000 	.word	0x40021000
 8001d18:	08003230 	.word	0x08003230

08001d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d20:	f7ff ffde 	bl	8001ce0 <HAL_RCC_GetHCLKFreq>
 8001d24:	4602      	mov	r2, r0
 8001d26:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	0adb      	lsrs	r3, r3, #11
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	4903      	ldr	r1, [pc, #12]	; (8001d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d32:	5ccb      	ldrb	r3, [r1, r3]
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	08003230 	.word	0x08003230

08001d44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <RCC_Delay+0x34>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <RCC_Delay+0x38>)
 8001d52:	fba2 2303 	umull	r2, r3, r2, r3
 8001d56:	0a5b      	lsrs	r3, r3, #9
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	fb02 f303 	mul.w	r3, r2, r3
 8001d5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d60:	bf00      	nop
  }
  while (Delay --);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	1e5a      	subs	r2, r3, #1
 8001d66:	60fa      	str	r2, [r7, #12]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1f9      	bne.n	8001d60 <RCC_Delay+0x1c>
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	10624dd3 	.word	0x10624dd3

08001d80 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e04a      	b.n	8001e28 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d106      	bne.n	8001dac <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7fe fa96 	bl	80002d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2224      	movs	r2, #36	; 0x24
 8001db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f925 	bl	8002014 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	691a      	ldr	r2, [r3, #16]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001dd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	695a      	ldr	r2, [r3, #20]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8001de8:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	695a      	ldr	r2, [r3, #20]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 0208 	orr.w	r2, r2, #8
 8001df8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2220      	movs	r2, #32
 8001e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	; 0x28
 8001e34:	af02      	add	r7, sp, #8
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b20      	cmp	r3, #32
 8001e4e:	d16d      	bne.n	8001f2c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d002      	beq.n	8001e5c <HAL_UART_Transmit+0x2c>
 8001e56:	88fb      	ldrh	r3, [r7, #6]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e066      	b.n	8001f2e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2221      	movs	r2, #33	; 0x21
 8001e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e6e:	f7ff f8e1 	bl	8001034 <HAL_GetTick>
 8001e72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	88fa      	ldrh	r2, [r7, #6]
 8001e78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	88fa      	ldrh	r2, [r7, #6]
 8001e7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e88:	d108      	bne.n	8001e9c <HAL_UART_Transmit+0x6c>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d104      	bne.n	8001e9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	61bb      	str	r3, [r7, #24]
 8001e9a:	e003      	b.n	8001ea4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ea4:	e02a      	b.n	8001efc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	2200      	movs	r2, #0
 8001eae:	2180      	movs	r1, #128	; 0x80
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f000 f840 	bl	8001f36 <UART_WaitOnFlagUntilTimeout>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e036      	b.n	8001f2e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10b      	bne.n	8001ede <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ed4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	3302      	adds	r3, #2
 8001eda:	61bb      	str	r3, [r7, #24]
 8001edc:	e007      	b.n	8001eee <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	781a      	ldrb	r2, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	3301      	adds	r3, #1
 8001eec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1cf      	bne.n	8001ea6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2140      	movs	r1, #64	; 0x40
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f000 f810 	bl	8001f36 <UART_WaitOnFlagUntilTimeout>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e006      	b.n	8001f2e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2220      	movs	r2, #32
 8001f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	e000      	b.n	8001f2e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001f2c:	2302      	movs	r3, #2
  }
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3720      	adds	r7, #32
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b090      	sub	sp, #64	; 0x40
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	603b      	str	r3, [r7, #0]
 8001f42:	4613      	mov	r3, r2
 8001f44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f46:	e050      	b.n	8001fea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4e:	d04c      	beq.n	8001fea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d007      	beq.n	8001f66 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f56:	f7ff f86d 	bl	8001034 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d241      	bcs.n	8001fea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	330c      	adds	r3, #12
 8001f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f70:	e853 3f00 	ldrex	r3, [r3]
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	330c      	adds	r3, #12
 8001f84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f86:	637a      	str	r2, [r7, #52]	; 0x34
 8001f88:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f8e:	e841 2300 	strex	r3, r2, [r1]
 8001f92:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1e5      	bne.n	8001f66 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	3314      	adds	r3, #20
 8001fa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	e853 3f00 	ldrex	r3, [r3]
 8001fa8:	613b      	str	r3, [r7, #16]
   return(result);
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	f023 0301 	bic.w	r3, r3, #1
 8001fb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	3314      	adds	r3, #20
 8001fb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fba:	623a      	str	r2, [r7, #32]
 8001fbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fbe:	69f9      	ldr	r1, [r7, #28]
 8001fc0:	6a3a      	ldr	r2, [r7, #32]
 8001fc2:	e841 2300 	strex	r3, r2, [r1]
 8001fc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1e5      	bne.n	8001f9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2220      	movs	r2, #32
 8001fda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e00f      	b.n	800200a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	bf0c      	ite	eq
 8001ffa:	2301      	moveq	r3, #1
 8001ffc:	2300      	movne	r3, #0
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	461a      	mov	r2, r3
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	429a      	cmp	r2, r3
 8002006:	d09f      	beq.n	8001f48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3740      	adds	r7, #64	; 0x40
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	4313      	orrs	r3, r2
 8002042:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800204e:	f023 030c 	bic.w	r3, r3, #12
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6812      	ldr	r2, [r2, #0]
 8002056:	68b9      	ldr	r1, [r7, #8]
 8002058:	430b      	orrs	r3, r1
 800205a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699a      	ldr	r2, [r3, #24]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a2c      	ldr	r2, [pc, #176]	; (8002128 <UART_SetConfig+0x114>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d103      	bne.n	8002084 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800207c:	f7ff fe4e 	bl	8001d1c <HAL_RCC_GetPCLK2Freq>
 8002080:	60f8      	str	r0, [r7, #12]
 8002082:	e002      	b.n	800208a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002084:	f7ff fe36 	bl	8001cf4 <HAL_RCC_GetPCLK1Freq>
 8002088:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	009a      	lsls	r2, r3, #2
 8002094:	441a      	add	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a0:	4a22      	ldr	r2, [pc, #136]	; (800212c <UART_SetConfig+0x118>)
 80020a2:	fba2 2303 	umull	r2, r3, r2, r3
 80020a6:	095b      	lsrs	r3, r3, #5
 80020a8:	0119      	lsls	r1, r3, #4
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	009a      	lsls	r2, r3, #2
 80020b4:	441a      	add	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80020c0:	4b1a      	ldr	r3, [pc, #104]	; (800212c <UART_SetConfig+0x118>)
 80020c2:	fba3 0302 	umull	r0, r3, r3, r2
 80020c6:	095b      	lsrs	r3, r3, #5
 80020c8:	2064      	movs	r0, #100	; 0x64
 80020ca:	fb00 f303 	mul.w	r3, r0, r3
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	3332      	adds	r3, #50	; 0x32
 80020d4:	4a15      	ldr	r2, [pc, #84]	; (800212c <UART_SetConfig+0x118>)
 80020d6:	fba2 2303 	umull	r2, r3, r2, r3
 80020da:	095b      	lsrs	r3, r3, #5
 80020dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020e0:	4419      	add	r1, r3
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	009a      	lsls	r2, r3, #2
 80020ec:	441a      	add	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80020f8:	4b0c      	ldr	r3, [pc, #48]	; (800212c <UART_SetConfig+0x118>)
 80020fa:	fba3 0302 	umull	r0, r3, r3, r2
 80020fe:	095b      	lsrs	r3, r3, #5
 8002100:	2064      	movs	r0, #100	; 0x64
 8002102:	fb00 f303 	mul.w	r3, r0, r3
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	3332      	adds	r3, #50	; 0x32
 800210c:	4a07      	ldr	r2, [pc, #28]	; (800212c <UART_SetConfig+0x118>)
 800210e:	fba2 2303 	umull	r2, r3, r2, r3
 8002112:	095b      	lsrs	r3, r3, #5
 8002114:	f003 020f 	and.w	r2, r3, #15
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	440a      	add	r2, r1
 800211e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002120:	bf00      	nop
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40013800 	.word	0x40013800
 800212c:	51eb851f 	.word	0x51eb851f

08002130 <__errno>:
 8002130:	4b01      	ldr	r3, [pc, #4]	; (8002138 <__errno+0x8>)
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	2000004c 	.word	0x2000004c

0800213c <__libc_init_array>:
 800213c:	b570      	push	{r4, r5, r6, lr}
 800213e:	2600      	movs	r6, #0
 8002140:	4d0c      	ldr	r5, [pc, #48]	; (8002174 <__libc_init_array+0x38>)
 8002142:	4c0d      	ldr	r4, [pc, #52]	; (8002178 <__libc_init_array+0x3c>)
 8002144:	1b64      	subs	r4, r4, r5
 8002146:	10a4      	asrs	r4, r4, #2
 8002148:	42a6      	cmp	r6, r4
 800214a:	d109      	bne.n	8002160 <__libc_init_array+0x24>
 800214c:	f001 f82a 	bl	80031a4 <_init>
 8002150:	2600      	movs	r6, #0
 8002152:	4d0a      	ldr	r5, [pc, #40]	; (800217c <__libc_init_array+0x40>)
 8002154:	4c0a      	ldr	r4, [pc, #40]	; (8002180 <__libc_init_array+0x44>)
 8002156:	1b64      	subs	r4, r4, r5
 8002158:	10a4      	asrs	r4, r4, #2
 800215a:	42a6      	cmp	r6, r4
 800215c:	d105      	bne.n	800216a <__libc_init_array+0x2e>
 800215e:	bd70      	pop	{r4, r5, r6, pc}
 8002160:	f855 3b04 	ldr.w	r3, [r5], #4
 8002164:	4798      	blx	r3
 8002166:	3601      	adds	r6, #1
 8002168:	e7ee      	b.n	8002148 <__libc_init_array+0xc>
 800216a:	f855 3b04 	ldr.w	r3, [r5], #4
 800216e:	4798      	blx	r3
 8002170:	3601      	adds	r6, #1
 8002172:	e7f2      	b.n	800215a <__libc_init_array+0x1e>
 8002174:	080032f4 	.word	0x080032f4
 8002178:	080032f4 	.word	0x080032f4
 800217c:	080032f4 	.word	0x080032f4
 8002180:	080032f8 	.word	0x080032f8

08002184 <memset>:
 8002184:	4603      	mov	r3, r0
 8002186:	4402      	add	r2, r0
 8002188:	4293      	cmp	r3, r2
 800218a:	d100      	bne.n	800218e <memset+0xa>
 800218c:	4770      	bx	lr
 800218e:	f803 1b01 	strb.w	r1, [r3], #1
 8002192:	e7f9      	b.n	8002188 <memset+0x4>

08002194 <_puts_r>:
 8002194:	b570      	push	{r4, r5, r6, lr}
 8002196:	460e      	mov	r6, r1
 8002198:	4605      	mov	r5, r0
 800219a:	b118      	cbz	r0, 80021a4 <_puts_r+0x10>
 800219c:	6983      	ldr	r3, [r0, #24]
 800219e:	b90b      	cbnz	r3, 80021a4 <_puts_r+0x10>
 80021a0:	f000 fa5a 	bl	8002658 <__sinit>
 80021a4:	69ab      	ldr	r3, [r5, #24]
 80021a6:	68ac      	ldr	r4, [r5, #8]
 80021a8:	b913      	cbnz	r3, 80021b0 <_puts_r+0x1c>
 80021aa:	4628      	mov	r0, r5
 80021ac:	f000 fa54 	bl	8002658 <__sinit>
 80021b0:	4b2c      	ldr	r3, [pc, #176]	; (8002264 <_puts_r+0xd0>)
 80021b2:	429c      	cmp	r4, r3
 80021b4:	d120      	bne.n	80021f8 <_puts_r+0x64>
 80021b6:	686c      	ldr	r4, [r5, #4]
 80021b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80021ba:	07db      	lsls	r3, r3, #31
 80021bc:	d405      	bmi.n	80021ca <_puts_r+0x36>
 80021be:	89a3      	ldrh	r3, [r4, #12]
 80021c0:	0598      	lsls	r0, r3, #22
 80021c2:	d402      	bmi.n	80021ca <_puts_r+0x36>
 80021c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80021c6:	f000 fae5 	bl	8002794 <__retarget_lock_acquire_recursive>
 80021ca:	89a3      	ldrh	r3, [r4, #12]
 80021cc:	0719      	lsls	r1, r3, #28
 80021ce:	d51d      	bpl.n	800220c <_puts_r+0x78>
 80021d0:	6923      	ldr	r3, [r4, #16]
 80021d2:	b1db      	cbz	r3, 800220c <_puts_r+0x78>
 80021d4:	3e01      	subs	r6, #1
 80021d6:	68a3      	ldr	r3, [r4, #8]
 80021d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80021dc:	3b01      	subs	r3, #1
 80021de:	60a3      	str	r3, [r4, #8]
 80021e0:	bb39      	cbnz	r1, 8002232 <_puts_r+0x9e>
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	da38      	bge.n	8002258 <_puts_r+0xc4>
 80021e6:	4622      	mov	r2, r4
 80021e8:	210a      	movs	r1, #10
 80021ea:	4628      	mov	r0, r5
 80021ec:	f000 f85e 	bl	80022ac <__swbuf_r>
 80021f0:	3001      	adds	r0, #1
 80021f2:	d011      	beq.n	8002218 <_puts_r+0x84>
 80021f4:	250a      	movs	r5, #10
 80021f6:	e011      	b.n	800221c <_puts_r+0x88>
 80021f8:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <_puts_r+0xd4>)
 80021fa:	429c      	cmp	r4, r3
 80021fc:	d101      	bne.n	8002202 <_puts_r+0x6e>
 80021fe:	68ac      	ldr	r4, [r5, #8]
 8002200:	e7da      	b.n	80021b8 <_puts_r+0x24>
 8002202:	4b1a      	ldr	r3, [pc, #104]	; (800226c <_puts_r+0xd8>)
 8002204:	429c      	cmp	r4, r3
 8002206:	bf08      	it	eq
 8002208:	68ec      	ldreq	r4, [r5, #12]
 800220a:	e7d5      	b.n	80021b8 <_puts_r+0x24>
 800220c:	4621      	mov	r1, r4
 800220e:	4628      	mov	r0, r5
 8002210:	f000 f89e 	bl	8002350 <__swsetup_r>
 8002214:	2800      	cmp	r0, #0
 8002216:	d0dd      	beq.n	80021d4 <_puts_r+0x40>
 8002218:	f04f 35ff 	mov.w	r5, #4294967295
 800221c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800221e:	07da      	lsls	r2, r3, #31
 8002220:	d405      	bmi.n	800222e <_puts_r+0x9a>
 8002222:	89a3      	ldrh	r3, [r4, #12]
 8002224:	059b      	lsls	r3, r3, #22
 8002226:	d402      	bmi.n	800222e <_puts_r+0x9a>
 8002228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800222a:	f000 fab4 	bl	8002796 <__retarget_lock_release_recursive>
 800222e:	4628      	mov	r0, r5
 8002230:	bd70      	pop	{r4, r5, r6, pc}
 8002232:	2b00      	cmp	r3, #0
 8002234:	da04      	bge.n	8002240 <_puts_r+0xac>
 8002236:	69a2      	ldr	r2, [r4, #24]
 8002238:	429a      	cmp	r2, r3
 800223a:	dc06      	bgt.n	800224a <_puts_r+0xb6>
 800223c:	290a      	cmp	r1, #10
 800223e:	d004      	beq.n	800224a <_puts_r+0xb6>
 8002240:	6823      	ldr	r3, [r4, #0]
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	6022      	str	r2, [r4, #0]
 8002246:	7019      	strb	r1, [r3, #0]
 8002248:	e7c5      	b.n	80021d6 <_puts_r+0x42>
 800224a:	4622      	mov	r2, r4
 800224c:	4628      	mov	r0, r5
 800224e:	f000 f82d 	bl	80022ac <__swbuf_r>
 8002252:	3001      	adds	r0, #1
 8002254:	d1bf      	bne.n	80021d6 <_puts_r+0x42>
 8002256:	e7df      	b.n	8002218 <_puts_r+0x84>
 8002258:	250a      	movs	r5, #10
 800225a:	6823      	ldr	r3, [r4, #0]
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	6022      	str	r2, [r4, #0]
 8002260:	701d      	strb	r5, [r3, #0]
 8002262:	e7db      	b.n	800221c <_puts_r+0x88>
 8002264:	08003280 	.word	0x08003280
 8002268:	080032a0 	.word	0x080032a0
 800226c:	08003260 	.word	0x08003260

08002270 <puts>:
 8002270:	4b02      	ldr	r3, [pc, #8]	; (800227c <puts+0xc>)
 8002272:	4601      	mov	r1, r0
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	f7ff bf8d 	b.w	8002194 <_puts_r>
 800227a:	bf00      	nop
 800227c:	2000004c 	.word	0x2000004c

08002280 <viprintf>:
 8002280:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <viprintf+0x28>)
 8002282:	b570      	push	{r4, r5, r6, lr}
 8002284:	681c      	ldr	r4, [r3, #0]
 8002286:	4605      	mov	r5, r0
 8002288:	460e      	mov	r6, r1
 800228a:	b124      	cbz	r4, 8002296 <viprintf+0x16>
 800228c:	69a3      	ldr	r3, [r4, #24]
 800228e:	b913      	cbnz	r3, 8002296 <viprintf+0x16>
 8002290:	4620      	mov	r0, r4
 8002292:	f000 f9e1 	bl	8002658 <__sinit>
 8002296:	4633      	mov	r3, r6
 8002298:	462a      	mov	r2, r5
 800229a:	4620      	mov	r0, r4
 800229c:	68a1      	ldr	r1, [r4, #8]
 800229e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80022a2:	f000 bbe3 	b.w	8002a6c <_vfiprintf_r>
 80022a6:	bf00      	nop
 80022a8:	2000004c 	.word	0x2000004c

080022ac <__swbuf_r>:
 80022ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ae:	460e      	mov	r6, r1
 80022b0:	4614      	mov	r4, r2
 80022b2:	4605      	mov	r5, r0
 80022b4:	b118      	cbz	r0, 80022be <__swbuf_r+0x12>
 80022b6:	6983      	ldr	r3, [r0, #24]
 80022b8:	b90b      	cbnz	r3, 80022be <__swbuf_r+0x12>
 80022ba:	f000 f9cd 	bl	8002658 <__sinit>
 80022be:	4b21      	ldr	r3, [pc, #132]	; (8002344 <__swbuf_r+0x98>)
 80022c0:	429c      	cmp	r4, r3
 80022c2:	d12b      	bne.n	800231c <__swbuf_r+0x70>
 80022c4:	686c      	ldr	r4, [r5, #4]
 80022c6:	69a3      	ldr	r3, [r4, #24]
 80022c8:	60a3      	str	r3, [r4, #8]
 80022ca:	89a3      	ldrh	r3, [r4, #12]
 80022cc:	071a      	lsls	r2, r3, #28
 80022ce:	d52f      	bpl.n	8002330 <__swbuf_r+0x84>
 80022d0:	6923      	ldr	r3, [r4, #16]
 80022d2:	b36b      	cbz	r3, 8002330 <__swbuf_r+0x84>
 80022d4:	6923      	ldr	r3, [r4, #16]
 80022d6:	6820      	ldr	r0, [r4, #0]
 80022d8:	b2f6      	uxtb	r6, r6
 80022da:	1ac0      	subs	r0, r0, r3
 80022dc:	6963      	ldr	r3, [r4, #20]
 80022de:	4637      	mov	r7, r6
 80022e0:	4283      	cmp	r3, r0
 80022e2:	dc04      	bgt.n	80022ee <__swbuf_r+0x42>
 80022e4:	4621      	mov	r1, r4
 80022e6:	4628      	mov	r0, r5
 80022e8:	f000 f922 	bl	8002530 <_fflush_r>
 80022ec:	bb30      	cbnz	r0, 800233c <__swbuf_r+0x90>
 80022ee:	68a3      	ldr	r3, [r4, #8]
 80022f0:	3001      	adds	r0, #1
 80022f2:	3b01      	subs	r3, #1
 80022f4:	60a3      	str	r3, [r4, #8]
 80022f6:	6823      	ldr	r3, [r4, #0]
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	6022      	str	r2, [r4, #0]
 80022fc:	701e      	strb	r6, [r3, #0]
 80022fe:	6963      	ldr	r3, [r4, #20]
 8002300:	4283      	cmp	r3, r0
 8002302:	d004      	beq.n	800230e <__swbuf_r+0x62>
 8002304:	89a3      	ldrh	r3, [r4, #12]
 8002306:	07db      	lsls	r3, r3, #31
 8002308:	d506      	bpl.n	8002318 <__swbuf_r+0x6c>
 800230a:	2e0a      	cmp	r6, #10
 800230c:	d104      	bne.n	8002318 <__swbuf_r+0x6c>
 800230e:	4621      	mov	r1, r4
 8002310:	4628      	mov	r0, r5
 8002312:	f000 f90d 	bl	8002530 <_fflush_r>
 8002316:	b988      	cbnz	r0, 800233c <__swbuf_r+0x90>
 8002318:	4638      	mov	r0, r7
 800231a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800231c:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <__swbuf_r+0x9c>)
 800231e:	429c      	cmp	r4, r3
 8002320:	d101      	bne.n	8002326 <__swbuf_r+0x7a>
 8002322:	68ac      	ldr	r4, [r5, #8]
 8002324:	e7cf      	b.n	80022c6 <__swbuf_r+0x1a>
 8002326:	4b09      	ldr	r3, [pc, #36]	; (800234c <__swbuf_r+0xa0>)
 8002328:	429c      	cmp	r4, r3
 800232a:	bf08      	it	eq
 800232c:	68ec      	ldreq	r4, [r5, #12]
 800232e:	e7ca      	b.n	80022c6 <__swbuf_r+0x1a>
 8002330:	4621      	mov	r1, r4
 8002332:	4628      	mov	r0, r5
 8002334:	f000 f80c 	bl	8002350 <__swsetup_r>
 8002338:	2800      	cmp	r0, #0
 800233a:	d0cb      	beq.n	80022d4 <__swbuf_r+0x28>
 800233c:	f04f 37ff 	mov.w	r7, #4294967295
 8002340:	e7ea      	b.n	8002318 <__swbuf_r+0x6c>
 8002342:	bf00      	nop
 8002344:	08003280 	.word	0x08003280
 8002348:	080032a0 	.word	0x080032a0
 800234c:	08003260 	.word	0x08003260

08002350 <__swsetup_r>:
 8002350:	4b32      	ldr	r3, [pc, #200]	; (800241c <__swsetup_r+0xcc>)
 8002352:	b570      	push	{r4, r5, r6, lr}
 8002354:	681d      	ldr	r5, [r3, #0]
 8002356:	4606      	mov	r6, r0
 8002358:	460c      	mov	r4, r1
 800235a:	b125      	cbz	r5, 8002366 <__swsetup_r+0x16>
 800235c:	69ab      	ldr	r3, [r5, #24]
 800235e:	b913      	cbnz	r3, 8002366 <__swsetup_r+0x16>
 8002360:	4628      	mov	r0, r5
 8002362:	f000 f979 	bl	8002658 <__sinit>
 8002366:	4b2e      	ldr	r3, [pc, #184]	; (8002420 <__swsetup_r+0xd0>)
 8002368:	429c      	cmp	r4, r3
 800236a:	d10f      	bne.n	800238c <__swsetup_r+0x3c>
 800236c:	686c      	ldr	r4, [r5, #4]
 800236e:	89a3      	ldrh	r3, [r4, #12]
 8002370:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002374:	0719      	lsls	r1, r3, #28
 8002376:	d42c      	bmi.n	80023d2 <__swsetup_r+0x82>
 8002378:	06dd      	lsls	r5, r3, #27
 800237a:	d411      	bmi.n	80023a0 <__swsetup_r+0x50>
 800237c:	2309      	movs	r3, #9
 800237e:	6033      	str	r3, [r6, #0]
 8002380:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002384:	f04f 30ff 	mov.w	r0, #4294967295
 8002388:	81a3      	strh	r3, [r4, #12]
 800238a:	e03e      	b.n	800240a <__swsetup_r+0xba>
 800238c:	4b25      	ldr	r3, [pc, #148]	; (8002424 <__swsetup_r+0xd4>)
 800238e:	429c      	cmp	r4, r3
 8002390:	d101      	bne.n	8002396 <__swsetup_r+0x46>
 8002392:	68ac      	ldr	r4, [r5, #8]
 8002394:	e7eb      	b.n	800236e <__swsetup_r+0x1e>
 8002396:	4b24      	ldr	r3, [pc, #144]	; (8002428 <__swsetup_r+0xd8>)
 8002398:	429c      	cmp	r4, r3
 800239a:	bf08      	it	eq
 800239c:	68ec      	ldreq	r4, [r5, #12]
 800239e:	e7e6      	b.n	800236e <__swsetup_r+0x1e>
 80023a0:	0758      	lsls	r0, r3, #29
 80023a2:	d512      	bpl.n	80023ca <__swsetup_r+0x7a>
 80023a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80023a6:	b141      	cbz	r1, 80023ba <__swsetup_r+0x6a>
 80023a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80023ac:	4299      	cmp	r1, r3
 80023ae:	d002      	beq.n	80023b6 <__swsetup_r+0x66>
 80023b0:	4630      	mov	r0, r6
 80023b2:	f000 fa57 	bl	8002864 <_free_r>
 80023b6:	2300      	movs	r3, #0
 80023b8:	6363      	str	r3, [r4, #52]	; 0x34
 80023ba:	89a3      	ldrh	r3, [r4, #12]
 80023bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80023c0:	81a3      	strh	r3, [r4, #12]
 80023c2:	2300      	movs	r3, #0
 80023c4:	6063      	str	r3, [r4, #4]
 80023c6:	6923      	ldr	r3, [r4, #16]
 80023c8:	6023      	str	r3, [r4, #0]
 80023ca:	89a3      	ldrh	r3, [r4, #12]
 80023cc:	f043 0308 	orr.w	r3, r3, #8
 80023d0:	81a3      	strh	r3, [r4, #12]
 80023d2:	6923      	ldr	r3, [r4, #16]
 80023d4:	b94b      	cbnz	r3, 80023ea <__swsetup_r+0x9a>
 80023d6:	89a3      	ldrh	r3, [r4, #12]
 80023d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80023dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023e0:	d003      	beq.n	80023ea <__swsetup_r+0x9a>
 80023e2:	4621      	mov	r1, r4
 80023e4:	4630      	mov	r0, r6
 80023e6:	f000 f9fd 	bl	80027e4 <__smakebuf_r>
 80023ea:	89a0      	ldrh	r0, [r4, #12]
 80023ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80023f0:	f010 0301 	ands.w	r3, r0, #1
 80023f4:	d00a      	beq.n	800240c <__swsetup_r+0xbc>
 80023f6:	2300      	movs	r3, #0
 80023f8:	60a3      	str	r3, [r4, #8]
 80023fa:	6963      	ldr	r3, [r4, #20]
 80023fc:	425b      	negs	r3, r3
 80023fe:	61a3      	str	r3, [r4, #24]
 8002400:	6923      	ldr	r3, [r4, #16]
 8002402:	b943      	cbnz	r3, 8002416 <__swsetup_r+0xc6>
 8002404:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002408:	d1ba      	bne.n	8002380 <__swsetup_r+0x30>
 800240a:	bd70      	pop	{r4, r5, r6, pc}
 800240c:	0781      	lsls	r1, r0, #30
 800240e:	bf58      	it	pl
 8002410:	6963      	ldrpl	r3, [r4, #20]
 8002412:	60a3      	str	r3, [r4, #8]
 8002414:	e7f4      	b.n	8002400 <__swsetup_r+0xb0>
 8002416:	2000      	movs	r0, #0
 8002418:	e7f7      	b.n	800240a <__swsetup_r+0xba>
 800241a:	bf00      	nop
 800241c:	2000004c 	.word	0x2000004c
 8002420:	08003280 	.word	0x08003280
 8002424:	080032a0 	.word	0x080032a0
 8002428:	08003260 	.word	0x08003260

0800242c <__sflush_r>:
 800242c:	898a      	ldrh	r2, [r1, #12]
 800242e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002430:	4605      	mov	r5, r0
 8002432:	0710      	lsls	r0, r2, #28
 8002434:	460c      	mov	r4, r1
 8002436:	d457      	bmi.n	80024e8 <__sflush_r+0xbc>
 8002438:	684b      	ldr	r3, [r1, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	dc04      	bgt.n	8002448 <__sflush_r+0x1c>
 800243e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002440:	2b00      	cmp	r3, #0
 8002442:	dc01      	bgt.n	8002448 <__sflush_r+0x1c>
 8002444:	2000      	movs	r0, #0
 8002446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002448:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800244a:	2e00      	cmp	r6, #0
 800244c:	d0fa      	beq.n	8002444 <__sflush_r+0x18>
 800244e:	2300      	movs	r3, #0
 8002450:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002454:	682f      	ldr	r7, [r5, #0]
 8002456:	602b      	str	r3, [r5, #0]
 8002458:	d032      	beq.n	80024c0 <__sflush_r+0x94>
 800245a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800245c:	89a3      	ldrh	r3, [r4, #12]
 800245e:	075a      	lsls	r2, r3, #29
 8002460:	d505      	bpl.n	800246e <__sflush_r+0x42>
 8002462:	6863      	ldr	r3, [r4, #4]
 8002464:	1ac0      	subs	r0, r0, r3
 8002466:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002468:	b10b      	cbz	r3, 800246e <__sflush_r+0x42>
 800246a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800246c:	1ac0      	subs	r0, r0, r3
 800246e:	2300      	movs	r3, #0
 8002470:	4602      	mov	r2, r0
 8002472:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002474:	4628      	mov	r0, r5
 8002476:	6a21      	ldr	r1, [r4, #32]
 8002478:	47b0      	blx	r6
 800247a:	1c43      	adds	r3, r0, #1
 800247c:	89a3      	ldrh	r3, [r4, #12]
 800247e:	d106      	bne.n	800248e <__sflush_r+0x62>
 8002480:	6829      	ldr	r1, [r5, #0]
 8002482:	291d      	cmp	r1, #29
 8002484:	d82c      	bhi.n	80024e0 <__sflush_r+0xb4>
 8002486:	4a29      	ldr	r2, [pc, #164]	; (800252c <__sflush_r+0x100>)
 8002488:	40ca      	lsrs	r2, r1
 800248a:	07d6      	lsls	r6, r2, #31
 800248c:	d528      	bpl.n	80024e0 <__sflush_r+0xb4>
 800248e:	2200      	movs	r2, #0
 8002490:	6062      	str	r2, [r4, #4]
 8002492:	6922      	ldr	r2, [r4, #16]
 8002494:	04d9      	lsls	r1, r3, #19
 8002496:	6022      	str	r2, [r4, #0]
 8002498:	d504      	bpl.n	80024a4 <__sflush_r+0x78>
 800249a:	1c42      	adds	r2, r0, #1
 800249c:	d101      	bne.n	80024a2 <__sflush_r+0x76>
 800249e:	682b      	ldr	r3, [r5, #0]
 80024a0:	b903      	cbnz	r3, 80024a4 <__sflush_r+0x78>
 80024a2:	6560      	str	r0, [r4, #84]	; 0x54
 80024a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80024a6:	602f      	str	r7, [r5, #0]
 80024a8:	2900      	cmp	r1, #0
 80024aa:	d0cb      	beq.n	8002444 <__sflush_r+0x18>
 80024ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80024b0:	4299      	cmp	r1, r3
 80024b2:	d002      	beq.n	80024ba <__sflush_r+0x8e>
 80024b4:	4628      	mov	r0, r5
 80024b6:	f000 f9d5 	bl	8002864 <_free_r>
 80024ba:	2000      	movs	r0, #0
 80024bc:	6360      	str	r0, [r4, #52]	; 0x34
 80024be:	e7c2      	b.n	8002446 <__sflush_r+0x1a>
 80024c0:	6a21      	ldr	r1, [r4, #32]
 80024c2:	2301      	movs	r3, #1
 80024c4:	4628      	mov	r0, r5
 80024c6:	47b0      	blx	r6
 80024c8:	1c41      	adds	r1, r0, #1
 80024ca:	d1c7      	bne.n	800245c <__sflush_r+0x30>
 80024cc:	682b      	ldr	r3, [r5, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0c4      	beq.n	800245c <__sflush_r+0x30>
 80024d2:	2b1d      	cmp	r3, #29
 80024d4:	d001      	beq.n	80024da <__sflush_r+0xae>
 80024d6:	2b16      	cmp	r3, #22
 80024d8:	d101      	bne.n	80024de <__sflush_r+0xb2>
 80024da:	602f      	str	r7, [r5, #0]
 80024dc:	e7b2      	b.n	8002444 <__sflush_r+0x18>
 80024de:	89a3      	ldrh	r3, [r4, #12]
 80024e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024e4:	81a3      	strh	r3, [r4, #12]
 80024e6:	e7ae      	b.n	8002446 <__sflush_r+0x1a>
 80024e8:	690f      	ldr	r7, [r1, #16]
 80024ea:	2f00      	cmp	r7, #0
 80024ec:	d0aa      	beq.n	8002444 <__sflush_r+0x18>
 80024ee:	0793      	lsls	r3, r2, #30
 80024f0:	bf18      	it	ne
 80024f2:	2300      	movne	r3, #0
 80024f4:	680e      	ldr	r6, [r1, #0]
 80024f6:	bf08      	it	eq
 80024f8:	694b      	ldreq	r3, [r1, #20]
 80024fa:	1bf6      	subs	r6, r6, r7
 80024fc:	600f      	str	r7, [r1, #0]
 80024fe:	608b      	str	r3, [r1, #8]
 8002500:	2e00      	cmp	r6, #0
 8002502:	dd9f      	ble.n	8002444 <__sflush_r+0x18>
 8002504:	4633      	mov	r3, r6
 8002506:	463a      	mov	r2, r7
 8002508:	4628      	mov	r0, r5
 800250a:	6a21      	ldr	r1, [r4, #32]
 800250c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002510:	47e0      	blx	ip
 8002512:	2800      	cmp	r0, #0
 8002514:	dc06      	bgt.n	8002524 <__sflush_r+0xf8>
 8002516:	89a3      	ldrh	r3, [r4, #12]
 8002518:	f04f 30ff 	mov.w	r0, #4294967295
 800251c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002520:	81a3      	strh	r3, [r4, #12]
 8002522:	e790      	b.n	8002446 <__sflush_r+0x1a>
 8002524:	4407      	add	r7, r0
 8002526:	1a36      	subs	r6, r6, r0
 8002528:	e7ea      	b.n	8002500 <__sflush_r+0xd4>
 800252a:	bf00      	nop
 800252c:	20400001 	.word	0x20400001

08002530 <_fflush_r>:
 8002530:	b538      	push	{r3, r4, r5, lr}
 8002532:	690b      	ldr	r3, [r1, #16]
 8002534:	4605      	mov	r5, r0
 8002536:	460c      	mov	r4, r1
 8002538:	b913      	cbnz	r3, 8002540 <_fflush_r+0x10>
 800253a:	2500      	movs	r5, #0
 800253c:	4628      	mov	r0, r5
 800253e:	bd38      	pop	{r3, r4, r5, pc}
 8002540:	b118      	cbz	r0, 800254a <_fflush_r+0x1a>
 8002542:	6983      	ldr	r3, [r0, #24]
 8002544:	b90b      	cbnz	r3, 800254a <_fflush_r+0x1a>
 8002546:	f000 f887 	bl	8002658 <__sinit>
 800254a:	4b14      	ldr	r3, [pc, #80]	; (800259c <_fflush_r+0x6c>)
 800254c:	429c      	cmp	r4, r3
 800254e:	d11b      	bne.n	8002588 <_fflush_r+0x58>
 8002550:	686c      	ldr	r4, [r5, #4]
 8002552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0ef      	beq.n	800253a <_fflush_r+0xa>
 800255a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800255c:	07d0      	lsls	r0, r2, #31
 800255e:	d404      	bmi.n	800256a <_fflush_r+0x3a>
 8002560:	0599      	lsls	r1, r3, #22
 8002562:	d402      	bmi.n	800256a <_fflush_r+0x3a>
 8002564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002566:	f000 f915 	bl	8002794 <__retarget_lock_acquire_recursive>
 800256a:	4628      	mov	r0, r5
 800256c:	4621      	mov	r1, r4
 800256e:	f7ff ff5d 	bl	800242c <__sflush_r>
 8002572:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002574:	4605      	mov	r5, r0
 8002576:	07da      	lsls	r2, r3, #31
 8002578:	d4e0      	bmi.n	800253c <_fflush_r+0xc>
 800257a:	89a3      	ldrh	r3, [r4, #12]
 800257c:	059b      	lsls	r3, r3, #22
 800257e:	d4dd      	bmi.n	800253c <_fflush_r+0xc>
 8002580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002582:	f000 f908 	bl	8002796 <__retarget_lock_release_recursive>
 8002586:	e7d9      	b.n	800253c <_fflush_r+0xc>
 8002588:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <_fflush_r+0x70>)
 800258a:	429c      	cmp	r4, r3
 800258c:	d101      	bne.n	8002592 <_fflush_r+0x62>
 800258e:	68ac      	ldr	r4, [r5, #8]
 8002590:	e7df      	b.n	8002552 <_fflush_r+0x22>
 8002592:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <_fflush_r+0x74>)
 8002594:	429c      	cmp	r4, r3
 8002596:	bf08      	it	eq
 8002598:	68ec      	ldreq	r4, [r5, #12]
 800259a:	e7da      	b.n	8002552 <_fflush_r+0x22>
 800259c:	08003280 	.word	0x08003280
 80025a0:	080032a0 	.word	0x080032a0
 80025a4:	08003260 	.word	0x08003260

080025a8 <std>:
 80025a8:	2300      	movs	r3, #0
 80025aa:	b510      	push	{r4, lr}
 80025ac:	4604      	mov	r4, r0
 80025ae:	e9c0 3300 	strd	r3, r3, [r0]
 80025b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80025b6:	6083      	str	r3, [r0, #8]
 80025b8:	8181      	strh	r1, [r0, #12]
 80025ba:	6643      	str	r3, [r0, #100]	; 0x64
 80025bc:	81c2      	strh	r2, [r0, #14]
 80025be:	6183      	str	r3, [r0, #24]
 80025c0:	4619      	mov	r1, r3
 80025c2:	2208      	movs	r2, #8
 80025c4:	305c      	adds	r0, #92	; 0x5c
 80025c6:	f7ff fddd 	bl	8002184 <memset>
 80025ca:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <std+0x38>)
 80025cc:	6224      	str	r4, [r4, #32]
 80025ce:	6263      	str	r3, [r4, #36]	; 0x24
 80025d0:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <std+0x3c>)
 80025d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80025d4:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <std+0x40>)
 80025d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80025d8:	4b04      	ldr	r3, [pc, #16]	; (80025ec <std+0x44>)
 80025da:	6323      	str	r3, [r4, #48]	; 0x30
 80025dc:	bd10      	pop	{r4, pc}
 80025de:	bf00      	nop
 80025e0:	08003019 	.word	0x08003019
 80025e4:	0800303b 	.word	0x0800303b
 80025e8:	08003073 	.word	0x08003073
 80025ec:	08003097 	.word	0x08003097

080025f0 <_cleanup_r>:
 80025f0:	4901      	ldr	r1, [pc, #4]	; (80025f8 <_cleanup_r+0x8>)
 80025f2:	f000 b8af 	b.w	8002754 <_fwalk_reent>
 80025f6:	bf00      	nop
 80025f8:	08002531 	.word	0x08002531

080025fc <__sfmoreglue>:
 80025fc:	2268      	movs	r2, #104	; 0x68
 80025fe:	b570      	push	{r4, r5, r6, lr}
 8002600:	1e4d      	subs	r5, r1, #1
 8002602:	4355      	muls	r5, r2
 8002604:	460e      	mov	r6, r1
 8002606:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800260a:	f000 f993 	bl	8002934 <_malloc_r>
 800260e:	4604      	mov	r4, r0
 8002610:	b140      	cbz	r0, 8002624 <__sfmoreglue+0x28>
 8002612:	2100      	movs	r1, #0
 8002614:	e9c0 1600 	strd	r1, r6, [r0]
 8002618:	300c      	adds	r0, #12
 800261a:	60a0      	str	r0, [r4, #8]
 800261c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002620:	f7ff fdb0 	bl	8002184 <memset>
 8002624:	4620      	mov	r0, r4
 8002626:	bd70      	pop	{r4, r5, r6, pc}

08002628 <__sfp_lock_acquire>:
 8002628:	4801      	ldr	r0, [pc, #4]	; (8002630 <__sfp_lock_acquire+0x8>)
 800262a:	f000 b8b3 	b.w	8002794 <__retarget_lock_acquire_recursive>
 800262e:	bf00      	nop
 8002630:	20000ee5 	.word	0x20000ee5

08002634 <__sfp_lock_release>:
 8002634:	4801      	ldr	r0, [pc, #4]	; (800263c <__sfp_lock_release+0x8>)
 8002636:	f000 b8ae 	b.w	8002796 <__retarget_lock_release_recursive>
 800263a:	bf00      	nop
 800263c:	20000ee5 	.word	0x20000ee5

08002640 <__sinit_lock_acquire>:
 8002640:	4801      	ldr	r0, [pc, #4]	; (8002648 <__sinit_lock_acquire+0x8>)
 8002642:	f000 b8a7 	b.w	8002794 <__retarget_lock_acquire_recursive>
 8002646:	bf00      	nop
 8002648:	20000ee6 	.word	0x20000ee6

0800264c <__sinit_lock_release>:
 800264c:	4801      	ldr	r0, [pc, #4]	; (8002654 <__sinit_lock_release+0x8>)
 800264e:	f000 b8a2 	b.w	8002796 <__retarget_lock_release_recursive>
 8002652:	bf00      	nop
 8002654:	20000ee6 	.word	0x20000ee6

08002658 <__sinit>:
 8002658:	b510      	push	{r4, lr}
 800265a:	4604      	mov	r4, r0
 800265c:	f7ff fff0 	bl	8002640 <__sinit_lock_acquire>
 8002660:	69a3      	ldr	r3, [r4, #24]
 8002662:	b11b      	cbz	r3, 800266c <__sinit+0x14>
 8002664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002668:	f7ff bff0 	b.w	800264c <__sinit_lock_release>
 800266c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002670:	6523      	str	r3, [r4, #80]	; 0x50
 8002672:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <__sinit+0x68>)
 8002674:	4a13      	ldr	r2, [pc, #76]	; (80026c4 <__sinit+0x6c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	62a2      	str	r2, [r4, #40]	; 0x28
 800267a:	42a3      	cmp	r3, r4
 800267c:	bf08      	it	eq
 800267e:	2301      	moveq	r3, #1
 8002680:	4620      	mov	r0, r4
 8002682:	bf08      	it	eq
 8002684:	61a3      	streq	r3, [r4, #24]
 8002686:	f000 f81f 	bl	80026c8 <__sfp>
 800268a:	6060      	str	r0, [r4, #4]
 800268c:	4620      	mov	r0, r4
 800268e:	f000 f81b 	bl	80026c8 <__sfp>
 8002692:	60a0      	str	r0, [r4, #8]
 8002694:	4620      	mov	r0, r4
 8002696:	f000 f817 	bl	80026c8 <__sfp>
 800269a:	2200      	movs	r2, #0
 800269c:	2104      	movs	r1, #4
 800269e:	60e0      	str	r0, [r4, #12]
 80026a0:	6860      	ldr	r0, [r4, #4]
 80026a2:	f7ff ff81 	bl	80025a8 <std>
 80026a6:	2201      	movs	r2, #1
 80026a8:	2109      	movs	r1, #9
 80026aa:	68a0      	ldr	r0, [r4, #8]
 80026ac:	f7ff ff7c 	bl	80025a8 <std>
 80026b0:	2202      	movs	r2, #2
 80026b2:	2112      	movs	r1, #18
 80026b4:	68e0      	ldr	r0, [r4, #12]
 80026b6:	f7ff ff77 	bl	80025a8 <std>
 80026ba:	2301      	movs	r3, #1
 80026bc:	61a3      	str	r3, [r4, #24]
 80026be:	e7d1      	b.n	8002664 <__sinit+0xc>
 80026c0:	0800325c 	.word	0x0800325c
 80026c4:	080025f1 	.word	0x080025f1

080026c8 <__sfp>:
 80026c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ca:	4607      	mov	r7, r0
 80026cc:	f7ff ffac 	bl	8002628 <__sfp_lock_acquire>
 80026d0:	4b1e      	ldr	r3, [pc, #120]	; (800274c <__sfp+0x84>)
 80026d2:	681e      	ldr	r6, [r3, #0]
 80026d4:	69b3      	ldr	r3, [r6, #24]
 80026d6:	b913      	cbnz	r3, 80026de <__sfp+0x16>
 80026d8:	4630      	mov	r0, r6
 80026da:	f7ff ffbd 	bl	8002658 <__sinit>
 80026de:	3648      	adds	r6, #72	; 0x48
 80026e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80026e4:	3b01      	subs	r3, #1
 80026e6:	d503      	bpl.n	80026f0 <__sfp+0x28>
 80026e8:	6833      	ldr	r3, [r6, #0]
 80026ea:	b30b      	cbz	r3, 8002730 <__sfp+0x68>
 80026ec:	6836      	ldr	r6, [r6, #0]
 80026ee:	e7f7      	b.n	80026e0 <__sfp+0x18>
 80026f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80026f4:	b9d5      	cbnz	r5, 800272c <__sfp+0x64>
 80026f6:	4b16      	ldr	r3, [pc, #88]	; (8002750 <__sfp+0x88>)
 80026f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80026fc:	60e3      	str	r3, [r4, #12]
 80026fe:	6665      	str	r5, [r4, #100]	; 0x64
 8002700:	f000 f847 	bl	8002792 <__retarget_lock_init_recursive>
 8002704:	f7ff ff96 	bl	8002634 <__sfp_lock_release>
 8002708:	2208      	movs	r2, #8
 800270a:	4629      	mov	r1, r5
 800270c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002710:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002714:	6025      	str	r5, [r4, #0]
 8002716:	61a5      	str	r5, [r4, #24]
 8002718:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800271c:	f7ff fd32 	bl	8002184 <memset>
 8002720:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002724:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002728:	4620      	mov	r0, r4
 800272a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800272c:	3468      	adds	r4, #104	; 0x68
 800272e:	e7d9      	b.n	80026e4 <__sfp+0x1c>
 8002730:	2104      	movs	r1, #4
 8002732:	4638      	mov	r0, r7
 8002734:	f7ff ff62 	bl	80025fc <__sfmoreglue>
 8002738:	4604      	mov	r4, r0
 800273a:	6030      	str	r0, [r6, #0]
 800273c:	2800      	cmp	r0, #0
 800273e:	d1d5      	bne.n	80026ec <__sfp+0x24>
 8002740:	f7ff ff78 	bl	8002634 <__sfp_lock_release>
 8002744:	230c      	movs	r3, #12
 8002746:	603b      	str	r3, [r7, #0]
 8002748:	e7ee      	b.n	8002728 <__sfp+0x60>
 800274a:	bf00      	nop
 800274c:	0800325c 	.word	0x0800325c
 8002750:	ffff0001 	.word	0xffff0001

08002754 <_fwalk_reent>:
 8002754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002758:	4606      	mov	r6, r0
 800275a:	4688      	mov	r8, r1
 800275c:	2700      	movs	r7, #0
 800275e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002762:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002766:	f1b9 0901 	subs.w	r9, r9, #1
 800276a:	d505      	bpl.n	8002778 <_fwalk_reent+0x24>
 800276c:	6824      	ldr	r4, [r4, #0]
 800276e:	2c00      	cmp	r4, #0
 8002770:	d1f7      	bne.n	8002762 <_fwalk_reent+0xe>
 8002772:	4638      	mov	r0, r7
 8002774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002778:	89ab      	ldrh	r3, [r5, #12]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d907      	bls.n	800278e <_fwalk_reent+0x3a>
 800277e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002782:	3301      	adds	r3, #1
 8002784:	d003      	beq.n	800278e <_fwalk_reent+0x3a>
 8002786:	4629      	mov	r1, r5
 8002788:	4630      	mov	r0, r6
 800278a:	47c0      	blx	r8
 800278c:	4307      	orrs	r7, r0
 800278e:	3568      	adds	r5, #104	; 0x68
 8002790:	e7e9      	b.n	8002766 <_fwalk_reent+0x12>

08002792 <__retarget_lock_init_recursive>:
 8002792:	4770      	bx	lr

08002794 <__retarget_lock_acquire_recursive>:
 8002794:	4770      	bx	lr

08002796 <__retarget_lock_release_recursive>:
 8002796:	4770      	bx	lr

08002798 <__swhatbuf_r>:
 8002798:	b570      	push	{r4, r5, r6, lr}
 800279a:	460e      	mov	r6, r1
 800279c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027a0:	4614      	mov	r4, r2
 80027a2:	2900      	cmp	r1, #0
 80027a4:	461d      	mov	r5, r3
 80027a6:	b096      	sub	sp, #88	; 0x58
 80027a8:	da08      	bge.n	80027bc <__swhatbuf_r+0x24>
 80027aa:	2200      	movs	r2, #0
 80027ac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80027b0:	602a      	str	r2, [r5, #0]
 80027b2:	061a      	lsls	r2, r3, #24
 80027b4:	d410      	bmi.n	80027d8 <__swhatbuf_r+0x40>
 80027b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027ba:	e00e      	b.n	80027da <__swhatbuf_r+0x42>
 80027bc:	466a      	mov	r2, sp
 80027be:	f000 fc91 	bl	80030e4 <_fstat_r>
 80027c2:	2800      	cmp	r0, #0
 80027c4:	dbf1      	blt.n	80027aa <__swhatbuf_r+0x12>
 80027c6:	9a01      	ldr	r2, [sp, #4]
 80027c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80027cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80027d0:	425a      	negs	r2, r3
 80027d2:	415a      	adcs	r2, r3
 80027d4:	602a      	str	r2, [r5, #0]
 80027d6:	e7ee      	b.n	80027b6 <__swhatbuf_r+0x1e>
 80027d8:	2340      	movs	r3, #64	; 0x40
 80027da:	2000      	movs	r0, #0
 80027dc:	6023      	str	r3, [r4, #0]
 80027de:	b016      	add	sp, #88	; 0x58
 80027e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080027e4 <__smakebuf_r>:
 80027e4:	898b      	ldrh	r3, [r1, #12]
 80027e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80027e8:	079d      	lsls	r5, r3, #30
 80027ea:	4606      	mov	r6, r0
 80027ec:	460c      	mov	r4, r1
 80027ee:	d507      	bpl.n	8002800 <__smakebuf_r+0x1c>
 80027f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80027f4:	6023      	str	r3, [r4, #0]
 80027f6:	6123      	str	r3, [r4, #16]
 80027f8:	2301      	movs	r3, #1
 80027fa:	6163      	str	r3, [r4, #20]
 80027fc:	b002      	add	sp, #8
 80027fe:	bd70      	pop	{r4, r5, r6, pc}
 8002800:	466a      	mov	r2, sp
 8002802:	ab01      	add	r3, sp, #4
 8002804:	f7ff ffc8 	bl	8002798 <__swhatbuf_r>
 8002808:	9900      	ldr	r1, [sp, #0]
 800280a:	4605      	mov	r5, r0
 800280c:	4630      	mov	r0, r6
 800280e:	f000 f891 	bl	8002934 <_malloc_r>
 8002812:	b948      	cbnz	r0, 8002828 <__smakebuf_r+0x44>
 8002814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002818:	059a      	lsls	r2, r3, #22
 800281a:	d4ef      	bmi.n	80027fc <__smakebuf_r+0x18>
 800281c:	f023 0303 	bic.w	r3, r3, #3
 8002820:	f043 0302 	orr.w	r3, r3, #2
 8002824:	81a3      	strh	r3, [r4, #12]
 8002826:	e7e3      	b.n	80027f0 <__smakebuf_r+0xc>
 8002828:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <__smakebuf_r+0x7c>)
 800282a:	62b3      	str	r3, [r6, #40]	; 0x28
 800282c:	89a3      	ldrh	r3, [r4, #12]
 800282e:	6020      	str	r0, [r4, #0]
 8002830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002834:	81a3      	strh	r3, [r4, #12]
 8002836:	9b00      	ldr	r3, [sp, #0]
 8002838:	6120      	str	r0, [r4, #16]
 800283a:	6163      	str	r3, [r4, #20]
 800283c:	9b01      	ldr	r3, [sp, #4]
 800283e:	b15b      	cbz	r3, 8002858 <__smakebuf_r+0x74>
 8002840:	4630      	mov	r0, r6
 8002842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002846:	f000 fc5f 	bl	8003108 <_isatty_r>
 800284a:	b128      	cbz	r0, 8002858 <__smakebuf_r+0x74>
 800284c:	89a3      	ldrh	r3, [r4, #12]
 800284e:	f023 0303 	bic.w	r3, r3, #3
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	81a3      	strh	r3, [r4, #12]
 8002858:	89a0      	ldrh	r0, [r4, #12]
 800285a:	4305      	orrs	r5, r0
 800285c:	81a5      	strh	r5, [r4, #12]
 800285e:	e7cd      	b.n	80027fc <__smakebuf_r+0x18>
 8002860:	080025f1 	.word	0x080025f1

08002864 <_free_r>:
 8002864:	b538      	push	{r3, r4, r5, lr}
 8002866:	4605      	mov	r5, r0
 8002868:	2900      	cmp	r1, #0
 800286a:	d040      	beq.n	80028ee <_free_r+0x8a>
 800286c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002870:	1f0c      	subs	r4, r1, #4
 8002872:	2b00      	cmp	r3, #0
 8002874:	bfb8      	it	lt
 8002876:	18e4      	addlt	r4, r4, r3
 8002878:	f000 fc76 	bl	8003168 <__malloc_lock>
 800287c:	4a1c      	ldr	r2, [pc, #112]	; (80028f0 <_free_r+0x8c>)
 800287e:	6813      	ldr	r3, [r2, #0]
 8002880:	b933      	cbnz	r3, 8002890 <_free_r+0x2c>
 8002882:	6063      	str	r3, [r4, #4]
 8002884:	6014      	str	r4, [r2, #0]
 8002886:	4628      	mov	r0, r5
 8002888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800288c:	f000 bc72 	b.w	8003174 <__malloc_unlock>
 8002890:	42a3      	cmp	r3, r4
 8002892:	d908      	bls.n	80028a6 <_free_r+0x42>
 8002894:	6820      	ldr	r0, [r4, #0]
 8002896:	1821      	adds	r1, r4, r0
 8002898:	428b      	cmp	r3, r1
 800289a:	bf01      	itttt	eq
 800289c:	6819      	ldreq	r1, [r3, #0]
 800289e:	685b      	ldreq	r3, [r3, #4]
 80028a0:	1809      	addeq	r1, r1, r0
 80028a2:	6021      	streq	r1, [r4, #0]
 80028a4:	e7ed      	b.n	8002882 <_free_r+0x1e>
 80028a6:	461a      	mov	r2, r3
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	b10b      	cbz	r3, 80028b0 <_free_r+0x4c>
 80028ac:	42a3      	cmp	r3, r4
 80028ae:	d9fa      	bls.n	80028a6 <_free_r+0x42>
 80028b0:	6811      	ldr	r1, [r2, #0]
 80028b2:	1850      	adds	r0, r2, r1
 80028b4:	42a0      	cmp	r0, r4
 80028b6:	d10b      	bne.n	80028d0 <_free_r+0x6c>
 80028b8:	6820      	ldr	r0, [r4, #0]
 80028ba:	4401      	add	r1, r0
 80028bc:	1850      	adds	r0, r2, r1
 80028be:	4283      	cmp	r3, r0
 80028c0:	6011      	str	r1, [r2, #0]
 80028c2:	d1e0      	bne.n	8002886 <_free_r+0x22>
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	4401      	add	r1, r0
 80028ca:	6011      	str	r1, [r2, #0]
 80028cc:	6053      	str	r3, [r2, #4]
 80028ce:	e7da      	b.n	8002886 <_free_r+0x22>
 80028d0:	d902      	bls.n	80028d8 <_free_r+0x74>
 80028d2:	230c      	movs	r3, #12
 80028d4:	602b      	str	r3, [r5, #0]
 80028d6:	e7d6      	b.n	8002886 <_free_r+0x22>
 80028d8:	6820      	ldr	r0, [r4, #0]
 80028da:	1821      	adds	r1, r4, r0
 80028dc:	428b      	cmp	r3, r1
 80028de:	bf01      	itttt	eq
 80028e0:	6819      	ldreq	r1, [r3, #0]
 80028e2:	685b      	ldreq	r3, [r3, #4]
 80028e4:	1809      	addeq	r1, r1, r0
 80028e6:	6021      	streq	r1, [r4, #0]
 80028e8:	6063      	str	r3, [r4, #4]
 80028ea:	6054      	str	r4, [r2, #4]
 80028ec:	e7cb      	b.n	8002886 <_free_r+0x22>
 80028ee:	bd38      	pop	{r3, r4, r5, pc}
 80028f0:	20000ee8 	.word	0x20000ee8

080028f4 <sbrk_aligned>:
 80028f4:	b570      	push	{r4, r5, r6, lr}
 80028f6:	4e0e      	ldr	r6, [pc, #56]	; (8002930 <sbrk_aligned+0x3c>)
 80028f8:	460c      	mov	r4, r1
 80028fa:	6831      	ldr	r1, [r6, #0]
 80028fc:	4605      	mov	r5, r0
 80028fe:	b911      	cbnz	r1, 8002906 <sbrk_aligned+0x12>
 8002900:	f000 fb7a 	bl	8002ff8 <_sbrk_r>
 8002904:	6030      	str	r0, [r6, #0]
 8002906:	4621      	mov	r1, r4
 8002908:	4628      	mov	r0, r5
 800290a:	f000 fb75 	bl	8002ff8 <_sbrk_r>
 800290e:	1c43      	adds	r3, r0, #1
 8002910:	d00a      	beq.n	8002928 <sbrk_aligned+0x34>
 8002912:	1cc4      	adds	r4, r0, #3
 8002914:	f024 0403 	bic.w	r4, r4, #3
 8002918:	42a0      	cmp	r0, r4
 800291a:	d007      	beq.n	800292c <sbrk_aligned+0x38>
 800291c:	1a21      	subs	r1, r4, r0
 800291e:	4628      	mov	r0, r5
 8002920:	f000 fb6a 	bl	8002ff8 <_sbrk_r>
 8002924:	3001      	adds	r0, #1
 8002926:	d101      	bne.n	800292c <sbrk_aligned+0x38>
 8002928:	f04f 34ff 	mov.w	r4, #4294967295
 800292c:	4620      	mov	r0, r4
 800292e:	bd70      	pop	{r4, r5, r6, pc}
 8002930:	20000eec 	.word	0x20000eec

08002934 <_malloc_r>:
 8002934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002938:	1ccd      	adds	r5, r1, #3
 800293a:	f025 0503 	bic.w	r5, r5, #3
 800293e:	3508      	adds	r5, #8
 8002940:	2d0c      	cmp	r5, #12
 8002942:	bf38      	it	cc
 8002944:	250c      	movcc	r5, #12
 8002946:	2d00      	cmp	r5, #0
 8002948:	4607      	mov	r7, r0
 800294a:	db01      	blt.n	8002950 <_malloc_r+0x1c>
 800294c:	42a9      	cmp	r1, r5
 800294e:	d905      	bls.n	800295c <_malloc_r+0x28>
 8002950:	230c      	movs	r3, #12
 8002952:	2600      	movs	r6, #0
 8002954:	603b      	str	r3, [r7, #0]
 8002956:	4630      	mov	r0, r6
 8002958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800295c:	4e2e      	ldr	r6, [pc, #184]	; (8002a18 <_malloc_r+0xe4>)
 800295e:	f000 fc03 	bl	8003168 <__malloc_lock>
 8002962:	6833      	ldr	r3, [r6, #0]
 8002964:	461c      	mov	r4, r3
 8002966:	bb34      	cbnz	r4, 80029b6 <_malloc_r+0x82>
 8002968:	4629      	mov	r1, r5
 800296a:	4638      	mov	r0, r7
 800296c:	f7ff ffc2 	bl	80028f4 <sbrk_aligned>
 8002970:	1c43      	adds	r3, r0, #1
 8002972:	4604      	mov	r4, r0
 8002974:	d14d      	bne.n	8002a12 <_malloc_r+0xde>
 8002976:	6834      	ldr	r4, [r6, #0]
 8002978:	4626      	mov	r6, r4
 800297a:	2e00      	cmp	r6, #0
 800297c:	d140      	bne.n	8002a00 <_malloc_r+0xcc>
 800297e:	6823      	ldr	r3, [r4, #0]
 8002980:	4631      	mov	r1, r6
 8002982:	4638      	mov	r0, r7
 8002984:	eb04 0803 	add.w	r8, r4, r3
 8002988:	f000 fb36 	bl	8002ff8 <_sbrk_r>
 800298c:	4580      	cmp	r8, r0
 800298e:	d13a      	bne.n	8002a06 <_malloc_r+0xd2>
 8002990:	6821      	ldr	r1, [r4, #0]
 8002992:	3503      	adds	r5, #3
 8002994:	1a6d      	subs	r5, r5, r1
 8002996:	f025 0503 	bic.w	r5, r5, #3
 800299a:	3508      	adds	r5, #8
 800299c:	2d0c      	cmp	r5, #12
 800299e:	bf38      	it	cc
 80029a0:	250c      	movcc	r5, #12
 80029a2:	4638      	mov	r0, r7
 80029a4:	4629      	mov	r1, r5
 80029a6:	f7ff ffa5 	bl	80028f4 <sbrk_aligned>
 80029aa:	3001      	adds	r0, #1
 80029ac:	d02b      	beq.n	8002a06 <_malloc_r+0xd2>
 80029ae:	6823      	ldr	r3, [r4, #0]
 80029b0:	442b      	add	r3, r5
 80029b2:	6023      	str	r3, [r4, #0]
 80029b4:	e00e      	b.n	80029d4 <_malloc_r+0xa0>
 80029b6:	6822      	ldr	r2, [r4, #0]
 80029b8:	1b52      	subs	r2, r2, r5
 80029ba:	d41e      	bmi.n	80029fa <_malloc_r+0xc6>
 80029bc:	2a0b      	cmp	r2, #11
 80029be:	d916      	bls.n	80029ee <_malloc_r+0xba>
 80029c0:	1961      	adds	r1, r4, r5
 80029c2:	42a3      	cmp	r3, r4
 80029c4:	6025      	str	r5, [r4, #0]
 80029c6:	bf18      	it	ne
 80029c8:	6059      	strne	r1, [r3, #4]
 80029ca:	6863      	ldr	r3, [r4, #4]
 80029cc:	bf08      	it	eq
 80029ce:	6031      	streq	r1, [r6, #0]
 80029d0:	5162      	str	r2, [r4, r5]
 80029d2:	604b      	str	r3, [r1, #4]
 80029d4:	4638      	mov	r0, r7
 80029d6:	f104 060b 	add.w	r6, r4, #11
 80029da:	f000 fbcb 	bl	8003174 <__malloc_unlock>
 80029de:	f026 0607 	bic.w	r6, r6, #7
 80029e2:	1d23      	adds	r3, r4, #4
 80029e4:	1af2      	subs	r2, r6, r3
 80029e6:	d0b6      	beq.n	8002956 <_malloc_r+0x22>
 80029e8:	1b9b      	subs	r3, r3, r6
 80029ea:	50a3      	str	r3, [r4, r2]
 80029ec:	e7b3      	b.n	8002956 <_malloc_r+0x22>
 80029ee:	6862      	ldr	r2, [r4, #4]
 80029f0:	42a3      	cmp	r3, r4
 80029f2:	bf0c      	ite	eq
 80029f4:	6032      	streq	r2, [r6, #0]
 80029f6:	605a      	strne	r2, [r3, #4]
 80029f8:	e7ec      	b.n	80029d4 <_malloc_r+0xa0>
 80029fa:	4623      	mov	r3, r4
 80029fc:	6864      	ldr	r4, [r4, #4]
 80029fe:	e7b2      	b.n	8002966 <_malloc_r+0x32>
 8002a00:	4634      	mov	r4, r6
 8002a02:	6876      	ldr	r6, [r6, #4]
 8002a04:	e7b9      	b.n	800297a <_malloc_r+0x46>
 8002a06:	230c      	movs	r3, #12
 8002a08:	4638      	mov	r0, r7
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	f000 fbb2 	bl	8003174 <__malloc_unlock>
 8002a10:	e7a1      	b.n	8002956 <_malloc_r+0x22>
 8002a12:	6025      	str	r5, [r4, #0]
 8002a14:	e7de      	b.n	80029d4 <_malloc_r+0xa0>
 8002a16:	bf00      	nop
 8002a18:	20000ee8 	.word	0x20000ee8

08002a1c <__sfputc_r>:
 8002a1c:	6893      	ldr	r3, [r2, #8]
 8002a1e:	b410      	push	{r4}
 8002a20:	3b01      	subs	r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	6093      	str	r3, [r2, #8]
 8002a26:	da07      	bge.n	8002a38 <__sfputc_r+0x1c>
 8002a28:	6994      	ldr	r4, [r2, #24]
 8002a2a:	42a3      	cmp	r3, r4
 8002a2c:	db01      	blt.n	8002a32 <__sfputc_r+0x16>
 8002a2e:	290a      	cmp	r1, #10
 8002a30:	d102      	bne.n	8002a38 <__sfputc_r+0x1c>
 8002a32:	bc10      	pop	{r4}
 8002a34:	f7ff bc3a 	b.w	80022ac <__swbuf_r>
 8002a38:	6813      	ldr	r3, [r2, #0]
 8002a3a:	1c58      	adds	r0, r3, #1
 8002a3c:	6010      	str	r0, [r2, #0]
 8002a3e:	7019      	strb	r1, [r3, #0]
 8002a40:	4608      	mov	r0, r1
 8002a42:	bc10      	pop	{r4}
 8002a44:	4770      	bx	lr

08002a46 <__sfputs_r>:
 8002a46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a48:	4606      	mov	r6, r0
 8002a4a:	460f      	mov	r7, r1
 8002a4c:	4614      	mov	r4, r2
 8002a4e:	18d5      	adds	r5, r2, r3
 8002a50:	42ac      	cmp	r4, r5
 8002a52:	d101      	bne.n	8002a58 <__sfputs_r+0x12>
 8002a54:	2000      	movs	r0, #0
 8002a56:	e007      	b.n	8002a68 <__sfputs_r+0x22>
 8002a58:	463a      	mov	r2, r7
 8002a5a:	4630      	mov	r0, r6
 8002a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a60:	f7ff ffdc 	bl	8002a1c <__sfputc_r>
 8002a64:	1c43      	adds	r3, r0, #1
 8002a66:	d1f3      	bne.n	8002a50 <__sfputs_r+0xa>
 8002a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002a6c <_vfiprintf_r>:
 8002a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a70:	460d      	mov	r5, r1
 8002a72:	4614      	mov	r4, r2
 8002a74:	4698      	mov	r8, r3
 8002a76:	4606      	mov	r6, r0
 8002a78:	b09d      	sub	sp, #116	; 0x74
 8002a7a:	b118      	cbz	r0, 8002a84 <_vfiprintf_r+0x18>
 8002a7c:	6983      	ldr	r3, [r0, #24]
 8002a7e:	b90b      	cbnz	r3, 8002a84 <_vfiprintf_r+0x18>
 8002a80:	f7ff fdea 	bl	8002658 <__sinit>
 8002a84:	4b89      	ldr	r3, [pc, #548]	; (8002cac <_vfiprintf_r+0x240>)
 8002a86:	429d      	cmp	r5, r3
 8002a88:	d11b      	bne.n	8002ac2 <_vfiprintf_r+0x56>
 8002a8a:	6875      	ldr	r5, [r6, #4]
 8002a8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a8e:	07d9      	lsls	r1, r3, #31
 8002a90:	d405      	bmi.n	8002a9e <_vfiprintf_r+0x32>
 8002a92:	89ab      	ldrh	r3, [r5, #12]
 8002a94:	059a      	lsls	r2, r3, #22
 8002a96:	d402      	bmi.n	8002a9e <_vfiprintf_r+0x32>
 8002a98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a9a:	f7ff fe7b 	bl	8002794 <__retarget_lock_acquire_recursive>
 8002a9e:	89ab      	ldrh	r3, [r5, #12]
 8002aa0:	071b      	lsls	r3, r3, #28
 8002aa2:	d501      	bpl.n	8002aa8 <_vfiprintf_r+0x3c>
 8002aa4:	692b      	ldr	r3, [r5, #16]
 8002aa6:	b9eb      	cbnz	r3, 8002ae4 <_vfiprintf_r+0x78>
 8002aa8:	4629      	mov	r1, r5
 8002aaa:	4630      	mov	r0, r6
 8002aac:	f7ff fc50 	bl	8002350 <__swsetup_r>
 8002ab0:	b1c0      	cbz	r0, 8002ae4 <_vfiprintf_r+0x78>
 8002ab2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ab4:	07dc      	lsls	r4, r3, #31
 8002ab6:	d50e      	bpl.n	8002ad6 <_vfiprintf_r+0x6a>
 8002ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8002abc:	b01d      	add	sp, #116	; 0x74
 8002abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ac2:	4b7b      	ldr	r3, [pc, #492]	; (8002cb0 <_vfiprintf_r+0x244>)
 8002ac4:	429d      	cmp	r5, r3
 8002ac6:	d101      	bne.n	8002acc <_vfiprintf_r+0x60>
 8002ac8:	68b5      	ldr	r5, [r6, #8]
 8002aca:	e7df      	b.n	8002a8c <_vfiprintf_r+0x20>
 8002acc:	4b79      	ldr	r3, [pc, #484]	; (8002cb4 <_vfiprintf_r+0x248>)
 8002ace:	429d      	cmp	r5, r3
 8002ad0:	bf08      	it	eq
 8002ad2:	68f5      	ldreq	r5, [r6, #12]
 8002ad4:	e7da      	b.n	8002a8c <_vfiprintf_r+0x20>
 8002ad6:	89ab      	ldrh	r3, [r5, #12]
 8002ad8:	0598      	lsls	r0, r3, #22
 8002ada:	d4ed      	bmi.n	8002ab8 <_vfiprintf_r+0x4c>
 8002adc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ade:	f7ff fe5a 	bl	8002796 <__retarget_lock_release_recursive>
 8002ae2:	e7e9      	b.n	8002ab8 <_vfiprintf_r+0x4c>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ae8:	2320      	movs	r3, #32
 8002aea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002aee:	2330      	movs	r3, #48	; 0x30
 8002af0:	f04f 0901 	mov.w	r9, #1
 8002af4:	f8cd 800c 	str.w	r8, [sp, #12]
 8002af8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002cb8 <_vfiprintf_r+0x24c>
 8002afc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b00:	4623      	mov	r3, r4
 8002b02:	469a      	mov	sl, r3
 8002b04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b08:	b10a      	cbz	r2, 8002b0e <_vfiprintf_r+0xa2>
 8002b0a:	2a25      	cmp	r2, #37	; 0x25
 8002b0c:	d1f9      	bne.n	8002b02 <_vfiprintf_r+0x96>
 8002b0e:	ebba 0b04 	subs.w	fp, sl, r4
 8002b12:	d00b      	beq.n	8002b2c <_vfiprintf_r+0xc0>
 8002b14:	465b      	mov	r3, fp
 8002b16:	4622      	mov	r2, r4
 8002b18:	4629      	mov	r1, r5
 8002b1a:	4630      	mov	r0, r6
 8002b1c:	f7ff ff93 	bl	8002a46 <__sfputs_r>
 8002b20:	3001      	adds	r0, #1
 8002b22:	f000 80aa 	beq.w	8002c7a <_vfiprintf_r+0x20e>
 8002b26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b28:	445a      	add	r2, fp
 8002b2a:	9209      	str	r2, [sp, #36]	; 0x24
 8002b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 80a2 	beq.w	8002c7a <_vfiprintf_r+0x20e>
 8002b36:	2300      	movs	r3, #0
 8002b38:	f04f 32ff 	mov.w	r2, #4294967295
 8002b3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b40:	f10a 0a01 	add.w	sl, sl, #1
 8002b44:	9304      	str	r3, [sp, #16]
 8002b46:	9307      	str	r3, [sp, #28]
 8002b48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b4c:	931a      	str	r3, [sp, #104]	; 0x68
 8002b4e:	4654      	mov	r4, sl
 8002b50:	2205      	movs	r2, #5
 8002b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b56:	4858      	ldr	r0, [pc, #352]	; (8002cb8 <_vfiprintf_r+0x24c>)
 8002b58:	f000 faf8 	bl	800314c <memchr>
 8002b5c:	9a04      	ldr	r2, [sp, #16]
 8002b5e:	b9d8      	cbnz	r0, 8002b98 <_vfiprintf_r+0x12c>
 8002b60:	06d1      	lsls	r1, r2, #27
 8002b62:	bf44      	itt	mi
 8002b64:	2320      	movmi	r3, #32
 8002b66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b6a:	0713      	lsls	r3, r2, #28
 8002b6c:	bf44      	itt	mi
 8002b6e:	232b      	movmi	r3, #43	; 0x2b
 8002b70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b74:	f89a 3000 	ldrb.w	r3, [sl]
 8002b78:	2b2a      	cmp	r3, #42	; 0x2a
 8002b7a:	d015      	beq.n	8002ba8 <_vfiprintf_r+0x13c>
 8002b7c:	4654      	mov	r4, sl
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f04f 0c0a 	mov.w	ip, #10
 8002b84:	9a07      	ldr	r2, [sp, #28]
 8002b86:	4621      	mov	r1, r4
 8002b88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b8c:	3b30      	subs	r3, #48	; 0x30
 8002b8e:	2b09      	cmp	r3, #9
 8002b90:	d94e      	bls.n	8002c30 <_vfiprintf_r+0x1c4>
 8002b92:	b1b0      	cbz	r0, 8002bc2 <_vfiprintf_r+0x156>
 8002b94:	9207      	str	r2, [sp, #28]
 8002b96:	e014      	b.n	8002bc2 <_vfiprintf_r+0x156>
 8002b98:	eba0 0308 	sub.w	r3, r0, r8
 8002b9c:	fa09 f303 	lsl.w	r3, r9, r3
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	46a2      	mov	sl, r4
 8002ba4:	9304      	str	r3, [sp, #16]
 8002ba6:	e7d2      	b.n	8002b4e <_vfiprintf_r+0xe2>
 8002ba8:	9b03      	ldr	r3, [sp, #12]
 8002baa:	1d19      	adds	r1, r3, #4
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	9103      	str	r1, [sp, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	bfbb      	ittet	lt
 8002bb4:	425b      	neglt	r3, r3
 8002bb6:	f042 0202 	orrlt.w	r2, r2, #2
 8002bba:	9307      	strge	r3, [sp, #28]
 8002bbc:	9307      	strlt	r3, [sp, #28]
 8002bbe:	bfb8      	it	lt
 8002bc0:	9204      	strlt	r2, [sp, #16]
 8002bc2:	7823      	ldrb	r3, [r4, #0]
 8002bc4:	2b2e      	cmp	r3, #46	; 0x2e
 8002bc6:	d10c      	bne.n	8002be2 <_vfiprintf_r+0x176>
 8002bc8:	7863      	ldrb	r3, [r4, #1]
 8002bca:	2b2a      	cmp	r3, #42	; 0x2a
 8002bcc:	d135      	bne.n	8002c3a <_vfiprintf_r+0x1ce>
 8002bce:	9b03      	ldr	r3, [sp, #12]
 8002bd0:	3402      	adds	r4, #2
 8002bd2:	1d1a      	adds	r2, r3, #4
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	9203      	str	r2, [sp, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	bfb8      	it	lt
 8002bdc:	f04f 33ff 	movlt.w	r3, #4294967295
 8002be0:	9305      	str	r3, [sp, #20]
 8002be2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002cbc <_vfiprintf_r+0x250>
 8002be6:	2203      	movs	r2, #3
 8002be8:	4650      	mov	r0, sl
 8002bea:	7821      	ldrb	r1, [r4, #0]
 8002bec:	f000 faae 	bl	800314c <memchr>
 8002bf0:	b140      	cbz	r0, 8002c04 <_vfiprintf_r+0x198>
 8002bf2:	2340      	movs	r3, #64	; 0x40
 8002bf4:	eba0 000a 	sub.w	r0, r0, sl
 8002bf8:	fa03 f000 	lsl.w	r0, r3, r0
 8002bfc:	9b04      	ldr	r3, [sp, #16]
 8002bfe:	3401      	adds	r4, #1
 8002c00:	4303      	orrs	r3, r0
 8002c02:	9304      	str	r3, [sp, #16]
 8002c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c08:	2206      	movs	r2, #6
 8002c0a:	482d      	ldr	r0, [pc, #180]	; (8002cc0 <_vfiprintf_r+0x254>)
 8002c0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c10:	f000 fa9c 	bl	800314c <memchr>
 8002c14:	2800      	cmp	r0, #0
 8002c16:	d03f      	beq.n	8002c98 <_vfiprintf_r+0x22c>
 8002c18:	4b2a      	ldr	r3, [pc, #168]	; (8002cc4 <_vfiprintf_r+0x258>)
 8002c1a:	bb1b      	cbnz	r3, 8002c64 <_vfiprintf_r+0x1f8>
 8002c1c:	9b03      	ldr	r3, [sp, #12]
 8002c1e:	3307      	adds	r3, #7
 8002c20:	f023 0307 	bic.w	r3, r3, #7
 8002c24:	3308      	adds	r3, #8
 8002c26:	9303      	str	r3, [sp, #12]
 8002c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c2a:	443b      	add	r3, r7
 8002c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8002c2e:	e767      	b.n	8002b00 <_vfiprintf_r+0x94>
 8002c30:	460c      	mov	r4, r1
 8002c32:	2001      	movs	r0, #1
 8002c34:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c38:	e7a5      	b.n	8002b86 <_vfiprintf_r+0x11a>
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f04f 0c0a 	mov.w	ip, #10
 8002c40:	4619      	mov	r1, r3
 8002c42:	3401      	adds	r4, #1
 8002c44:	9305      	str	r3, [sp, #20]
 8002c46:	4620      	mov	r0, r4
 8002c48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c4c:	3a30      	subs	r2, #48	; 0x30
 8002c4e:	2a09      	cmp	r2, #9
 8002c50:	d903      	bls.n	8002c5a <_vfiprintf_r+0x1ee>
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0c5      	beq.n	8002be2 <_vfiprintf_r+0x176>
 8002c56:	9105      	str	r1, [sp, #20]
 8002c58:	e7c3      	b.n	8002be2 <_vfiprintf_r+0x176>
 8002c5a:	4604      	mov	r4, r0
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c62:	e7f0      	b.n	8002c46 <_vfiprintf_r+0x1da>
 8002c64:	ab03      	add	r3, sp, #12
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	462a      	mov	r2, r5
 8002c6a:	4630      	mov	r0, r6
 8002c6c:	4b16      	ldr	r3, [pc, #88]	; (8002cc8 <_vfiprintf_r+0x25c>)
 8002c6e:	a904      	add	r1, sp, #16
 8002c70:	f3af 8000 	nop.w
 8002c74:	4607      	mov	r7, r0
 8002c76:	1c78      	adds	r0, r7, #1
 8002c78:	d1d6      	bne.n	8002c28 <_vfiprintf_r+0x1bc>
 8002c7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c7c:	07d9      	lsls	r1, r3, #31
 8002c7e:	d405      	bmi.n	8002c8c <_vfiprintf_r+0x220>
 8002c80:	89ab      	ldrh	r3, [r5, #12]
 8002c82:	059a      	lsls	r2, r3, #22
 8002c84:	d402      	bmi.n	8002c8c <_vfiprintf_r+0x220>
 8002c86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c88:	f7ff fd85 	bl	8002796 <__retarget_lock_release_recursive>
 8002c8c:	89ab      	ldrh	r3, [r5, #12]
 8002c8e:	065b      	lsls	r3, r3, #25
 8002c90:	f53f af12 	bmi.w	8002ab8 <_vfiprintf_r+0x4c>
 8002c94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c96:	e711      	b.n	8002abc <_vfiprintf_r+0x50>
 8002c98:	ab03      	add	r3, sp, #12
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	462a      	mov	r2, r5
 8002c9e:	4630      	mov	r0, r6
 8002ca0:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <_vfiprintf_r+0x25c>)
 8002ca2:	a904      	add	r1, sp, #16
 8002ca4:	f000 f882 	bl	8002dac <_printf_i>
 8002ca8:	e7e4      	b.n	8002c74 <_vfiprintf_r+0x208>
 8002caa:	bf00      	nop
 8002cac:	08003280 	.word	0x08003280
 8002cb0:	080032a0 	.word	0x080032a0
 8002cb4:	08003260 	.word	0x08003260
 8002cb8:	080032c0 	.word	0x080032c0
 8002cbc:	080032c6 	.word	0x080032c6
 8002cc0:	080032ca 	.word	0x080032ca
 8002cc4:	00000000 	.word	0x00000000
 8002cc8:	08002a47 	.word	0x08002a47

08002ccc <_printf_common>:
 8002ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cd0:	4616      	mov	r6, r2
 8002cd2:	4699      	mov	r9, r3
 8002cd4:	688a      	ldr	r2, [r1, #8]
 8002cd6:	690b      	ldr	r3, [r1, #16]
 8002cd8:	4607      	mov	r7, r0
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	bfb8      	it	lt
 8002cde:	4613      	movlt	r3, r2
 8002ce0:	6033      	str	r3, [r6, #0]
 8002ce2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ce6:	460c      	mov	r4, r1
 8002ce8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002cec:	b10a      	cbz	r2, 8002cf2 <_printf_common+0x26>
 8002cee:	3301      	adds	r3, #1
 8002cf0:	6033      	str	r3, [r6, #0]
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	0699      	lsls	r1, r3, #26
 8002cf6:	bf42      	ittt	mi
 8002cf8:	6833      	ldrmi	r3, [r6, #0]
 8002cfa:	3302      	addmi	r3, #2
 8002cfc:	6033      	strmi	r3, [r6, #0]
 8002cfe:	6825      	ldr	r5, [r4, #0]
 8002d00:	f015 0506 	ands.w	r5, r5, #6
 8002d04:	d106      	bne.n	8002d14 <_printf_common+0x48>
 8002d06:	f104 0a19 	add.w	sl, r4, #25
 8002d0a:	68e3      	ldr	r3, [r4, #12]
 8002d0c:	6832      	ldr	r2, [r6, #0]
 8002d0e:	1a9b      	subs	r3, r3, r2
 8002d10:	42ab      	cmp	r3, r5
 8002d12:	dc28      	bgt.n	8002d66 <_printf_common+0x9a>
 8002d14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002d18:	1e13      	subs	r3, r2, #0
 8002d1a:	6822      	ldr	r2, [r4, #0]
 8002d1c:	bf18      	it	ne
 8002d1e:	2301      	movne	r3, #1
 8002d20:	0692      	lsls	r2, r2, #26
 8002d22:	d42d      	bmi.n	8002d80 <_printf_common+0xb4>
 8002d24:	4649      	mov	r1, r9
 8002d26:	4638      	mov	r0, r7
 8002d28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d2c:	47c0      	blx	r8
 8002d2e:	3001      	adds	r0, #1
 8002d30:	d020      	beq.n	8002d74 <_printf_common+0xa8>
 8002d32:	6823      	ldr	r3, [r4, #0]
 8002d34:	68e5      	ldr	r5, [r4, #12]
 8002d36:	f003 0306 	and.w	r3, r3, #6
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	bf18      	it	ne
 8002d3e:	2500      	movne	r5, #0
 8002d40:	6832      	ldr	r2, [r6, #0]
 8002d42:	f04f 0600 	mov.w	r6, #0
 8002d46:	68a3      	ldr	r3, [r4, #8]
 8002d48:	bf08      	it	eq
 8002d4a:	1aad      	subeq	r5, r5, r2
 8002d4c:	6922      	ldr	r2, [r4, #16]
 8002d4e:	bf08      	it	eq
 8002d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d54:	4293      	cmp	r3, r2
 8002d56:	bfc4      	itt	gt
 8002d58:	1a9b      	subgt	r3, r3, r2
 8002d5a:	18ed      	addgt	r5, r5, r3
 8002d5c:	341a      	adds	r4, #26
 8002d5e:	42b5      	cmp	r5, r6
 8002d60:	d11a      	bne.n	8002d98 <_printf_common+0xcc>
 8002d62:	2000      	movs	r0, #0
 8002d64:	e008      	b.n	8002d78 <_printf_common+0xac>
 8002d66:	2301      	movs	r3, #1
 8002d68:	4652      	mov	r2, sl
 8002d6a:	4649      	mov	r1, r9
 8002d6c:	4638      	mov	r0, r7
 8002d6e:	47c0      	blx	r8
 8002d70:	3001      	adds	r0, #1
 8002d72:	d103      	bne.n	8002d7c <_printf_common+0xb0>
 8002d74:	f04f 30ff 	mov.w	r0, #4294967295
 8002d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d7c:	3501      	adds	r5, #1
 8002d7e:	e7c4      	b.n	8002d0a <_printf_common+0x3e>
 8002d80:	2030      	movs	r0, #48	; 0x30
 8002d82:	18e1      	adds	r1, r4, r3
 8002d84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d8e:	4422      	add	r2, r4
 8002d90:	3302      	adds	r3, #2
 8002d92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d96:	e7c5      	b.n	8002d24 <_printf_common+0x58>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	4622      	mov	r2, r4
 8002d9c:	4649      	mov	r1, r9
 8002d9e:	4638      	mov	r0, r7
 8002da0:	47c0      	blx	r8
 8002da2:	3001      	adds	r0, #1
 8002da4:	d0e6      	beq.n	8002d74 <_printf_common+0xa8>
 8002da6:	3601      	adds	r6, #1
 8002da8:	e7d9      	b.n	8002d5e <_printf_common+0x92>
	...

08002dac <_printf_i>:
 8002dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002db0:	7e0f      	ldrb	r7, [r1, #24]
 8002db2:	4691      	mov	r9, r2
 8002db4:	2f78      	cmp	r7, #120	; 0x78
 8002db6:	4680      	mov	r8, r0
 8002db8:	460c      	mov	r4, r1
 8002dba:	469a      	mov	sl, r3
 8002dbc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002dbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002dc2:	d807      	bhi.n	8002dd4 <_printf_i+0x28>
 8002dc4:	2f62      	cmp	r7, #98	; 0x62
 8002dc6:	d80a      	bhi.n	8002dde <_printf_i+0x32>
 8002dc8:	2f00      	cmp	r7, #0
 8002dca:	f000 80d9 	beq.w	8002f80 <_printf_i+0x1d4>
 8002dce:	2f58      	cmp	r7, #88	; 0x58
 8002dd0:	f000 80a4 	beq.w	8002f1c <_printf_i+0x170>
 8002dd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002dd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ddc:	e03a      	b.n	8002e54 <_printf_i+0xa8>
 8002dde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002de2:	2b15      	cmp	r3, #21
 8002de4:	d8f6      	bhi.n	8002dd4 <_printf_i+0x28>
 8002de6:	a101      	add	r1, pc, #4	; (adr r1, 8002dec <_printf_i+0x40>)
 8002de8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002dec:	08002e45 	.word	0x08002e45
 8002df0:	08002e59 	.word	0x08002e59
 8002df4:	08002dd5 	.word	0x08002dd5
 8002df8:	08002dd5 	.word	0x08002dd5
 8002dfc:	08002dd5 	.word	0x08002dd5
 8002e00:	08002dd5 	.word	0x08002dd5
 8002e04:	08002e59 	.word	0x08002e59
 8002e08:	08002dd5 	.word	0x08002dd5
 8002e0c:	08002dd5 	.word	0x08002dd5
 8002e10:	08002dd5 	.word	0x08002dd5
 8002e14:	08002dd5 	.word	0x08002dd5
 8002e18:	08002f67 	.word	0x08002f67
 8002e1c:	08002e89 	.word	0x08002e89
 8002e20:	08002f49 	.word	0x08002f49
 8002e24:	08002dd5 	.word	0x08002dd5
 8002e28:	08002dd5 	.word	0x08002dd5
 8002e2c:	08002f89 	.word	0x08002f89
 8002e30:	08002dd5 	.word	0x08002dd5
 8002e34:	08002e89 	.word	0x08002e89
 8002e38:	08002dd5 	.word	0x08002dd5
 8002e3c:	08002dd5 	.word	0x08002dd5
 8002e40:	08002f51 	.word	0x08002f51
 8002e44:	682b      	ldr	r3, [r5, #0]
 8002e46:	1d1a      	adds	r2, r3, #4
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	602a      	str	r2, [r5, #0]
 8002e4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0a4      	b.n	8002fa2 <_printf_i+0x1f6>
 8002e58:	6820      	ldr	r0, [r4, #0]
 8002e5a:	6829      	ldr	r1, [r5, #0]
 8002e5c:	0606      	lsls	r6, r0, #24
 8002e5e:	f101 0304 	add.w	r3, r1, #4
 8002e62:	d50a      	bpl.n	8002e7a <_printf_i+0xce>
 8002e64:	680e      	ldr	r6, [r1, #0]
 8002e66:	602b      	str	r3, [r5, #0]
 8002e68:	2e00      	cmp	r6, #0
 8002e6a:	da03      	bge.n	8002e74 <_printf_i+0xc8>
 8002e6c:	232d      	movs	r3, #45	; 0x2d
 8002e6e:	4276      	negs	r6, r6
 8002e70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e74:	230a      	movs	r3, #10
 8002e76:	485e      	ldr	r0, [pc, #376]	; (8002ff0 <_printf_i+0x244>)
 8002e78:	e019      	b.n	8002eae <_printf_i+0x102>
 8002e7a:	680e      	ldr	r6, [r1, #0]
 8002e7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e80:	602b      	str	r3, [r5, #0]
 8002e82:	bf18      	it	ne
 8002e84:	b236      	sxthne	r6, r6
 8002e86:	e7ef      	b.n	8002e68 <_printf_i+0xbc>
 8002e88:	682b      	ldr	r3, [r5, #0]
 8002e8a:	6820      	ldr	r0, [r4, #0]
 8002e8c:	1d19      	adds	r1, r3, #4
 8002e8e:	6029      	str	r1, [r5, #0]
 8002e90:	0601      	lsls	r1, r0, #24
 8002e92:	d501      	bpl.n	8002e98 <_printf_i+0xec>
 8002e94:	681e      	ldr	r6, [r3, #0]
 8002e96:	e002      	b.n	8002e9e <_printf_i+0xf2>
 8002e98:	0646      	lsls	r6, r0, #25
 8002e9a:	d5fb      	bpl.n	8002e94 <_printf_i+0xe8>
 8002e9c:	881e      	ldrh	r6, [r3, #0]
 8002e9e:	2f6f      	cmp	r7, #111	; 0x6f
 8002ea0:	bf0c      	ite	eq
 8002ea2:	2308      	moveq	r3, #8
 8002ea4:	230a      	movne	r3, #10
 8002ea6:	4852      	ldr	r0, [pc, #328]	; (8002ff0 <_printf_i+0x244>)
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002eae:	6865      	ldr	r5, [r4, #4]
 8002eb0:	2d00      	cmp	r5, #0
 8002eb2:	bfa8      	it	ge
 8002eb4:	6821      	ldrge	r1, [r4, #0]
 8002eb6:	60a5      	str	r5, [r4, #8]
 8002eb8:	bfa4      	itt	ge
 8002eba:	f021 0104 	bicge.w	r1, r1, #4
 8002ebe:	6021      	strge	r1, [r4, #0]
 8002ec0:	b90e      	cbnz	r6, 8002ec6 <_printf_i+0x11a>
 8002ec2:	2d00      	cmp	r5, #0
 8002ec4:	d04d      	beq.n	8002f62 <_printf_i+0x1b6>
 8002ec6:	4615      	mov	r5, r2
 8002ec8:	fbb6 f1f3 	udiv	r1, r6, r3
 8002ecc:	fb03 6711 	mls	r7, r3, r1, r6
 8002ed0:	5dc7      	ldrb	r7, [r0, r7]
 8002ed2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002ed6:	4637      	mov	r7, r6
 8002ed8:	42bb      	cmp	r3, r7
 8002eda:	460e      	mov	r6, r1
 8002edc:	d9f4      	bls.n	8002ec8 <_printf_i+0x11c>
 8002ede:	2b08      	cmp	r3, #8
 8002ee0:	d10b      	bne.n	8002efa <_printf_i+0x14e>
 8002ee2:	6823      	ldr	r3, [r4, #0]
 8002ee4:	07de      	lsls	r6, r3, #31
 8002ee6:	d508      	bpl.n	8002efa <_printf_i+0x14e>
 8002ee8:	6923      	ldr	r3, [r4, #16]
 8002eea:	6861      	ldr	r1, [r4, #4]
 8002eec:	4299      	cmp	r1, r3
 8002eee:	bfde      	ittt	le
 8002ef0:	2330      	movle	r3, #48	; 0x30
 8002ef2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ef6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002efa:	1b52      	subs	r2, r2, r5
 8002efc:	6122      	str	r2, [r4, #16]
 8002efe:	464b      	mov	r3, r9
 8002f00:	4621      	mov	r1, r4
 8002f02:	4640      	mov	r0, r8
 8002f04:	f8cd a000 	str.w	sl, [sp]
 8002f08:	aa03      	add	r2, sp, #12
 8002f0a:	f7ff fedf 	bl	8002ccc <_printf_common>
 8002f0e:	3001      	adds	r0, #1
 8002f10:	d14c      	bne.n	8002fac <_printf_i+0x200>
 8002f12:	f04f 30ff 	mov.w	r0, #4294967295
 8002f16:	b004      	add	sp, #16
 8002f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f1c:	4834      	ldr	r0, [pc, #208]	; (8002ff0 <_printf_i+0x244>)
 8002f1e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002f22:	6829      	ldr	r1, [r5, #0]
 8002f24:	6823      	ldr	r3, [r4, #0]
 8002f26:	f851 6b04 	ldr.w	r6, [r1], #4
 8002f2a:	6029      	str	r1, [r5, #0]
 8002f2c:	061d      	lsls	r5, r3, #24
 8002f2e:	d514      	bpl.n	8002f5a <_printf_i+0x1ae>
 8002f30:	07df      	lsls	r7, r3, #31
 8002f32:	bf44      	itt	mi
 8002f34:	f043 0320 	orrmi.w	r3, r3, #32
 8002f38:	6023      	strmi	r3, [r4, #0]
 8002f3a:	b91e      	cbnz	r6, 8002f44 <_printf_i+0x198>
 8002f3c:	6823      	ldr	r3, [r4, #0]
 8002f3e:	f023 0320 	bic.w	r3, r3, #32
 8002f42:	6023      	str	r3, [r4, #0]
 8002f44:	2310      	movs	r3, #16
 8002f46:	e7af      	b.n	8002ea8 <_printf_i+0xfc>
 8002f48:	6823      	ldr	r3, [r4, #0]
 8002f4a:	f043 0320 	orr.w	r3, r3, #32
 8002f4e:	6023      	str	r3, [r4, #0]
 8002f50:	2378      	movs	r3, #120	; 0x78
 8002f52:	4828      	ldr	r0, [pc, #160]	; (8002ff4 <_printf_i+0x248>)
 8002f54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f58:	e7e3      	b.n	8002f22 <_printf_i+0x176>
 8002f5a:	0659      	lsls	r1, r3, #25
 8002f5c:	bf48      	it	mi
 8002f5e:	b2b6      	uxthmi	r6, r6
 8002f60:	e7e6      	b.n	8002f30 <_printf_i+0x184>
 8002f62:	4615      	mov	r5, r2
 8002f64:	e7bb      	b.n	8002ede <_printf_i+0x132>
 8002f66:	682b      	ldr	r3, [r5, #0]
 8002f68:	6826      	ldr	r6, [r4, #0]
 8002f6a:	1d18      	adds	r0, r3, #4
 8002f6c:	6961      	ldr	r1, [r4, #20]
 8002f6e:	6028      	str	r0, [r5, #0]
 8002f70:	0635      	lsls	r5, r6, #24
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	d501      	bpl.n	8002f7a <_printf_i+0x1ce>
 8002f76:	6019      	str	r1, [r3, #0]
 8002f78:	e002      	b.n	8002f80 <_printf_i+0x1d4>
 8002f7a:	0670      	lsls	r0, r6, #25
 8002f7c:	d5fb      	bpl.n	8002f76 <_printf_i+0x1ca>
 8002f7e:	8019      	strh	r1, [r3, #0]
 8002f80:	2300      	movs	r3, #0
 8002f82:	4615      	mov	r5, r2
 8002f84:	6123      	str	r3, [r4, #16]
 8002f86:	e7ba      	b.n	8002efe <_printf_i+0x152>
 8002f88:	682b      	ldr	r3, [r5, #0]
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	1d1a      	adds	r2, r3, #4
 8002f8e:	602a      	str	r2, [r5, #0]
 8002f90:	681d      	ldr	r5, [r3, #0]
 8002f92:	6862      	ldr	r2, [r4, #4]
 8002f94:	4628      	mov	r0, r5
 8002f96:	f000 f8d9 	bl	800314c <memchr>
 8002f9a:	b108      	cbz	r0, 8002fa0 <_printf_i+0x1f4>
 8002f9c:	1b40      	subs	r0, r0, r5
 8002f9e:	6060      	str	r0, [r4, #4]
 8002fa0:	6863      	ldr	r3, [r4, #4]
 8002fa2:	6123      	str	r3, [r4, #16]
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002faa:	e7a8      	b.n	8002efe <_printf_i+0x152>
 8002fac:	462a      	mov	r2, r5
 8002fae:	4649      	mov	r1, r9
 8002fb0:	4640      	mov	r0, r8
 8002fb2:	6923      	ldr	r3, [r4, #16]
 8002fb4:	47d0      	blx	sl
 8002fb6:	3001      	adds	r0, #1
 8002fb8:	d0ab      	beq.n	8002f12 <_printf_i+0x166>
 8002fba:	6823      	ldr	r3, [r4, #0]
 8002fbc:	079b      	lsls	r3, r3, #30
 8002fbe:	d413      	bmi.n	8002fe8 <_printf_i+0x23c>
 8002fc0:	68e0      	ldr	r0, [r4, #12]
 8002fc2:	9b03      	ldr	r3, [sp, #12]
 8002fc4:	4298      	cmp	r0, r3
 8002fc6:	bfb8      	it	lt
 8002fc8:	4618      	movlt	r0, r3
 8002fca:	e7a4      	b.n	8002f16 <_printf_i+0x16a>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	4632      	mov	r2, r6
 8002fd0:	4649      	mov	r1, r9
 8002fd2:	4640      	mov	r0, r8
 8002fd4:	47d0      	blx	sl
 8002fd6:	3001      	adds	r0, #1
 8002fd8:	d09b      	beq.n	8002f12 <_printf_i+0x166>
 8002fda:	3501      	adds	r5, #1
 8002fdc:	68e3      	ldr	r3, [r4, #12]
 8002fde:	9903      	ldr	r1, [sp, #12]
 8002fe0:	1a5b      	subs	r3, r3, r1
 8002fe2:	42ab      	cmp	r3, r5
 8002fe4:	dcf2      	bgt.n	8002fcc <_printf_i+0x220>
 8002fe6:	e7eb      	b.n	8002fc0 <_printf_i+0x214>
 8002fe8:	2500      	movs	r5, #0
 8002fea:	f104 0619 	add.w	r6, r4, #25
 8002fee:	e7f5      	b.n	8002fdc <_printf_i+0x230>
 8002ff0:	080032d1 	.word	0x080032d1
 8002ff4:	080032e2 	.word	0x080032e2

08002ff8 <_sbrk_r>:
 8002ff8:	b538      	push	{r3, r4, r5, lr}
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	4d05      	ldr	r5, [pc, #20]	; (8003014 <_sbrk_r+0x1c>)
 8002ffe:	4604      	mov	r4, r0
 8003000:	4608      	mov	r0, r1
 8003002:	602b      	str	r3, [r5, #0]
 8003004:	f7fd fa08 	bl	8000418 <_sbrk>
 8003008:	1c43      	adds	r3, r0, #1
 800300a:	d102      	bne.n	8003012 <_sbrk_r+0x1a>
 800300c:	682b      	ldr	r3, [r5, #0]
 800300e:	b103      	cbz	r3, 8003012 <_sbrk_r+0x1a>
 8003010:	6023      	str	r3, [r4, #0]
 8003012:	bd38      	pop	{r3, r4, r5, pc}
 8003014:	20000ef0 	.word	0x20000ef0

08003018 <__sread>:
 8003018:	b510      	push	{r4, lr}
 800301a:	460c      	mov	r4, r1
 800301c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003020:	f000 f8ae 	bl	8003180 <_read_r>
 8003024:	2800      	cmp	r0, #0
 8003026:	bfab      	itete	ge
 8003028:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800302a:	89a3      	ldrhlt	r3, [r4, #12]
 800302c:	181b      	addge	r3, r3, r0
 800302e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003032:	bfac      	ite	ge
 8003034:	6563      	strge	r3, [r4, #84]	; 0x54
 8003036:	81a3      	strhlt	r3, [r4, #12]
 8003038:	bd10      	pop	{r4, pc}

0800303a <__swrite>:
 800303a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800303e:	461f      	mov	r7, r3
 8003040:	898b      	ldrh	r3, [r1, #12]
 8003042:	4605      	mov	r5, r0
 8003044:	05db      	lsls	r3, r3, #23
 8003046:	460c      	mov	r4, r1
 8003048:	4616      	mov	r6, r2
 800304a:	d505      	bpl.n	8003058 <__swrite+0x1e>
 800304c:	2302      	movs	r3, #2
 800304e:	2200      	movs	r2, #0
 8003050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003054:	f000 f868 	bl	8003128 <_lseek_r>
 8003058:	89a3      	ldrh	r3, [r4, #12]
 800305a:	4632      	mov	r2, r6
 800305c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003060:	81a3      	strh	r3, [r4, #12]
 8003062:	4628      	mov	r0, r5
 8003064:	463b      	mov	r3, r7
 8003066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800306a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800306e:	f000 b817 	b.w	80030a0 <_write_r>

08003072 <__sseek>:
 8003072:	b510      	push	{r4, lr}
 8003074:	460c      	mov	r4, r1
 8003076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800307a:	f000 f855 	bl	8003128 <_lseek_r>
 800307e:	1c43      	adds	r3, r0, #1
 8003080:	89a3      	ldrh	r3, [r4, #12]
 8003082:	bf15      	itete	ne
 8003084:	6560      	strne	r0, [r4, #84]	; 0x54
 8003086:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800308a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800308e:	81a3      	strheq	r3, [r4, #12]
 8003090:	bf18      	it	ne
 8003092:	81a3      	strhne	r3, [r4, #12]
 8003094:	bd10      	pop	{r4, pc}

08003096 <__sclose>:
 8003096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800309a:	f000 b813 	b.w	80030c4 <_close_r>
	...

080030a0 <_write_r>:
 80030a0:	b538      	push	{r3, r4, r5, lr}
 80030a2:	4604      	mov	r4, r0
 80030a4:	4608      	mov	r0, r1
 80030a6:	4611      	mov	r1, r2
 80030a8:	2200      	movs	r2, #0
 80030aa:	4d05      	ldr	r5, [pc, #20]	; (80030c0 <_write_r+0x20>)
 80030ac:	602a      	str	r2, [r5, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	f7fd fe44 	bl	8000d3c <_write>
 80030b4:	1c43      	adds	r3, r0, #1
 80030b6:	d102      	bne.n	80030be <_write_r+0x1e>
 80030b8:	682b      	ldr	r3, [r5, #0]
 80030ba:	b103      	cbz	r3, 80030be <_write_r+0x1e>
 80030bc:	6023      	str	r3, [r4, #0]
 80030be:	bd38      	pop	{r3, r4, r5, pc}
 80030c0:	20000ef0 	.word	0x20000ef0

080030c4 <_close_r>:
 80030c4:	b538      	push	{r3, r4, r5, lr}
 80030c6:	2300      	movs	r3, #0
 80030c8:	4d05      	ldr	r5, [pc, #20]	; (80030e0 <_close_r+0x1c>)
 80030ca:	4604      	mov	r4, r0
 80030cc:	4608      	mov	r0, r1
 80030ce:	602b      	str	r3, [r5, #0]
 80030d0:	f7fd f971 	bl	80003b6 <_close>
 80030d4:	1c43      	adds	r3, r0, #1
 80030d6:	d102      	bne.n	80030de <_close_r+0x1a>
 80030d8:	682b      	ldr	r3, [r5, #0]
 80030da:	b103      	cbz	r3, 80030de <_close_r+0x1a>
 80030dc:	6023      	str	r3, [r4, #0]
 80030de:	bd38      	pop	{r3, r4, r5, pc}
 80030e0:	20000ef0 	.word	0x20000ef0

080030e4 <_fstat_r>:
 80030e4:	b538      	push	{r3, r4, r5, lr}
 80030e6:	2300      	movs	r3, #0
 80030e8:	4d06      	ldr	r5, [pc, #24]	; (8003104 <_fstat_r+0x20>)
 80030ea:	4604      	mov	r4, r0
 80030ec:	4608      	mov	r0, r1
 80030ee:	4611      	mov	r1, r2
 80030f0:	602b      	str	r3, [r5, #0]
 80030f2:	f7fd f96b 	bl	80003cc <_fstat>
 80030f6:	1c43      	adds	r3, r0, #1
 80030f8:	d102      	bne.n	8003100 <_fstat_r+0x1c>
 80030fa:	682b      	ldr	r3, [r5, #0]
 80030fc:	b103      	cbz	r3, 8003100 <_fstat_r+0x1c>
 80030fe:	6023      	str	r3, [r4, #0]
 8003100:	bd38      	pop	{r3, r4, r5, pc}
 8003102:	bf00      	nop
 8003104:	20000ef0 	.word	0x20000ef0

08003108 <_isatty_r>:
 8003108:	b538      	push	{r3, r4, r5, lr}
 800310a:	2300      	movs	r3, #0
 800310c:	4d05      	ldr	r5, [pc, #20]	; (8003124 <_isatty_r+0x1c>)
 800310e:	4604      	mov	r4, r0
 8003110:	4608      	mov	r0, r1
 8003112:	602b      	str	r3, [r5, #0]
 8003114:	f7fd f969 	bl	80003ea <_isatty>
 8003118:	1c43      	adds	r3, r0, #1
 800311a:	d102      	bne.n	8003122 <_isatty_r+0x1a>
 800311c:	682b      	ldr	r3, [r5, #0]
 800311e:	b103      	cbz	r3, 8003122 <_isatty_r+0x1a>
 8003120:	6023      	str	r3, [r4, #0]
 8003122:	bd38      	pop	{r3, r4, r5, pc}
 8003124:	20000ef0 	.word	0x20000ef0

08003128 <_lseek_r>:
 8003128:	b538      	push	{r3, r4, r5, lr}
 800312a:	4604      	mov	r4, r0
 800312c:	4608      	mov	r0, r1
 800312e:	4611      	mov	r1, r2
 8003130:	2200      	movs	r2, #0
 8003132:	4d05      	ldr	r5, [pc, #20]	; (8003148 <_lseek_r+0x20>)
 8003134:	602a      	str	r2, [r5, #0]
 8003136:	461a      	mov	r2, r3
 8003138:	f7fd f961 	bl	80003fe <_lseek>
 800313c:	1c43      	adds	r3, r0, #1
 800313e:	d102      	bne.n	8003146 <_lseek_r+0x1e>
 8003140:	682b      	ldr	r3, [r5, #0]
 8003142:	b103      	cbz	r3, 8003146 <_lseek_r+0x1e>
 8003144:	6023      	str	r3, [r4, #0]
 8003146:	bd38      	pop	{r3, r4, r5, pc}
 8003148:	20000ef0 	.word	0x20000ef0

0800314c <memchr>:
 800314c:	4603      	mov	r3, r0
 800314e:	b510      	push	{r4, lr}
 8003150:	b2c9      	uxtb	r1, r1
 8003152:	4402      	add	r2, r0
 8003154:	4293      	cmp	r3, r2
 8003156:	4618      	mov	r0, r3
 8003158:	d101      	bne.n	800315e <memchr+0x12>
 800315a:	2000      	movs	r0, #0
 800315c:	e003      	b.n	8003166 <memchr+0x1a>
 800315e:	7804      	ldrb	r4, [r0, #0]
 8003160:	3301      	adds	r3, #1
 8003162:	428c      	cmp	r4, r1
 8003164:	d1f6      	bne.n	8003154 <memchr+0x8>
 8003166:	bd10      	pop	{r4, pc}

08003168 <__malloc_lock>:
 8003168:	4801      	ldr	r0, [pc, #4]	; (8003170 <__malloc_lock+0x8>)
 800316a:	f7ff bb13 	b.w	8002794 <__retarget_lock_acquire_recursive>
 800316e:	bf00      	nop
 8003170:	20000ee4 	.word	0x20000ee4

08003174 <__malloc_unlock>:
 8003174:	4801      	ldr	r0, [pc, #4]	; (800317c <__malloc_unlock+0x8>)
 8003176:	f7ff bb0e 	b.w	8002796 <__retarget_lock_release_recursive>
 800317a:	bf00      	nop
 800317c:	20000ee4 	.word	0x20000ee4

08003180 <_read_r>:
 8003180:	b538      	push	{r3, r4, r5, lr}
 8003182:	4604      	mov	r4, r0
 8003184:	4608      	mov	r0, r1
 8003186:	4611      	mov	r1, r2
 8003188:	2200      	movs	r2, #0
 800318a:	4d05      	ldr	r5, [pc, #20]	; (80031a0 <_read_r+0x20>)
 800318c:	602a      	str	r2, [r5, #0]
 800318e:	461a      	mov	r2, r3
 8003190:	f7fd f8f4 	bl	800037c <_read>
 8003194:	1c43      	adds	r3, r0, #1
 8003196:	d102      	bne.n	800319e <_read_r+0x1e>
 8003198:	682b      	ldr	r3, [r5, #0]
 800319a:	b103      	cbz	r3, 800319e <_read_r+0x1e>
 800319c:	6023      	str	r3, [r4, #0]
 800319e:	bd38      	pop	{r3, r4, r5, pc}
 80031a0:	20000ef0 	.word	0x20000ef0

080031a4 <_init>:
 80031a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a6:	bf00      	nop
 80031a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031aa:	bc08      	pop	{r3}
 80031ac:	469e      	mov	lr, r3
 80031ae:	4770      	bx	lr

080031b0 <_fini>:
 80031b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b2:	bf00      	nop
 80031b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031b6:	bc08      	pop	{r3}
 80031b8:	469e      	mov	lr, r3
 80031ba:	4770      	bx	lr
