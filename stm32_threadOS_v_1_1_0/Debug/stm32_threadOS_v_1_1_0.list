
stm32_threadOS_v_1_1_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ef0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08003ffc  08003ffc  00013ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004158  08004158  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  08004158  08004158  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004158  08004158  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004158  08004158  00014158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800415c  0800415c  0001415c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08004160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e3c  200000b0  08004210  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000eec  08004210  00020eec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008702  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a42  00000000  00000000  000287db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d0  00000000  00000000  0002a220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  0002a9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d9a  00000000  00000000  0002b118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000092a4  00000000  00000000  00042eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008432c  00000000  00000000  0004c156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0482  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002908  00000000  00000000  000d04d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b0 	.word	0x200000b0
 8000128:	00000000 	.word	0x00000000
 800012c:	08003fe4 	.word	0x08003fe4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b4 	.word	0x200000b4
 8000148:	08003fe4 	.word	0x08003fe4

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__gedf2>:
 80008e8:	f04f 3cff 	mov.w	ip, #4294967295
 80008ec:	e006      	b.n	80008fc <__cmpdf2+0x4>
 80008ee:	bf00      	nop

080008f0 <__ledf2>:
 80008f0:	f04f 0c01 	mov.w	ip, #1
 80008f4:	e002      	b.n	80008fc <__cmpdf2+0x4>
 80008f6:	bf00      	nop

080008f8 <__cmpdf2>:
 80008f8:	f04f 0c01 	mov.w	ip, #1
 80008fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800090c:	bf18      	it	ne
 800090e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000912:	d01b      	beq.n	800094c <__cmpdf2+0x54>
 8000914:	b001      	add	sp, #4
 8000916:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091a:	bf0c      	ite	eq
 800091c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000920:	ea91 0f03 	teqne	r1, r3
 8000924:	bf02      	ittt	eq
 8000926:	ea90 0f02 	teqeq	r0, r2
 800092a:	2000      	moveq	r0, #0
 800092c:	4770      	bxeq	lr
 800092e:	f110 0f00 	cmn.w	r0, #0
 8000932:	ea91 0f03 	teq	r1, r3
 8000936:	bf58      	it	pl
 8000938:	4299      	cmppl	r1, r3
 800093a:	bf08      	it	eq
 800093c:	4290      	cmpeq	r0, r2
 800093e:	bf2c      	ite	cs
 8000940:	17d8      	asrcs	r0, r3, #31
 8000942:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000946:	f040 0001 	orr.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000954:	d102      	bne.n	800095c <__cmpdf2+0x64>
 8000956:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095a:	d107      	bne.n	800096c <__cmpdf2+0x74>
 800095c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d1d6      	bne.n	8000914 <__cmpdf2+0x1c>
 8000966:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096a:	d0d3      	beq.n	8000914 <__cmpdf2+0x1c>
 800096c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <__aeabi_cdrcmple>:
 8000974:	4684      	mov	ip, r0
 8000976:	4610      	mov	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	468c      	mov	ip, r1
 800097c:	4619      	mov	r1, r3
 800097e:	4663      	mov	r3, ip
 8000980:	e000      	b.n	8000984 <__aeabi_cdcmpeq>
 8000982:	bf00      	nop

08000984 <__aeabi_cdcmpeq>:
 8000984:	b501      	push	{r0, lr}
 8000986:	f7ff ffb7 	bl	80008f8 <__cmpdf2>
 800098a:	2800      	cmp	r0, #0
 800098c:	bf48      	it	mi
 800098e:	f110 0f00 	cmnmi.w	r0, #0
 8000992:	bd01      	pop	{r0, pc}

08000994 <__aeabi_dcmpeq>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff fff4 	bl	8000984 <__aeabi_cdcmpeq>
 800099c:	bf0c      	ite	eq
 800099e:	2001      	moveq	r0, #1
 80009a0:	2000      	movne	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmplt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffea 	bl	8000984 <__aeabi_cdcmpeq>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmple>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffe0 	bl	8000984 <__aeabi_cdcmpeq>
 80009c4:	bf94      	ite	ls
 80009c6:	2001      	movls	r0, #1
 80009c8:	2000      	movhi	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmpge>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffce 	bl	8000974 <__aeabi_cdrcmple>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpgt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffc4 	bl	8000974 <__aeabi_cdrcmple>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpun>:
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d102      	bne.n	8000a08 <__aeabi_dcmpun+0x10>
 8000a02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a06:	d10a      	bne.n	8000a1e <__aeabi_dcmpun+0x26>
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__aeabi_dcmpun+0x20>
 8000a12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a16:	d102      	bne.n	8000a1e <__aeabi_dcmpun+0x26>
 8000a18:	f04f 0000 	mov.w	r0, #0
 8000a1c:	4770      	bx	lr
 8000a1e:	f04f 0001 	mov.w	r0, #1
 8000a22:	4770      	bx	lr

08000a24 <__aeabi_d2iz>:
 8000a24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a2c:	d215      	bcs.n	8000a5a <__aeabi_d2iz+0x36>
 8000a2e:	d511      	bpl.n	8000a54 <__aeabi_d2iz+0x30>
 8000a30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a38:	d912      	bls.n	8000a60 <__aeabi_d2iz+0x3c>
 8000a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	bf18      	it	ne
 8000a50:	4240      	negne	r0, r0
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d105      	bne.n	8000a6c <__aeabi_d2iz+0x48>
 8000a60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a64:	bf08      	it	eq
 8000a66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a78:	f001 f85c 	bl	8001b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7c:	f000 f807 	bl	8000a8e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a80:	f000 f874 	bl	8000b6c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000a84:	f000 f848 	bl	8000b18 <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  extern void run();
  run();
 8000a88:	f000 fbe0 	bl	800124c <run>
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <main+0x18>

08000a8e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b090      	sub	sp, #64	; 0x40
 8000a92:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a94:	f107 0318 	add.w	r3, r7, #24
 8000a98:	2228      	movs	r2, #40	; 0x28
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f002 f961 	bl	8002d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ab4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ab8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000aba:	2300      	movs	r3, #0
 8000abc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000acc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad2:	f107 0318 	add.w	r3, r7, #24
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 fb32 	bl	8002140 <HAL_RCC_OscConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ae2:	f000 f883 	bl	8000bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae6:	230f      	movs	r3, #15
 8000ae8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aea:	2302      	movs	r3, #2
 8000aec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000af6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2102      	movs	r1, #2
 8000b00:	4618      	mov	r0, r3
 8000b02:	f001 fd9f 	bl	8002644 <HAL_RCC_ClockConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b0c:	f000 f86e 	bl	8000bec <Error_Handler>
  }
}
 8000b10:	bf00      	nop
 8000b12:	3740      	adds	r7, #64	; 0x40
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b1e:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <MX_USART1_UART_Init+0x50>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b50:	f001 ff06 	bl	8002960 <HAL_HalfDuplex_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b5a:	f000 f847 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200000cc 	.word	0x200000cc
 8000b68:	40013800 	.word	0x40013800

08000b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b72:	f107 0308 	add.w	r3, r7, #8
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b80:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <MX_GPIO_Init+0x78>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	4a17      	ldr	r2, [pc, #92]	; (8000be4 <MX_GPIO_Init+0x78>)
 8000b86:	f043 0320 	orr.w	r3, r3, #32
 8000b8a:	6193      	str	r3, [r2, #24]
 8000b8c:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <MX_GPIO_Init+0x78>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	f003 0320 	and.w	r3, r3, #32
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <MX_GPIO_Init+0x78>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a11      	ldr	r2, [pc, #68]	; (8000be4 <MX_GPIO_Init+0x78>)
 8000b9e:	f043 0304 	orr.w	r3, r3, #4
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <MX_GPIO_Init+0x78>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f003 0304 	and.w	r3, r3, #4
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb6:	480c      	ldr	r0, [pc, #48]	; (8000be8 <MX_GPIO_Init+0x7c>)
 8000bb8:	f001 faaa 	bl	8002110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <MX_GPIO_Init+0x7c>)
 8000bd6:	f001 f917 	bl	8001e08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bda:	bf00      	nop
 8000bdc:	3718      	adds	r7, #24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40021000 	.word	0x40021000
 8000be8:	40010800 	.word	0x40010800

08000bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
}
 8000bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <Error_Handler+0x8>
	...

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <HAL_MspInit+0x40>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	4a0d      	ldr	r2, [pc, #52]	; (8000c38 <HAL_MspInit+0x40>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6193      	str	r3, [r2, #24]
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <HAL_MspInit+0x40>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <HAL_MspInit+0x40>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <HAL_MspInit+0x40>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c20:	61d3      	str	r3, [r2, #28]
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <HAL_MspInit+0x40>)
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr
 8000c38:	40021000 	.word	0x40021000

08000c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a16      	ldr	r2, [pc, #88]	; (8000cb0 <HAL_UART_MspInit+0x74>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d124      	bne.n	8000ca6 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c5c:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <HAL_UART_MspInit+0x78>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a14      	ldr	r2, [pc, #80]	; (8000cb4 <HAL_UART_MspInit+0x78>)
 8000c62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_UART_MspInit+0x78>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <HAL_UART_MspInit+0x78>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <HAL_UART_MspInit+0x78>)
 8000c7a:	f043 0304 	orr.w	r3, r3, #4
 8000c7e:	6193      	str	r3, [r2, #24]
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <HAL_UART_MspInit+0x78>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	f003 0304 	and.w	r3, r3, #4
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c92:	2312      	movs	r3, #18
 8000c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f107 0310 	add.w	r3, r7, #16
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <HAL_UART_MspInit+0x7c>)
 8000ca2:	f001 f8b1 	bl	8001e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ca6:	bf00      	nop
 8000ca8:	3720      	adds	r7, #32
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40013800 	.word	0x40013800
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	40010800 	.word	0x40010800

08000cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000cc0:	e7fe      	b.n	8000cc0 <NMI_Handler+0x4>

08000cc2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <MemManage_Handler+0x4>

08000cc8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <BusFault_Handler+0x4>

08000cce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <UsageFault_Handler+0x4>

08000cd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr

08000ce0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	e00a      	b.n	8000d08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cf2:	f3af 8000 	nop.w
 8000cf6:	4601      	mov	r1, r0
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	1c5a      	adds	r2, r3, #1
 8000cfc:	60ba      	str	r2, [r7, #8]
 8000cfe:	b2ca      	uxtb	r2, r1
 8000d00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	3301      	adds	r3, #1
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697a      	ldr	r2, [r7, #20]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	dbf0      	blt.n	8000cf2 <_read+0x12>
  }

  return len;
 8000d10:	687b      	ldr	r3, [r7, #4]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr

08000d30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d40:	605a      	str	r2, [r3, #4]
  return 0;
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr

08000d4e <_isatty>:

int _isatty(int file)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr

08000d62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b085      	sub	sp, #20
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	60f8      	str	r0, [r7, #12]
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d6e:	2300      	movs	r3, #0
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
	...

08000d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d84:	4a14      	ldr	r2, [pc, #80]	; (8000dd8 <_sbrk+0x5c>)
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <_sbrk+0x60>)
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d102      	bne.n	8000d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <_sbrk+0x64>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <_sbrk+0x68>)
 8000d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d207      	bcs.n	8000dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dac:	f001 ffb0 	bl	8002d10 <__errno>
 8000db0:	4603      	mov	r3, r0
 8000db2:	220c      	movs	r2, #12
 8000db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dba:	e009      	b.n	8000dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc2:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <_sbrk+0x64>)
 8000dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dce:	68fb      	ldr	r3, [r7, #12]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20005000 	.word	0x20005000
 8000ddc:	00000400 	.word	0x00000400
 8000de0:	20000114 	.word	0x20000114
 8000de4:	20000ef0 	.word	0x20000ef0

08000de8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000df4:	f7ff fff8 	bl	8000de8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df8:	480b      	ldr	r0, [pc, #44]	; (8000e28 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000dfa:	490c      	ldr	r1, [pc, #48]	; (8000e2c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000dfc:	4a0c      	ldr	r2, [pc, #48]	; (8000e30 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e00:	e002      	b.n	8000e08 <LoopCopyDataInit>

08000e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e06:	3304      	adds	r3, #4

08000e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e0c:	d3f9      	bcc.n	8000e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0e:	4a09      	ldr	r2, [pc, #36]	; (8000e34 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e10:	4c09      	ldr	r4, [pc, #36]	; (8000e38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e14:	e001      	b.n	8000e1a <LoopFillZerobss>

08000e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e18:	3204      	adds	r2, #4

08000e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e1c:	d3fb      	bcc.n	8000e16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f001 ff7d 	bl	8002d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e22:	f7ff fe27 	bl	8000a74 <main>
  bx lr
 8000e26:	4770      	bx	lr
  ldr r0, =_sdata
 8000e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e2c:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8000e30:	08004160 	.word	0x08004160
  ldr r2, =_sbss
 8000e34:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8000e38:	20000eec 	.word	0x20000eec

08000e3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC1_2_IRQHandler>
	...

08000e40 <_write>:
#include "stdarg.h"
#include "math.h"

extern UART_HandleTypeDef huart1;

int _write(int file, char *data, int len) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
	StaticThread.mutexLock();
 8000e4c:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <_write+0x34>)
 8000e4e:	6a1b      	ldr	r3, [r3, #32]
 8000e50:	4798      	blx	r3
	HAL_UART_Transmit(&huart1, (uint8_t*) data, len, HAL_MAX_DELAY);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5a:	68b9      	ldr	r1, [r7, #8]
 8000e5c:	4806      	ldr	r0, [pc, #24]	; (8000e78 <_write+0x38>)
 8000e5e:	f001 fdd7 	bl	8002a10 <HAL_UART_Transmit>
	StaticThread.mutexUnlock();
 8000e62:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <_write+0x34>)
 8000e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e66:	4798      	blx	r3
	return len;
 8000e68:	687b      	ldr	r3, [r7, #4]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000008 	.word	0x20000008
 8000e78:	200000cc 	.word	0x200000cc

08000e7c <HardFault_Handler>:

///////////////////////////HANDLER///////////////////////
void HardFault_Handler(void) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	printf("Hard Fault\n");
 8000e80:	4801      	ldr	r0, [pc, #4]	; (8000e88 <HardFault_Handler+0xc>)
 8000e82:	f001 fff9 	bl	8002e78 <puts>
	while (1) {
 8000e86:	e7fe      	b.n	8000e86 <HardFault_Handler+0xa>
 8000e88:	08003ffc 	.word	0x08003ffc

08000e8c <SVC_Handler>:

	}
}

void SVC_Handler(void) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	StaticThread.SVCHandler();
 8000e90:	4b02      	ldr	r3, [pc, #8]	; (8000e9c <SVC_Handler+0x10>)
 8000e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e94:	4798      	blx	r3
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008

08000ea0 <PendSV_Handler>:

void PendSV_Handler(void) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	StaticThread.PendSVHandler();
 8000ea4:	4b02      	ldr	r3, [pc, #8]	; (8000eb0 <PendSV_Handler+0x10>)
 8000ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ea8:	4798      	blx	r3
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000008 	.word	0x20000008

08000eb4 <SysTick_Handler>:

void SysTick_Handler(void) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000eb8:	f000 fe82 	bl	8001bc0 <HAL_IncTick>
	StaticThread.SysTickHandler();
 8000ebc:	4b02      	ldr	r3, [pc, #8]	; (8000ec8 <SysTick_Handler+0x14>)
 8000ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ec0:	4798      	blx	r3
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000008 	.word	0x20000008

08000ecc <isPrime>:

////////////////////////////CALC/////////////////////////////////
int isPrime(int number){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
    if(number==2)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d101      	bne.n	8000ede <isPrime+0x12>
        return 1;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e031      	b.n	8000f42 <isPrime+0x76>
    // if(startingNumber<2)
    //     startingNumber = 2;
    if(number<2 || (number%2==0))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	dd04      	ble.n	8000eee <isPrime+0x22>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d101      	bne.n	8000ef2 <isPrime+0x26>
        return 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	e027      	b.n	8000f42 <isPrime+0x76>
    int sqrRoot = (int)sqrt(number);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff fa7c 	bl	80003f0 <__aeabi_i2d>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	460b      	mov	r3, r1
 8000efc:	4610      	mov	r0, r2
 8000efe:	4619      	mov	r1, r3
 8000f00:	f002 ff9c 	bl	8003e3c <sqrt>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	4610      	mov	r0, r2
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f7ff fd8a 	bl	8000a24 <__aeabi_d2iz>
 8000f10:	4603      	mov	r3, r0
 8000f12:	60bb      	str	r3, [r7, #8]
    for(int n=3;n<=sqrRoot;n++){
 8000f14:	2303      	movs	r3, #3
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	e00e      	b.n	8000f38 <isPrime+0x6c>
        if(number%n==0)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	fb93 f2f2 	sdiv	r2, r3, r2
 8000f22:	68f9      	ldr	r1, [r7, #12]
 8000f24:	fb01 f202 	mul.w	r2, r1, r2
 8000f28:	1a9b      	subs	r3, r3, r2
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <isPrime+0x66>
            return 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e007      	b.n	8000f42 <isPrime+0x76>
    for(int n=3;n<=sqrRoot;n++){
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	3301      	adds	r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	ddec      	ble.n	8000f1a <isPrime+0x4e>
    }
    return 1;
 8000f40:	2301      	movs	r3, #1
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <getNPrime>:

int getNPrime(int n){
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b084      	sub	sp, #16
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
    int countPrime = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
    int number = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
    while(1){
        if(isPrime(number)){
 8000f5a:	68b8      	ldr	r0, [r7, #8]
 8000f5c:	f7ff ffb6 	bl	8000ecc <isPrime>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d008      	beq.n	8000f78 <getNPrime+0x2e>
            countPrime++;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
            if(countPrime==n)
 8000f6c:	68fa      	ldr	r2, [r7, #12]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d101      	bne.n	8000f78 <getNPrime+0x2e>
                return number;
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	e003      	b.n	8000f80 <getNPrime+0x36>
        }
        number++;
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	60bb      	str	r3, [r7, #8]
        if(isPrime(number)){
 8000f7e:	e7ec      	b.n	8000f5a <getNPrime+0x10>
    }
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <isPallindrome>:

int isPallindrome(int n){
 8000f88:	b480      	push	{r7}
 8000f8a:	b087      	sub	sp, #28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
    int temp = n;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	617b      	str	r3, [r7, #20]
    int rev = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	613b      	str	r3, [r7, #16]
    while(temp!=0){
 8000f98:	e01d      	b.n	8000fd6 <isPallindrome+0x4e>
        int r = temp%10;
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <isPallindrome+0x6c>)
 8000f9e:	fb83 1302 	smull	r1, r3, r3, r2
 8000fa2:	1099      	asrs	r1, r3, #2
 8000fa4:	17d3      	asrs	r3, r2, #31
 8000fa6:	1ac9      	subs	r1, r1, r3
 8000fa8:	460b      	mov	r3, r1
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	440b      	add	r3, r1
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	60fb      	str	r3, [r7, #12]
        rev = 10*rev+r;
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        temp/=10;
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <isPallindrome+0x6c>)
 8000fca:	fb82 1203 	smull	r1, r2, r2, r3
 8000fce:	1092      	asrs	r2, r2, #2
 8000fd0:	17db      	asrs	r3, r3, #31
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	617b      	str	r3, [r7, #20]
    while(temp!=0){
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1de      	bne.n	8000f9a <isPallindrome+0x12>
    }
    if(n==rev)
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d101      	bne.n	8000fe8 <isPallindrome+0x60>
        return 1;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e000      	b.n	8000fea <isPallindrome+0x62>
    else
        return 0;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	371c      	adds	r7, #28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	66666667 	.word	0x66666667

08000ff8 <getNPallindrome>:

int getNPallindrome(int n){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
   int countPall = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
   int num = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
   while(1){
       if(isPallindrome(num)){
 8001008:	68b8      	ldr	r0, [r7, #8]
 800100a:	f7ff ffbd 	bl	8000f88 <isPallindrome>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d008      	beq.n	8001026 <getNPallindrome+0x2e>
    	   countPall++;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	3301      	adds	r3, #1
 8001018:	60fb      	str	r3, [r7, #12]
    	   if(countPall == n)
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	429a      	cmp	r2, r3
 8001020:	d101      	bne.n	8001026 <getNPallindrome+0x2e>
    		   return num;
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	e003      	b.n	800102e <getNPallindrome+0x36>

       }
        num++;
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	3301      	adds	r3, #1
 800102a:	60bb      	str	r3, [r7, #8]
       if(isPallindrome(num)){
 800102c:	e7ec      	b.n	8001008 <getNPallindrome+0x10>
   }
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <taskPrime>:
	START,
	CALCULATING,
	COMPLETED
}STATUS;

void taskPrime(int argLen, void **args){
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
	int n = *(int*)args[2];
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	3308      	adds	r3, #8
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	60fb      	str	r3, [r7, #12]
	STATUS *statusPtr = args[0];
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	60bb      	str	r3, [r7, #8]
	statusPtr[0] = CALCULATING;
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
	*(int*)args[1] = getNPrime(n);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	3304      	adds	r3, #4
 800105c:	681c      	ldr	r4, [r3, #0]
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f7ff ff73 	bl	8000f4a <getNPrime>
 8001064:	4603      	mov	r3, r0
 8001066:	6023      	str	r3, [r4, #0]
	statusPtr[0] = COMPLETED;
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	2202      	movs	r2, #2
 800106c:	701a      	strb	r2, [r3, #0]
	StaticThread.delete(0);
 800106e:	4b04      	ldr	r3, [pc, #16]	; (8001080 <taskPrime+0x48>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	2000      	movs	r0, #0
 8001074:	4798      	blx	r3
}
 8001076:	bf00      	nop
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	bd90      	pop	{r4, r7, pc}
 800107e:	bf00      	nop
 8001080:	20000008 	.word	0x20000008

08001084 <taskPallindrome>:

void taskPallindrome(int argLen, void **args){
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
	int *n = args[2];
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	617b      	str	r3, [r7, #20]
	STATUS *statusPtr = args[0];
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	613b      	str	r3, [r7, #16]
	int *pallinPtr = args[1];
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	60fb      	str	r3, [r7, #12]
	statusPtr[0] = CALCULATING;
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	2201      	movs	r2, #1
 80010a4:	701a      	strb	r2, [r3, #0]
	pallinPtr[0] = getNPallindrome(n[0]);
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff ffa4 	bl	8000ff8 <getNPallindrome>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	601a      	str	r2, [r3, #0]
	statusPtr[0] = COMPLETED;
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	2202      	movs	r2, #2
 80010ba:	701a      	strb	r2, [r3, #0]
	StaticThread.delete(0);
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <taskPallindrome+0x48>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	2000      	movs	r0, #0
 80010c2:	4798      	blx	r3
}
 80010c4:	bf00      	nop
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000008 	.word	0x20000008

080010d0 <task1>:

void task1(int argLen, void **args){
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b091      	sub	sp, #68	; 0x44
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
	int n =1; //&n=0x20->1
 80010da:	2301      	movs	r3, #1
 80010dc:	637b      	str	r3, [r7, #52]	; 0x34

	int primeStatus = START;
 80010de:	2300      	movs	r3, #0
 80010e0:	633b      	str	r3, [r7, #48]	; 0x30
	int primeCalculated = -1;
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	void *primeArgs[3] = {&primeStatus, &primeCalculated, &n};
 80010e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010ec:	623b      	str	r3, [r7, #32]
 80010ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
 80010f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28

	int pallinStatus = START;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
	int pallinCalculated = -1;
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001102:	61bb      	str	r3, [r7, #24]
	void *pallinArgs[3] = {&pallinStatus, &pallinCalculated, &n};
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	f107 0318 	add.w	r3, r7, #24
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001114:	617b      	str	r3, [r7, #20]

	while(1){
		if(primeStatus == START){
 8001116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001118:	2b00      	cmp	r3, #0
 800111a:	d10e      	bne.n	800113a <task1+0x6a>
			StaticThread.new(taskPrime,stackPrime, sizeof(stackPrime)/sizeof(uint32_t), 3, primeArgs);
 800111c:	4b40      	ldr	r3, [pc, #256]	; (8001220 <task1+0x150>)
 800111e:	681c      	ldr	r4, [r3, #0]
 8001120:	f107 0320 	add.w	r3, r7, #32
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2303      	movs	r3, #3
 8001128:	f44f 7280 	mov.w	r2, #256	; 0x100
 800112c:	493d      	ldr	r1, [pc, #244]	; (8001224 <task1+0x154>)
 800112e:	483e      	ldr	r0, [pc, #248]	; (8001228 <task1+0x158>)
 8001130:	47a0      	blx	r4
			StaticThread.delay(10);
 8001132:	4b3b      	ldr	r3, [pc, #236]	; (8001220 <task1+0x150>)
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	200a      	movs	r0, #10
 8001138:	4798      	blx	r3
		}
		if(pallinStatus == START){
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d10e      	bne.n	800115e <task1+0x8e>
			StaticThread.new(taskPallindrome, stackPallindrome, sizeof(stackPallindrome)/sizeof(uint32_t), 3, pallinArgs);
 8001140:	4b37      	ldr	r3, [pc, #220]	; (8001220 <task1+0x150>)
 8001142:	681c      	ldr	r4, [r3, #0]
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	2303      	movs	r3, #3
 800114c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001150:	4936      	ldr	r1, [pc, #216]	; (800122c <task1+0x15c>)
 8001152:	4837      	ldr	r0, [pc, #220]	; (8001230 <task1+0x160>)
 8001154:	47a0      	blx	r4
			StaticThread.delay(10);
 8001156:	4b32      	ldr	r3, [pc, #200]	; (8001220 <task1+0x150>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	200a      	movs	r0, #10
 800115c:	4798      	blx	r3
		}

		if((primeStatus == COMPLETED) && (pallinStatus == COMPLETED)){
 800115e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001160:	2b02      	cmp	r3, #2
 8001162:	d11c      	bne.n	800119e <task1+0xce>
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	2b02      	cmp	r3, #2
 8001168:	d119      	bne.n	800119e <task1+0xce>
			StaticThread.print("Position    : %d\n",n);
 800116a:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <task1+0x150>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001170:	4611      	mov	r1, r2
 8001172:	4830      	ldr	r0, [pc, #192]	; (8001234 <task1+0x164>)
 8001174:	4798      	blx	r3
			StaticThread.print("Prime       : %d\n",primeCalculated);
 8001176:	4b2a      	ldr	r3, [pc, #168]	; (8001220 <task1+0x150>)
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800117c:	4611      	mov	r1, r2
 800117e:	482e      	ldr	r0, [pc, #184]	; (8001238 <task1+0x168>)
 8001180:	4798      	blx	r3
			StaticThread.print("Pallindrome : %d\n",pallinCalculated);
 8001182:	4b27      	ldr	r3, [pc, #156]	; (8001220 <task1+0x150>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4611      	mov	r1, r2
 800118a:	482c      	ldr	r0, [pc, #176]	; (800123c <task1+0x16c>)
 800118c:	4798      	blx	r3
			pallinStatus = START;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
			primeStatus = START;
 8001192:	2300      	movs	r3, #0
 8001194:	633b      	str	r3, [r7, #48]	; 0x30
			n+=100;
 8001196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001198:	3364      	adds	r3, #100	; 0x64
 800119a:	637b      	str	r3, [r7, #52]	; 0x34
 800119c:	e037      	b.n	800120e <task1+0x13e>
		}else if((primeStatus == COMPLETED)){
 800119e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d112      	bne.n	80011ca <task1+0xfa>
			StaticThread.print("Position    : %d\n",n);
 80011a4:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <task1+0x150>)
 80011a6:	69db      	ldr	r3, [r3, #28]
 80011a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011aa:	4611      	mov	r1, r2
 80011ac:	4821      	ldr	r0, [pc, #132]	; (8001234 <task1+0x164>)
 80011ae:	4798      	blx	r3
			StaticThread.print("Prime       : %d\n",primeCalculated);
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <task1+0x150>)
 80011b2:	69db      	ldr	r3, [r3, #28]
 80011b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011b6:	4611      	mov	r1, r2
 80011b8:	481f      	ldr	r0, [pc, #124]	; (8001238 <task1+0x168>)
 80011ba:	4798      	blx	r3
			StaticThread.print("Pallindrome : .....\n",n);
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <task1+0x150>)
 80011be:	69db      	ldr	r3, [r3, #28]
 80011c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011c2:	4611      	mov	r1, r2
 80011c4:	481e      	ldr	r0, [pc, #120]	; (8001240 <task1+0x170>)
 80011c6:	4798      	blx	r3
 80011c8:	e021      	b.n	800120e <task1+0x13e>
		}else if (pallinStatus == COMPLETED) {
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d110      	bne.n	80011f2 <task1+0x122>
			StaticThread.print("Position	: %d\n",n);
 80011d0:	4b13      	ldr	r3, [pc, #76]	; (8001220 <task1+0x150>)
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011d6:	4611      	mov	r1, r2
 80011d8:	481a      	ldr	r0, [pc, #104]	; (8001244 <task1+0x174>)
 80011da:	4798      	blx	r3
			StaticThread.print("Prime       : .....\n");
 80011dc:	4b10      	ldr	r3, [pc, #64]	; (8001220 <task1+0x150>)
 80011de:	69db      	ldr	r3, [r3, #28]
 80011e0:	4819      	ldr	r0, [pc, #100]	; (8001248 <task1+0x178>)
 80011e2:	4798      	blx	r3
			StaticThread.print("Pallindrome : %d\n",pallinCalculated);
 80011e4:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <task1+0x150>)
 80011e6:	69db      	ldr	r3, [r3, #28]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4611      	mov	r1, r2
 80011ec:	4813      	ldr	r0, [pc, #76]	; (800123c <task1+0x16c>)
 80011ee:	4798      	blx	r3
 80011f0:	e00d      	b.n	800120e <task1+0x13e>
		}else{
			StaticThread.print("Position    : %d\n",n);
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <task1+0x150>)
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011f8:	4611      	mov	r1, r2
 80011fa:	480e      	ldr	r0, [pc, #56]	; (8001234 <task1+0x164>)
 80011fc:	4798      	blx	r3
			StaticThread.print("Prime       : .....\n");
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <task1+0x150>)
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	4811      	ldr	r0, [pc, #68]	; (8001248 <task1+0x178>)
 8001204:	4798      	blx	r3
			StaticThread.print("Pallindrome : .....\n");
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <task1+0x150>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	480d      	ldr	r0, [pc, #52]	; (8001240 <task1+0x170>)
 800120c:	4798      	blx	r3
		}
		printf("\n");
 800120e:	200a      	movs	r0, #10
 8001210:	f001 fdb0 	bl	8002d74 <putchar>
		StaticThread.delay(1000);
 8001214:	4b02      	ldr	r3, [pc, #8]	; (8001220 <task1+0x150>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800121c:	4798      	blx	r3
		if(primeStatus == START){
 800121e:	e77a      	b.n	8001116 <task1+0x46>
 8001220:	20000008 	.word	0x20000008
 8001224:	20000518 	.word	0x20000518
 8001228:	08001039 	.word	0x08001039
 800122c:	20000918 	.word	0x20000918
 8001230:	08001085 	.word	0x08001085
 8001234:	08004008 	.word	0x08004008
 8001238:	0800401c 	.word	0x0800401c
 800123c:	08004030 	.word	0x08004030
 8001240:	08004044 	.word	0x08004044
 8001244:	0800405c 	.word	0x0800405c
 8001248:	0800406c 	.word	0x0800406c

0800124c <run>:
	}
}

////////////////////////////////////////////////////////
void run() {
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b083      	sub	sp, #12
 8001250:	af02      	add	r7, sp, #8
	printf("Initializing...\n");
 8001252:	480c      	ldr	r0, [pc, #48]	; (8001284 <run+0x38>)
 8001254:	f001 fe10 	bl	8002e78 <puts>
	HAL_Delay(3000);
 8001258:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800125c:	f000 fccc 	bl	8001bf8 <HAL_Delay>
	StaticThread.new(task1, stack1, sizeof(stack1)/sizeof(uint32_t),0,NULL);
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <run+0x3c>)
 8001262:	681c      	ldr	r4, [r3, #0]
 8001264:	2300      	movs	r3, #0
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2300      	movs	r3, #0
 800126a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800126e:	4907      	ldr	r1, [pc, #28]	; (800128c <run+0x40>)
 8001270:	4807      	ldr	r0, [pc, #28]	; (8001290 <run+0x44>)
 8001272:	47a0      	blx	r4
	StaticThread.startScheduler();
 8001274:	4b04      	ldr	r3, [pc, #16]	; (8001288 <run+0x3c>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	4798      	blx	r3
}
 800127a:	bf00      	nop
 800127c:	3704      	adds	r7, #4
 800127e:	46bd      	mov	sp, r7
 8001280:	bd90      	pop	{r4, r7, pc}
 8001282:	bf00      	nop
 8001284:	08004084 	.word	0x08004084
 8001288:	20000008 	.word	0x20000008
 800128c:	20000118 	.word	0x20000118
 8001290:	080010d1 	.word	0x080010d1

08001294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	6039      	str	r1, [r7, #0]
 800129e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	db0a      	blt.n	80012be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	490c      	ldr	r1, [pc, #48]	; (80012e0 <__NVIC_SetPriority+0x4c>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	0112      	lsls	r2, r2, #4
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	440b      	add	r3, r1
 80012b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012bc:	e00a      	b.n	80012d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4908      	ldr	r1, [pc, #32]	; (80012e4 <__NVIC_SetPriority+0x50>)
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	3b04      	subs	r3, #4
 80012cc:	0112      	lsls	r2, r2, #4
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	440b      	add	r3, r1
 80012d2:	761a      	strb	r2, [r3, #24]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000e100 	.word	0xe000e100
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <idleThread>:
static volatile int countThread;
static volatile uint8_t mutexLock = 0;

static uint32_t idleThreadStack[64];
uint32_t stm32_thread_idle_count;
static void idleThread() {
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
	stm32_thread_idle_count = 0;
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <idleThread+0x18>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
	while (1) {
		stm32_thread_idle_count++;
 80012f2:	4b03      	ldr	r3, [pc, #12]	; (8001300 <idleThread+0x18>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	3301      	adds	r3, #1
 80012f8:	4a01      	ldr	r2, [pc, #4]	; (8001300 <idleThread+0x18>)
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	e7f9      	b.n	80012f2 <idleThread+0xa>
 80012fe:	bf00      	nop
 8001300:	20000ed4 	.word	0x20000ed4

08001304 <addThread>:
	}
}

static void addThread(int freeIndex, void (*threadTask)(), uint32_t *stack,
		uint32_t stackLen,int argLen,void**args) {
 8001304:	b480      	push	{r7}
 8001306:	b087      	sub	sp, #28
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
 8001310:	603b      	str	r3, [r7, #0]
	int i = freeIndex;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	617b      	str	r3, [r7, #20]
	//Empty thread found
	thread[i].ID = freeIndex;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	b2d8      	uxtb	r0, r3
 800131a:	4963      	ldr	r1, [pc, #396]	; (80014a8 <addThread+0x1a4>)
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	4613      	mov	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	4413      	add	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	440b      	add	r3, r1
 8001328:	4602      	mov	r2, r0
 800132a:	701a      	strb	r2, [r3, #0]
	thread[i].stack = stack;
 800132c:	495e      	ldr	r1, [pc, #376]	; (80014a8 <addThread+0x1a4>)
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	4613      	mov	r3, r2
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	4413      	add	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	440b      	add	r3, r1
 800133a:	3304      	adds	r3, #4
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	601a      	str	r2, [r3, #0]
	thread[i].stackLen = stackLen;
 8001340:	4959      	ldr	r1, [pc, #356]	; (80014a8 <addThread+0x1a4>)
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	4613      	mov	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	4413      	add	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	440b      	add	r3, r1
 800134e:	3308      	adds	r3, #8
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	601a      	str	r2, [r3, #0]
	thread[i].threadFunc = threadTask;
 8001354:	4954      	ldr	r1, [pc, #336]	; (80014a8 <addThread+0x1a4>)
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	4613      	mov	r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	4413      	add	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	440b      	add	r3, r1
 8001362:	3314      	adds	r3, #20
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	601a      	str	r2, [r3, #0]
	thread[i].action = STM32_THREAD_ACTION_RUNNING;
 8001368:	494f      	ldr	r1, [pc, #316]	; (80014a8 <addThread+0x1a4>)
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	4613      	mov	r3, r2
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	4413      	add	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	440b      	add	r3, r1
 8001376:	3310      	adds	r3, #16
 8001378:	2201      	movs	r2, #1
 800137a:	701a      	strb	r2, [r3, #0]
	thread[i].argLen = argLen;
 800137c:	494a      	ldr	r1, [pc, #296]	; (80014a8 <addThread+0x1a4>)
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	4613      	mov	r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	4413      	add	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	440b      	add	r3, r1
 800138a:	331c      	adds	r3, #28
 800138c:	6a3a      	ldr	r2, [r7, #32]
 800138e:	601a      	str	r2, [r3, #0]
	thread[i].args = args;
 8001390:	4945      	ldr	r1, [pc, #276]	; (80014a8 <addThread+0x1a4>)
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	4613      	mov	r3, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	4413      	add	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	440b      	add	r3, r1
 800139e:	3320      	adds	r3, #32
 80013a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013a2:	601a      	str	r2, [r3, #0]


	uint32_t *psp = (uint32_t*) &stack[stackLen];
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	4413      	add	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]

	// fill dummy stack frame
	*(--psp) = 0x01000000u; // Dummy xPSR, just enable Thumb State bit;
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	3b04      	subs	r3, #4
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80013ba:	601a      	str	r2, [r3, #0]
	*(--psp) = (uint32_t) threadTask; // PC
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	3b04      	subs	r3, #4
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	601a      	str	r2, [r3, #0]
	*(--psp) = 0xFFFFFFFDu; // LR with EXC_RETURN to return to Thread using PSP
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	3b04      	subs	r3, #4
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	f06f 0202 	mvn.w	r2, #2
 80013d4:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x12121212u; // Dummy R12
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	3b04      	subs	r3, #4
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 80013e2:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x03030303u; // Dummy R3
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	3b04      	subs	r3, #4
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 80013f0:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x02020202u; // Dummy R2
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	3b04      	subs	r3, #4
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 80013fe:	601a      	str	r2, [r3, #0]
	*(--psp) = (uint32_t)args; // Dummy R1
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	3b04      	subs	r3, #4
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	601a      	str	r2, [r3, #0]
	*(--psp) = (uint32_t)argLen; // Dummy R0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	3b04      	subs	r3, #4
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	6a3a      	ldr	r2, [r7, #32]
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	601a      	str	r2, [r3, #0]

	*(--psp) = 0x11111111u; // Dummy R11
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	3b04      	subs	r3, #4
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8001424:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x10101010u; // Dummy R10
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	3b04      	subs	r3, #4
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8001432:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x09090909u; // Dummy R9
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	3b04      	subs	r3, #4
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8001440:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x08080808u; // Dummy R8
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	3b04      	subs	r3, #4
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800144e:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x07070707u; // Dummy R7
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	3b04      	subs	r3, #4
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800145c:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x06060606u; // Dummy R6
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	3b04      	subs	r3, #4
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800146a:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x05050505u; // Dummy R5
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	3b04      	subs	r3, #4
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8001478:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x04040404u; // Dummy R4
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	3b04      	subs	r3, #4
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8001486:	601a      	str	r2, [r3, #0]
	thread[i].sp = (uint32_t) psp;
 8001488:	6939      	ldr	r1, [r7, #16]
 800148a:	4807      	ldr	r0, [pc, #28]	; (80014a8 <addThread+0x1a4>)
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	4613      	mov	r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	4413      	add	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4403      	add	r3, r0
 8001498:	330c      	adds	r3, #12
 800149a:	6019      	str	r1, [r3, #0]
}
 800149c:	bf00      	nop
 800149e:	371c      	adds	r7, #28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	20000d18 	.word	0x20000d18

080014ac <new>:
 * @param argLen		: Length of arguments
 * @param args			: Pointer to arguments
 * @return				: ID of created thread (This ID is required for restart or delete of thread)
 * 						: -1 if MAX_THREAD limit exceeds
 */
static int new(void (*threadTask)(int argLen,void**args), uint32_t *stack, uint32_t stackLen,int argLen,void**args) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af02      	add	r7, sp, #8
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	603b      	str	r3, [r7, #0]
	mutexLock = 1;
 80014ba:	4b18      	ldr	r3, [pc, #96]	; (800151c <new+0x70>)
 80014bc:	2201      	movs	r2, #1
 80014be:	701a      	strb	r2, [r3, #0]
	int freeIndex = 1;
 80014c0:	2301      	movs	r3, #1
 80014c2:	617b      	str	r3, [r7, #20]
	for (; freeIndex < MAX_THREAD; freeIndex++)
 80014c4:	e00d      	b.n	80014e2 <new+0x36>
		if (thread[freeIndex].ID == 0)
 80014c6:	4916      	ldr	r1, [pc, #88]	; (8001520 <new+0x74>)
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	4613      	mov	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	4413      	add	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	440b      	add	r3, r1
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d006      	beq.n	80014ea <new+0x3e>
	for (; freeIndex < MAX_THREAD; freeIndex++)
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	3301      	adds	r3, #1
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	2b04      	cmp	r3, #4
 80014e6:	ddee      	ble.n	80014c6 <new+0x1a>
 80014e8:	e000      	b.n	80014ec <new+0x40>
			break; //empty thread found
 80014ea:	bf00      	nop
	if (freeIndex >= MAX_THREAD)
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	dd02      	ble.n	80014f8 <new+0x4c>
		return -1;
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
 80014f6:	e00d      	b.n	8001514 <new+0x68>
	addThread(freeIndex, threadTask, stack, stackLen,argLen,args);
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	9301      	str	r3, [sp, #4]
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	68f9      	ldr	r1, [r7, #12]
 8001506:	6978      	ldr	r0, [r7, #20]
 8001508:	f7ff fefc 	bl	8001304 <addThread>
	mutexLock = 0;
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <new+0x70>)
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
	return freeIndex;
 8001512:	697b      	ldr	r3, [r7, #20]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000dd0 	.word	0x20000dd0
 8001520:	20000d18 	.word	0x20000d18

08001524 <startScheduler>:

/**
 * This starts threading
 */
static void startScheduler() {
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af02      	add	r7, sp, #8
	// Adding idle thread
	addThread(0, idleThread, idleThreadStack,
 800152a:	2300      	movs	r3, #0
 800152c:	9301      	str	r3, [sp, #4]
 800152e:	2300      	movs	r3, #0
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	2340      	movs	r3, #64	; 0x40
 8001534:	4a2f      	ldr	r2, [pc, #188]	; (80015f4 <startScheduler+0xd0>)
 8001536:	4930      	ldr	r1, [pc, #192]	; (80015f8 <startScheduler+0xd4>)
 8001538:	2000      	movs	r0, #0
 800153a:	f7ff fee3 	bl	8001304 <addThread>
			sizeof(idleThreadStack) / sizeof(uint32_t),0,NULL);
	NVIC_SetPriority(PendSV_IRQn, 0xFF);
 800153e:	21ff      	movs	r1, #255	; 0xff
 8001540:	f06f 0001 	mvn.w	r0, #1
 8001544:	f7ff fea6 	bl	8001294 <__NVIC_SetPriority>

	currentThread = 0;
 8001548:	4b2c      	ldr	r3, [pc, #176]	; (80015fc <startScheduler+0xd8>)
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
	for(int i=1;i<MAX_THREAD;i++){
 800154e:	2301      	movs	r3, #1
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	e011      	b.n	8001578 <startScheduler+0x54>
		if (thread[i].ID != 0){
 8001554:	492a      	ldr	r1, [pc, #168]	; (8001600 <startScheduler+0xdc>)
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	4613      	mov	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	4413      	add	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	440b      	add	r3, r1
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <startScheduler+0x4e>
			currentThread = i;
 800156a:	4a24      	ldr	r2, [pc, #144]	; (80015fc <startScheduler+0xd8>)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6013      	str	r3, [r2, #0]
			break; // non empty thread found
 8001570:	e005      	b.n	800157e <startScheduler+0x5a>
	for(int i=1;i<MAX_THREAD;i++){
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	3301      	adds	r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2b04      	cmp	r3, #4
 800157c:	ddea      	ble.n	8001554 <startScheduler+0x30>
		}
	}

	uint32_t sp = thread[currentThread].sp;
 800157e:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <startScheduler+0xd8>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	491f      	ldr	r1, [pc, #124]	; (8001600 <startScheduler+0xdc>)
 8001584:	4613      	mov	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	4413      	add	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	330c      	adds	r3, #12
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	60bb      	str	r3, [r7, #8]

	__asm volatile("MOV R0, %0"::"r"(sp));
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	4618      	mov	r0, r3
	__asm volatile("MSR PSP, R0");
 8001598:	f380 8809 	msr	PSP, r0

	//Stack to PSP
	__asm volatile(
 800159c:	f3ef 8014 	mrs	r0, CONTROL
 80015a0:	f040 0002 	orr.w	r0, r0, #2
 80015a4:	f380 8814 	msr	CONTROL, r0
			"ORR R0, R0, #2\n\t"
			"MSR CONTROL, r0"
	);

	//Unprivileged Mode
	__asm volatile(
 80015a8:	f3ef 8014 	mrs	r0, CONTROL
 80015ac:	f040 0001 	orr.w	r0, r0, #1
 80015b0:	f380 8814 	msr	CONTROL, r0
			"MRS R0, CONTROL\n\t"
			"ORR R0, R0, #1\n\t"
			"MSR CONTROL, r0"
	);

	void (*task)(int argLen,void**args) = (void (*)(int argLen,void**args))((uint32_t*)sp)[14];//??
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	3338      	adds	r3, #56	; 0x38
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	607b      	str	r3, [r7, #4]
	task(thread[currentThread].argLen,thread[currentThread].args);
 80015bc:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <startScheduler+0xd8>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	490f      	ldr	r1, [pc, #60]	; (8001600 <startScheduler+0xdc>)
 80015c2:	4613      	mov	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	4413      	add	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	440b      	add	r3, r1
 80015cc:	331c      	adds	r3, #28
 80015ce:	6818      	ldr	r0, [r3, #0]
 80015d0:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <startScheduler+0xd8>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	490a      	ldr	r1, [pc, #40]	; (8001600 <startScheduler+0xdc>)
 80015d6:	4613      	mov	r3, r2
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	4413      	add	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	440b      	add	r3, r1
 80015e0:	3320      	adds	r3, #32
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4798      	blx	r3
}
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000dd4 	.word	0x20000dd4
 80015f8:	080012e9 	.word	0x080012e9
 80015fc:	20000004 	.word	0x20000004
 8001600:	20000d18 	.word	0x20000d18

08001604 <threadSwitching>:

static void threadSwitching() {
 8001604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001606:	b085      	sub	sp, #20
 8001608:	af02      	add	r7, sp, #8
	if (mutexLock)
 800160a:	4b60      	ldr	r3, [pc, #384]	; (800178c <threadSwitching+0x188>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2b00      	cmp	r3, #0
 8001612:	f040 80b6 	bne.w	8001782 <threadSwitching+0x17e>
		return;
	for (countThread = 1; countThread < MAX_THREAD; countThread++) {
 8001616:	4b5e      	ldr	r3, [pc, #376]	; (8001790 <threadSwitching+0x18c>)
 8001618:	2201      	movs	r2, #1
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	e0a2      	b.n	8001764 <threadSwitching+0x160>
		currentThread = (currentThread + 1) % MAX_THREAD;
 800161e:	4b5d      	ldr	r3, [pc, #372]	; (8001794 <threadSwitching+0x190>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	1c59      	adds	r1, r3, #1
 8001624:	4b5c      	ldr	r3, [pc, #368]	; (8001798 <threadSwitching+0x194>)
 8001626:	fb83 2301 	smull	r2, r3, r3, r1
 800162a:	105a      	asrs	r2, r3, #1
 800162c:	17cb      	asrs	r3, r1, #31
 800162e:	1ad2      	subs	r2, r2, r3
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	1aca      	subs	r2, r1, r3
 8001638:	4b56      	ldr	r3, [pc, #344]	; (8001794 <threadSwitching+0x190>)
 800163a:	601a      	str	r2, [r3, #0]
		if (thread[currentThread].ID == 0)
 800163c:	4b55      	ldr	r3, [pc, #340]	; (8001794 <threadSwitching+0x190>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4956      	ldr	r1, [pc, #344]	; (800179c <threadSwitching+0x198>)
 8001642:	4613      	mov	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	4413      	add	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	440b      	add	r3, r1
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	d07f      	beq.n	8001754 <threadSwitching+0x150>
			continue; //Empty or idle thread

		if (HAL_GetTick() <= thread[currentThread].waitTill)
 8001654:	f000 fac6 	bl	8001be4 <HAL_GetTick>
 8001658:	4601      	mov	r1, r0
 800165a:	4b4e      	ldr	r3, [pc, #312]	; (8001794 <threadSwitching+0x190>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	484f      	ldr	r0, [pc, #316]	; (800179c <threadSwitching+0x198>)
 8001660:	4613      	mov	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	4413      	add	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4403      	add	r3, r0
 800166a:	3318      	adds	r3, #24
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4299      	cmp	r1, r3
 8001670:	d972      	bls.n	8001758 <threadSwitching+0x154>
			continue; //Delay has been executing

		if (thread[currentThread].action == STM32_THREAD_ACTION_DELETE) {
 8001672:	4b48      	ldr	r3, [pc, #288]	; (8001794 <threadSwitching+0x190>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	4949      	ldr	r1, [pc, #292]	; (800179c <threadSwitching+0x198>)
 8001678:	4613      	mov	r3, r2
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	4413      	add	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	3310      	adds	r3, #16
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d10a      	bne.n	80016a2 <threadSwitching+0x9e>
			thread[currentThread].ID = 0;
 800168c:	4b41      	ldr	r3, [pc, #260]	; (8001794 <threadSwitching+0x190>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4942      	ldr	r1, [pc, #264]	; (800179c <threadSwitching+0x198>)
 8001692:	4613      	mov	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	4413      	add	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	440b      	add	r3, r1
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
			continue;
 80016a0:	e05b      	b.n	800175a <threadSwitching+0x156>
		} else if (thread[currentThread].action== STM32_THREAD_ACTION_RESTART) {
 80016a2:	4b3c      	ldr	r3, [pc, #240]	; (8001794 <threadSwitching+0x190>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	493d      	ldr	r1, [pc, #244]	; (800179c <threadSwitching+0x198>)
 80016a8:	4613      	mov	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4413      	add	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	3310      	adds	r3, #16
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d13d      	bne.n	8001738 <threadSwitching+0x134>
			addThread(currentThread, thread[currentThread].threadFunc,thread[currentThread].stack,thread[currentThread].stackLen,thread[currentThread].argLen,thread[currentThread].args);
 80016bc:	4b35      	ldr	r3, [pc, #212]	; (8001794 <threadSwitching+0x190>)
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	4b34      	ldr	r3, [pc, #208]	; (8001794 <threadSwitching+0x190>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4935      	ldr	r1, [pc, #212]	; (800179c <threadSwitching+0x198>)
 80016c6:	4613      	mov	r3, r2
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	4413      	add	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	440b      	add	r3, r1
 80016d0:	3314      	adds	r3, #20
 80016d2:	681c      	ldr	r4, [r3, #0]
 80016d4:	4b2f      	ldr	r3, [pc, #188]	; (8001794 <threadSwitching+0x190>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4930      	ldr	r1, [pc, #192]	; (800179c <threadSwitching+0x198>)
 80016da:	4613      	mov	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	4413      	add	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	440b      	add	r3, r1
 80016e4:	3304      	adds	r3, #4
 80016e6:	681d      	ldr	r5, [r3, #0]
 80016e8:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <threadSwitching+0x190>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	492b      	ldr	r1, [pc, #172]	; (800179c <threadSwitching+0x198>)
 80016ee:	4613      	mov	r3, r2
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	4413      	add	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	440b      	add	r3, r1
 80016f8:	3308      	adds	r3, #8
 80016fa:	681e      	ldr	r6, [r3, #0]
 80016fc:	4b25      	ldr	r3, [pc, #148]	; (8001794 <threadSwitching+0x190>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4926      	ldr	r1, [pc, #152]	; (800179c <threadSwitching+0x198>)
 8001702:	4613      	mov	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	4413      	add	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	440b      	add	r3, r1
 800170c:	331c      	adds	r3, #28
 800170e:	6819      	ldr	r1, [r3, #0]
 8001710:	4b20      	ldr	r3, [pc, #128]	; (8001794 <threadSwitching+0x190>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b21      	ldr	r3, [pc, #132]	; (800179c <threadSwitching+0x198>)
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4413      	add	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	4413      	add	r3, r2
 8001724:	3320      	adds	r3, #32
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	9301      	str	r3, [sp, #4]
 800172a:	9100      	str	r1, [sp, #0]
 800172c:	4633      	mov	r3, r6
 800172e:	462a      	mov	r2, r5
 8001730:	4621      	mov	r1, r4
 8001732:	f7ff fde7 	bl	8001304 <addThread>
		} else if (thread[currentThread].action == STM32_THREAD_ACTION_BLOCK) {
			continue;
		}
		break;
 8001736:	e01b      	b.n	8001770 <threadSwitching+0x16c>
		} else if (thread[currentThread].action == STM32_THREAD_ACTION_BLOCK) {
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <threadSwitching+0x190>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4917      	ldr	r1, [pc, #92]	; (800179c <threadSwitching+0x198>)
 800173e:	4613      	mov	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	4413      	add	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	440b      	add	r3, r1
 8001748:	3310      	adds	r3, #16
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10e      	bne.n	8001770 <threadSwitching+0x16c>
			continue;
 8001752:	e002      	b.n	800175a <threadSwitching+0x156>
			continue; //Empty or idle thread
 8001754:	bf00      	nop
 8001756:	e000      	b.n	800175a <threadSwitching+0x156>
			continue; //Delay has been executing
 8001758:	bf00      	nop
	for (countThread = 1; countThread < MAX_THREAD; countThread++) {
 800175a:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <threadSwitching+0x18c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	3301      	adds	r3, #1
 8001760:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <threadSwitching+0x18c>)
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <threadSwitching+0x18c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b04      	cmp	r3, #4
 800176a:	f77f af58 	ble.w	800161e <threadSwitching+0x1a>
 800176e:	e000      	b.n	8001772 <threadSwitching+0x16e>
		break;
 8001770:	bf00      	nop
	}
	if (countThread >= MAX_THREAD) {
 8001772:	4b07      	ldr	r3, [pc, #28]	; (8001790 <threadSwitching+0x18c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b04      	cmp	r3, #4
 8001778:	dd04      	ble.n	8001784 <threadSwitching+0x180>
		//No thread remaining so assign idle
		currentThread = 0;
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <threadSwitching+0x190>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	e000      	b.n	8001784 <threadSwitching+0x180>
		return;
 8001782:	bf00      	nop
	}
}
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800178a:	bf00      	nop
 800178c:	20000dd0 	.word	0x20000dd0
 8001790:	20000dcc 	.word	0x20000dcc
 8001794:	20000004 	.word	0x20000004
 8001798:	66666667 	.word	0x66666667
 800179c:	20000d18 	.word	0x20000d18

080017a0 <threadSysTickHandler>:

/**
 * This should be called in SysTick_Handler
 */
void threadSysTickHandler() {
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
	if (currentThread >= 0)
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <threadSysTickHandler+0x20>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	db05      	blt.n	80017b8 <threadSysTickHandler+0x18>
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <threadSysTickHandler+0x24>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <threadSysTickHandler+0x24>)
 80017b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b6:	6053      	str	r3, [r2, #4]
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr
 80017c0:	20000004 	.word	0x20000004
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <threadPendSVHandler>:

/**
 * This should be called in PendSV_Handler
 */
__attribute__((naked)) void threadPendSVHandler() {
	__asm volatile("POP {R7,LR}");
 80017c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}

	//Making this function as if __attribute__((naked))
	__asm volatile("PUSH {LR}");
 80017cc:	b500      	push	{lr}

	/* Save the context of current task */

	// get current PSP
	__asm volatile("MRS R0, PSP");
 80017ce:	f3ef 8009 	mrs	r0, PSP
	// save R4 to R11 to PSP Frame Stack
	__asm volatile("STMDB R0!, {R4-R11}");
 80017d2:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	// save current value of PSP
	__asm volatile("MOV %0, R0":"=r"(thread[currentThread].sp));
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <threadPendSVHandler+0x50>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	4601      	mov	r1, r0
 80017dc:	480f      	ldr	r0, [pc, #60]	; (800181c <threadPendSVHandler+0x54>)
 80017de:	4613      	mov	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	4413      	add	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4403      	add	r3, r0
 80017e8:	330c      	adds	r3, #12
 80017ea:	6019      	str	r1, [r3, #0]

	/* Scheduling */
	threadSwitching();
 80017ec:	f7ff ff0a 	bl	8001604 <threadSwitching>

	/* Retrieve the context of next task */

	// get its past PSP value
	__asm volatile("MOV R0, %0"::"r"(thread[currentThread].sp));
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <threadPendSVHandler+0x50>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4909      	ldr	r1, [pc, #36]	; (800181c <threadPendSVHandler+0x54>)
 80017f6:	4613      	mov	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	4413      	add	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	330c      	adds	r3, #12
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
	// retrieve R4-R11 from PSP Fram Stack
	__asm volatile("LDMIA R0!, {R4-R11}");
 8001806:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	// update PSP
	__asm volatile("MSR PSP, R0");
 800180a:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}");
 800180e:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("NOP");
 8001812:	bf00      	nop
	__asm volatile("BX LR");
 8001814:	4770      	bx	lr
}
 8001816:	bf00      	nop
 8001818:	20000004 	.word	0x20000004
 800181c:	20000d18 	.word	0x20000d18

08001820 <reschedule>:

static void reschedule(){
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
	__asm volatile("SVC #0");
 8001824:	df00      	svc	0
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr
	...

08001830 <threadSVCHandler>:

/**
 * This should be called in SVC_Handler
 */
void threadSVCHandler(){
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
	if (currentThread >= 0)
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <threadSVCHandler+0x20>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	db05      	blt.n	8001848 <threadSVCHandler+0x18>
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <threadSVCHandler+0x24>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	4a04      	ldr	r2, [pc, #16]	; (8001854 <threadSVCHandler+0x24>)
 8001842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001846:	6053      	str	r3, [r2, #4]
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	20000004 	.word	0x20000004
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <threadDelete>:
/**
 * This deletes this thread
 * @param threadID 	: ID of thread to be deleted
 * 					: 0 for self delete
 */
static void threadDelete(int threadID) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	mutexLock = 1;
 8001860:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <threadDelete+0x58>)
 8001862:	2201      	movs	r2, #1
 8001864:	701a      	strb	r2, [r3, #0]
	if(threadID==0)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <threadDelete+0x1a>
		threadID = currentThread;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <threadDelete+0x5c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	607b      	str	r3, [r7, #4]

	if (threadID > 0 && threadID<MAX_THREAD)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	dd0c      	ble.n	8001892 <threadDelete+0x3a>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b04      	cmp	r3, #4
 800187c:	dc09      	bgt.n	8001892 <threadDelete+0x3a>
		thread[threadID].action = STM32_THREAD_ACTION_DELETE;
 800187e:	490e      	ldr	r1, [pc, #56]	; (80018b8 <threadDelete+0x60>)
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4413      	add	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	440b      	add	r3, r1
 800188c:	3310      	adds	r3, #16
 800188e:	2202      	movs	r2, #2
 8001890:	701a      	strb	r2, [r3, #0]
	mutexLock = 0;
 8001892:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <threadDelete+0x58>)
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
	if (threadID == currentThread) //?? why not for both??
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <threadDelete+0x5c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d101      	bne.n	80018a6 <threadDelete+0x4e>
		reschedule();
 80018a2:	f7ff ffbd 	bl	8001820 <reschedule>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000dd0 	.word	0x20000dd0
 80018b4:	20000004 	.word	0x20000004
 80018b8:	20000d18 	.word	0x20000d18

080018bc <threadRestart>:
/**
 * This restarts this thread
 * @param threadID 	: ID of thread to be restarted
 * 					: 0 for self restart
 */
static void threadRestart(int threadID) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	mutexLock = 1;
 80018c4:	4b13      	ldr	r3, [pc, #76]	; (8001914 <threadRestart+0x58>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	701a      	strb	r2, [r3, #0]
	if(threadID==0)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <threadRestart+0x1a>
		threadID = currentThread;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <threadRestart+0x5c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	607b      	str	r3, [r7, #4]
	if (threadID > 0 && threadID<MAX_THREAD)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	dd0c      	ble.n	80018f6 <threadRestart+0x3a>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b04      	cmp	r3, #4
 80018e0:	dc09      	bgt.n	80018f6 <threadRestart+0x3a>
		thread[threadID].action = STM32_THREAD_ACTION_RESTART;
 80018e2:	490e      	ldr	r1, [pc, #56]	; (800191c <threadRestart+0x60>)
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	4413      	add	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	3310      	adds	r3, #16
 80018f2:	2203      	movs	r2, #3
 80018f4:	701a      	strb	r2, [r3, #0]
	mutexLock = 0;
 80018f6:	4b07      	ldr	r3, [pc, #28]	; (8001914 <threadRestart+0x58>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
	if (threadID == currentThread)
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <threadRestart+0x5c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	429a      	cmp	r2, r3
 8001904:	d101      	bne.n	800190a <threadRestart+0x4e>
		reschedule();
 8001906:	f7ff ff8b 	bl	8001820 <reschedule>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000dd0 	.word	0x20000dd0
 8001918:	20000004 	.word	0x20000004
 800191c:	20000d18 	.word	0x20000d18

08001920 <threadBlock>:
/**
 * This blocks this thread
 * @param threadID  : ID of thread to be blocked
 * 					: 0 for self block
 */
static void threadBlock(int threadID) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	mutexLock = 1;
 8001928:	4b13      	ldr	r3, [pc, #76]	; (8001978 <threadBlock+0x58>)
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]
	if(threadID==0)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d102      	bne.n	800193a <threadBlock+0x1a>
		threadID = currentThread;
 8001934:	4b11      	ldr	r3, [pc, #68]	; (800197c <threadBlock+0x5c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	607b      	str	r3, [r7, #4]
	if (threadID > 0 && threadID<MAX_THREAD)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	dd0c      	ble.n	800195a <threadBlock+0x3a>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b04      	cmp	r3, #4
 8001944:	dc09      	bgt.n	800195a <threadBlock+0x3a>
		thread[threadID].action = STM32_THREAD_ACTION_BLOCK;
 8001946:	490e      	ldr	r1, [pc, #56]	; (8001980 <threadBlock+0x60>)
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	4413      	add	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	3310      	adds	r3, #16
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
	mutexLock = 0;
 800195a:	4b07      	ldr	r3, [pc, #28]	; (8001978 <threadBlock+0x58>)
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
	if (threadID == currentThread)
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <threadBlock+0x5c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	429a      	cmp	r2, r3
 8001968:	d101      	bne.n	800196e <threadBlock+0x4e>
		reschedule();
 800196a:	f7ff ff59 	bl	8001820 <reschedule>
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000dd0 	.word	0x20000dd0
 800197c:	20000004 	.word	0x20000004
 8001980:	20000d18 	.word	0x20000d18

08001984 <threadUnblock>:

/**
 * This unblocks given thread
 * @param threadID  : ID of thread to be unblocked
 */
static void threadUnblock(int threadID) {
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	mutexLock = 1;
 800198c:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <threadUnblock+0x40>)
 800198e:	2201      	movs	r2, #1
 8001990:	701a      	strb	r2, [r3, #0]
	if (threadID > 0 && threadID<MAX_THREAD)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	dd0c      	ble.n	80019b2 <threadUnblock+0x2e>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b04      	cmp	r3, #4
 800199c:	dc09      	bgt.n	80019b2 <threadUnblock+0x2e>
		thread[threadID].action = STM32_THREAD_ACTION_RUNNING;
 800199e:	490a      	ldr	r1, [pc, #40]	; (80019c8 <threadUnblock+0x44>)
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	4413      	add	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	440b      	add	r3, r1
 80019ac:	3310      	adds	r3, #16
 80019ae:	2201      	movs	r2, #1
 80019b0:	701a      	strb	r2, [r3, #0]
	mutexLock = 0;
 80019b2:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <threadUnblock+0x40>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000dd0 	.word	0x20000dd0
 80019c8:	20000d18 	.word	0x20000d18

080019cc <threadDelay>:

/**
 * This is delay for thread which do not comsume clock cycle
 * @param millis	 : duration for delay in millis
 */
static void threadDelay(uint32_t millis) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	mutexLock = 1;
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <threadDelay+0x50>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	701a      	strb	r2, [r3, #0]
	if (currentThread > 0 && currentThread<MAX_THREAD)
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <threadDelay+0x54>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	dd12      	ble.n	8001a08 <threadDelay+0x3c>
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <threadDelay+0x54>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	dc0e      	bgt.n	8001a08 <threadDelay+0x3c>
		thread[currentThread].waitTill = HAL_GetTick() + millis;
 80019ea:	f000 f8fb 	bl	8001be4 <HAL_GetTick>
 80019ee:	4601      	mov	r1, r0
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <threadDelay+0x54>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4419      	add	r1, r3
 80019f8:	480a      	ldr	r0, [pc, #40]	; (8001a24 <threadDelay+0x58>)
 80019fa:	4613      	mov	r3, r2
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	4413      	add	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4403      	add	r3, r0
 8001a04:	3318      	adds	r3, #24
 8001a06:	6019      	str	r1, [r3, #0]
	mutexLock = 0;
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <threadDelay+0x50>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
	reschedule();
 8001a0e:	f7ff ff07 	bl	8001820 <reschedule>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000dd0 	.word	0x20000dd0
 8001a20:	20000004 	.word	0x20000004
 8001a24:	20000d18 	.word	0x20000d18

08001a28 <threadPrint>:

/**
 * This is printf for thread which prints completely this text
 */
static void threadPrint(const char *msg, ...) {
 8001a28:	b40f      	push	{r0, r1, r2, r3}
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
	mutexLock = 1;
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <threadPrint+0x30>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	701a      	strb	r2, [r3, #0]
	va_list args;
	va_start(args, msg);
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	607b      	str	r3, [r7, #4]
	vprintf(msg, args);
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	6938      	ldr	r0, [r7, #16]
 8001a40:	f001 fa22 	bl	8002e88 <viprintf>
	va_end(args);
	mutexLock = 0;
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <threadPrint+0x30>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a54:	b004      	add	sp, #16
 8001a56:	4770      	bx	lr
 8001a58:	20000dd0 	.word	0x20000dd0

08001a5c <threadMutexLock>:

/**
 * This blocks all thread except current thread (this thread)
 */
static void threadMutexLock(){
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
	mutexLock = 1;
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <threadMutexLock+0x14>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	701a      	strb	r2, [r3, #0]
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20000dd0 	.word	0x20000dd0

08001a74 <threadMutexUnlock>:

/**
 * This unlocks mutex lock
 */
static void threadMutexUnlock(){
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
	mutexLock = 0;
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <threadMutexUnlock+0x14>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	20000dd0 	.word	0x20000dd0

08001a8c <threadTakeBinarySemaphore>:

/**
 * This blocks this thread unless other thread give binary semaphore for this thread
 * @param threadIDptr	: binary semaphore ID which is also thread ID of this thread
 */
static void threadTakeBinarySemaphore(int *threadIDptr){
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	mutexLock = 1;
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <threadTakeBinarySemaphore+0x54>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	701a      	strb	r2, [r3, #0]
	if(threadIDptr!=NULL && (currentThread>0 && currentThread<MAX_THREAD)){
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d016      	beq.n	8001ace <threadTakeBinarySemaphore+0x42>
 8001aa0:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <threadTakeBinarySemaphore+0x58>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	dd12      	ble.n	8001ace <threadTakeBinarySemaphore+0x42>
 8001aa8:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <threadTakeBinarySemaphore+0x58>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	dc0e      	bgt.n	8001ace <threadTakeBinarySemaphore+0x42>
		*threadIDptr = currentThread;
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <threadTakeBinarySemaphore+0x58>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	601a      	str	r2, [r3, #0]
		thread[currentThread].action = STM32_THREAD_ACTION_BLOCK;
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <threadTakeBinarySemaphore+0x58>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	490a      	ldr	r1, [pc, #40]	; (8001ae8 <threadTakeBinarySemaphore+0x5c>)
 8001abe:	4613      	mov	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	3310      	adds	r3, #16
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
	}
	mutexLock = 0;
 8001ace:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <threadTakeBinarySemaphore+0x54>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
	reschedule();
 8001ad4:	f7ff fea4 	bl	8001820 <reschedule>
}
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000dd0 	.word	0x20000dd0
 8001ae4:	20000004 	.word	0x20000004
 8001ae8:	20000d18 	.word	0x20000d18

08001aec <threadGiveBinarySemaphore>:

/**
 * This blocks this thread corresponding to this threadID
 * @param threadID	: binary semaphore ID which is also thread ID of this thread to be unblocked
 */
static void threadGiveBinarySemaphore(int threadID){
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	mutexLock = 1;
 8001af4:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <threadGiveBinarySemaphore+0x40>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	701a      	strb	r2, [r3, #0]
	if(threadID>0 && threadID<MAX_THREAD)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	dd0c      	ble.n	8001b1a <threadGiveBinarySemaphore+0x2e>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	dc09      	bgt.n	8001b1a <threadGiveBinarySemaphore+0x2e>
		thread[threadID].action = STM32_THREAD_ACTION_RUNNING;
 8001b06:	490a      	ldr	r1, [pc, #40]	; (8001b30 <threadGiveBinarySemaphore+0x44>)
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	4413      	add	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	440b      	add	r3, r1
 8001b14:	3310      	adds	r3, #16
 8001b16:	2201      	movs	r2, #1
 8001b18:	701a      	strb	r2, [r3, #0]
	mutexLock = 0;
 8001b1a:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <threadGiveBinarySemaphore+0x40>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000dd0 	.word	0x20000dd0
 8001b30:	20000d18 	.word	0x20000d18

08001b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b38:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <HAL_Init+0x28>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <HAL_Init+0x28>)
 8001b3e:	f043 0310 	orr.w	r3, r3, #16
 8001b42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b44:	2003      	movs	r0, #3
 8001b46:	f000 f92b 	bl	8001da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b4a:	200f      	movs	r0, #15
 8001b4c:	f000 f808 	bl	8001b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b50:	f7ff f852 	bl	8000bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40022000 	.word	0x40022000

08001b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_InitTick+0x54>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_InitTick+0x58>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	4619      	mov	r1, r3
 8001b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 f935 	bl	8001dee <HAL_SYSTICK_Config>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e00e      	b.n	8001bac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b0f      	cmp	r3, #15
 8001b92:	d80a      	bhi.n	8001baa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b94:	2200      	movs	r2, #0
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9c:	f000 f90b 	bl	8001db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba0:	4a06      	ldr	r2, [pc, #24]	; (8001bbc <HAL_InitTick+0x5c>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e000      	b.n	8001bac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	20000048 	.word	0x20000048
 8001bbc:	20000044 	.word	0x20000044

08001bc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_IncTick+0x1c>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <HAL_IncTick+0x20>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	4a03      	ldr	r2, [pc, #12]	; (8001be0 <HAL_IncTick+0x20>)
 8001bd2:	6013      	str	r3, [r2, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	20000048 	.word	0x20000048
 8001be0:	20000ed8 	.word	0x20000ed8

08001be4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return uwTick;
 8001be8:	4b02      	ldr	r3, [pc, #8]	; (8001bf4 <HAL_GetTick+0x10>)
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr
 8001bf4:	20000ed8 	.word	0x20000ed8

08001bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c00:	f7ff fff0 	bl	8001be4 <HAL_GetTick>
 8001c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c10:	d005      	beq.n	8001c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_Delay+0x44>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c1e:	bf00      	nop
 8001c20:	f7ff ffe0 	bl	8001be4 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d8f7      	bhi.n	8001c20 <HAL_Delay+0x28>
  {
  }
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000048 	.word	0x20000048

08001c40 <__NVIC_SetPriorityGrouping>:
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c72:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	60d3      	str	r3, [r2, #12]
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_GetPriorityGrouping>:
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c8c:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	0a1b      	lsrs	r3, r3, #8
 8001c92:	f003 0307 	and.w	r3, r3, #7
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_SetPriority>:
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	6039      	str	r1, [r7, #0]
 8001cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	db0a      	blt.n	8001cce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	490c      	ldr	r1, [pc, #48]	; (8001cf0 <__NVIC_SetPriority+0x4c>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	0112      	lsls	r2, r2, #4
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001ccc:	e00a      	b.n	8001ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4908      	ldr	r1, [pc, #32]	; (8001cf4 <__NVIC_SetPriority+0x50>)
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	3b04      	subs	r3, #4
 8001cdc:	0112      	lsls	r2, r2, #4
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	761a      	strb	r2, [r3, #24]
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000e100 	.word	0xe000e100
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b089      	sub	sp, #36	; 0x24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f1c3 0307 	rsb	r3, r3, #7
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	bf28      	it	cs
 8001d16:	2304      	movcs	r3, #4
 8001d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	2b06      	cmp	r3, #6
 8001d20:	d902      	bls.n	8001d28 <NVIC_EncodePriority+0x30>
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3b03      	subs	r3, #3
 8001d26:	e000      	b.n	8001d2a <NVIC_EncodePriority+0x32>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43da      	mvns	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d40:	f04f 31ff 	mov.w	r1, #4294967295
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4a:	43d9      	mvns	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d50:	4313      	orrs	r3, r2
         );
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3724      	adds	r7, #36	; 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d6c:	d301      	bcc.n	8001d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e00f      	b.n	8001d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d72:	4a0a      	ldr	r2, [pc, #40]	; (8001d9c <SysTick_Config+0x40>)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d7a:	210f      	movs	r1, #15
 8001d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d80:	f7ff ff90 	bl	8001ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <SysTick_Config+0x40>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d8a:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <SysTick_Config+0x40>)
 8001d8c:	2207      	movs	r2, #7
 8001d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	e000e010 	.word	0xe000e010

08001da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff ff49 	bl	8001c40 <__NVIC_SetPriorityGrouping>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b086      	sub	sp, #24
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	607a      	str	r2, [r7, #4]
 8001dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc8:	f7ff ff5e 	bl	8001c88 <__NVIC_GetPriorityGrouping>
 8001dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	68b9      	ldr	r1, [r7, #8]
 8001dd2:	6978      	ldr	r0, [r7, #20]
 8001dd4:	f7ff ff90 	bl	8001cf8 <NVIC_EncodePriority>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dde:	4611      	mov	r1, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ff5f 	bl	8001ca4 <__NVIC_SetPriority>
}
 8001de6:	bf00      	nop
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff ffb0 	bl	8001d5c <SysTick_Config>
 8001dfc:	4603      	mov	r3, r0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b08b      	sub	sp, #44	; 0x2c
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e12:	2300      	movs	r3, #0
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e16:	2300      	movs	r3, #0
 8001e18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e1a:	e169      	b.n	80020f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	f040 8158 	bne.w	80020ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	4a9a      	ldr	r2, [pc, #616]	; (80020a8 <HAL_GPIO_Init+0x2a0>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d05e      	beq.n	8001f02 <HAL_GPIO_Init+0xfa>
 8001e44:	4a98      	ldr	r2, [pc, #608]	; (80020a8 <HAL_GPIO_Init+0x2a0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d875      	bhi.n	8001f36 <HAL_GPIO_Init+0x12e>
 8001e4a:	4a98      	ldr	r2, [pc, #608]	; (80020ac <HAL_GPIO_Init+0x2a4>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d058      	beq.n	8001f02 <HAL_GPIO_Init+0xfa>
 8001e50:	4a96      	ldr	r2, [pc, #600]	; (80020ac <HAL_GPIO_Init+0x2a4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d86f      	bhi.n	8001f36 <HAL_GPIO_Init+0x12e>
 8001e56:	4a96      	ldr	r2, [pc, #600]	; (80020b0 <HAL_GPIO_Init+0x2a8>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d052      	beq.n	8001f02 <HAL_GPIO_Init+0xfa>
 8001e5c:	4a94      	ldr	r2, [pc, #592]	; (80020b0 <HAL_GPIO_Init+0x2a8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d869      	bhi.n	8001f36 <HAL_GPIO_Init+0x12e>
 8001e62:	4a94      	ldr	r2, [pc, #592]	; (80020b4 <HAL_GPIO_Init+0x2ac>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d04c      	beq.n	8001f02 <HAL_GPIO_Init+0xfa>
 8001e68:	4a92      	ldr	r2, [pc, #584]	; (80020b4 <HAL_GPIO_Init+0x2ac>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d863      	bhi.n	8001f36 <HAL_GPIO_Init+0x12e>
 8001e6e:	4a92      	ldr	r2, [pc, #584]	; (80020b8 <HAL_GPIO_Init+0x2b0>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d046      	beq.n	8001f02 <HAL_GPIO_Init+0xfa>
 8001e74:	4a90      	ldr	r2, [pc, #576]	; (80020b8 <HAL_GPIO_Init+0x2b0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d85d      	bhi.n	8001f36 <HAL_GPIO_Init+0x12e>
 8001e7a:	2b12      	cmp	r3, #18
 8001e7c:	d82a      	bhi.n	8001ed4 <HAL_GPIO_Init+0xcc>
 8001e7e:	2b12      	cmp	r3, #18
 8001e80:	d859      	bhi.n	8001f36 <HAL_GPIO_Init+0x12e>
 8001e82:	a201      	add	r2, pc, #4	; (adr r2, 8001e88 <HAL_GPIO_Init+0x80>)
 8001e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e88:	08001f03 	.word	0x08001f03
 8001e8c:	08001edd 	.word	0x08001edd
 8001e90:	08001eef 	.word	0x08001eef
 8001e94:	08001f31 	.word	0x08001f31
 8001e98:	08001f37 	.word	0x08001f37
 8001e9c:	08001f37 	.word	0x08001f37
 8001ea0:	08001f37 	.word	0x08001f37
 8001ea4:	08001f37 	.word	0x08001f37
 8001ea8:	08001f37 	.word	0x08001f37
 8001eac:	08001f37 	.word	0x08001f37
 8001eb0:	08001f37 	.word	0x08001f37
 8001eb4:	08001f37 	.word	0x08001f37
 8001eb8:	08001f37 	.word	0x08001f37
 8001ebc:	08001f37 	.word	0x08001f37
 8001ec0:	08001f37 	.word	0x08001f37
 8001ec4:	08001f37 	.word	0x08001f37
 8001ec8:	08001f37 	.word	0x08001f37
 8001ecc:	08001ee5 	.word	0x08001ee5
 8001ed0:	08001ef9 	.word	0x08001ef9
 8001ed4:	4a79      	ldr	r2, [pc, #484]	; (80020bc <HAL_GPIO_Init+0x2b4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d013      	beq.n	8001f02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eda:	e02c      	b.n	8001f36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	623b      	str	r3, [r7, #32]
          break;
 8001ee2:	e029      	b.n	8001f38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	623b      	str	r3, [r7, #32]
          break;
 8001eec:	e024      	b.n	8001f38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	3308      	adds	r3, #8
 8001ef4:	623b      	str	r3, [r7, #32]
          break;
 8001ef6:	e01f      	b.n	8001f38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	330c      	adds	r3, #12
 8001efe:	623b      	str	r3, [r7, #32]
          break;
 8001f00:	e01a      	b.n	8001f38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d102      	bne.n	8001f10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f0a:	2304      	movs	r3, #4
 8001f0c:	623b      	str	r3, [r7, #32]
          break;
 8001f0e:	e013      	b.n	8001f38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d105      	bne.n	8001f24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f18:	2308      	movs	r3, #8
 8001f1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69fa      	ldr	r2, [r7, #28]
 8001f20:	611a      	str	r2, [r3, #16]
          break;
 8001f22:	e009      	b.n	8001f38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f24:	2308      	movs	r3, #8
 8001f26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	615a      	str	r2, [r3, #20]
          break;
 8001f2e:	e003      	b.n	8001f38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f30:	2300      	movs	r3, #0
 8001f32:	623b      	str	r3, [r7, #32]
          break;
 8001f34:	e000      	b.n	8001f38 <HAL_GPIO_Init+0x130>
          break;
 8001f36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	2bff      	cmp	r3, #255	; 0xff
 8001f3c:	d801      	bhi.n	8001f42 <HAL_GPIO_Init+0x13a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	e001      	b.n	8001f46 <HAL_GPIO_Init+0x13e>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3304      	adds	r3, #4
 8001f46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	2bff      	cmp	r3, #255	; 0xff
 8001f4c:	d802      	bhi.n	8001f54 <HAL_GPIO_Init+0x14c>
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	e002      	b.n	8001f5a <HAL_GPIO_Init+0x152>
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	3b08      	subs	r3, #8
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	210f      	movs	r1, #15
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	fa01 f303 	lsl.w	r3, r1, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	6a39      	ldr	r1, [r7, #32]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	fa01 f303 	lsl.w	r3, r1, r3
 8001f74:	431a      	orrs	r2, r3
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80b1 	beq.w	80020ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f88:	4b4d      	ldr	r3, [pc, #308]	; (80020c0 <HAL_GPIO_Init+0x2b8>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	4a4c      	ldr	r2, [pc, #304]	; (80020c0 <HAL_GPIO_Init+0x2b8>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	6193      	str	r3, [r2, #24]
 8001f94:	4b4a      	ldr	r3, [pc, #296]	; (80020c0 <HAL_GPIO_Init+0x2b8>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fa0:	4a48      	ldr	r2, [pc, #288]	; (80020c4 <HAL_GPIO_Init+0x2bc>)
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	089b      	lsrs	r3, r3, #2
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a40      	ldr	r2, [pc, #256]	; (80020c8 <HAL_GPIO_Init+0x2c0>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d013      	beq.n	8001ff4 <HAL_GPIO_Init+0x1ec>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a3f      	ldr	r2, [pc, #252]	; (80020cc <HAL_GPIO_Init+0x2c4>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d00d      	beq.n	8001ff0 <HAL_GPIO_Init+0x1e8>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a3e      	ldr	r2, [pc, #248]	; (80020d0 <HAL_GPIO_Init+0x2c8>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d007      	beq.n	8001fec <HAL_GPIO_Init+0x1e4>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a3d      	ldr	r2, [pc, #244]	; (80020d4 <HAL_GPIO_Init+0x2cc>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d101      	bne.n	8001fe8 <HAL_GPIO_Init+0x1e0>
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e006      	b.n	8001ff6 <HAL_GPIO_Init+0x1ee>
 8001fe8:	2304      	movs	r3, #4
 8001fea:	e004      	b.n	8001ff6 <HAL_GPIO_Init+0x1ee>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e002      	b.n	8001ff6 <HAL_GPIO_Init+0x1ee>
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e000      	b.n	8001ff6 <HAL_GPIO_Init+0x1ee>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff8:	f002 0203 	and.w	r2, r2, #3
 8001ffc:	0092      	lsls	r2, r2, #2
 8001ffe:	4093      	lsls	r3, r2
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	4313      	orrs	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002006:	492f      	ldr	r1, [pc, #188]	; (80020c4 <HAL_GPIO_Init+0x2bc>)
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	089b      	lsrs	r3, r3, #2
 800200c:	3302      	adds	r3, #2
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d006      	beq.n	800202e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002020:	4b2d      	ldr	r3, [pc, #180]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	492c      	ldr	r1, [pc, #176]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	608b      	str	r3, [r1, #8]
 800202c:	e006      	b.n	800203c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800202e:	4b2a      	ldr	r3, [pc, #168]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	43db      	mvns	r3, r3
 8002036:	4928      	ldr	r1, [pc, #160]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002038:	4013      	ands	r3, r2
 800203a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d006      	beq.n	8002056 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002048:	4b23      	ldr	r3, [pc, #140]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	4922      	ldr	r1, [pc, #136]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	4313      	orrs	r3, r2
 8002052:	60cb      	str	r3, [r1, #12]
 8002054:	e006      	b.n	8002064 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002056:	4b20      	ldr	r3, [pc, #128]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	43db      	mvns	r3, r3
 800205e:	491e      	ldr	r1, [pc, #120]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002060:	4013      	ands	r3, r2
 8002062:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d006      	beq.n	800207e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002070:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	4918      	ldr	r1, [pc, #96]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	604b      	str	r3, [r1, #4]
 800207c:	e006      	b.n	800208c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800207e:	4b16      	ldr	r3, [pc, #88]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	43db      	mvns	r3, r3
 8002086:	4914      	ldr	r1, [pc, #80]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002088:	4013      	ands	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d021      	beq.n	80020dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002098:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	490e      	ldr	r1, [pc, #56]	; (80020d8 <HAL_GPIO_Init+0x2d0>)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	600b      	str	r3, [r1, #0]
 80020a4:	e021      	b.n	80020ea <HAL_GPIO_Init+0x2e2>
 80020a6:	bf00      	nop
 80020a8:	10320000 	.word	0x10320000
 80020ac:	10310000 	.word	0x10310000
 80020b0:	10220000 	.word	0x10220000
 80020b4:	10210000 	.word	0x10210000
 80020b8:	10120000 	.word	0x10120000
 80020bc:	10110000 	.word	0x10110000
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40010000 	.word	0x40010000
 80020c8:	40010800 	.word	0x40010800
 80020cc:	40010c00 	.word	0x40010c00
 80020d0:	40011000 	.word	0x40011000
 80020d4:	40011400 	.word	0x40011400
 80020d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_GPIO_Init+0x304>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	4909      	ldr	r1, [pc, #36]	; (800210c <HAL_GPIO_Init+0x304>)
 80020e6:	4013      	ands	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	3301      	adds	r3, #1
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	fa22 f303 	lsr.w	r3, r2, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f47f ae8e 	bne.w	8001e1c <HAL_GPIO_Init+0x14>
  }
}
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	372c      	adds	r7, #44	; 0x2c
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr
 800210c:	40010400 	.word	0x40010400

08002110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	807b      	strh	r3, [r7, #2]
 800211c:	4613      	mov	r3, r2
 800211e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002120:	787b      	ldrb	r3, [r7, #1]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002126:	887a      	ldrh	r2, [r7, #2]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800212c:	e003      	b.n	8002136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800212e:	887b      	ldrh	r3, [r7, #2]
 8002130:	041a      	lsls	r2, r3, #16
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	611a      	str	r2, [r3, #16]
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr

08002140 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e272      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 8087 	beq.w	800226e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002160:	4b92      	ldr	r3, [pc, #584]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 030c 	and.w	r3, r3, #12
 8002168:	2b04      	cmp	r3, #4
 800216a:	d00c      	beq.n	8002186 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800216c:	4b8f      	ldr	r3, [pc, #572]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 030c 	and.w	r3, r3, #12
 8002174:	2b08      	cmp	r3, #8
 8002176:	d112      	bne.n	800219e <HAL_RCC_OscConfig+0x5e>
 8002178:	4b8c      	ldr	r3, [pc, #560]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002184:	d10b      	bne.n	800219e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002186:	4b89      	ldr	r3, [pc, #548]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d06c      	beq.n	800226c <HAL_RCC_OscConfig+0x12c>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d168      	bne.n	800226c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e24c      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a6:	d106      	bne.n	80021b6 <HAL_RCC_OscConfig+0x76>
 80021a8:	4b80      	ldr	r3, [pc, #512]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a7f      	ldr	r2, [pc, #508]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b2:	6013      	str	r3, [r2, #0]
 80021b4:	e02e      	b.n	8002214 <HAL_RCC_OscConfig+0xd4>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x98>
 80021be:	4b7b      	ldr	r3, [pc, #492]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a7a      	ldr	r2, [pc, #488]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b78      	ldr	r3, [pc, #480]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a77      	ldr	r2, [pc, #476]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e01d      	b.n	8002214 <HAL_RCC_OscConfig+0xd4>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e0:	d10c      	bne.n	80021fc <HAL_RCC_OscConfig+0xbc>
 80021e2:	4b72      	ldr	r3, [pc, #456]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a71      	ldr	r2, [pc, #452]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	4b6f      	ldr	r3, [pc, #444]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a6e      	ldr	r2, [pc, #440]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	e00b      	b.n	8002214 <HAL_RCC_OscConfig+0xd4>
 80021fc:	4b6b      	ldr	r3, [pc, #428]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a6a      	ldr	r2, [pc, #424]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002206:	6013      	str	r3, [r2, #0]
 8002208:	4b68      	ldr	r3, [pc, #416]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a67      	ldr	r2, [pc, #412]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 800220e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002212:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d013      	beq.n	8002244 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7ff fce2 	bl	8001be4 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002224:	f7ff fcde 	bl	8001be4 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	; 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e200      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002236:	4b5d      	ldr	r3, [pc, #372]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f0      	beq.n	8002224 <HAL_RCC_OscConfig+0xe4>
 8002242:	e014      	b.n	800226e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7ff fcce 	bl	8001be4 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800224c:	f7ff fcca 	bl	8001be4 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b64      	cmp	r3, #100	; 0x64
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e1ec      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225e:	4b53      	ldr	r3, [pc, #332]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x10c>
 800226a:	e000      	b.n	800226e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d063      	beq.n	8002342 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800227a:	4b4c      	ldr	r3, [pc, #304]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00b      	beq.n	800229e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002286:	4b49      	ldr	r3, [pc, #292]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	2b08      	cmp	r3, #8
 8002290:	d11c      	bne.n	80022cc <HAL_RCC_OscConfig+0x18c>
 8002292:	4b46      	ldr	r3, [pc, #280]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d116      	bne.n	80022cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229e:	4b43      	ldr	r3, [pc, #268]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d005      	beq.n	80022b6 <HAL_RCC_OscConfig+0x176>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d001      	beq.n	80022b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e1c0      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b6:	4b3d      	ldr	r3, [pc, #244]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	4939      	ldr	r1, [pc, #228]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ca:	e03a      	b.n	8002342 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d020      	beq.n	8002316 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d4:	4b36      	ldr	r3, [pc, #216]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022da:	f7ff fc83 	bl	8001be4 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e2:	f7ff fc7f 	bl	8001be4 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e1a1      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f4:	4b2d      	ldr	r3, [pc, #180]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0f0      	beq.n	80022e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002300:	4b2a      	ldr	r3, [pc, #168]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4927      	ldr	r1, [pc, #156]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002310:	4313      	orrs	r3, r2
 8002312:	600b      	str	r3, [r1, #0]
 8002314:	e015      	b.n	8002342 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002316:	4b26      	ldr	r3, [pc, #152]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231c:	f7ff fc62 	bl	8001be4 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002324:	f7ff fc5e 	bl	8001be4 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e180      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002336:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f0      	bne.n	8002324 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d03a      	beq.n	80023c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d019      	beq.n	800238a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002356:	4b17      	ldr	r3, [pc, #92]	; (80023b4 <HAL_RCC_OscConfig+0x274>)
 8002358:	2201      	movs	r2, #1
 800235a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800235c:	f7ff fc42 	bl	8001be4 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002364:	f7ff fc3e 	bl	8001be4 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e160      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002376:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f0      	beq.n	8002364 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002382:	2001      	movs	r0, #1
 8002384:	f000 face 	bl	8002924 <RCC_Delay>
 8002388:	e01c      	b.n	80023c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800238a:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <HAL_RCC_OscConfig+0x274>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002390:	f7ff fc28 	bl	8001be4 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002396:	e00f      	b.n	80023b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002398:	f7ff fc24 	bl	8001be4 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d908      	bls.n	80023b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e146      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000
 80023b0:	42420000 	.word	0x42420000
 80023b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b8:	4b92      	ldr	r3, [pc, #584]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1e9      	bne.n	8002398 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 80a6 	beq.w	800251e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b8b      	ldr	r3, [pc, #556]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10d      	bne.n	80023fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b88      	ldr	r3, [pc, #544]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	4a87      	ldr	r2, [pc, #540]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	61d3      	str	r3, [r2, #28]
 80023ee:	4b85      	ldr	r3, [pc, #532]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fa:	2301      	movs	r3, #1
 80023fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fe:	4b82      	ldr	r3, [pc, #520]	; (8002608 <HAL_RCC_OscConfig+0x4c8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002406:	2b00      	cmp	r3, #0
 8002408:	d118      	bne.n	800243c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800240a:	4b7f      	ldr	r3, [pc, #508]	; (8002608 <HAL_RCC_OscConfig+0x4c8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a7e      	ldr	r2, [pc, #504]	; (8002608 <HAL_RCC_OscConfig+0x4c8>)
 8002410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002414:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002416:	f7ff fbe5 	bl	8001be4 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800241e:	f7ff fbe1 	bl	8001be4 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b64      	cmp	r3, #100	; 0x64
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e103      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002430:	4b75      	ldr	r3, [pc, #468]	; (8002608 <HAL_RCC_OscConfig+0x4c8>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f0      	beq.n	800241e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d106      	bne.n	8002452 <HAL_RCC_OscConfig+0x312>
 8002444:	4b6f      	ldr	r3, [pc, #444]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	4a6e      	ldr	r2, [pc, #440]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	6213      	str	r3, [r2, #32]
 8002450:	e02d      	b.n	80024ae <HAL_RCC_OscConfig+0x36e>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10c      	bne.n	8002474 <HAL_RCC_OscConfig+0x334>
 800245a:	4b6a      	ldr	r3, [pc, #424]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	4a69      	ldr	r2, [pc, #420]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 8002460:	f023 0301 	bic.w	r3, r3, #1
 8002464:	6213      	str	r3, [r2, #32]
 8002466:	4b67      	ldr	r3, [pc, #412]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	4a66      	ldr	r2, [pc, #408]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 800246c:	f023 0304 	bic.w	r3, r3, #4
 8002470:	6213      	str	r3, [r2, #32]
 8002472:	e01c      	b.n	80024ae <HAL_RCC_OscConfig+0x36e>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	2b05      	cmp	r3, #5
 800247a:	d10c      	bne.n	8002496 <HAL_RCC_OscConfig+0x356>
 800247c:	4b61      	ldr	r3, [pc, #388]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	4a60      	ldr	r2, [pc, #384]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 8002482:	f043 0304 	orr.w	r3, r3, #4
 8002486:	6213      	str	r3, [r2, #32]
 8002488:	4b5e      	ldr	r3, [pc, #376]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	4a5d      	ldr	r2, [pc, #372]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	6213      	str	r3, [r2, #32]
 8002494:	e00b      	b.n	80024ae <HAL_RCC_OscConfig+0x36e>
 8002496:	4b5b      	ldr	r3, [pc, #364]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	4a5a      	ldr	r2, [pc, #360]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 800249c:	f023 0301 	bic.w	r3, r3, #1
 80024a0:	6213      	str	r3, [r2, #32]
 80024a2:	4b58      	ldr	r3, [pc, #352]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	4a57      	ldr	r2, [pc, #348]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	f023 0304 	bic.w	r3, r3, #4
 80024ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d015      	beq.n	80024e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b6:	f7ff fb95 	bl	8001be4 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024bc:	e00a      	b.n	80024d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024be:	f7ff fb91 	bl	8001be4 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e0b1      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d4:	4b4b      	ldr	r3, [pc, #300]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0ee      	beq.n	80024be <HAL_RCC_OscConfig+0x37e>
 80024e0:	e014      	b.n	800250c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e2:	f7ff fb7f 	bl	8001be4 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e8:	e00a      	b.n	8002500 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ea:	f7ff fb7b 	bl	8001be4 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e09b      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002500:	4b40      	ldr	r3, [pc, #256]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1ee      	bne.n	80024ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800250c:	7dfb      	ldrb	r3, [r7, #23]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d105      	bne.n	800251e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002512:	4b3c      	ldr	r3, [pc, #240]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	4a3b      	ldr	r2, [pc, #236]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800251c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 8087 	beq.w	8002636 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002528:	4b36      	ldr	r3, [pc, #216]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 030c 	and.w	r3, r3, #12
 8002530:	2b08      	cmp	r3, #8
 8002532:	d061      	beq.n	80025f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	2b02      	cmp	r3, #2
 800253a:	d146      	bne.n	80025ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253c:	4b33      	ldr	r3, [pc, #204]	; (800260c <HAL_RCC_OscConfig+0x4cc>)
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002542:	f7ff fb4f 	bl	8001be4 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254a:	f7ff fb4b 	bl	8001be4 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e06d      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800255c:	4b29      	ldr	r3, [pc, #164]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1f0      	bne.n	800254a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002570:	d108      	bne.n	8002584 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002572:	4b24      	ldr	r3, [pc, #144]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	4921      	ldr	r1, [pc, #132]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002584:	4b1f      	ldr	r3, [pc, #124]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a19      	ldr	r1, [r3, #32]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	430b      	orrs	r3, r1
 8002596:	491b      	ldr	r1, [pc, #108]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 8002598:	4313      	orrs	r3, r2
 800259a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800259c:	4b1b      	ldr	r3, [pc, #108]	; (800260c <HAL_RCC_OscConfig+0x4cc>)
 800259e:	2201      	movs	r2, #1
 80025a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a2:	f7ff fb1f 	bl	8001be4 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025aa:	f7ff fb1b 	bl	8001be4 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e03d      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025bc:	4b11      	ldr	r3, [pc, #68]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCC_OscConfig+0x46a>
 80025c8:	e035      	b.n	8002636 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <HAL_RCC_OscConfig+0x4cc>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d0:	f7ff fb08 	bl	8001be4 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d8:	f7ff fb04 	bl	8001be4 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e026      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ea:	4b06      	ldr	r3, [pc, #24]	; (8002604 <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x498>
 80025f6:	e01e      	b.n	8002636 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d107      	bne.n	8002610 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e019      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
 8002604:	40021000 	.word	0x40021000
 8002608:	40007000 	.word	0x40007000
 800260c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_RCC_OscConfig+0x500>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	429a      	cmp	r2, r3
 8002622:	d106      	bne.n	8002632 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262e:	429a      	cmp	r2, r3
 8002630:	d001      	beq.n	8002636 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40021000 	.word	0x40021000

08002644 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0d0      	b.n	80027fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002658:	4b6a      	ldr	r3, [pc, #424]	; (8002804 <HAL_RCC_ClockConfig+0x1c0>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d910      	bls.n	8002688 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002666:	4b67      	ldr	r3, [pc, #412]	; (8002804 <HAL_RCC_ClockConfig+0x1c0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f023 0207 	bic.w	r2, r3, #7
 800266e:	4965      	ldr	r1, [pc, #404]	; (8002804 <HAL_RCC_ClockConfig+0x1c0>)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002676:	4b63      	ldr	r3, [pc, #396]	; (8002804 <HAL_RCC_ClockConfig+0x1c0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d001      	beq.n	8002688 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0b8      	b.n	80027fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d020      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a0:	4b59      	ldr	r3, [pc, #356]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	4a58      	ldr	r2, [pc, #352]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80026a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026b8:	4b53      	ldr	r3, [pc, #332]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4a52      	ldr	r2, [pc, #328]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c4:	4b50      	ldr	r3, [pc, #320]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	494d      	ldr	r1, [pc, #308]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d040      	beq.n	8002764 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d107      	bne.n	80026fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ea:	4b47      	ldr	r3, [pc, #284]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d115      	bne.n	8002722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e07f      	b.n	80027fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d107      	bne.n	8002712 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002702:	4b41      	ldr	r3, [pc, #260]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d109      	bne.n	8002722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e073      	b.n	80027fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002712:	4b3d      	ldr	r3, [pc, #244]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e06b      	b.n	80027fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002722:	4b39      	ldr	r3, [pc, #228]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f023 0203 	bic.w	r2, r3, #3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4936      	ldr	r1, [pc, #216]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 8002730:	4313      	orrs	r3, r2
 8002732:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002734:	f7ff fa56 	bl	8001be4 <HAL_GetTick>
 8002738:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273a:	e00a      	b.n	8002752 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800273c:	f7ff fa52 	bl	8001be4 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	f241 3288 	movw	r2, #5000	; 0x1388
 800274a:	4293      	cmp	r3, r2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e053      	b.n	80027fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002752:	4b2d      	ldr	r3, [pc, #180]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f003 020c 	and.w	r2, r3, #12
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	429a      	cmp	r2, r3
 8002762:	d1eb      	bne.n	800273c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002764:	4b27      	ldr	r3, [pc, #156]	; (8002804 <HAL_RCC_ClockConfig+0x1c0>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d210      	bcs.n	8002794 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002772:	4b24      	ldr	r3, [pc, #144]	; (8002804 <HAL_RCC_ClockConfig+0x1c0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f023 0207 	bic.w	r2, r3, #7
 800277a:	4922      	ldr	r1, [pc, #136]	; (8002804 <HAL_RCC_ClockConfig+0x1c0>)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	4313      	orrs	r3, r2
 8002780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002782:	4b20      	ldr	r3, [pc, #128]	; (8002804 <HAL_RCC_ClockConfig+0x1c0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d001      	beq.n	8002794 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e032      	b.n	80027fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	d008      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a0:	4b19      	ldr	r3, [pc, #100]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	4916      	ldr	r1, [pc, #88]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d009      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027be:	4b12      	ldr	r3, [pc, #72]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	490e      	ldr	r1, [pc, #56]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027d2:	f000 f821 	bl	8002818 <HAL_RCC_GetSysClockFreq>
 80027d6:	4602      	mov	r2, r0
 80027d8:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	091b      	lsrs	r3, r3, #4
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	490a      	ldr	r1, [pc, #40]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 80027e4:	5ccb      	ldrb	r3, [r1, r3]
 80027e6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ea:	4a09      	ldr	r2, [pc, #36]	; (8002810 <HAL_RCC_ClockConfig+0x1cc>)
 80027ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027ee:	4b09      	ldr	r3, [pc, #36]	; (8002814 <HAL_RCC_ClockConfig+0x1d0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff f9b4 	bl	8001b60 <HAL_InitTick>

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40022000 	.word	0x40022000
 8002808:	40021000 	.word	0x40021000
 800280c:	08004094 	.word	0x08004094
 8002810:	20000000 	.word	0x20000000
 8002814:	20000044 	.word	0x20000044

08002818 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002818:	b480      	push	{r7}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	2300      	movs	r3, #0
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	2300      	movs	r3, #0
 800282c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002832:	4b1e      	ldr	r3, [pc, #120]	; (80028ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	2b04      	cmp	r3, #4
 8002840:	d002      	beq.n	8002848 <HAL_RCC_GetSysClockFreq+0x30>
 8002842:	2b08      	cmp	r3, #8
 8002844:	d003      	beq.n	800284e <HAL_RCC_GetSysClockFreq+0x36>
 8002846:	e027      	b.n	8002898 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002848:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800284a:	613b      	str	r3, [r7, #16]
      break;
 800284c:	e027      	b.n	800289e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	0c9b      	lsrs	r3, r3, #18
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	4a17      	ldr	r2, [pc, #92]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002858:	5cd3      	ldrb	r3, [r2, r3]
 800285a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d010      	beq.n	8002888 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002866:	4b11      	ldr	r3, [pc, #68]	; (80028ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	0c5b      	lsrs	r3, r3, #17
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	4a11      	ldr	r2, [pc, #68]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002872:	5cd3      	ldrb	r3, [r2, r3]
 8002874:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a0d      	ldr	r2, [pc, #52]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800287a:	fb03 f202 	mul.w	r2, r3, r2
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	fbb2 f3f3 	udiv	r3, r2, r3
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	e004      	b.n	8002892 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a0c      	ldr	r2, [pc, #48]	; (80028bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800288c:	fb02 f303 	mul.w	r3, r2, r3
 8002890:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	613b      	str	r3, [r7, #16]
      break;
 8002896:	e002      	b.n	800289e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002898:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800289a:	613b      	str	r3, [r7, #16]
      break;
 800289c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800289e:	693b      	ldr	r3, [r7, #16]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	371c      	adds	r7, #28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000
 80028b0:	007a1200 	.word	0x007a1200
 80028b4:	080040ac 	.word	0x080040ac
 80028b8:	080040bc 	.word	0x080040bc
 80028bc:	003d0900 	.word	0x003d0900

080028c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c4:	4b02      	ldr	r3, [pc, #8]	; (80028d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80028c6:	681b      	ldr	r3, [r3, #0]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr
 80028d0:	20000000 	.word	0x20000000

080028d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028d8:	f7ff fff2 	bl	80028c0 <HAL_RCC_GetHCLKFreq>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	0a1b      	lsrs	r3, r3, #8
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	4903      	ldr	r1, [pc, #12]	; (80028f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ea:	5ccb      	ldrb	r3, [r1, r3]
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40021000 	.word	0x40021000
 80028f8:	080040a4 	.word	0x080040a4

080028fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002900:	f7ff ffde 	bl	80028c0 <HAL_RCC_GetHCLKFreq>
 8002904:	4602      	mov	r2, r0
 8002906:	4b05      	ldr	r3, [pc, #20]	; (800291c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	0adb      	lsrs	r3, r3, #11
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	4903      	ldr	r1, [pc, #12]	; (8002920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002912:	5ccb      	ldrb	r3, [r1, r3]
 8002914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002918:	4618      	mov	r0, r3
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40021000 	.word	0x40021000
 8002920:	080040a4 	.word	0x080040a4

08002924 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800292c:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <RCC_Delay+0x34>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a0a      	ldr	r2, [pc, #40]	; (800295c <RCC_Delay+0x38>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	0a5b      	lsrs	r3, r3, #9
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	fb02 f303 	mul.w	r3, r2, r3
 800293e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002940:	bf00      	nop
  }
  while (Delay --);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1e5a      	subs	r2, r3, #1
 8002946:	60fa      	str	r2, [r7, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1f9      	bne.n	8002940 <RCC_Delay+0x1c>
}
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	20000000 	.word	0x20000000
 800295c:	10624dd3 	.word	0x10624dd3

08002960 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e04a      	b.n	8002a08 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d106      	bne.n	800298c <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7fe f958 	bl	8000c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2224      	movs	r2, #36	; 0x24
 8002990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f925 	bl	8002bf4 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695a      	ldr	r2, [r3, #20]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80029c8:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695a      	ldr	r2, [r3, #20]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 0208 	orr.w	r2, r2, #8
 80029d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2220      	movs	r2, #32
 80029fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08a      	sub	sp, #40	; 0x28
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	603b      	str	r3, [r7, #0]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b20      	cmp	r3, #32
 8002a2e:	d16d      	bne.n	8002b0c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d002      	beq.n	8002a3c <HAL_UART_Transmit+0x2c>
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e066      	b.n	8002b0e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2221      	movs	r2, #33	; 0x21
 8002a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a4e:	f7ff f8c9 	bl	8001be4 <HAL_GetTick>
 8002a52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	88fa      	ldrh	r2, [r7, #6]
 8002a58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	88fa      	ldrh	r2, [r7, #6]
 8002a5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a68:	d108      	bne.n	8002a7c <HAL_UART_Transmit+0x6c>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d104      	bne.n	8002a7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	61bb      	str	r3, [r7, #24]
 8002a7a:	e003      	b.n	8002a84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a84:	e02a      	b.n	8002adc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2180      	movs	r1, #128	; 0x80
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 f840 	bl	8002b16 <UART_WaitOnFlagUntilTimeout>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e036      	b.n	8002b0e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10b      	bne.n	8002abe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ab4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	3302      	adds	r3, #2
 8002aba:	61bb      	str	r3, [r7, #24]
 8002abc:	e007      	b.n	8002ace <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	781a      	ldrb	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	3301      	adds	r3, #1
 8002acc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1cf      	bne.n	8002a86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2200      	movs	r2, #0
 8002aee:	2140      	movs	r1, #64	; 0x40
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 f810 	bl	8002b16 <UART_WaitOnFlagUntilTimeout>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e006      	b.n	8002b0e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	e000      	b.n	8002b0e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002b0c:	2302      	movs	r3, #2
  }
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3720      	adds	r7, #32
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b090      	sub	sp, #64	; 0x40
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	60f8      	str	r0, [r7, #12]
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	603b      	str	r3, [r7, #0]
 8002b22:	4613      	mov	r3, r2
 8002b24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b26:	e050      	b.n	8002bca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2e:	d04c      	beq.n	8002bca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d007      	beq.n	8002b46 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b36:	f7ff f855 	bl	8001be4 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d241      	bcs.n	8002bca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	330c      	adds	r3, #12
 8002b4c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b50:	e853 3f00 	ldrex	r3, [r3]
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	330c      	adds	r3, #12
 8002b64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b66:	637a      	str	r2, [r7, #52]	; 0x34
 8002b68:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b6e:	e841 2300 	strex	r3, r2, [r1]
 8002b72:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1e5      	bne.n	8002b46 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	3314      	adds	r3, #20
 8002b80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	e853 3f00 	ldrex	r3, [r3]
 8002b88:	613b      	str	r3, [r7, #16]
   return(result);
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	f023 0301 	bic.w	r3, r3, #1
 8002b90:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	3314      	adds	r3, #20
 8002b98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b9a:	623a      	str	r2, [r7, #32]
 8002b9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b9e:	69f9      	ldr	r1, [r7, #28]
 8002ba0:	6a3a      	ldr	r2, [r7, #32]
 8002ba2:	e841 2300 	strex	r3, r2, [r1]
 8002ba6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1e5      	bne.n	8002b7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e00f      	b.n	8002bea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	bf0c      	ite	eq
 8002bda:	2301      	moveq	r3, #1
 8002bdc:	2300      	movne	r3, #0
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	461a      	mov	r2, r3
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d09f      	beq.n	8002b28 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3740      	adds	r7, #64	; 0x40
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c2e:	f023 030c 	bic.w	r3, r3, #12
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6812      	ldr	r2, [r2, #0]
 8002c36:	68b9      	ldr	r1, [r7, #8]
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699a      	ldr	r2, [r3, #24]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a2c      	ldr	r2, [pc, #176]	; (8002d08 <UART_SetConfig+0x114>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d103      	bne.n	8002c64 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c5c:	f7ff fe4e 	bl	80028fc <HAL_RCC_GetPCLK2Freq>
 8002c60:	60f8      	str	r0, [r7, #12]
 8002c62:	e002      	b.n	8002c6a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c64:	f7ff fe36 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8002c68:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	009a      	lsls	r2, r3, #2
 8002c74:	441a      	add	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c80:	4a22      	ldr	r2, [pc, #136]	; (8002d0c <UART_SetConfig+0x118>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	0119      	lsls	r1, r3, #4
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	009a      	lsls	r2, r3, #2
 8002c94:	441a      	add	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ca0:	4b1a      	ldr	r3, [pc, #104]	; (8002d0c <UART_SetConfig+0x118>)
 8002ca2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	2064      	movs	r0, #100	; 0x64
 8002caa:	fb00 f303 	mul.w	r3, r0, r3
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	3332      	adds	r3, #50	; 0x32
 8002cb4:	4a15      	ldr	r2, [pc, #84]	; (8002d0c <UART_SetConfig+0x118>)
 8002cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cc0:	4419      	add	r1, r3
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	009a      	lsls	r2, r3, #2
 8002ccc:	441a      	add	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <UART_SetConfig+0x118>)
 8002cda:	fba3 0302 	umull	r0, r3, r3, r2
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	2064      	movs	r0, #100	; 0x64
 8002ce2:	fb00 f303 	mul.w	r3, r0, r3
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	3332      	adds	r3, #50	; 0x32
 8002cec:	4a07      	ldr	r2, [pc, #28]	; (8002d0c <UART_SetConfig+0x118>)
 8002cee:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	f003 020f 	and.w	r2, r3, #15
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	440a      	add	r2, r1
 8002cfe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d00:	bf00      	nop
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40013800 	.word	0x40013800
 8002d0c:	51eb851f 	.word	0x51eb851f

08002d10 <__errno>:
 8002d10:	4b01      	ldr	r3, [pc, #4]	; (8002d18 <__errno+0x8>)
 8002d12:	6818      	ldr	r0, [r3, #0]
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	2000004c 	.word	0x2000004c

08002d1c <__libc_init_array>:
 8002d1c:	b570      	push	{r4, r5, r6, lr}
 8002d1e:	2600      	movs	r6, #0
 8002d20:	4d0c      	ldr	r5, [pc, #48]	; (8002d54 <__libc_init_array+0x38>)
 8002d22:	4c0d      	ldr	r4, [pc, #52]	; (8002d58 <__libc_init_array+0x3c>)
 8002d24:	1b64      	subs	r4, r4, r5
 8002d26:	10a4      	asrs	r4, r4, #2
 8002d28:	42a6      	cmp	r6, r4
 8002d2a:	d109      	bne.n	8002d40 <__libc_init_array+0x24>
 8002d2c:	f001 f95a 	bl	8003fe4 <_init>
 8002d30:	2600      	movs	r6, #0
 8002d32:	4d0a      	ldr	r5, [pc, #40]	; (8002d5c <__libc_init_array+0x40>)
 8002d34:	4c0a      	ldr	r4, [pc, #40]	; (8002d60 <__libc_init_array+0x44>)
 8002d36:	1b64      	subs	r4, r4, r5
 8002d38:	10a4      	asrs	r4, r4, #2
 8002d3a:	42a6      	cmp	r6, r4
 8002d3c:	d105      	bne.n	8002d4a <__libc_init_array+0x2e>
 8002d3e:	bd70      	pop	{r4, r5, r6, pc}
 8002d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d44:	4798      	blx	r3
 8002d46:	3601      	adds	r6, #1
 8002d48:	e7ee      	b.n	8002d28 <__libc_init_array+0xc>
 8002d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d4e:	4798      	blx	r3
 8002d50:	3601      	adds	r6, #1
 8002d52:	e7f2      	b.n	8002d3a <__libc_init_array+0x1e>
 8002d54:	08004158 	.word	0x08004158
 8002d58:	08004158 	.word	0x08004158
 8002d5c:	08004158 	.word	0x08004158
 8002d60:	0800415c 	.word	0x0800415c

08002d64 <memset>:
 8002d64:	4603      	mov	r3, r0
 8002d66:	4402      	add	r2, r0
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d100      	bne.n	8002d6e <memset+0xa>
 8002d6c:	4770      	bx	lr
 8002d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d72:	e7f9      	b.n	8002d68 <memset+0x4>

08002d74 <putchar>:
 8002d74:	b538      	push	{r3, r4, r5, lr}
 8002d76:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <putchar+0x24>)
 8002d78:	4605      	mov	r5, r0
 8002d7a:	681c      	ldr	r4, [r3, #0]
 8002d7c:	b124      	cbz	r4, 8002d88 <putchar+0x14>
 8002d7e:	69a3      	ldr	r3, [r4, #24]
 8002d80:	b913      	cbnz	r3, 8002d88 <putchar+0x14>
 8002d82:	4620      	mov	r0, r4
 8002d84:	f000 fa6c 	bl	8003260 <__sinit>
 8002d88:	4629      	mov	r1, r5
 8002d8a:	4620      	mov	r0, r4
 8002d8c:	68a2      	ldr	r2, [r4, #8]
 8002d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d92:	f000 bf35 	b.w	8003c00 <_putc_r>
 8002d96:	bf00      	nop
 8002d98:	2000004c 	.word	0x2000004c

08002d9c <_puts_r>:
 8002d9c:	b570      	push	{r4, r5, r6, lr}
 8002d9e:	460e      	mov	r6, r1
 8002da0:	4605      	mov	r5, r0
 8002da2:	b118      	cbz	r0, 8002dac <_puts_r+0x10>
 8002da4:	6983      	ldr	r3, [r0, #24]
 8002da6:	b90b      	cbnz	r3, 8002dac <_puts_r+0x10>
 8002da8:	f000 fa5a 	bl	8003260 <__sinit>
 8002dac:	69ab      	ldr	r3, [r5, #24]
 8002dae:	68ac      	ldr	r4, [r5, #8]
 8002db0:	b913      	cbnz	r3, 8002db8 <_puts_r+0x1c>
 8002db2:	4628      	mov	r0, r5
 8002db4:	f000 fa54 	bl	8003260 <__sinit>
 8002db8:	4b2c      	ldr	r3, [pc, #176]	; (8002e6c <_puts_r+0xd0>)
 8002dba:	429c      	cmp	r4, r3
 8002dbc:	d120      	bne.n	8002e00 <_puts_r+0x64>
 8002dbe:	686c      	ldr	r4, [r5, #4]
 8002dc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002dc2:	07db      	lsls	r3, r3, #31
 8002dc4:	d405      	bmi.n	8002dd2 <_puts_r+0x36>
 8002dc6:	89a3      	ldrh	r3, [r4, #12]
 8002dc8:	0598      	lsls	r0, r3, #22
 8002dca:	d402      	bmi.n	8002dd2 <_puts_r+0x36>
 8002dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002dce:	f000 fae5 	bl	800339c <__retarget_lock_acquire_recursive>
 8002dd2:	89a3      	ldrh	r3, [r4, #12]
 8002dd4:	0719      	lsls	r1, r3, #28
 8002dd6:	d51d      	bpl.n	8002e14 <_puts_r+0x78>
 8002dd8:	6923      	ldr	r3, [r4, #16]
 8002dda:	b1db      	cbz	r3, 8002e14 <_puts_r+0x78>
 8002ddc:	3e01      	subs	r6, #1
 8002dde:	68a3      	ldr	r3, [r4, #8]
 8002de0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002de4:	3b01      	subs	r3, #1
 8002de6:	60a3      	str	r3, [r4, #8]
 8002de8:	bb39      	cbnz	r1, 8002e3a <_puts_r+0x9e>
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	da38      	bge.n	8002e60 <_puts_r+0xc4>
 8002dee:	4622      	mov	r2, r4
 8002df0:	210a      	movs	r1, #10
 8002df2:	4628      	mov	r0, r5
 8002df4:	f000 f85e 	bl	8002eb4 <__swbuf_r>
 8002df8:	3001      	adds	r0, #1
 8002dfa:	d011      	beq.n	8002e20 <_puts_r+0x84>
 8002dfc:	250a      	movs	r5, #10
 8002dfe:	e011      	b.n	8002e24 <_puts_r+0x88>
 8002e00:	4b1b      	ldr	r3, [pc, #108]	; (8002e70 <_puts_r+0xd4>)
 8002e02:	429c      	cmp	r4, r3
 8002e04:	d101      	bne.n	8002e0a <_puts_r+0x6e>
 8002e06:	68ac      	ldr	r4, [r5, #8]
 8002e08:	e7da      	b.n	8002dc0 <_puts_r+0x24>
 8002e0a:	4b1a      	ldr	r3, [pc, #104]	; (8002e74 <_puts_r+0xd8>)
 8002e0c:	429c      	cmp	r4, r3
 8002e0e:	bf08      	it	eq
 8002e10:	68ec      	ldreq	r4, [r5, #12]
 8002e12:	e7d5      	b.n	8002dc0 <_puts_r+0x24>
 8002e14:	4621      	mov	r1, r4
 8002e16:	4628      	mov	r0, r5
 8002e18:	f000 f89e 	bl	8002f58 <__swsetup_r>
 8002e1c:	2800      	cmp	r0, #0
 8002e1e:	d0dd      	beq.n	8002ddc <_puts_r+0x40>
 8002e20:	f04f 35ff 	mov.w	r5, #4294967295
 8002e24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e26:	07da      	lsls	r2, r3, #31
 8002e28:	d405      	bmi.n	8002e36 <_puts_r+0x9a>
 8002e2a:	89a3      	ldrh	r3, [r4, #12]
 8002e2c:	059b      	lsls	r3, r3, #22
 8002e2e:	d402      	bmi.n	8002e36 <_puts_r+0x9a>
 8002e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e32:	f000 fab4 	bl	800339e <__retarget_lock_release_recursive>
 8002e36:	4628      	mov	r0, r5
 8002e38:	bd70      	pop	{r4, r5, r6, pc}
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	da04      	bge.n	8002e48 <_puts_r+0xac>
 8002e3e:	69a2      	ldr	r2, [r4, #24]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	dc06      	bgt.n	8002e52 <_puts_r+0xb6>
 8002e44:	290a      	cmp	r1, #10
 8002e46:	d004      	beq.n	8002e52 <_puts_r+0xb6>
 8002e48:	6823      	ldr	r3, [r4, #0]
 8002e4a:	1c5a      	adds	r2, r3, #1
 8002e4c:	6022      	str	r2, [r4, #0]
 8002e4e:	7019      	strb	r1, [r3, #0]
 8002e50:	e7c5      	b.n	8002dde <_puts_r+0x42>
 8002e52:	4622      	mov	r2, r4
 8002e54:	4628      	mov	r0, r5
 8002e56:	f000 f82d 	bl	8002eb4 <__swbuf_r>
 8002e5a:	3001      	adds	r0, #1
 8002e5c:	d1bf      	bne.n	8002dde <_puts_r+0x42>
 8002e5e:	e7df      	b.n	8002e20 <_puts_r+0x84>
 8002e60:	250a      	movs	r5, #10
 8002e62:	6823      	ldr	r3, [r4, #0]
 8002e64:	1c5a      	adds	r2, r3, #1
 8002e66:	6022      	str	r2, [r4, #0]
 8002e68:	701d      	strb	r5, [r3, #0]
 8002e6a:	e7db      	b.n	8002e24 <_puts_r+0x88>
 8002e6c:	080040e4 	.word	0x080040e4
 8002e70:	08004104 	.word	0x08004104
 8002e74:	080040c4 	.word	0x080040c4

08002e78 <puts>:
 8002e78:	4b02      	ldr	r3, [pc, #8]	; (8002e84 <puts+0xc>)
 8002e7a:	4601      	mov	r1, r0
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	f7ff bf8d 	b.w	8002d9c <_puts_r>
 8002e82:	bf00      	nop
 8002e84:	2000004c 	.word	0x2000004c

08002e88 <viprintf>:
 8002e88:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <viprintf+0x28>)
 8002e8a:	b570      	push	{r4, r5, r6, lr}
 8002e8c:	681c      	ldr	r4, [r3, #0]
 8002e8e:	4605      	mov	r5, r0
 8002e90:	460e      	mov	r6, r1
 8002e92:	b124      	cbz	r4, 8002e9e <viprintf+0x16>
 8002e94:	69a3      	ldr	r3, [r4, #24]
 8002e96:	b913      	cbnz	r3, 8002e9e <viprintf+0x16>
 8002e98:	4620      	mov	r0, r4
 8002e9a:	f000 f9e1 	bl	8003260 <__sinit>
 8002e9e:	4633      	mov	r3, r6
 8002ea0:	462a      	mov	r2, r5
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	68a1      	ldr	r1, [r4, #8]
 8002ea6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002eaa:	f000 bbe3 	b.w	8003674 <_vfiprintf_r>
 8002eae:	bf00      	nop
 8002eb0:	2000004c 	.word	0x2000004c

08002eb4 <__swbuf_r>:
 8002eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb6:	460e      	mov	r6, r1
 8002eb8:	4614      	mov	r4, r2
 8002eba:	4605      	mov	r5, r0
 8002ebc:	b118      	cbz	r0, 8002ec6 <__swbuf_r+0x12>
 8002ebe:	6983      	ldr	r3, [r0, #24]
 8002ec0:	b90b      	cbnz	r3, 8002ec6 <__swbuf_r+0x12>
 8002ec2:	f000 f9cd 	bl	8003260 <__sinit>
 8002ec6:	4b21      	ldr	r3, [pc, #132]	; (8002f4c <__swbuf_r+0x98>)
 8002ec8:	429c      	cmp	r4, r3
 8002eca:	d12b      	bne.n	8002f24 <__swbuf_r+0x70>
 8002ecc:	686c      	ldr	r4, [r5, #4]
 8002ece:	69a3      	ldr	r3, [r4, #24]
 8002ed0:	60a3      	str	r3, [r4, #8]
 8002ed2:	89a3      	ldrh	r3, [r4, #12]
 8002ed4:	071a      	lsls	r2, r3, #28
 8002ed6:	d52f      	bpl.n	8002f38 <__swbuf_r+0x84>
 8002ed8:	6923      	ldr	r3, [r4, #16]
 8002eda:	b36b      	cbz	r3, 8002f38 <__swbuf_r+0x84>
 8002edc:	6923      	ldr	r3, [r4, #16]
 8002ede:	6820      	ldr	r0, [r4, #0]
 8002ee0:	b2f6      	uxtb	r6, r6
 8002ee2:	1ac0      	subs	r0, r0, r3
 8002ee4:	6963      	ldr	r3, [r4, #20]
 8002ee6:	4637      	mov	r7, r6
 8002ee8:	4283      	cmp	r3, r0
 8002eea:	dc04      	bgt.n	8002ef6 <__swbuf_r+0x42>
 8002eec:	4621      	mov	r1, r4
 8002eee:	4628      	mov	r0, r5
 8002ef0:	f000 f922 	bl	8003138 <_fflush_r>
 8002ef4:	bb30      	cbnz	r0, 8002f44 <__swbuf_r+0x90>
 8002ef6:	68a3      	ldr	r3, [r4, #8]
 8002ef8:	3001      	adds	r0, #1
 8002efa:	3b01      	subs	r3, #1
 8002efc:	60a3      	str	r3, [r4, #8]
 8002efe:	6823      	ldr	r3, [r4, #0]
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	6022      	str	r2, [r4, #0]
 8002f04:	701e      	strb	r6, [r3, #0]
 8002f06:	6963      	ldr	r3, [r4, #20]
 8002f08:	4283      	cmp	r3, r0
 8002f0a:	d004      	beq.n	8002f16 <__swbuf_r+0x62>
 8002f0c:	89a3      	ldrh	r3, [r4, #12]
 8002f0e:	07db      	lsls	r3, r3, #31
 8002f10:	d506      	bpl.n	8002f20 <__swbuf_r+0x6c>
 8002f12:	2e0a      	cmp	r6, #10
 8002f14:	d104      	bne.n	8002f20 <__swbuf_r+0x6c>
 8002f16:	4621      	mov	r1, r4
 8002f18:	4628      	mov	r0, r5
 8002f1a:	f000 f90d 	bl	8003138 <_fflush_r>
 8002f1e:	b988      	cbnz	r0, 8002f44 <__swbuf_r+0x90>
 8002f20:	4638      	mov	r0, r7
 8002f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f24:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <__swbuf_r+0x9c>)
 8002f26:	429c      	cmp	r4, r3
 8002f28:	d101      	bne.n	8002f2e <__swbuf_r+0x7a>
 8002f2a:	68ac      	ldr	r4, [r5, #8]
 8002f2c:	e7cf      	b.n	8002ece <__swbuf_r+0x1a>
 8002f2e:	4b09      	ldr	r3, [pc, #36]	; (8002f54 <__swbuf_r+0xa0>)
 8002f30:	429c      	cmp	r4, r3
 8002f32:	bf08      	it	eq
 8002f34:	68ec      	ldreq	r4, [r5, #12]
 8002f36:	e7ca      	b.n	8002ece <__swbuf_r+0x1a>
 8002f38:	4621      	mov	r1, r4
 8002f3a:	4628      	mov	r0, r5
 8002f3c:	f000 f80c 	bl	8002f58 <__swsetup_r>
 8002f40:	2800      	cmp	r0, #0
 8002f42:	d0cb      	beq.n	8002edc <__swbuf_r+0x28>
 8002f44:	f04f 37ff 	mov.w	r7, #4294967295
 8002f48:	e7ea      	b.n	8002f20 <__swbuf_r+0x6c>
 8002f4a:	bf00      	nop
 8002f4c:	080040e4 	.word	0x080040e4
 8002f50:	08004104 	.word	0x08004104
 8002f54:	080040c4 	.word	0x080040c4

08002f58 <__swsetup_r>:
 8002f58:	4b32      	ldr	r3, [pc, #200]	; (8003024 <__swsetup_r+0xcc>)
 8002f5a:	b570      	push	{r4, r5, r6, lr}
 8002f5c:	681d      	ldr	r5, [r3, #0]
 8002f5e:	4606      	mov	r6, r0
 8002f60:	460c      	mov	r4, r1
 8002f62:	b125      	cbz	r5, 8002f6e <__swsetup_r+0x16>
 8002f64:	69ab      	ldr	r3, [r5, #24]
 8002f66:	b913      	cbnz	r3, 8002f6e <__swsetup_r+0x16>
 8002f68:	4628      	mov	r0, r5
 8002f6a:	f000 f979 	bl	8003260 <__sinit>
 8002f6e:	4b2e      	ldr	r3, [pc, #184]	; (8003028 <__swsetup_r+0xd0>)
 8002f70:	429c      	cmp	r4, r3
 8002f72:	d10f      	bne.n	8002f94 <__swsetup_r+0x3c>
 8002f74:	686c      	ldr	r4, [r5, #4]
 8002f76:	89a3      	ldrh	r3, [r4, #12]
 8002f78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f7c:	0719      	lsls	r1, r3, #28
 8002f7e:	d42c      	bmi.n	8002fda <__swsetup_r+0x82>
 8002f80:	06dd      	lsls	r5, r3, #27
 8002f82:	d411      	bmi.n	8002fa8 <__swsetup_r+0x50>
 8002f84:	2309      	movs	r3, #9
 8002f86:	6033      	str	r3, [r6, #0]
 8002f88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f90:	81a3      	strh	r3, [r4, #12]
 8002f92:	e03e      	b.n	8003012 <__swsetup_r+0xba>
 8002f94:	4b25      	ldr	r3, [pc, #148]	; (800302c <__swsetup_r+0xd4>)
 8002f96:	429c      	cmp	r4, r3
 8002f98:	d101      	bne.n	8002f9e <__swsetup_r+0x46>
 8002f9a:	68ac      	ldr	r4, [r5, #8]
 8002f9c:	e7eb      	b.n	8002f76 <__swsetup_r+0x1e>
 8002f9e:	4b24      	ldr	r3, [pc, #144]	; (8003030 <__swsetup_r+0xd8>)
 8002fa0:	429c      	cmp	r4, r3
 8002fa2:	bf08      	it	eq
 8002fa4:	68ec      	ldreq	r4, [r5, #12]
 8002fa6:	e7e6      	b.n	8002f76 <__swsetup_r+0x1e>
 8002fa8:	0758      	lsls	r0, r3, #29
 8002faa:	d512      	bpl.n	8002fd2 <__swsetup_r+0x7a>
 8002fac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fae:	b141      	cbz	r1, 8002fc2 <__swsetup_r+0x6a>
 8002fb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fb4:	4299      	cmp	r1, r3
 8002fb6:	d002      	beq.n	8002fbe <__swsetup_r+0x66>
 8002fb8:	4630      	mov	r0, r6
 8002fba:	f000 fa57 	bl	800346c <_free_r>
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	6363      	str	r3, [r4, #52]	; 0x34
 8002fc2:	89a3      	ldrh	r3, [r4, #12]
 8002fc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002fc8:	81a3      	strh	r3, [r4, #12]
 8002fca:	2300      	movs	r3, #0
 8002fcc:	6063      	str	r3, [r4, #4]
 8002fce:	6923      	ldr	r3, [r4, #16]
 8002fd0:	6023      	str	r3, [r4, #0]
 8002fd2:	89a3      	ldrh	r3, [r4, #12]
 8002fd4:	f043 0308 	orr.w	r3, r3, #8
 8002fd8:	81a3      	strh	r3, [r4, #12]
 8002fda:	6923      	ldr	r3, [r4, #16]
 8002fdc:	b94b      	cbnz	r3, 8002ff2 <__swsetup_r+0x9a>
 8002fde:	89a3      	ldrh	r3, [r4, #12]
 8002fe0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fe8:	d003      	beq.n	8002ff2 <__swsetup_r+0x9a>
 8002fea:	4621      	mov	r1, r4
 8002fec:	4630      	mov	r0, r6
 8002fee:	f000 f9fd 	bl	80033ec <__smakebuf_r>
 8002ff2:	89a0      	ldrh	r0, [r4, #12]
 8002ff4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ff8:	f010 0301 	ands.w	r3, r0, #1
 8002ffc:	d00a      	beq.n	8003014 <__swsetup_r+0xbc>
 8002ffe:	2300      	movs	r3, #0
 8003000:	60a3      	str	r3, [r4, #8]
 8003002:	6963      	ldr	r3, [r4, #20]
 8003004:	425b      	negs	r3, r3
 8003006:	61a3      	str	r3, [r4, #24]
 8003008:	6923      	ldr	r3, [r4, #16]
 800300a:	b943      	cbnz	r3, 800301e <__swsetup_r+0xc6>
 800300c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003010:	d1ba      	bne.n	8002f88 <__swsetup_r+0x30>
 8003012:	bd70      	pop	{r4, r5, r6, pc}
 8003014:	0781      	lsls	r1, r0, #30
 8003016:	bf58      	it	pl
 8003018:	6963      	ldrpl	r3, [r4, #20]
 800301a:	60a3      	str	r3, [r4, #8]
 800301c:	e7f4      	b.n	8003008 <__swsetup_r+0xb0>
 800301e:	2000      	movs	r0, #0
 8003020:	e7f7      	b.n	8003012 <__swsetup_r+0xba>
 8003022:	bf00      	nop
 8003024:	2000004c 	.word	0x2000004c
 8003028:	080040e4 	.word	0x080040e4
 800302c:	08004104 	.word	0x08004104
 8003030:	080040c4 	.word	0x080040c4

08003034 <__sflush_r>:
 8003034:	898a      	ldrh	r2, [r1, #12]
 8003036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003038:	4605      	mov	r5, r0
 800303a:	0710      	lsls	r0, r2, #28
 800303c:	460c      	mov	r4, r1
 800303e:	d457      	bmi.n	80030f0 <__sflush_r+0xbc>
 8003040:	684b      	ldr	r3, [r1, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	dc04      	bgt.n	8003050 <__sflush_r+0x1c>
 8003046:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003048:	2b00      	cmp	r3, #0
 800304a:	dc01      	bgt.n	8003050 <__sflush_r+0x1c>
 800304c:	2000      	movs	r0, #0
 800304e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003050:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003052:	2e00      	cmp	r6, #0
 8003054:	d0fa      	beq.n	800304c <__sflush_r+0x18>
 8003056:	2300      	movs	r3, #0
 8003058:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800305c:	682f      	ldr	r7, [r5, #0]
 800305e:	602b      	str	r3, [r5, #0]
 8003060:	d032      	beq.n	80030c8 <__sflush_r+0x94>
 8003062:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003064:	89a3      	ldrh	r3, [r4, #12]
 8003066:	075a      	lsls	r2, r3, #29
 8003068:	d505      	bpl.n	8003076 <__sflush_r+0x42>
 800306a:	6863      	ldr	r3, [r4, #4]
 800306c:	1ac0      	subs	r0, r0, r3
 800306e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003070:	b10b      	cbz	r3, 8003076 <__sflush_r+0x42>
 8003072:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003074:	1ac0      	subs	r0, r0, r3
 8003076:	2300      	movs	r3, #0
 8003078:	4602      	mov	r2, r0
 800307a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800307c:	4628      	mov	r0, r5
 800307e:	6a21      	ldr	r1, [r4, #32]
 8003080:	47b0      	blx	r6
 8003082:	1c43      	adds	r3, r0, #1
 8003084:	89a3      	ldrh	r3, [r4, #12]
 8003086:	d106      	bne.n	8003096 <__sflush_r+0x62>
 8003088:	6829      	ldr	r1, [r5, #0]
 800308a:	291d      	cmp	r1, #29
 800308c:	d82c      	bhi.n	80030e8 <__sflush_r+0xb4>
 800308e:	4a29      	ldr	r2, [pc, #164]	; (8003134 <__sflush_r+0x100>)
 8003090:	40ca      	lsrs	r2, r1
 8003092:	07d6      	lsls	r6, r2, #31
 8003094:	d528      	bpl.n	80030e8 <__sflush_r+0xb4>
 8003096:	2200      	movs	r2, #0
 8003098:	6062      	str	r2, [r4, #4]
 800309a:	6922      	ldr	r2, [r4, #16]
 800309c:	04d9      	lsls	r1, r3, #19
 800309e:	6022      	str	r2, [r4, #0]
 80030a0:	d504      	bpl.n	80030ac <__sflush_r+0x78>
 80030a2:	1c42      	adds	r2, r0, #1
 80030a4:	d101      	bne.n	80030aa <__sflush_r+0x76>
 80030a6:	682b      	ldr	r3, [r5, #0]
 80030a8:	b903      	cbnz	r3, 80030ac <__sflush_r+0x78>
 80030aa:	6560      	str	r0, [r4, #84]	; 0x54
 80030ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030ae:	602f      	str	r7, [r5, #0]
 80030b0:	2900      	cmp	r1, #0
 80030b2:	d0cb      	beq.n	800304c <__sflush_r+0x18>
 80030b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030b8:	4299      	cmp	r1, r3
 80030ba:	d002      	beq.n	80030c2 <__sflush_r+0x8e>
 80030bc:	4628      	mov	r0, r5
 80030be:	f000 f9d5 	bl	800346c <_free_r>
 80030c2:	2000      	movs	r0, #0
 80030c4:	6360      	str	r0, [r4, #52]	; 0x34
 80030c6:	e7c2      	b.n	800304e <__sflush_r+0x1a>
 80030c8:	6a21      	ldr	r1, [r4, #32]
 80030ca:	2301      	movs	r3, #1
 80030cc:	4628      	mov	r0, r5
 80030ce:	47b0      	blx	r6
 80030d0:	1c41      	adds	r1, r0, #1
 80030d2:	d1c7      	bne.n	8003064 <__sflush_r+0x30>
 80030d4:	682b      	ldr	r3, [r5, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0c4      	beq.n	8003064 <__sflush_r+0x30>
 80030da:	2b1d      	cmp	r3, #29
 80030dc:	d001      	beq.n	80030e2 <__sflush_r+0xae>
 80030de:	2b16      	cmp	r3, #22
 80030e0:	d101      	bne.n	80030e6 <__sflush_r+0xb2>
 80030e2:	602f      	str	r7, [r5, #0]
 80030e4:	e7b2      	b.n	800304c <__sflush_r+0x18>
 80030e6:	89a3      	ldrh	r3, [r4, #12]
 80030e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030ec:	81a3      	strh	r3, [r4, #12]
 80030ee:	e7ae      	b.n	800304e <__sflush_r+0x1a>
 80030f0:	690f      	ldr	r7, [r1, #16]
 80030f2:	2f00      	cmp	r7, #0
 80030f4:	d0aa      	beq.n	800304c <__sflush_r+0x18>
 80030f6:	0793      	lsls	r3, r2, #30
 80030f8:	bf18      	it	ne
 80030fa:	2300      	movne	r3, #0
 80030fc:	680e      	ldr	r6, [r1, #0]
 80030fe:	bf08      	it	eq
 8003100:	694b      	ldreq	r3, [r1, #20]
 8003102:	1bf6      	subs	r6, r6, r7
 8003104:	600f      	str	r7, [r1, #0]
 8003106:	608b      	str	r3, [r1, #8]
 8003108:	2e00      	cmp	r6, #0
 800310a:	dd9f      	ble.n	800304c <__sflush_r+0x18>
 800310c:	4633      	mov	r3, r6
 800310e:	463a      	mov	r2, r7
 8003110:	4628      	mov	r0, r5
 8003112:	6a21      	ldr	r1, [r4, #32]
 8003114:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003118:	47e0      	blx	ip
 800311a:	2800      	cmp	r0, #0
 800311c:	dc06      	bgt.n	800312c <__sflush_r+0xf8>
 800311e:	89a3      	ldrh	r3, [r4, #12]
 8003120:	f04f 30ff 	mov.w	r0, #4294967295
 8003124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003128:	81a3      	strh	r3, [r4, #12]
 800312a:	e790      	b.n	800304e <__sflush_r+0x1a>
 800312c:	4407      	add	r7, r0
 800312e:	1a36      	subs	r6, r6, r0
 8003130:	e7ea      	b.n	8003108 <__sflush_r+0xd4>
 8003132:	bf00      	nop
 8003134:	20400001 	.word	0x20400001

08003138 <_fflush_r>:
 8003138:	b538      	push	{r3, r4, r5, lr}
 800313a:	690b      	ldr	r3, [r1, #16]
 800313c:	4605      	mov	r5, r0
 800313e:	460c      	mov	r4, r1
 8003140:	b913      	cbnz	r3, 8003148 <_fflush_r+0x10>
 8003142:	2500      	movs	r5, #0
 8003144:	4628      	mov	r0, r5
 8003146:	bd38      	pop	{r3, r4, r5, pc}
 8003148:	b118      	cbz	r0, 8003152 <_fflush_r+0x1a>
 800314a:	6983      	ldr	r3, [r0, #24]
 800314c:	b90b      	cbnz	r3, 8003152 <_fflush_r+0x1a>
 800314e:	f000 f887 	bl	8003260 <__sinit>
 8003152:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <_fflush_r+0x6c>)
 8003154:	429c      	cmp	r4, r3
 8003156:	d11b      	bne.n	8003190 <_fflush_r+0x58>
 8003158:	686c      	ldr	r4, [r5, #4]
 800315a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0ef      	beq.n	8003142 <_fflush_r+0xa>
 8003162:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003164:	07d0      	lsls	r0, r2, #31
 8003166:	d404      	bmi.n	8003172 <_fflush_r+0x3a>
 8003168:	0599      	lsls	r1, r3, #22
 800316a:	d402      	bmi.n	8003172 <_fflush_r+0x3a>
 800316c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800316e:	f000 f915 	bl	800339c <__retarget_lock_acquire_recursive>
 8003172:	4628      	mov	r0, r5
 8003174:	4621      	mov	r1, r4
 8003176:	f7ff ff5d 	bl	8003034 <__sflush_r>
 800317a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800317c:	4605      	mov	r5, r0
 800317e:	07da      	lsls	r2, r3, #31
 8003180:	d4e0      	bmi.n	8003144 <_fflush_r+0xc>
 8003182:	89a3      	ldrh	r3, [r4, #12]
 8003184:	059b      	lsls	r3, r3, #22
 8003186:	d4dd      	bmi.n	8003144 <_fflush_r+0xc>
 8003188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800318a:	f000 f908 	bl	800339e <__retarget_lock_release_recursive>
 800318e:	e7d9      	b.n	8003144 <_fflush_r+0xc>
 8003190:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <_fflush_r+0x70>)
 8003192:	429c      	cmp	r4, r3
 8003194:	d101      	bne.n	800319a <_fflush_r+0x62>
 8003196:	68ac      	ldr	r4, [r5, #8]
 8003198:	e7df      	b.n	800315a <_fflush_r+0x22>
 800319a:	4b04      	ldr	r3, [pc, #16]	; (80031ac <_fflush_r+0x74>)
 800319c:	429c      	cmp	r4, r3
 800319e:	bf08      	it	eq
 80031a0:	68ec      	ldreq	r4, [r5, #12]
 80031a2:	e7da      	b.n	800315a <_fflush_r+0x22>
 80031a4:	080040e4 	.word	0x080040e4
 80031a8:	08004104 	.word	0x08004104
 80031ac:	080040c4 	.word	0x080040c4

080031b0 <std>:
 80031b0:	2300      	movs	r3, #0
 80031b2:	b510      	push	{r4, lr}
 80031b4:	4604      	mov	r4, r0
 80031b6:	e9c0 3300 	strd	r3, r3, [r0]
 80031ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031be:	6083      	str	r3, [r0, #8]
 80031c0:	8181      	strh	r1, [r0, #12]
 80031c2:	6643      	str	r3, [r0, #100]	; 0x64
 80031c4:	81c2      	strh	r2, [r0, #14]
 80031c6:	6183      	str	r3, [r0, #24]
 80031c8:	4619      	mov	r1, r3
 80031ca:	2208      	movs	r2, #8
 80031cc:	305c      	adds	r0, #92	; 0x5c
 80031ce:	f7ff fdc9 	bl	8002d64 <memset>
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <std+0x38>)
 80031d4:	6224      	str	r4, [r4, #32]
 80031d6:	6263      	str	r3, [r4, #36]	; 0x24
 80031d8:	4b04      	ldr	r3, [pc, #16]	; (80031ec <std+0x3c>)
 80031da:	62a3      	str	r3, [r4, #40]	; 0x28
 80031dc:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <std+0x40>)
 80031de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031e0:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <std+0x44>)
 80031e2:	6323      	str	r3, [r4, #48]	; 0x30
 80031e4:	bd10      	pop	{r4, pc}
 80031e6:	bf00      	nop
 80031e8:	08003cb1 	.word	0x08003cb1
 80031ec:	08003cd3 	.word	0x08003cd3
 80031f0:	08003d0b 	.word	0x08003d0b
 80031f4:	08003d2f 	.word	0x08003d2f

080031f8 <_cleanup_r>:
 80031f8:	4901      	ldr	r1, [pc, #4]	; (8003200 <_cleanup_r+0x8>)
 80031fa:	f000 b8af 	b.w	800335c <_fwalk_reent>
 80031fe:	bf00      	nop
 8003200:	08003139 	.word	0x08003139

08003204 <__sfmoreglue>:
 8003204:	2268      	movs	r2, #104	; 0x68
 8003206:	b570      	push	{r4, r5, r6, lr}
 8003208:	1e4d      	subs	r5, r1, #1
 800320a:	4355      	muls	r5, r2
 800320c:	460e      	mov	r6, r1
 800320e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003212:	f000 f993 	bl	800353c <_malloc_r>
 8003216:	4604      	mov	r4, r0
 8003218:	b140      	cbz	r0, 800322c <__sfmoreglue+0x28>
 800321a:	2100      	movs	r1, #0
 800321c:	e9c0 1600 	strd	r1, r6, [r0]
 8003220:	300c      	adds	r0, #12
 8003222:	60a0      	str	r0, [r4, #8]
 8003224:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003228:	f7ff fd9c 	bl	8002d64 <memset>
 800322c:	4620      	mov	r0, r4
 800322e:	bd70      	pop	{r4, r5, r6, pc}

08003230 <__sfp_lock_acquire>:
 8003230:	4801      	ldr	r0, [pc, #4]	; (8003238 <__sfp_lock_acquire+0x8>)
 8003232:	f000 b8b3 	b.w	800339c <__retarget_lock_acquire_recursive>
 8003236:	bf00      	nop
 8003238:	20000edd 	.word	0x20000edd

0800323c <__sfp_lock_release>:
 800323c:	4801      	ldr	r0, [pc, #4]	; (8003244 <__sfp_lock_release+0x8>)
 800323e:	f000 b8ae 	b.w	800339e <__retarget_lock_release_recursive>
 8003242:	bf00      	nop
 8003244:	20000edd 	.word	0x20000edd

08003248 <__sinit_lock_acquire>:
 8003248:	4801      	ldr	r0, [pc, #4]	; (8003250 <__sinit_lock_acquire+0x8>)
 800324a:	f000 b8a7 	b.w	800339c <__retarget_lock_acquire_recursive>
 800324e:	bf00      	nop
 8003250:	20000ede 	.word	0x20000ede

08003254 <__sinit_lock_release>:
 8003254:	4801      	ldr	r0, [pc, #4]	; (800325c <__sinit_lock_release+0x8>)
 8003256:	f000 b8a2 	b.w	800339e <__retarget_lock_release_recursive>
 800325a:	bf00      	nop
 800325c:	20000ede 	.word	0x20000ede

08003260 <__sinit>:
 8003260:	b510      	push	{r4, lr}
 8003262:	4604      	mov	r4, r0
 8003264:	f7ff fff0 	bl	8003248 <__sinit_lock_acquire>
 8003268:	69a3      	ldr	r3, [r4, #24]
 800326a:	b11b      	cbz	r3, 8003274 <__sinit+0x14>
 800326c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003270:	f7ff bff0 	b.w	8003254 <__sinit_lock_release>
 8003274:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003278:	6523      	str	r3, [r4, #80]	; 0x50
 800327a:	4b13      	ldr	r3, [pc, #76]	; (80032c8 <__sinit+0x68>)
 800327c:	4a13      	ldr	r2, [pc, #76]	; (80032cc <__sinit+0x6c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	62a2      	str	r2, [r4, #40]	; 0x28
 8003282:	42a3      	cmp	r3, r4
 8003284:	bf08      	it	eq
 8003286:	2301      	moveq	r3, #1
 8003288:	4620      	mov	r0, r4
 800328a:	bf08      	it	eq
 800328c:	61a3      	streq	r3, [r4, #24]
 800328e:	f000 f81f 	bl	80032d0 <__sfp>
 8003292:	6060      	str	r0, [r4, #4]
 8003294:	4620      	mov	r0, r4
 8003296:	f000 f81b 	bl	80032d0 <__sfp>
 800329a:	60a0      	str	r0, [r4, #8]
 800329c:	4620      	mov	r0, r4
 800329e:	f000 f817 	bl	80032d0 <__sfp>
 80032a2:	2200      	movs	r2, #0
 80032a4:	2104      	movs	r1, #4
 80032a6:	60e0      	str	r0, [r4, #12]
 80032a8:	6860      	ldr	r0, [r4, #4]
 80032aa:	f7ff ff81 	bl	80031b0 <std>
 80032ae:	2201      	movs	r2, #1
 80032b0:	2109      	movs	r1, #9
 80032b2:	68a0      	ldr	r0, [r4, #8]
 80032b4:	f7ff ff7c 	bl	80031b0 <std>
 80032b8:	2202      	movs	r2, #2
 80032ba:	2112      	movs	r1, #18
 80032bc:	68e0      	ldr	r0, [r4, #12]
 80032be:	f7ff ff77 	bl	80031b0 <std>
 80032c2:	2301      	movs	r3, #1
 80032c4:	61a3      	str	r3, [r4, #24]
 80032c6:	e7d1      	b.n	800326c <__sinit+0xc>
 80032c8:	080040c0 	.word	0x080040c0
 80032cc:	080031f9 	.word	0x080031f9

080032d0 <__sfp>:
 80032d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d2:	4607      	mov	r7, r0
 80032d4:	f7ff ffac 	bl	8003230 <__sfp_lock_acquire>
 80032d8:	4b1e      	ldr	r3, [pc, #120]	; (8003354 <__sfp+0x84>)
 80032da:	681e      	ldr	r6, [r3, #0]
 80032dc:	69b3      	ldr	r3, [r6, #24]
 80032de:	b913      	cbnz	r3, 80032e6 <__sfp+0x16>
 80032e0:	4630      	mov	r0, r6
 80032e2:	f7ff ffbd 	bl	8003260 <__sinit>
 80032e6:	3648      	adds	r6, #72	; 0x48
 80032e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80032ec:	3b01      	subs	r3, #1
 80032ee:	d503      	bpl.n	80032f8 <__sfp+0x28>
 80032f0:	6833      	ldr	r3, [r6, #0]
 80032f2:	b30b      	cbz	r3, 8003338 <__sfp+0x68>
 80032f4:	6836      	ldr	r6, [r6, #0]
 80032f6:	e7f7      	b.n	80032e8 <__sfp+0x18>
 80032f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80032fc:	b9d5      	cbnz	r5, 8003334 <__sfp+0x64>
 80032fe:	4b16      	ldr	r3, [pc, #88]	; (8003358 <__sfp+0x88>)
 8003300:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003304:	60e3      	str	r3, [r4, #12]
 8003306:	6665      	str	r5, [r4, #100]	; 0x64
 8003308:	f000 f847 	bl	800339a <__retarget_lock_init_recursive>
 800330c:	f7ff ff96 	bl	800323c <__sfp_lock_release>
 8003310:	2208      	movs	r2, #8
 8003312:	4629      	mov	r1, r5
 8003314:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003318:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800331c:	6025      	str	r5, [r4, #0]
 800331e:	61a5      	str	r5, [r4, #24]
 8003320:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003324:	f7ff fd1e 	bl	8002d64 <memset>
 8003328:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800332c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003330:	4620      	mov	r0, r4
 8003332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003334:	3468      	adds	r4, #104	; 0x68
 8003336:	e7d9      	b.n	80032ec <__sfp+0x1c>
 8003338:	2104      	movs	r1, #4
 800333a:	4638      	mov	r0, r7
 800333c:	f7ff ff62 	bl	8003204 <__sfmoreglue>
 8003340:	4604      	mov	r4, r0
 8003342:	6030      	str	r0, [r6, #0]
 8003344:	2800      	cmp	r0, #0
 8003346:	d1d5      	bne.n	80032f4 <__sfp+0x24>
 8003348:	f7ff ff78 	bl	800323c <__sfp_lock_release>
 800334c:	230c      	movs	r3, #12
 800334e:	603b      	str	r3, [r7, #0]
 8003350:	e7ee      	b.n	8003330 <__sfp+0x60>
 8003352:	bf00      	nop
 8003354:	080040c0 	.word	0x080040c0
 8003358:	ffff0001 	.word	0xffff0001

0800335c <_fwalk_reent>:
 800335c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003360:	4606      	mov	r6, r0
 8003362:	4688      	mov	r8, r1
 8003364:	2700      	movs	r7, #0
 8003366:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800336a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800336e:	f1b9 0901 	subs.w	r9, r9, #1
 8003372:	d505      	bpl.n	8003380 <_fwalk_reent+0x24>
 8003374:	6824      	ldr	r4, [r4, #0]
 8003376:	2c00      	cmp	r4, #0
 8003378:	d1f7      	bne.n	800336a <_fwalk_reent+0xe>
 800337a:	4638      	mov	r0, r7
 800337c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003380:	89ab      	ldrh	r3, [r5, #12]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d907      	bls.n	8003396 <_fwalk_reent+0x3a>
 8003386:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800338a:	3301      	adds	r3, #1
 800338c:	d003      	beq.n	8003396 <_fwalk_reent+0x3a>
 800338e:	4629      	mov	r1, r5
 8003390:	4630      	mov	r0, r6
 8003392:	47c0      	blx	r8
 8003394:	4307      	orrs	r7, r0
 8003396:	3568      	adds	r5, #104	; 0x68
 8003398:	e7e9      	b.n	800336e <_fwalk_reent+0x12>

0800339a <__retarget_lock_init_recursive>:
 800339a:	4770      	bx	lr

0800339c <__retarget_lock_acquire_recursive>:
 800339c:	4770      	bx	lr

0800339e <__retarget_lock_release_recursive>:
 800339e:	4770      	bx	lr

080033a0 <__swhatbuf_r>:
 80033a0:	b570      	push	{r4, r5, r6, lr}
 80033a2:	460e      	mov	r6, r1
 80033a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033a8:	4614      	mov	r4, r2
 80033aa:	2900      	cmp	r1, #0
 80033ac:	461d      	mov	r5, r3
 80033ae:	b096      	sub	sp, #88	; 0x58
 80033b0:	da08      	bge.n	80033c4 <__swhatbuf_r+0x24>
 80033b2:	2200      	movs	r2, #0
 80033b4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80033b8:	602a      	str	r2, [r5, #0]
 80033ba:	061a      	lsls	r2, r3, #24
 80033bc:	d410      	bmi.n	80033e0 <__swhatbuf_r+0x40>
 80033be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033c2:	e00e      	b.n	80033e2 <__swhatbuf_r+0x42>
 80033c4:	466a      	mov	r2, sp
 80033c6:	f000 fcd9 	bl	8003d7c <_fstat_r>
 80033ca:	2800      	cmp	r0, #0
 80033cc:	dbf1      	blt.n	80033b2 <__swhatbuf_r+0x12>
 80033ce:	9a01      	ldr	r2, [sp, #4]
 80033d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80033d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80033d8:	425a      	negs	r2, r3
 80033da:	415a      	adcs	r2, r3
 80033dc:	602a      	str	r2, [r5, #0]
 80033de:	e7ee      	b.n	80033be <__swhatbuf_r+0x1e>
 80033e0:	2340      	movs	r3, #64	; 0x40
 80033e2:	2000      	movs	r0, #0
 80033e4:	6023      	str	r3, [r4, #0]
 80033e6:	b016      	add	sp, #88	; 0x58
 80033e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080033ec <__smakebuf_r>:
 80033ec:	898b      	ldrh	r3, [r1, #12]
 80033ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80033f0:	079d      	lsls	r5, r3, #30
 80033f2:	4606      	mov	r6, r0
 80033f4:	460c      	mov	r4, r1
 80033f6:	d507      	bpl.n	8003408 <__smakebuf_r+0x1c>
 80033f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80033fc:	6023      	str	r3, [r4, #0]
 80033fe:	6123      	str	r3, [r4, #16]
 8003400:	2301      	movs	r3, #1
 8003402:	6163      	str	r3, [r4, #20]
 8003404:	b002      	add	sp, #8
 8003406:	bd70      	pop	{r4, r5, r6, pc}
 8003408:	466a      	mov	r2, sp
 800340a:	ab01      	add	r3, sp, #4
 800340c:	f7ff ffc8 	bl	80033a0 <__swhatbuf_r>
 8003410:	9900      	ldr	r1, [sp, #0]
 8003412:	4605      	mov	r5, r0
 8003414:	4630      	mov	r0, r6
 8003416:	f000 f891 	bl	800353c <_malloc_r>
 800341a:	b948      	cbnz	r0, 8003430 <__smakebuf_r+0x44>
 800341c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003420:	059a      	lsls	r2, r3, #22
 8003422:	d4ef      	bmi.n	8003404 <__smakebuf_r+0x18>
 8003424:	f023 0303 	bic.w	r3, r3, #3
 8003428:	f043 0302 	orr.w	r3, r3, #2
 800342c:	81a3      	strh	r3, [r4, #12]
 800342e:	e7e3      	b.n	80033f8 <__smakebuf_r+0xc>
 8003430:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <__smakebuf_r+0x7c>)
 8003432:	62b3      	str	r3, [r6, #40]	; 0x28
 8003434:	89a3      	ldrh	r3, [r4, #12]
 8003436:	6020      	str	r0, [r4, #0]
 8003438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800343c:	81a3      	strh	r3, [r4, #12]
 800343e:	9b00      	ldr	r3, [sp, #0]
 8003440:	6120      	str	r0, [r4, #16]
 8003442:	6163      	str	r3, [r4, #20]
 8003444:	9b01      	ldr	r3, [sp, #4]
 8003446:	b15b      	cbz	r3, 8003460 <__smakebuf_r+0x74>
 8003448:	4630      	mov	r0, r6
 800344a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800344e:	f000 fca7 	bl	8003da0 <_isatty_r>
 8003452:	b128      	cbz	r0, 8003460 <__smakebuf_r+0x74>
 8003454:	89a3      	ldrh	r3, [r4, #12]
 8003456:	f023 0303 	bic.w	r3, r3, #3
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	81a3      	strh	r3, [r4, #12]
 8003460:	89a0      	ldrh	r0, [r4, #12]
 8003462:	4305      	orrs	r5, r0
 8003464:	81a5      	strh	r5, [r4, #12]
 8003466:	e7cd      	b.n	8003404 <__smakebuf_r+0x18>
 8003468:	080031f9 	.word	0x080031f9

0800346c <_free_r>:
 800346c:	b538      	push	{r3, r4, r5, lr}
 800346e:	4605      	mov	r5, r0
 8003470:	2900      	cmp	r1, #0
 8003472:	d040      	beq.n	80034f6 <_free_r+0x8a>
 8003474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003478:	1f0c      	subs	r4, r1, #4
 800347a:	2b00      	cmp	r3, #0
 800347c:	bfb8      	it	lt
 800347e:	18e4      	addlt	r4, r4, r3
 8003480:	f000 fcbe 	bl	8003e00 <__malloc_lock>
 8003484:	4a1c      	ldr	r2, [pc, #112]	; (80034f8 <_free_r+0x8c>)
 8003486:	6813      	ldr	r3, [r2, #0]
 8003488:	b933      	cbnz	r3, 8003498 <_free_r+0x2c>
 800348a:	6063      	str	r3, [r4, #4]
 800348c:	6014      	str	r4, [r2, #0]
 800348e:	4628      	mov	r0, r5
 8003490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003494:	f000 bcba 	b.w	8003e0c <__malloc_unlock>
 8003498:	42a3      	cmp	r3, r4
 800349a:	d908      	bls.n	80034ae <_free_r+0x42>
 800349c:	6820      	ldr	r0, [r4, #0]
 800349e:	1821      	adds	r1, r4, r0
 80034a0:	428b      	cmp	r3, r1
 80034a2:	bf01      	itttt	eq
 80034a4:	6819      	ldreq	r1, [r3, #0]
 80034a6:	685b      	ldreq	r3, [r3, #4]
 80034a8:	1809      	addeq	r1, r1, r0
 80034aa:	6021      	streq	r1, [r4, #0]
 80034ac:	e7ed      	b.n	800348a <_free_r+0x1e>
 80034ae:	461a      	mov	r2, r3
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	b10b      	cbz	r3, 80034b8 <_free_r+0x4c>
 80034b4:	42a3      	cmp	r3, r4
 80034b6:	d9fa      	bls.n	80034ae <_free_r+0x42>
 80034b8:	6811      	ldr	r1, [r2, #0]
 80034ba:	1850      	adds	r0, r2, r1
 80034bc:	42a0      	cmp	r0, r4
 80034be:	d10b      	bne.n	80034d8 <_free_r+0x6c>
 80034c0:	6820      	ldr	r0, [r4, #0]
 80034c2:	4401      	add	r1, r0
 80034c4:	1850      	adds	r0, r2, r1
 80034c6:	4283      	cmp	r3, r0
 80034c8:	6011      	str	r1, [r2, #0]
 80034ca:	d1e0      	bne.n	800348e <_free_r+0x22>
 80034cc:	6818      	ldr	r0, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	4401      	add	r1, r0
 80034d2:	6011      	str	r1, [r2, #0]
 80034d4:	6053      	str	r3, [r2, #4]
 80034d6:	e7da      	b.n	800348e <_free_r+0x22>
 80034d8:	d902      	bls.n	80034e0 <_free_r+0x74>
 80034da:	230c      	movs	r3, #12
 80034dc:	602b      	str	r3, [r5, #0]
 80034de:	e7d6      	b.n	800348e <_free_r+0x22>
 80034e0:	6820      	ldr	r0, [r4, #0]
 80034e2:	1821      	adds	r1, r4, r0
 80034e4:	428b      	cmp	r3, r1
 80034e6:	bf01      	itttt	eq
 80034e8:	6819      	ldreq	r1, [r3, #0]
 80034ea:	685b      	ldreq	r3, [r3, #4]
 80034ec:	1809      	addeq	r1, r1, r0
 80034ee:	6021      	streq	r1, [r4, #0]
 80034f0:	6063      	str	r3, [r4, #4]
 80034f2:	6054      	str	r4, [r2, #4]
 80034f4:	e7cb      	b.n	800348e <_free_r+0x22>
 80034f6:	bd38      	pop	{r3, r4, r5, pc}
 80034f8:	20000ee0 	.word	0x20000ee0

080034fc <sbrk_aligned>:
 80034fc:	b570      	push	{r4, r5, r6, lr}
 80034fe:	4e0e      	ldr	r6, [pc, #56]	; (8003538 <sbrk_aligned+0x3c>)
 8003500:	460c      	mov	r4, r1
 8003502:	6831      	ldr	r1, [r6, #0]
 8003504:	4605      	mov	r5, r0
 8003506:	b911      	cbnz	r1, 800350e <sbrk_aligned+0x12>
 8003508:	f000 fbc2 	bl	8003c90 <_sbrk_r>
 800350c:	6030      	str	r0, [r6, #0]
 800350e:	4621      	mov	r1, r4
 8003510:	4628      	mov	r0, r5
 8003512:	f000 fbbd 	bl	8003c90 <_sbrk_r>
 8003516:	1c43      	adds	r3, r0, #1
 8003518:	d00a      	beq.n	8003530 <sbrk_aligned+0x34>
 800351a:	1cc4      	adds	r4, r0, #3
 800351c:	f024 0403 	bic.w	r4, r4, #3
 8003520:	42a0      	cmp	r0, r4
 8003522:	d007      	beq.n	8003534 <sbrk_aligned+0x38>
 8003524:	1a21      	subs	r1, r4, r0
 8003526:	4628      	mov	r0, r5
 8003528:	f000 fbb2 	bl	8003c90 <_sbrk_r>
 800352c:	3001      	adds	r0, #1
 800352e:	d101      	bne.n	8003534 <sbrk_aligned+0x38>
 8003530:	f04f 34ff 	mov.w	r4, #4294967295
 8003534:	4620      	mov	r0, r4
 8003536:	bd70      	pop	{r4, r5, r6, pc}
 8003538:	20000ee4 	.word	0x20000ee4

0800353c <_malloc_r>:
 800353c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003540:	1ccd      	adds	r5, r1, #3
 8003542:	f025 0503 	bic.w	r5, r5, #3
 8003546:	3508      	adds	r5, #8
 8003548:	2d0c      	cmp	r5, #12
 800354a:	bf38      	it	cc
 800354c:	250c      	movcc	r5, #12
 800354e:	2d00      	cmp	r5, #0
 8003550:	4607      	mov	r7, r0
 8003552:	db01      	blt.n	8003558 <_malloc_r+0x1c>
 8003554:	42a9      	cmp	r1, r5
 8003556:	d905      	bls.n	8003564 <_malloc_r+0x28>
 8003558:	230c      	movs	r3, #12
 800355a:	2600      	movs	r6, #0
 800355c:	603b      	str	r3, [r7, #0]
 800355e:	4630      	mov	r0, r6
 8003560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003564:	4e2e      	ldr	r6, [pc, #184]	; (8003620 <_malloc_r+0xe4>)
 8003566:	f000 fc4b 	bl	8003e00 <__malloc_lock>
 800356a:	6833      	ldr	r3, [r6, #0]
 800356c:	461c      	mov	r4, r3
 800356e:	bb34      	cbnz	r4, 80035be <_malloc_r+0x82>
 8003570:	4629      	mov	r1, r5
 8003572:	4638      	mov	r0, r7
 8003574:	f7ff ffc2 	bl	80034fc <sbrk_aligned>
 8003578:	1c43      	adds	r3, r0, #1
 800357a:	4604      	mov	r4, r0
 800357c:	d14d      	bne.n	800361a <_malloc_r+0xde>
 800357e:	6834      	ldr	r4, [r6, #0]
 8003580:	4626      	mov	r6, r4
 8003582:	2e00      	cmp	r6, #0
 8003584:	d140      	bne.n	8003608 <_malloc_r+0xcc>
 8003586:	6823      	ldr	r3, [r4, #0]
 8003588:	4631      	mov	r1, r6
 800358a:	4638      	mov	r0, r7
 800358c:	eb04 0803 	add.w	r8, r4, r3
 8003590:	f000 fb7e 	bl	8003c90 <_sbrk_r>
 8003594:	4580      	cmp	r8, r0
 8003596:	d13a      	bne.n	800360e <_malloc_r+0xd2>
 8003598:	6821      	ldr	r1, [r4, #0]
 800359a:	3503      	adds	r5, #3
 800359c:	1a6d      	subs	r5, r5, r1
 800359e:	f025 0503 	bic.w	r5, r5, #3
 80035a2:	3508      	adds	r5, #8
 80035a4:	2d0c      	cmp	r5, #12
 80035a6:	bf38      	it	cc
 80035a8:	250c      	movcc	r5, #12
 80035aa:	4638      	mov	r0, r7
 80035ac:	4629      	mov	r1, r5
 80035ae:	f7ff ffa5 	bl	80034fc <sbrk_aligned>
 80035b2:	3001      	adds	r0, #1
 80035b4:	d02b      	beq.n	800360e <_malloc_r+0xd2>
 80035b6:	6823      	ldr	r3, [r4, #0]
 80035b8:	442b      	add	r3, r5
 80035ba:	6023      	str	r3, [r4, #0]
 80035bc:	e00e      	b.n	80035dc <_malloc_r+0xa0>
 80035be:	6822      	ldr	r2, [r4, #0]
 80035c0:	1b52      	subs	r2, r2, r5
 80035c2:	d41e      	bmi.n	8003602 <_malloc_r+0xc6>
 80035c4:	2a0b      	cmp	r2, #11
 80035c6:	d916      	bls.n	80035f6 <_malloc_r+0xba>
 80035c8:	1961      	adds	r1, r4, r5
 80035ca:	42a3      	cmp	r3, r4
 80035cc:	6025      	str	r5, [r4, #0]
 80035ce:	bf18      	it	ne
 80035d0:	6059      	strne	r1, [r3, #4]
 80035d2:	6863      	ldr	r3, [r4, #4]
 80035d4:	bf08      	it	eq
 80035d6:	6031      	streq	r1, [r6, #0]
 80035d8:	5162      	str	r2, [r4, r5]
 80035da:	604b      	str	r3, [r1, #4]
 80035dc:	4638      	mov	r0, r7
 80035de:	f104 060b 	add.w	r6, r4, #11
 80035e2:	f000 fc13 	bl	8003e0c <__malloc_unlock>
 80035e6:	f026 0607 	bic.w	r6, r6, #7
 80035ea:	1d23      	adds	r3, r4, #4
 80035ec:	1af2      	subs	r2, r6, r3
 80035ee:	d0b6      	beq.n	800355e <_malloc_r+0x22>
 80035f0:	1b9b      	subs	r3, r3, r6
 80035f2:	50a3      	str	r3, [r4, r2]
 80035f4:	e7b3      	b.n	800355e <_malloc_r+0x22>
 80035f6:	6862      	ldr	r2, [r4, #4]
 80035f8:	42a3      	cmp	r3, r4
 80035fa:	bf0c      	ite	eq
 80035fc:	6032      	streq	r2, [r6, #0]
 80035fe:	605a      	strne	r2, [r3, #4]
 8003600:	e7ec      	b.n	80035dc <_malloc_r+0xa0>
 8003602:	4623      	mov	r3, r4
 8003604:	6864      	ldr	r4, [r4, #4]
 8003606:	e7b2      	b.n	800356e <_malloc_r+0x32>
 8003608:	4634      	mov	r4, r6
 800360a:	6876      	ldr	r6, [r6, #4]
 800360c:	e7b9      	b.n	8003582 <_malloc_r+0x46>
 800360e:	230c      	movs	r3, #12
 8003610:	4638      	mov	r0, r7
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	f000 fbfa 	bl	8003e0c <__malloc_unlock>
 8003618:	e7a1      	b.n	800355e <_malloc_r+0x22>
 800361a:	6025      	str	r5, [r4, #0]
 800361c:	e7de      	b.n	80035dc <_malloc_r+0xa0>
 800361e:	bf00      	nop
 8003620:	20000ee0 	.word	0x20000ee0

08003624 <__sfputc_r>:
 8003624:	6893      	ldr	r3, [r2, #8]
 8003626:	b410      	push	{r4}
 8003628:	3b01      	subs	r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	6093      	str	r3, [r2, #8]
 800362e:	da07      	bge.n	8003640 <__sfputc_r+0x1c>
 8003630:	6994      	ldr	r4, [r2, #24]
 8003632:	42a3      	cmp	r3, r4
 8003634:	db01      	blt.n	800363a <__sfputc_r+0x16>
 8003636:	290a      	cmp	r1, #10
 8003638:	d102      	bne.n	8003640 <__sfputc_r+0x1c>
 800363a:	bc10      	pop	{r4}
 800363c:	f7ff bc3a 	b.w	8002eb4 <__swbuf_r>
 8003640:	6813      	ldr	r3, [r2, #0]
 8003642:	1c58      	adds	r0, r3, #1
 8003644:	6010      	str	r0, [r2, #0]
 8003646:	7019      	strb	r1, [r3, #0]
 8003648:	4608      	mov	r0, r1
 800364a:	bc10      	pop	{r4}
 800364c:	4770      	bx	lr

0800364e <__sfputs_r>:
 800364e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003650:	4606      	mov	r6, r0
 8003652:	460f      	mov	r7, r1
 8003654:	4614      	mov	r4, r2
 8003656:	18d5      	adds	r5, r2, r3
 8003658:	42ac      	cmp	r4, r5
 800365a:	d101      	bne.n	8003660 <__sfputs_r+0x12>
 800365c:	2000      	movs	r0, #0
 800365e:	e007      	b.n	8003670 <__sfputs_r+0x22>
 8003660:	463a      	mov	r2, r7
 8003662:	4630      	mov	r0, r6
 8003664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003668:	f7ff ffdc 	bl	8003624 <__sfputc_r>
 800366c:	1c43      	adds	r3, r0, #1
 800366e:	d1f3      	bne.n	8003658 <__sfputs_r+0xa>
 8003670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003674 <_vfiprintf_r>:
 8003674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003678:	460d      	mov	r5, r1
 800367a:	4614      	mov	r4, r2
 800367c:	4698      	mov	r8, r3
 800367e:	4606      	mov	r6, r0
 8003680:	b09d      	sub	sp, #116	; 0x74
 8003682:	b118      	cbz	r0, 800368c <_vfiprintf_r+0x18>
 8003684:	6983      	ldr	r3, [r0, #24]
 8003686:	b90b      	cbnz	r3, 800368c <_vfiprintf_r+0x18>
 8003688:	f7ff fdea 	bl	8003260 <__sinit>
 800368c:	4b89      	ldr	r3, [pc, #548]	; (80038b4 <_vfiprintf_r+0x240>)
 800368e:	429d      	cmp	r5, r3
 8003690:	d11b      	bne.n	80036ca <_vfiprintf_r+0x56>
 8003692:	6875      	ldr	r5, [r6, #4]
 8003694:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003696:	07d9      	lsls	r1, r3, #31
 8003698:	d405      	bmi.n	80036a6 <_vfiprintf_r+0x32>
 800369a:	89ab      	ldrh	r3, [r5, #12]
 800369c:	059a      	lsls	r2, r3, #22
 800369e:	d402      	bmi.n	80036a6 <_vfiprintf_r+0x32>
 80036a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80036a2:	f7ff fe7b 	bl	800339c <__retarget_lock_acquire_recursive>
 80036a6:	89ab      	ldrh	r3, [r5, #12]
 80036a8:	071b      	lsls	r3, r3, #28
 80036aa:	d501      	bpl.n	80036b0 <_vfiprintf_r+0x3c>
 80036ac:	692b      	ldr	r3, [r5, #16]
 80036ae:	b9eb      	cbnz	r3, 80036ec <_vfiprintf_r+0x78>
 80036b0:	4629      	mov	r1, r5
 80036b2:	4630      	mov	r0, r6
 80036b4:	f7ff fc50 	bl	8002f58 <__swsetup_r>
 80036b8:	b1c0      	cbz	r0, 80036ec <_vfiprintf_r+0x78>
 80036ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036bc:	07dc      	lsls	r4, r3, #31
 80036be:	d50e      	bpl.n	80036de <_vfiprintf_r+0x6a>
 80036c0:	f04f 30ff 	mov.w	r0, #4294967295
 80036c4:	b01d      	add	sp, #116	; 0x74
 80036c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ca:	4b7b      	ldr	r3, [pc, #492]	; (80038b8 <_vfiprintf_r+0x244>)
 80036cc:	429d      	cmp	r5, r3
 80036ce:	d101      	bne.n	80036d4 <_vfiprintf_r+0x60>
 80036d0:	68b5      	ldr	r5, [r6, #8]
 80036d2:	e7df      	b.n	8003694 <_vfiprintf_r+0x20>
 80036d4:	4b79      	ldr	r3, [pc, #484]	; (80038bc <_vfiprintf_r+0x248>)
 80036d6:	429d      	cmp	r5, r3
 80036d8:	bf08      	it	eq
 80036da:	68f5      	ldreq	r5, [r6, #12]
 80036dc:	e7da      	b.n	8003694 <_vfiprintf_r+0x20>
 80036de:	89ab      	ldrh	r3, [r5, #12]
 80036e0:	0598      	lsls	r0, r3, #22
 80036e2:	d4ed      	bmi.n	80036c0 <_vfiprintf_r+0x4c>
 80036e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80036e6:	f7ff fe5a 	bl	800339e <__retarget_lock_release_recursive>
 80036ea:	e7e9      	b.n	80036c0 <_vfiprintf_r+0x4c>
 80036ec:	2300      	movs	r3, #0
 80036ee:	9309      	str	r3, [sp, #36]	; 0x24
 80036f0:	2320      	movs	r3, #32
 80036f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036f6:	2330      	movs	r3, #48	; 0x30
 80036f8:	f04f 0901 	mov.w	r9, #1
 80036fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003700:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80038c0 <_vfiprintf_r+0x24c>
 8003704:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003708:	4623      	mov	r3, r4
 800370a:	469a      	mov	sl, r3
 800370c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003710:	b10a      	cbz	r2, 8003716 <_vfiprintf_r+0xa2>
 8003712:	2a25      	cmp	r2, #37	; 0x25
 8003714:	d1f9      	bne.n	800370a <_vfiprintf_r+0x96>
 8003716:	ebba 0b04 	subs.w	fp, sl, r4
 800371a:	d00b      	beq.n	8003734 <_vfiprintf_r+0xc0>
 800371c:	465b      	mov	r3, fp
 800371e:	4622      	mov	r2, r4
 8003720:	4629      	mov	r1, r5
 8003722:	4630      	mov	r0, r6
 8003724:	f7ff ff93 	bl	800364e <__sfputs_r>
 8003728:	3001      	adds	r0, #1
 800372a:	f000 80aa 	beq.w	8003882 <_vfiprintf_r+0x20e>
 800372e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003730:	445a      	add	r2, fp
 8003732:	9209      	str	r2, [sp, #36]	; 0x24
 8003734:	f89a 3000 	ldrb.w	r3, [sl]
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 80a2 	beq.w	8003882 <_vfiprintf_r+0x20e>
 800373e:	2300      	movs	r3, #0
 8003740:	f04f 32ff 	mov.w	r2, #4294967295
 8003744:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003748:	f10a 0a01 	add.w	sl, sl, #1
 800374c:	9304      	str	r3, [sp, #16]
 800374e:	9307      	str	r3, [sp, #28]
 8003750:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003754:	931a      	str	r3, [sp, #104]	; 0x68
 8003756:	4654      	mov	r4, sl
 8003758:	2205      	movs	r2, #5
 800375a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800375e:	4858      	ldr	r0, [pc, #352]	; (80038c0 <_vfiprintf_r+0x24c>)
 8003760:	f000 fb40 	bl	8003de4 <memchr>
 8003764:	9a04      	ldr	r2, [sp, #16]
 8003766:	b9d8      	cbnz	r0, 80037a0 <_vfiprintf_r+0x12c>
 8003768:	06d1      	lsls	r1, r2, #27
 800376a:	bf44      	itt	mi
 800376c:	2320      	movmi	r3, #32
 800376e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003772:	0713      	lsls	r3, r2, #28
 8003774:	bf44      	itt	mi
 8003776:	232b      	movmi	r3, #43	; 0x2b
 8003778:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800377c:	f89a 3000 	ldrb.w	r3, [sl]
 8003780:	2b2a      	cmp	r3, #42	; 0x2a
 8003782:	d015      	beq.n	80037b0 <_vfiprintf_r+0x13c>
 8003784:	4654      	mov	r4, sl
 8003786:	2000      	movs	r0, #0
 8003788:	f04f 0c0a 	mov.w	ip, #10
 800378c:	9a07      	ldr	r2, [sp, #28]
 800378e:	4621      	mov	r1, r4
 8003790:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003794:	3b30      	subs	r3, #48	; 0x30
 8003796:	2b09      	cmp	r3, #9
 8003798:	d94e      	bls.n	8003838 <_vfiprintf_r+0x1c4>
 800379a:	b1b0      	cbz	r0, 80037ca <_vfiprintf_r+0x156>
 800379c:	9207      	str	r2, [sp, #28]
 800379e:	e014      	b.n	80037ca <_vfiprintf_r+0x156>
 80037a0:	eba0 0308 	sub.w	r3, r0, r8
 80037a4:	fa09 f303 	lsl.w	r3, r9, r3
 80037a8:	4313      	orrs	r3, r2
 80037aa:	46a2      	mov	sl, r4
 80037ac:	9304      	str	r3, [sp, #16]
 80037ae:	e7d2      	b.n	8003756 <_vfiprintf_r+0xe2>
 80037b0:	9b03      	ldr	r3, [sp, #12]
 80037b2:	1d19      	adds	r1, r3, #4
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	9103      	str	r1, [sp, #12]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	bfbb      	ittet	lt
 80037bc:	425b      	neglt	r3, r3
 80037be:	f042 0202 	orrlt.w	r2, r2, #2
 80037c2:	9307      	strge	r3, [sp, #28]
 80037c4:	9307      	strlt	r3, [sp, #28]
 80037c6:	bfb8      	it	lt
 80037c8:	9204      	strlt	r2, [sp, #16]
 80037ca:	7823      	ldrb	r3, [r4, #0]
 80037cc:	2b2e      	cmp	r3, #46	; 0x2e
 80037ce:	d10c      	bne.n	80037ea <_vfiprintf_r+0x176>
 80037d0:	7863      	ldrb	r3, [r4, #1]
 80037d2:	2b2a      	cmp	r3, #42	; 0x2a
 80037d4:	d135      	bne.n	8003842 <_vfiprintf_r+0x1ce>
 80037d6:	9b03      	ldr	r3, [sp, #12]
 80037d8:	3402      	adds	r4, #2
 80037da:	1d1a      	adds	r2, r3, #4
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	9203      	str	r2, [sp, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	bfb8      	it	lt
 80037e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80037e8:	9305      	str	r3, [sp, #20]
 80037ea:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80038c4 <_vfiprintf_r+0x250>
 80037ee:	2203      	movs	r2, #3
 80037f0:	4650      	mov	r0, sl
 80037f2:	7821      	ldrb	r1, [r4, #0]
 80037f4:	f000 faf6 	bl	8003de4 <memchr>
 80037f8:	b140      	cbz	r0, 800380c <_vfiprintf_r+0x198>
 80037fa:	2340      	movs	r3, #64	; 0x40
 80037fc:	eba0 000a 	sub.w	r0, r0, sl
 8003800:	fa03 f000 	lsl.w	r0, r3, r0
 8003804:	9b04      	ldr	r3, [sp, #16]
 8003806:	3401      	adds	r4, #1
 8003808:	4303      	orrs	r3, r0
 800380a:	9304      	str	r3, [sp, #16]
 800380c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003810:	2206      	movs	r2, #6
 8003812:	482d      	ldr	r0, [pc, #180]	; (80038c8 <_vfiprintf_r+0x254>)
 8003814:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003818:	f000 fae4 	bl	8003de4 <memchr>
 800381c:	2800      	cmp	r0, #0
 800381e:	d03f      	beq.n	80038a0 <_vfiprintf_r+0x22c>
 8003820:	4b2a      	ldr	r3, [pc, #168]	; (80038cc <_vfiprintf_r+0x258>)
 8003822:	bb1b      	cbnz	r3, 800386c <_vfiprintf_r+0x1f8>
 8003824:	9b03      	ldr	r3, [sp, #12]
 8003826:	3307      	adds	r3, #7
 8003828:	f023 0307 	bic.w	r3, r3, #7
 800382c:	3308      	adds	r3, #8
 800382e:	9303      	str	r3, [sp, #12]
 8003830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003832:	443b      	add	r3, r7
 8003834:	9309      	str	r3, [sp, #36]	; 0x24
 8003836:	e767      	b.n	8003708 <_vfiprintf_r+0x94>
 8003838:	460c      	mov	r4, r1
 800383a:	2001      	movs	r0, #1
 800383c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003840:	e7a5      	b.n	800378e <_vfiprintf_r+0x11a>
 8003842:	2300      	movs	r3, #0
 8003844:	f04f 0c0a 	mov.w	ip, #10
 8003848:	4619      	mov	r1, r3
 800384a:	3401      	adds	r4, #1
 800384c:	9305      	str	r3, [sp, #20]
 800384e:	4620      	mov	r0, r4
 8003850:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003854:	3a30      	subs	r2, #48	; 0x30
 8003856:	2a09      	cmp	r2, #9
 8003858:	d903      	bls.n	8003862 <_vfiprintf_r+0x1ee>
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0c5      	beq.n	80037ea <_vfiprintf_r+0x176>
 800385e:	9105      	str	r1, [sp, #20]
 8003860:	e7c3      	b.n	80037ea <_vfiprintf_r+0x176>
 8003862:	4604      	mov	r4, r0
 8003864:	2301      	movs	r3, #1
 8003866:	fb0c 2101 	mla	r1, ip, r1, r2
 800386a:	e7f0      	b.n	800384e <_vfiprintf_r+0x1da>
 800386c:	ab03      	add	r3, sp, #12
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	462a      	mov	r2, r5
 8003872:	4630      	mov	r0, r6
 8003874:	4b16      	ldr	r3, [pc, #88]	; (80038d0 <_vfiprintf_r+0x25c>)
 8003876:	a904      	add	r1, sp, #16
 8003878:	f3af 8000 	nop.w
 800387c:	4607      	mov	r7, r0
 800387e:	1c78      	adds	r0, r7, #1
 8003880:	d1d6      	bne.n	8003830 <_vfiprintf_r+0x1bc>
 8003882:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003884:	07d9      	lsls	r1, r3, #31
 8003886:	d405      	bmi.n	8003894 <_vfiprintf_r+0x220>
 8003888:	89ab      	ldrh	r3, [r5, #12]
 800388a:	059a      	lsls	r2, r3, #22
 800388c:	d402      	bmi.n	8003894 <_vfiprintf_r+0x220>
 800388e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003890:	f7ff fd85 	bl	800339e <__retarget_lock_release_recursive>
 8003894:	89ab      	ldrh	r3, [r5, #12]
 8003896:	065b      	lsls	r3, r3, #25
 8003898:	f53f af12 	bmi.w	80036c0 <_vfiprintf_r+0x4c>
 800389c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800389e:	e711      	b.n	80036c4 <_vfiprintf_r+0x50>
 80038a0:	ab03      	add	r3, sp, #12
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	462a      	mov	r2, r5
 80038a6:	4630      	mov	r0, r6
 80038a8:	4b09      	ldr	r3, [pc, #36]	; (80038d0 <_vfiprintf_r+0x25c>)
 80038aa:	a904      	add	r1, sp, #16
 80038ac:	f000 f882 	bl	80039b4 <_printf_i>
 80038b0:	e7e4      	b.n	800387c <_vfiprintf_r+0x208>
 80038b2:	bf00      	nop
 80038b4:	080040e4 	.word	0x080040e4
 80038b8:	08004104 	.word	0x08004104
 80038bc:	080040c4 	.word	0x080040c4
 80038c0:	08004124 	.word	0x08004124
 80038c4:	0800412a 	.word	0x0800412a
 80038c8:	0800412e 	.word	0x0800412e
 80038cc:	00000000 	.word	0x00000000
 80038d0:	0800364f 	.word	0x0800364f

080038d4 <_printf_common>:
 80038d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038d8:	4616      	mov	r6, r2
 80038da:	4699      	mov	r9, r3
 80038dc:	688a      	ldr	r2, [r1, #8]
 80038de:	690b      	ldr	r3, [r1, #16]
 80038e0:	4607      	mov	r7, r0
 80038e2:	4293      	cmp	r3, r2
 80038e4:	bfb8      	it	lt
 80038e6:	4613      	movlt	r3, r2
 80038e8:	6033      	str	r3, [r6, #0]
 80038ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038ee:	460c      	mov	r4, r1
 80038f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038f4:	b10a      	cbz	r2, 80038fa <_printf_common+0x26>
 80038f6:	3301      	adds	r3, #1
 80038f8:	6033      	str	r3, [r6, #0]
 80038fa:	6823      	ldr	r3, [r4, #0]
 80038fc:	0699      	lsls	r1, r3, #26
 80038fe:	bf42      	ittt	mi
 8003900:	6833      	ldrmi	r3, [r6, #0]
 8003902:	3302      	addmi	r3, #2
 8003904:	6033      	strmi	r3, [r6, #0]
 8003906:	6825      	ldr	r5, [r4, #0]
 8003908:	f015 0506 	ands.w	r5, r5, #6
 800390c:	d106      	bne.n	800391c <_printf_common+0x48>
 800390e:	f104 0a19 	add.w	sl, r4, #25
 8003912:	68e3      	ldr	r3, [r4, #12]
 8003914:	6832      	ldr	r2, [r6, #0]
 8003916:	1a9b      	subs	r3, r3, r2
 8003918:	42ab      	cmp	r3, r5
 800391a:	dc28      	bgt.n	800396e <_printf_common+0x9a>
 800391c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003920:	1e13      	subs	r3, r2, #0
 8003922:	6822      	ldr	r2, [r4, #0]
 8003924:	bf18      	it	ne
 8003926:	2301      	movne	r3, #1
 8003928:	0692      	lsls	r2, r2, #26
 800392a:	d42d      	bmi.n	8003988 <_printf_common+0xb4>
 800392c:	4649      	mov	r1, r9
 800392e:	4638      	mov	r0, r7
 8003930:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003934:	47c0      	blx	r8
 8003936:	3001      	adds	r0, #1
 8003938:	d020      	beq.n	800397c <_printf_common+0xa8>
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	68e5      	ldr	r5, [r4, #12]
 800393e:	f003 0306 	and.w	r3, r3, #6
 8003942:	2b04      	cmp	r3, #4
 8003944:	bf18      	it	ne
 8003946:	2500      	movne	r5, #0
 8003948:	6832      	ldr	r2, [r6, #0]
 800394a:	f04f 0600 	mov.w	r6, #0
 800394e:	68a3      	ldr	r3, [r4, #8]
 8003950:	bf08      	it	eq
 8003952:	1aad      	subeq	r5, r5, r2
 8003954:	6922      	ldr	r2, [r4, #16]
 8003956:	bf08      	it	eq
 8003958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800395c:	4293      	cmp	r3, r2
 800395e:	bfc4      	itt	gt
 8003960:	1a9b      	subgt	r3, r3, r2
 8003962:	18ed      	addgt	r5, r5, r3
 8003964:	341a      	adds	r4, #26
 8003966:	42b5      	cmp	r5, r6
 8003968:	d11a      	bne.n	80039a0 <_printf_common+0xcc>
 800396a:	2000      	movs	r0, #0
 800396c:	e008      	b.n	8003980 <_printf_common+0xac>
 800396e:	2301      	movs	r3, #1
 8003970:	4652      	mov	r2, sl
 8003972:	4649      	mov	r1, r9
 8003974:	4638      	mov	r0, r7
 8003976:	47c0      	blx	r8
 8003978:	3001      	adds	r0, #1
 800397a:	d103      	bne.n	8003984 <_printf_common+0xb0>
 800397c:	f04f 30ff 	mov.w	r0, #4294967295
 8003980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003984:	3501      	adds	r5, #1
 8003986:	e7c4      	b.n	8003912 <_printf_common+0x3e>
 8003988:	2030      	movs	r0, #48	; 0x30
 800398a:	18e1      	adds	r1, r4, r3
 800398c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003996:	4422      	add	r2, r4
 8003998:	3302      	adds	r3, #2
 800399a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800399e:	e7c5      	b.n	800392c <_printf_common+0x58>
 80039a0:	2301      	movs	r3, #1
 80039a2:	4622      	mov	r2, r4
 80039a4:	4649      	mov	r1, r9
 80039a6:	4638      	mov	r0, r7
 80039a8:	47c0      	blx	r8
 80039aa:	3001      	adds	r0, #1
 80039ac:	d0e6      	beq.n	800397c <_printf_common+0xa8>
 80039ae:	3601      	adds	r6, #1
 80039b0:	e7d9      	b.n	8003966 <_printf_common+0x92>
	...

080039b4 <_printf_i>:
 80039b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039b8:	7e0f      	ldrb	r7, [r1, #24]
 80039ba:	4691      	mov	r9, r2
 80039bc:	2f78      	cmp	r7, #120	; 0x78
 80039be:	4680      	mov	r8, r0
 80039c0:	460c      	mov	r4, r1
 80039c2:	469a      	mov	sl, r3
 80039c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80039ca:	d807      	bhi.n	80039dc <_printf_i+0x28>
 80039cc:	2f62      	cmp	r7, #98	; 0x62
 80039ce:	d80a      	bhi.n	80039e6 <_printf_i+0x32>
 80039d0:	2f00      	cmp	r7, #0
 80039d2:	f000 80d9 	beq.w	8003b88 <_printf_i+0x1d4>
 80039d6:	2f58      	cmp	r7, #88	; 0x58
 80039d8:	f000 80a4 	beq.w	8003b24 <_printf_i+0x170>
 80039dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039e4:	e03a      	b.n	8003a5c <_printf_i+0xa8>
 80039e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039ea:	2b15      	cmp	r3, #21
 80039ec:	d8f6      	bhi.n	80039dc <_printf_i+0x28>
 80039ee:	a101      	add	r1, pc, #4	; (adr r1, 80039f4 <_printf_i+0x40>)
 80039f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039f4:	08003a4d 	.word	0x08003a4d
 80039f8:	08003a61 	.word	0x08003a61
 80039fc:	080039dd 	.word	0x080039dd
 8003a00:	080039dd 	.word	0x080039dd
 8003a04:	080039dd 	.word	0x080039dd
 8003a08:	080039dd 	.word	0x080039dd
 8003a0c:	08003a61 	.word	0x08003a61
 8003a10:	080039dd 	.word	0x080039dd
 8003a14:	080039dd 	.word	0x080039dd
 8003a18:	080039dd 	.word	0x080039dd
 8003a1c:	080039dd 	.word	0x080039dd
 8003a20:	08003b6f 	.word	0x08003b6f
 8003a24:	08003a91 	.word	0x08003a91
 8003a28:	08003b51 	.word	0x08003b51
 8003a2c:	080039dd 	.word	0x080039dd
 8003a30:	080039dd 	.word	0x080039dd
 8003a34:	08003b91 	.word	0x08003b91
 8003a38:	080039dd 	.word	0x080039dd
 8003a3c:	08003a91 	.word	0x08003a91
 8003a40:	080039dd 	.word	0x080039dd
 8003a44:	080039dd 	.word	0x080039dd
 8003a48:	08003b59 	.word	0x08003b59
 8003a4c:	682b      	ldr	r3, [r5, #0]
 8003a4e:	1d1a      	adds	r2, r3, #4
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	602a      	str	r2, [r5, #0]
 8003a54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e0a4      	b.n	8003baa <_printf_i+0x1f6>
 8003a60:	6820      	ldr	r0, [r4, #0]
 8003a62:	6829      	ldr	r1, [r5, #0]
 8003a64:	0606      	lsls	r6, r0, #24
 8003a66:	f101 0304 	add.w	r3, r1, #4
 8003a6a:	d50a      	bpl.n	8003a82 <_printf_i+0xce>
 8003a6c:	680e      	ldr	r6, [r1, #0]
 8003a6e:	602b      	str	r3, [r5, #0]
 8003a70:	2e00      	cmp	r6, #0
 8003a72:	da03      	bge.n	8003a7c <_printf_i+0xc8>
 8003a74:	232d      	movs	r3, #45	; 0x2d
 8003a76:	4276      	negs	r6, r6
 8003a78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a7c:	230a      	movs	r3, #10
 8003a7e:	485e      	ldr	r0, [pc, #376]	; (8003bf8 <_printf_i+0x244>)
 8003a80:	e019      	b.n	8003ab6 <_printf_i+0x102>
 8003a82:	680e      	ldr	r6, [r1, #0]
 8003a84:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a88:	602b      	str	r3, [r5, #0]
 8003a8a:	bf18      	it	ne
 8003a8c:	b236      	sxthne	r6, r6
 8003a8e:	e7ef      	b.n	8003a70 <_printf_i+0xbc>
 8003a90:	682b      	ldr	r3, [r5, #0]
 8003a92:	6820      	ldr	r0, [r4, #0]
 8003a94:	1d19      	adds	r1, r3, #4
 8003a96:	6029      	str	r1, [r5, #0]
 8003a98:	0601      	lsls	r1, r0, #24
 8003a9a:	d501      	bpl.n	8003aa0 <_printf_i+0xec>
 8003a9c:	681e      	ldr	r6, [r3, #0]
 8003a9e:	e002      	b.n	8003aa6 <_printf_i+0xf2>
 8003aa0:	0646      	lsls	r6, r0, #25
 8003aa2:	d5fb      	bpl.n	8003a9c <_printf_i+0xe8>
 8003aa4:	881e      	ldrh	r6, [r3, #0]
 8003aa6:	2f6f      	cmp	r7, #111	; 0x6f
 8003aa8:	bf0c      	ite	eq
 8003aaa:	2308      	moveq	r3, #8
 8003aac:	230a      	movne	r3, #10
 8003aae:	4852      	ldr	r0, [pc, #328]	; (8003bf8 <_printf_i+0x244>)
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ab6:	6865      	ldr	r5, [r4, #4]
 8003ab8:	2d00      	cmp	r5, #0
 8003aba:	bfa8      	it	ge
 8003abc:	6821      	ldrge	r1, [r4, #0]
 8003abe:	60a5      	str	r5, [r4, #8]
 8003ac0:	bfa4      	itt	ge
 8003ac2:	f021 0104 	bicge.w	r1, r1, #4
 8003ac6:	6021      	strge	r1, [r4, #0]
 8003ac8:	b90e      	cbnz	r6, 8003ace <_printf_i+0x11a>
 8003aca:	2d00      	cmp	r5, #0
 8003acc:	d04d      	beq.n	8003b6a <_printf_i+0x1b6>
 8003ace:	4615      	mov	r5, r2
 8003ad0:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ad4:	fb03 6711 	mls	r7, r3, r1, r6
 8003ad8:	5dc7      	ldrb	r7, [r0, r7]
 8003ada:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ade:	4637      	mov	r7, r6
 8003ae0:	42bb      	cmp	r3, r7
 8003ae2:	460e      	mov	r6, r1
 8003ae4:	d9f4      	bls.n	8003ad0 <_printf_i+0x11c>
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d10b      	bne.n	8003b02 <_printf_i+0x14e>
 8003aea:	6823      	ldr	r3, [r4, #0]
 8003aec:	07de      	lsls	r6, r3, #31
 8003aee:	d508      	bpl.n	8003b02 <_printf_i+0x14e>
 8003af0:	6923      	ldr	r3, [r4, #16]
 8003af2:	6861      	ldr	r1, [r4, #4]
 8003af4:	4299      	cmp	r1, r3
 8003af6:	bfde      	ittt	le
 8003af8:	2330      	movle	r3, #48	; 0x30
 8003afa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003afe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b02:	1b52      	subs	r2, r2, r5
 8003b04:	6122      	str	r2, [r4, #16]
 8003b06:	464b      	mov	r3, r9
 8003b08:	4621      	mov	r1, r4
 8003b0a:	4640      	mov	r0, r8
 8003b0c:	f8cd a000 	str.w	sl, [sp]
 8003b10:	aa03      	add	r2, sp, #12
 8003b12:	f7ff fedf 	bl	80038d4 <_printf_common>
 8003b16:	3001      	adds	r0, #1
 8003b18:	d14c      	bne.n	8003bb4 <_printf_i+0x200>
 8003b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b1e:	b004      	add	sp, #16
 8003b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b24:	4834      	ldr	r0, [pc, #208]	; (8003bf8 <_printf_i+0x244>)
 8003b26:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003b2a:	6829      	ldr	r1, [r5, #0]
 8003b2c:	6823      	ldr	r3, [r4, #0]
 8003b2e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b32:	6029      	str	r1, [r5, #0]
 8003b34:	061d      	lsls	r5, r3, #24
 8003b36:	d514      	bpl.n	8003b62 <_printf_i+0x1ae>
 8003b38:	07df      	lsls	r7, r3, #31
 8003b3a:	bf44      	itt	mi
 8003b3c:	f043 0320 	orrmi.w	r3, r3, #32
 8003b40:	6023      	strmi	r3, [r4, #0]
 8003b42:	b91e      	cbnz	r6, 8003b4c <_printf_i+0x198>
 8003b44:	6823      	ldr	r3, [r4, #0]
 8003b46:	f023 0320 	bic.w	r3, r3, #32
 8003b4a:	6023      	str	r3, [r4, #0]
 8003b4c:	2310      	movs	r3, #16
 8003b4e:	e7af      	b.n	8003ab0 <_printf_i+0xfc>
 8003b50:	6823      	ldr	r3, [r4, #0]
 8003b52:	f043 0320 	orr.w	r3, r3, #32
 8003b56:	6023      	str	r3, [r4, #0]
 8003b58:	2378      	movs	r3, #120	; 0x78
 8003b5a:	4828      	ldr	r0, [pc, #160]	; (8003bfc <_printf_i+0x248>)
 8003b5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b60:	e7e3      	b.n	8003b2a <_printf_i+0x176>
 8003b62:	0659      	lsls	r1, r3, #25
 8003b64:	bf48      	it	mi
 8003b66:	b2b6      	uxthmi	r6, r6
 8003b68:	e7e6      	b.n	8003b38 <_printf_i+0x184>
 8003b6a:	4615      	mov	r5, r2
 8003b6c:	e7bb      	b.n	8003ae6 <_printf_i+0x132>
 8003b6e:	682b      	ldr	r3, [r5, #0]
 8003b70:	6826      	ldr	r6, [r4, #0]
 8003b72:	1d18      	adds	r0, r3, #4
 8003b74:	6961      	ldr	r1, [r4, #20]
 8003b76:	6028      	str	r0, [r5, #0]
 8003b78:	0635      	lsls	r5, r6, #24
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	d501      	bpl.n	8003b82 <_printf_i+0x1ce>
 8003b7e:	6019      	str	r1, [r3, #0]
 8003b80:	e002      	b.n	8003b88 <_printf_i+0x1d4>
 8003b82:	0670      	lsls	r0, r6, #25
 8003b84:	d5fb      	bpl.n	8003b7e <_printf_i+0x1ca>
 8003b86:	8019      	strh	r1, [r3, #0]
 8003b88:	2300      	movs	r3, #0
 8003b8a:	4615      	mov	r5, r2
 8003b8c:	6123      	str	r3, [r4, #16]
 8003b8e:	e7ba      	b.n	8003b06 <_printf_i+0x152>
 8003b90:	682b      	ldr	r3, [r5, #0]
 8003b92:	2100      	movs	r1, #0
 8003b94:	1d1a      	adds	r2, r3, #4
 8003b96:	602a      	str	r2, [r5, #0]
 8003b98:	681d      	ldr	r5, [r3, #0]
 8003b9a:	6862      	ldr	r2, [r4, #4]
 8003b9c:	4628      	mov	r0, r5
 8003b9e:	f000 f921 	bl	8003de4 <memchr>
 8003ba2:	b108      	cbz	r0, 8003ba8 <_printf_i+0x1f4>
 8003ba4:	1b40      	subs	r0, r0, r5
 8003ba6:	6060      	str	r0, [r4, #4]
 8003ba8:	6863      	ldr	r3, [r4, #4]
 8003baa:	6123      	str	r3, [r4, #16]
 8003bac:	2300      	movs	r3, #0
 8003bae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bb2:	e7a8      	b.n	8003b06 <_printf_i+0x152>
 8003bb4:	462a      	mov	r2, r5
 8003bb6:	4649      	mov	r1, r9
 8003bb8:	4640      	mov	r0, r8
 8003bba:	6923      	ldr	r3, [r4, #16]
 8003bbc:	47d0      	blx	sl
 8003bbe:	3001      	adds	r0, #1
 8003bc0:	d0ab      	beq.n	8003b1a <_printf_i+0x166>
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	079b      	lsls	r3, r3, #30
 8003bc6:	d413      	bmi.n	8003bf0 <_printf_i+0x23c>
 8003bc8:	68e0      	ldr	r0, [r4, #12]
 8003bca:	9b03      	ldr	r3, [sp, #12]
 8003bcc:	4298      	cmp	r0, r3
 8003bce:	bfb8      	it	lt
 8003bd0:	4618      	movlt	r0, r3
 8003bd2:	e7a4      	b.n	8003b1e <_printf_i+0x16a>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	4632      	mov	r2, r6
 8003bd8:	4649      	mov	r1, r9
 8003bda:	4640      	mov	r0, r8
 8003bdc:	47d0      	blx	sl
 8003bde:	3001      	adds	r0, #1
 8003be0:	d09b      	beq.n	8003b1a <_printf_i+0x166>
 8003be2:	3501      	adds	r5, #1
 8003be4:	68e3      	ldr	r3, [r4, #12]
 8003be6:	9903      	ldr	r1, [sp, #12]
 8003be8:	1a5b      	subs	r3, r3, r1
 8003bea:	42ab      	cmp	r3, r5
 8003bec:	dcf2      	bgt.n	8003bd4 <_printf_i+0x220>
 8003bee:	e7eb      	b.n	8003bc8 <_printf_i+0x214>
 8003bf0:	2500      	movs	r5, #0
 8003bf2:	f104 0619 	add.w	r6, r4, #25
 8003bf6:	e7f5      	b.n	8003be4 <_printf_i+0x230>
 8003bf8:	08004135 	.word	0x08004135
 8003bfc:	08004146 	.word	0x08004146

08003c00 <_putc_r>:
 8003c00:	b570      	push	{r4, r5, r6, lr}
 8003c02:	460d      	mov	r5, r1
 8003c04:	4614      	mov	r4, r2
 8003c06:	4606      	mov	r6, r0
 8003c08:	b118      	cbz	r0, 8003c12 <_putc_r+0x12>
 8003c0a:	6983      	ldr	r3, [r0, #24]
 8003c0c:	b90b      	cbnz	r3, 8003c12 <_putc_r+0x12>
 8003c0e:	f7ff fb27 	bl	8003260 <__sinit>
 8003c12:	4b1c      	ldr	r3, [pc, #112]	; (8003c84 <_putc_r+0x84>)
 8003c14:	429c      	cmp	r4, r3
 8003c16:	d124      	bne.n	8003c62 <_putc_r+0x62>
 8003c18:	6874      	ldr	r4, [r6, #4]
 8003c1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c1c:	07d8      	lsls	r0, r3, #31
 8003c1e:	d405      	bmi.n	8003c2c <_putc_r+0x2c>
 8003c20:	89a3      	ldrh	r3, [r4, #12]
 8003c22:	0599      	lsls	r1, r3, #22
 8003c24:	d402      	bmi.n	8003c2c <_putc_r+0x2c>
 8003c26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c28:	f7ff fbb8 	bl	800339c <__retarget_lock_acquire_recursive>
 8003c2c:	68a3      	ldr	r3, [r4, #8]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	60a3      	str	r3, [r4, #8]
 8003c34:	da05      	bge.n	8003c42 <_putc_r+0x42>
 8003c36:	69a2      	ldr	r2, [r4, #24]
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	db1c      	blt.n	8003c76 <_putc_r+0x76>
 8003c3c:	b2eb      	uxtb	r3, r5
 8003c3e:	2b0a      	cmp	r3, #10
 8003c40:	d019      	beq.n	8003c76 <_putc_r+0x76>
 8003c42:	6823      	ldr	r3, [r4, #0]
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	6022      	str	r2, [r4, #0]
 8003c48:	701d      	strb	r5, [r3, #0]
 8003c4a:	b2ed      	uxtb	r5, r5
 8003c4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c4e:	07da      	lsls	r2, r3, #31
 8003c50:	d405      	bmi.n	8003c5e <_putc_r+0x5e>
 8003c52:	89a3      	ldrh	r3, [r4, #12]
 8003c54:	059b      	lsls	r3, r3, #22
 8003c56:	d402      	bmi.n	8003c5e <_putc_r+0x5e>
 8003c58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c5a:	f7ff fba0 	bl	800339e <__retarget_lock_release_recursive>
 8003c5e:	4628      	mov	r0, r5
 8003c60:	bd70      	pop	{r4, r5, r6, pc}
 8003c62:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <_putc_r+0x88>)
 8003c64:	429c      	cmp	r4, r3
 8003c66:	d101      	bne.n	8003c6c <_putc_r+0x6c>
 8003c68:	68b4      	ldr	r4, [r6, #8]
 8003c6a:	e7d6      	b.n	8003c1a <_putc_r+0x1a>
 8003c6c:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <_putc_r+0x8c>)
 8003c6e:	429c      	cmp	r4, r3
 8003c70:	bf08      	it	eq
 8003c72:	68f4      	ldreq	r4, [r6, #12]
 8003c74:	e7d1      	b.n	8003c1a <_putc_r+0x1a>
 8003c76:	4629      	mov	r1, r5
 8003c78:	4622      	mov	r2, r4
 8003c7a:	4630      	mov	r0, r6
 8003c7c:	f7ff f91a 	bl	8002eb4 <__swbuf_r>
 8003c80:	4605      	mov	r5, r0
 8003c82:	e7e3      	b.n	8003c4c <_putc_r+0x4c>
 8003c84:	080040e4 	.word	0x080040e4
 8003c88:	08004104 	.word	0x08004104
 8003c8c:	080040c4 	.word	0x080040c4

08003c90 <_sbrk_r>:
 8003c90:	b538      	push	{r3, r4, r5, lr}
 8003c92:	2300      	movs	r3, #0
 8003c94:	4d05      	ldr	r5, [pc, #20]	; (8003cac <_sbrk_r+0x1c>)
 8003c96:	4604      	mov	r4, r0
 8003c98:	4608      	mov	r0, r1
 8003c9a:	602b      	str	r3, [r5, #0]
 8003c9c:	f7fd f86e 	bl	8000d7c <_sbrk>
 8003ca0:	1c43      	adds	r3, r0, #1
 8003ca2:	d102      	bne.n	8003caa <_sbrk_r+0x1a>
 8003ca4:	682b      	ldr	r3, [r5, #0]
 8003ca6:	b103      	cbz	r3, 8003caa <_sbrk_r+0x1a>
 8003ca8:	6023      	str	r3, [r4, #0]
 8003caa:	bd38      	pop	{r3, r4, r5, pc}
 8003cac:	20000ee8 	.word	0x20000ee8

08003cb0 <__sread>:
 8003cb0:	b510      	push	{r4, lr}
 8003cb2:	460c      	mov	r4, r1
 8003cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cb8:	f000 f8ae 	bl	8003e18 <_read_r>
 8003cbc:	2800      	cmp	r0, #0
 8003cbe:	bfab      	itete	ge
 8003cc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003cc2:	89a3      	ldrhlt	r3, [r4, #12]
 8003cc4:	181b      	addge	r3, r3, r0
 8003cc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003cca:	bfac      	ite	ge
 8003ccc:	6563      	strge	r3, [r4, #84]	; 0x54
 8003cce:	81a3      	strhlt	r3, [r4, #12]
 8003cd0:	bd10      	pop	{r4, pc}

08003cd2 <__swrite>:
 8003cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cd6:	461f      	mov	r7, r3
 8003cd8:	898b      	ldrh	r3, [r1, #12]
 8003cda:	4605      	mov	r5, r0
 8003cdc:	05db      	lsls	r3, r3, #23
 8003cde:	460c      	mov	r4, r1
 8003ce0:	4616      	mov	r6, r2
 8003ce2:	d505      	bpl.n	8003cf0 <__swrite+0x1e>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cec:	f000 f868 	bl	8003dc0 <_lseek_r>
 8003cf0:	89a3      	ldrh	r3, [r4, #12]
 8003cf2:	4632      	mov	r2, r6
 8003cf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cf8:	81a3      	strh	r3, [r4, #12]
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	463b      	mov	r3, r7
 8003cfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d06:	f000 b817 	b.w	8003d38 <_write_r>

08003d0a <__sseek>:
 8003d0a:	b510      	push	{r4, lr}
 8003d0c:	460c      	mov	r4, r1
 8003d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d12:	f000 f855 	bl	8003dc0 <_lseek_r>
 8003d16:	1c43      	adds	r3, r0, #1
 8003d18:	89a3      	ldrh	r3, [r4, #12]
 8003d1a:	bf15      	itete	ne
 8003d1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d26:	81a3      	strheq	r3, [r4, #12]
 8003d28:	bf18      	it	ne
 8003d2a:	81a3      	strhne	r3, [r4, #12]
 8003d2c:	bd10      	pop	{r4, pc}

08003d2e <__sclose>:
 8003d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d32:	f000 b813 	b.w	8003d5c <_close_r>
	...

08003d38 <_write_r>:
 8003d38:	b538      	push	{r3, r4, r5, lr}
 8003d3a:	4604      	mov	r4, r0
 8003d3c:	4608      	mov	r0, r1
 8003d3e:	4611      	mov	r1, r2
 8003d40:	2200      	movs	r2, #0
 8003d42:	4d05      	ldr	r5, [pc, #20]	; (8003d58 <_write_r+0x20>)
 8003d44:	602a      	str	r2, [r5, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	f7fd f87a 	bl	8000e40 <_write>
 8003d4c:	1c43      	adds	r3, r0, #1
 8003d4e:	d102      	bne.n	8003d56 <_write_r+0x1e>
 8003d50:	682b      	ldr	r3, [r5, #0]
 8003d52:	b103      	cbz	r3, 8003d56 <_write_r+0x1e>
 8003d54:	6023      	str	r3, [r4, #0]
 8003d56:	bd38      	pop	{r3, r4, r5, pc}
 8003d58:	20000ee8 	.word	0x20000ee8

08003d5c <_close_r>:
 8003d5c:	b538      	push	{r3, r4, r5, lr}
 8003d5e:	2300      	movs	r3, #0
 8003d60:	4d05      	ldr	r5, [pc, #20]	; (8003d78 <_close_r+0x1c>)
 8003d62:	4604      	mov	r4, r0
 8003d64:	4608      	mov	r0, r1
 8003d66:	602b      	str	r3, [r5, #0]
 8003d68:	f7fc ffd7 	bl	8000d1a <_close>
 8003d6c:	1c43      	adds	r3, r0, #1
 8003d6e:	d102      	bne.n	8003d76 <_close_r+0x1a>
 8003d70:	682b      	ldr	r3, [r5, #0]
 8003d72:	b103      	cbz	r3, 8003d76 <_close_r+0x1a>
 8003d74:	6023      	str	r3, [r4, #0]
 8003d76:	bd38      	pop	{r3, r4, r5, pc}
 8003d78:	20000ee8 	.word	0x20000ee8

08003d7c <_fstat_r>:
 8003d7c:	b538      	push	{r3, r4, r5, lr}
 8003d7e:	2300      	movs	r3, #0
 8003d80:	4d06      	ldr	r5, [pc, #24]	; (8003d9c <_fstat_r+0x20>)
 8003d82:	4604      	mov	r4, r0
 8003d84:	4608      	mov	r0, r1
 8003d86:	4611      	mov	r1, r2
 8003d88:	602b      	str	r3, [r5, #0]
 8003d8a:	f7fc ffd1 	bl	8000d30 <_fstat>
 8003d8e:	1c43      	adds	r3, r0, #1
 8003d90:	d102      	bne.n	8003d98 <_fstat_r+0x1c>
 8003d92:	682b      	ldr	r3, [r5, #0]
 8003d94:	b103      	cbz	r3, 8003d98 <_fstat_r+0x1c>
 8003d96:	6023      	str	r3, [r4, #0]
 8003d98:	bd38      	pop	{r3, r4, r5, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20000ee8 	.word	0x20000ee8

08003da0 <_isatty_r>:
 8003da0:	b538      	push	{r3, r4, r5, lr}
 8003da2:	2300      	movs	r3, #0
 8003da4:	4d05      	ldr	r5, [pc, #20]	; (8003dbc <_isatty_r+0x1c>)
 8003da6:	4604      	mov	r4, r0
 8003da8:	4608      	mov	r0, r1
 8003daa:	602b      	str	r3, [r5, #0]
 8003dac:	f7fc ffcf 	bl	8000d4e <_isatty>
 8003db0:	1c43      	adds	r3, r0, #1
 8003db2:	d102      	bne.n	8003dba <_isatty_r+0x1a>
 8003db4:	682b      	ldr	r3, [r5, #0]
 8003db6:	b103      	cbz	r3, 8003dba <_isatty_r+0x1a>
 8003db8:	6023      	str	r3, [r4, #0]
 8003dba:	bd38      	pop	{r3, r4, r5, pc}
 8003dbc:	20000ee8 	.word	0x20000ee8

08003dc0 <_lseek_r>:
 8003dc0:	b538      	push	{r3, r4, r5, lr}
 8003dc2:	4604      	mov	r4, r0
 8003dc4:	4608      	mov	r0, r1
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	2200      	movs	r2, #0
 8003dca:	4d05      	ldr	r5, [pc, #20]	; (8003de0 <_lseek_r+0x20>)
 8003dcc:	602a      	str	r2, [r5, #0]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	f7fc ffc7 	bl	8000d62 <_lseek>
 8003dd4:	1c43      	adds	r3, r0, #1
 8003dd6:	d102      	bne.n	8003dde <_lseek_r+0x1e>
 8003dd8:	682b      	ldr	r3, [r5, #0]
 8003dda:	b103      	cbz	r3, 8003dde <_lseek_r+0x1e>
 8003ddc:	6023      	str	r3, [r4, #0]
 8003dde:	bd38      	pop	{r3, r4, r5, pc}
 8003de0:	20000ee8 	.word	0x20000ee8

08003de4 <memchr>:
 8003de4:	4603      	mov	r3, r0
 8003de6:	b510      	push	{r4, lr}
 8003de8:	b2c9      	uxtb	r1, r1
 8003dea:	4402      	add	r2, r0
 8003dec:	4293      	cmp	r3, r2
 8003dee:	4618      	mov	r0, r3
 8003df0:	d101      	bne.n	8003df6 <memchr+0x12>
 8003df2:	2000      	movs	r0, #0
 8003df4:	e003      	b.n	8003dfe <memchr+0x1a>
 8003df6:	7804      	ldrb	r4, [r0, #0]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	428c      	cmp	r4, r1
 8003dfc:	d1f6      	bne.n	8003dec <memchr+0x8>
 8003dfe:	bd10      	pop	{r4, pc}

08003e00 <__malloc_lock>:
 8003e00:	4801      	ldr	r0, [pc, #4]	; (8003e08 <__malloc_lock+0x8>)
 8003e02:	f7ff bacb 	b.w	800339c <__retarget_lock_acquire_recursive>
 8003e06:	bf00      	nop
 8003e08:	20000edc 	.word	0x20000edc

08003e0c <__malloc_unlock>:
 8003e0c:	4801      	ldr	r0, [pc, #4]	; (8003e14 <__malloc_unlock+0x8>)
 8003e0e:	f7ff bac6 	b.w	800339e <__retarget_lock_release_recursive>
 8003e12:	bf00      	nop
 8003e14:	20000edc 	.word	0x20000edc

08003e18 <_read_r>:
 8003e18:	b538      	push	{r3, r4, r5, lr}
 8003e1a:	4604      	mov	r4, r0
 8003e1c:	4608      	mov	r0, r1
 8003e1e:	4611      	mov	r1, r2
 8003e20:	2200      	movs	r2, #0
 8003e22:	4d05      	ldr	r5, [pc, #20]	; (8003e38 <_read_r+0x20>)
 8003e24:	602a      	str	r2, [r5, #0]
 8003e26:	461a      	mov	r2, r3
 8003e28:	f7fc ff5a 	bl	8000ce0 <_read>
 8003e2c:	1c43      	adds	r3, r0, #1
 8003e2e:	d102      	bne.n	8003e36 <_read_r+0x1e>
 8003e30:	682b      	ldr	r3, [r5, #0]
 8003e32:	b103      	cbz	r3, 8003e36 <_read_r+0x1e>
 8003e34:	6023      	str	r3, [r4, #0]
 8003e36:	bd38      	pop	{r3, r4, r5, pc}
 8003e38:	20000ee8 	.word	0x20000ee8

08003e3c <sqrt>:
 8003e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3e:	4606      	mov	r6, r0
 8003e40:	460f      	mov	r7, r1
 8003e42:	f000 f81f 	bl	8003e84 <__ieee754_sqrt>
 8003e46:	4632      	mov	r2, r6
 8003e48:	4604      	mov	r4, r0
 8003e4a:	460d      	mov	r5, r1
 8003e4c:	463b      	mov	r3, r7
 8003e4e:	4630      	mov	r0, r6
 8003e50:	4639      	mov	r1, r7
 8003e52:	f7fc fdd1 	bl	80009f8 <__aeabi_dcmpun>
 8003e56:	b990      	cbnz	r0, 8003e7e <sqrt+0x42>
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	4630      	mov	r0, r6
 8003e5e:	4639      	mov	r1, r7
 8003e60:	f7fc fda2 	bl	80009a8 <__aeabi_dcmplt>
 8003e64:	b158      	cbz	r0, 8003e7e <sqrt+0x42>
 8003e66:	f7fe ff53 	bl	8002d10 <__errno>
 8003e6a:	2321      	movs	r3, #33	; 0x21
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	6003      	str	r3, [r0, #0]
 8003e70:	2300      	movs	r3, #0
 8003e72:	4610      	mov	r0, r2
 8003e74:	4619      	mov	r1, r3
 8003e76:	f7fc fc4f 	bl	8000718 <__aeabi_ddiv>
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	460d      	mov	r5, r1
 8003e7e:	4620      	mov	r0, r4
 8003e80:	4629      	mov	r1, r5
 8003e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003e84 <__ieee754_sqrt>:
 8003e84:	f8df c158 	ldr.w	ip, [pc, #344]	; 8003fe0 <__ieee754_sqrt+0x15c>
 8003e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e8c:	ea3c 0c01 	bics.w	ip, ip, r1
 8003e90:	4606      	mov	r6, r0
 8003e92:	460d      	mov	r5, r1
 8003e94:	460c      	mov	r4, r1
 8003e96:	460a      	mov	r2, r1
 8003e98:	4607      	mov	r7, r0
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	d10f      	bne.n	8003ebe <__ieee754_sqrt+0x3a>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	f7fc fb0f 	bl	80004c4 <__aeabi_dmul>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4630      	mov	r0, r6
 8003eac:	4629      	mov	r1, r5
 8003eae:	f7fc f953 	bl	8000158 <__adddf3>
 8003eb2:	4606      	mov	r6, r0
 8003eb4:	460d      	mov	r5, r1
 8003eb6:	4630      	mov	r0, r6
 8003eb8:	4629      	mov	r1, r5
 8003eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ebe:	2900      	cmp	r1, #0
 8003ec0:	dc0e      	bgt.n	8003ee0 <__ieee754_sqrt+0x5c>
 8003ec2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8003ec6:	ea5c 0707 	orrs.w	r7, ip, r7
 8003eca:	d0f4      	beq.n	8003eb6 <__ieee754_sqrt+0x32>
 8003ecc:	b141      	cbz	r1, 8003ee0 <__ieee754_sqrt+0x5c>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	f7fc f93f 	bl	8000154 <__aeabi_dsub>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	f7fc fc1d 	bl	8000718 <__aeabi_ddiv>
 8003ede:	e7e8      	b.n	8003eb2 <__ieee754_sqrt+0x2e>
 8003ee0:	1521      	asrs	r1, r4, #20
 8003ee2:	d075      	beq.n	8003fd0 <__ieee754_sqrt+0x14c>
 8003ee4:	07cc      	lsls	r4, r1, #31
 8003ee6:	f04f 0400 	mov.w	r4, #0
 8003eea:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8003eee:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8003ef2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003ef6:	bf5e      	ittt	pl
 8003ef8:	0fd9      	lsrpl	r1, r3, #31
 8003efa:	005b      	lslpl	r3, r3, #1
 8003efc:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8003f00:	0fd9      	lsrs	r1, r3, #31
 8003f02:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8003f06:	2516      	movs	r5, #22
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f0e:	107f      	asrs	r7, r7, #1
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	1846      	adds	r6, r0, r1
 8003f14:	4296      	cmp	r6, r2
 8003f16:	bfde      	ittt	le
 8003f18:	1b92      	suble	r2, r2, r6
 8003f1a:	1870      	addle	r0, r6, r1
 8003f1c:	1864      	addle	r4, r4, r1
 8003f1e:	0052      	lsls	r2, r2, #1
 8003f20:	3d01      	subs	r5, #1
 8003f22:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8003f26:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8003f2a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003f2e:	d1f0      	bne.n	8003f12 <__ieee754_sqrt+0x8e>
 8003f30:	4629      	mov	r1, r5
 8003f32:	f04f 0e20 	mov.w	lr, #32
 8003f36:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003f3a:	4282      	cmp	r2, r0
 8003f3c:	eb06 0c05 	add.w	ip, r6, r5
 8003f40:	dc02      	bgt.n	8003f48 <__ieee754_sqrt+0xc4>
 8003f42:	d113      	bne.n	8003f6c <__ieee754_sqrt+0xe8>
 8003f44:	459c      	cmp	ip, r3
 8003f46:	d811      	bhi.n	8003f6c <__ieee754_sqrt+0xe8>
 8003f48:	f1bc 0f00 	cmp.w	ip, #0
 8003f4c:	eb0c 0506 	add.w	r5, ip, r6
 8003f50:	da43      	bge.n	8003fda <__ieee754_sqrt+0x156>
 8003f52:	2d00      	cmp	r5, #0
 8003f54:	db41      	blt.n	8003fda <__ieee754_sqrt+0x156>
 8003f56:	f100 0801 	add.w	r8, r0, #1
 8003f5a:	1a12      	subs	r2, r2, r0
 8003f5c:	4640      	mov	r0, r8
 8003f5e:	459c      	cmp	ip, r3
 8003f60:	bf88      	it	hi
 8003f62:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8003f66:	eba3 030c 	sub.w	r3, r3, ip
 8003f6a:	4431      	add	r1, r6
 8003f6c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8003f70:	f1be 0e01 	subs.w	lr, lr, #1
 8003f74:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8003f78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003f7c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003f80:	d1db      	bne.n	8003f3a <__ieee754_sqrt+0xb6>
 8003f82:	4313      	orrs	r3, r2
 8003f84:	d006      	beq.n	8003f94 <__ieee754_sqrt+0x110>
 8003f86:	1c48      	adds	r0, r1, #1
 8003f88:	bf0b      	itete	eq
 8003f8a:	4671      	moveq	r1, lr
 8003f8c:	3101      	addne	r1, #1
 8003f8e:	3401      	addeq	r4, #1
 8003f90:	f021 0101 	bicne.w	r1, r1, #1
 8003f94:	1063      	asrs	r3, r4, #1
 8003f96:	0849      	lsrs	r1, r1, #1
 8003f98:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003f9c:	07e2      	lsls	r2, r4, #31
 8003f9e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003fa2:	bf48      	it	mi
 8003fa4:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8003fa8:	460e      	mov	r6, r1
 8003faa:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8003fae:	e782      	b.n	8003eb6 <__ieee754_sqrt+0x32>
 8003fb0:	0ada      	lsrs	r2, r3, #11
 8003fb2:	3815      	subs	r0, #21
 8003fb4:	055b      	lsls	r3, r3, #21
 8003fb6:	2a00      	cmp	r2, #0
 8003fb8:	d0fa      	beq.n	8003fb0 <__ieee754_sqrt+0x12c>
 8003fba:	02d5      	lsls	r5, r2, #11
 8003fbc:	d50a      	bpl.n	8003fd4 <__ieee754_sqrt+0x150>
 8003fbe:	f1c1 0420 	rsb	r4, r1, #32
 8003fc2:	fa23 f404 	lsr.w	r4, r3, r4
 8003fc6:	1e4d      	subs	r5, r1, #1
 8003fc8:	408b      	lsls	r3, r1
 8003fca:	4322      	orrs	r2, r4
 8003fcc:	1b41      	subs	r1, r0, r5
 8003fce:	e789      	b.n	8003ee4 <__ieee754_sqrt+0x60>
 8003fd0:	4608      	mov	r0, r1
 8003fd2:	e7f0      	b.n	8003fb6 <__ieee754_sqrt+0x132>
 8003fd4:	0052      	lsls	r2, r2, #1
 8003fd6:	3101      	adds	r1, #1
 8003fd8:	e7ef      	b.n	8003fba <__ieee754_sqrt+0x136>
 8003fda:	4680      	mov	r8, r0
 8003fdc:	e7bd      	b.n	8003f5a <__ieee754_sqrt+0xd6>
 8003fde:	bf00      	nop
 8003fe0:	7ff00000 	.word	0x7ff00000

08003fe4 <_init>:
 8003fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe6:	bf00      	nop
 8003fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fea:	bc08      	pop	{r3}
 8003fec:	469e      	mov	lr, r3
 8003fee:	4770      	bx	lr

08003ff0 <_fini>:
 8003ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff2:	bf00      	nop
 8003ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ff6:	bc08      	pop	{r3}
 8003ff8:	469e      	mov	lr, r3
 8003ffa:	4770      	bx	lr
