
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080024c4  080024c4  000124c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002560  08002560  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002560  08002560  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002560  08002560  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002560  08002560  00012560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002564  08002564  00012564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000070  080025d8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  080025d8  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000074dd  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000166e  00000000  00000000  00027576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000728  00000000  00000000  00028be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000680  00000000  00000000  00029310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000266c  00000000  00000000  00029990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000092d1  00000000  00000000  0002bffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000836c1  00000000  00000000  000352cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b898e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002164  00000000  00000000  000b89e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080024ac 	.word	0x080024ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080024ac 	.word	0x080024ac

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fbae 	bl	80008b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f807 	bl	8000166 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f874 	bl	8000244 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015c:	f000 f848 	bl	80001f0 <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  extern void run();
  run();
 8000160:	f000 fb7a 	bl	8000858 <run>
  while (1)
 8000164:	e7fe      	b.n	8000164 <main+0x18>

08000166 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000166:	b580      	push	{r7, lr}
 8000168:	b090      	sub	sp, #64	; 0x40
 800016a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800016c:	f107 0318 	add.w	r3, r7, #24
 8000170:	2228      	movs	r2, #40	; 0x28
 8000172:	2100      	movs	r1, #0
 8000174:	4618      	mov	r0, r3
 8000176:	f001 fc9b 	bl	8001ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800017a:	1d3b      	adds	r3, r7, #4
 800017c:	2200      	movs	r2, #0
 800017e:	601a      	str	r2, [r3, #0]
 8000180:	605a      	str	r2, [r3, #4]
 8000182:	609a      	str	r2, [r3, #8]
 8000184:	60da      	str	r2, [r3, #12]
 8000186:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000188:	2301      	movs	r3, #1
 800018a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800018c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000190:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000192:	2300      	movs	r3, #0
 8000194:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000196:	2301      	movs	r3, #1
 8000198:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800019a:	2302      	movs	r3, #2
 800019c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800019e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001a4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001aa:	f107 0318 	add.w	r3, r7, #24
 80001ae:	4618      	mov	r0, r3
 80001b0:	f000 fe6c 	bl	8000e8c <HAL_RCC_OscConfig>
 80001b4:	4603      	mov	r3, r0
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d001      	beq.n	80001be <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001ba:	f000 f87b 	bl	80002b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001be:	230f      	movs	r3, #15
 80001c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001c2:	2302      	movs	r3, #2
 80001c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001c6:	2300      	movs	r3, #0
 80001c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d0:	2300      	movs	r3, #0
 80001d2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	2102      	movs	r1, #2
 80001d8:	4618      	mov	r0, r3
 80001da:	f001 f8d9 	bl	8001390 <HAL_RCC_ClockConfig>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d001      	beq.n	80001e8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001e4:	f000 f866 	bl	80002b4 <Error_Handler>
  }
}
 80001e8:	bf00      	nop
 80001ea:	3740      	adds	r7, #64	; 0x40
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}

080001f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80001f4:	4b11      	ldr	r3, [pc, #68]	; (800023c <MX_USART1_UART_Init+0x4c>)
 80001f6:	4a12      	ldr	r2, [pc, #72]	; (8000240 <MX_USART1_UART_Init+0x50>)
 80001f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80001fa:	4b10      	ldr	r3, [pc, #64]	; (800023c <MX_USART1_UART_Init+0x4c>)
 80001fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000200:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000202:	4b0e      	ldr	r3, [pc, #56]	; (800023c <MX_USART1_UART_Init+0x4c>)
 8000204:	2200      	movs	r2, #0
 8000206:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000208:	4b0c      	ldr	r3, [pc, #48]	; (800023c <MX_USART1_UART_Init+0x4c>)
 800020a:	2200      	movs	r2, #0
 800020c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800020e:	4b0b      	ldr	r3, [pc, #44]	; (800023c <MX_USART1_UART_Init+0x4c>)
 8000210:	2200      	movs	r2, #0
 8000212:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000214:	4b09      	ldr	r3, [pc, #36]	; (800023c <MX_USART1_UART_Init+0x4c>)
 8000216:	220c      	movs	r2, #12
 8000218:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800021a:	4b08      	ldr	r3, [pc, #32]	; (800023c <MX_USART1_UART_Init+0x4c>)
 800021c:	2200      	movs	r2, #0
 800021e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000220:	4b06      	ldr	r3, [pc, #24]	; (800023c <MX_USART1_UART_Init+0x4c>)
 8000222:	2200      	movs	r2, #0
 8000224:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000226:	4805      	ldr	r0, [pc, #20]	; (800023c <MX_USART1_UART_Init+0x4c>)
 8000228:	f001 fa40 	bl	80016ac <HAL_HalfDuplex_Init>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000232:	f000 f83f 	bl	80002b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000236:	bf00      	nop
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	2000008c 	.word	0x2000008c
 8000240:	40013800 	.word	0x40013800

08000244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800024a:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <MX_GPIO_Init+0x40>)
 800024c:	699b      	ldr	r3, [r3, #24]
 800024e:	4a0d      	ldr	r2, [pc, #52]	; (8000284 <MX_GPIO_Init+0x40>)
 8000250:	f043 0320 	orr.w	r3, r3, #32
 8000254:	6193      	str	r3, [r2, #24]
 8000256:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <MX_GPIO_Init+0x40>)
 8000258:	699b      	ldr	r3, [r3, #24]
 800025a:	f003 0320 	and.w	r3, r3, #32
 800025e:	607b      	str	r3, [r7, #4]
 8000260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000262:	4b08      	ldr	r3, [pc, #32]	; (8000284 <MX_GPIO_Init+0x40>)
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	4a07      	ldr	r2, [pc, #28]	; (8000284 <MX_GPIO_Init+0x40>)
 8000268:	f043 0304 	orr.w	r3, r3, #4
 800026c:	6193      	str	r3, [r2, #24]
 800026e:	4b05      	ldr	r3, [pc, #20]	; (8000284 <MX_GPIO_Init+0x40>)
 8000270:	699b      	ldr	r3, [r3, #24]
 8000272:	f003 0304 	and.w	r3, r3, #4
 8000276:	603b      	str	r3, [r7, #0]
 8000278:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800027a:	bf00      	nop
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr
 8000284:	40021000 	.word	0x40021000

08000288 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	b29a      	uxth	r2, r3
 8000298:	f04f 33ff 	mov.w	r3, #4294967295
 800029c:	68b9      	ldr	r1, [r7, #8]
 800029e:	4804      	ldr	r0, [pc, #16]	; (80002b0 <_write+0x28>)
 80002a0:	f001 fa5c 	bl	800175c <HAL_UART_Transmit>
	return len;
 80002a4:	687b      	ldr	r3, [r7, #4]
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	3710      	adds	r7, #16
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	2000008c 	.word	0x2000008c

080002b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002b8:	b672      	cpsid	i
}
 80002ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002bc:	e7fe      	b.n	80002bc <Error_Handler+0x8>
	...

080002c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002c6:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <HAL_MspInit+0x40>)
 80002c8:	699b      	ldr	r3, [r3, #24]
 80002ca:	4a0d      	ldr	r2, [pc, #52]	; (8000300 <HAL_MspInit+0x40>)
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	6193      	str	r3, [r2, #24]
 80002d2:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <HAL_MspInit+0x40>)
 80002d4:	699b      	ldr	r3, [r3, #24]
 80002d6:	f003 0301 	and.w	r3, r3, #1
 80002da:	607b      	str	r3, [r7, #4]
 80002dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002de:	4b08      	ldr	r3, [pc, #32]	; (8000300 <HAL_MspInit+0x40>)
 80002e0:	69db      	ldr	r3, [r3, #28]
 80002e2:	4a07      	ldr	r2, [pc, #28]	; (8000300 <HAL_MspInit+0x40>)
 80002e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002e8:	61d3      	str	r3, [r2, #28]
 80002ea:	4b05      	ldr	r3, [pc, #20]	; (8000300 <HAL_MspInit+0x40>)
 80002ec:	69db      	ldr	r3, [r3, #28]
 80002ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002f2:	603b      	str	r3, [r7, #0]
 80002f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	40021000 	.word	0x40021000

08000304 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b088      	sub	sp, #32
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030c:	f107 0310 	add.w	r3, r7, #16
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
 8000314:	605a      	str	r2, [r3, #4]
 8000316:	609a      	str	r2, [r3, #8]
 8000318:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a16      	ldr	r2, [pc, #88]	; (8000378 <HAL_UART_MspInit+0x74>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d124      	bne.n	800036e <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000324:	4b15      	ldr	r3, [pc, #84]	; (800037c <HAL_UART_MspInit+0x78>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a14      	ldr	r2, [pc, #80]	; (800037c <HAL_UART_MspInit+0x78>)
 800032a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800032e:	6193      	str	r3, [r2, #24]
 8000330:	4b12      	ldr	r3, [pc, #72]	; (800037c <HAL_UART_MspInit+0x78>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000338:	60fb      	str	r3, [r7, #12]
 800033a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800033c:	4b0f      	ldr	r3, [pc, #60]	; (800037c <HAL_UART_MspInit+0x78>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a0e      	ldr	r2, [pc, #56]	; (800037c <HAL_UART_MspInit+0x78>)
 8000342:	f043 0304 	orr.w	r3, r3, #4
 8000346:	6193      	str	r3, [r2, #24]
 8000348:	4b0c      	ldr	r3, [pc, #48]	; (800037c <HAL_UART_MspInit+0x78>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	f003 0304 	and.w	r3, r3, #4
 8000350:	60bb      	str	r3, [r7, #8]
 8000352:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000354:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000358:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800035a:	2312      	movs	r3, #18
 800035c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800035e:	2303      	movs	r3, #3
 8000360:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000362:	f107 0310 	add.w	r3, r7, #16
 8000366:	4619      	mov	r1, r3
 8000368:	4805      	ldr	r0, [pc, #20]	; (8000380 <HAL_UART_MspInit+0x7c>)
 800036a:	f000 fc0b 	bl	8000b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800036e:	bf00      	nop
 8000370:	3720      	adds	r7, #32
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40013800 	.word	0x40013800
 800037c:	40021000 	.word	0x40021000
 8000380:	40010800 	.word	0x40010800

08000384 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000388:	e7fe      	b.n	8000388 <NMI_Handler+0x4>
	...

0800038c <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */
	printf("Hard Fault\n");
 8000390:	4801      	ldr	r0, [pc, #4]	; (8000398 <HardFault_Handler+0xc>)
 8000392:	f001 fc03 	bl	8001b9c <puts>

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8000396:	e7fe      	b.n	8000396 <HardFault_Handler+0xa>
 8000398:	080024c4 	.word	0x080024c4

0800039c <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80003a0:	e7fe      	b.n	80003a0 <MemManage_Handler+0x4>

080003a2 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80003a2:	b480      	push	{r7}
 80003a4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80003a6:	e7fe      	b.n	80003a6 <BusFault_Handler+0x4>

080003a8 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80003ac:	e7fe      	b.n	80003ac <UsageFault_Handler+0x4>

080003ae <DebugMon_Handler>:


/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80003ae:	b480      	push	{r7}
 80003b0:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80003b2:	bf00      	nop
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr

080003ba <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003ba:	b580      	push	{r7, lr}
 80003bc:	b086      	sub	sp, #24
 80003be:	af00      	add	r7, sp, #0
 80003c0:	60f8      	str	r0, [r7, #12]
 80003c2:	60b9      	str	r1, [r7, #8]
 80003c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003c6:	2300      	movs	r3, #0
 80003c8:	617b      	str	r3, [r7, #20]
 80003ca:	e00a      	b.n	80003e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003cc:	f3af 8000 	nop.w
 80003d0:	4601      	mov	r1, r0
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	1c5a      	adds	r2, r3, #1
 80003d6:	60ba      	str	r2, [r7, #8]
 80003d8:	b2ca      	uxtb	r2, r1
 80003da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	3301      	adds	r3, #1
 80003e0:	617b      	str	r3, [r7, #20]
 80003e2:	697a      	ldr	r2, [r7, #20]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	429a      	cmp	r2, r3
 80003e8:	dbf0      	blt.n	80003cc <_read+0x12>
  }

  return len;
 80003ea:	687b      	ldr	r3, [r7, #4]
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	3718      	adds	r7, #24
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80003fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000400:	4618      	mov	r0, r3
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr

0800040a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800040a:	b480      	push	{r7}
 800040c:	b083      	sub	sp, #12
 800040e:	af00      	add	r7, sp, #0
 8000410:	6078      	str	r0, [r7, #4]
 8000412:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800041a:	605a      	str	r2, [r3, #4]
  return 0;
 800041c:	2300      	movs	r3, #0
}
 800041e:	4618      	mov	r0, r3
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr

08000428 <_isatty>:

int _isatty(int file)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000430:	2301      	movs	r3, #1
}
 8000432:	4618      	mov	r0, r3
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr

0800043c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800043c:	b480      	push	{r7}
 800043e:	b085      	sub	sp, #20
 8000440:	af00      	add	r7, sp, #0
 8000442:	60f8      	str	r0, [r7, #12]
 8000444:	60b9      	str	r1, [r7, #8]
 8000446:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000448:	2300      	movs	r3, #0
}
 800044a:	4618      	mov	r0, r3
 800044c:	3714      	adds	r7, #20
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr

08000454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800045c:	4a14      	ldr	r2, [pc, #80]	; (80004b0 <_sbrk+0x5c>)
 800045e:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <_sbrk+0x60>)
 8000460:	1ad3      	subs	r3, r2, r3
 8000462:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000468:	4b13      	ldr	r3, [pc, #76]	; (80004b8 <_sbrk+0x64>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d102      	bne.n	8000476 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000470:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <_sbrk+0x64>)
 8000472:	4a12      	ldr	r2, [pc, #72]	; (80004bc <_sbrk+0x68>)
 8000474:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000476:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <_sbrk+0x64>)
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4413      	add	r3, r2
 800047e:	693a      	ldr	r2, [r7, #16]
 8000480:	429a      	cmp	r2, r3
 8000482:	d207      	bcs.n	8000494 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000484:	f001 faea 	bl	8001a5c <__errno>
 8000488:	4603      	mov	r3, r0
 800048a:	220c      	movs	r2, #12
 800048c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800048e:	f04f 33ff 	mov.w	r3, #4294967295
 8000492:	e009      	b.n	80004a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000494:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <_sbrk+0x64>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800049a:	4b07      	ldr	r3, [pc, #28]	; (80004b8 <_sbrk+0x64>)
 800049c:	681a      	ldr	r2, [r3, #0]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4413      	add	r3, r2
 80004a2:	4a05      	ldr	r2, [pc, #20]	; (80004b8 <_sbrk+0x64>)
 80004a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004a6:	68fb      	ldr	r3, [r7, #12]
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	3718      	adds	r7, #24
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20005000 	.word	0x20005000
 80004b4:	00000400 	.word	0x00000400
 80004b8:	200000d4 	.word	0x200000d4
 80004bc:	20000320 	.word	0x20000320

080004c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr

080004cc <addTask>:

typedef enum {
	RUNNING = 0, TASK_DELETE, TASK_RESTART, TASK_BLOCK
} ThreadAction;

static void addTask(int index, void (*task)()) {
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
	uint32_t *psp = (uint32_t*) &stack[index][SIZE];
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	3301      	adds	r3, #1
 80004da:	021b      	lsls	r3, r3, #8
 80004dc:	4a42      	ldr	r2, [pc, #264]	; (80005e8 <addTask+0x11c>)
 80004de:	4413      	add	r3, r2
 80004e0:	60fb      	str	r3, [r7, #12]

	// fill dummy stack frame
	*(--psp) = 0x01000000u; // Dummy xPSR, just enable Thumb State bit;
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	3b04      	subs	r3, #4
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80004ee:	601a      	str	r2, [r3, #0]
	*(--psp) = (uint32_t) task; // PC
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	3b04      	subs	r3, #4
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	683a      	ldr	r2, [r7, #0]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	601a      	str	r2, [r3, #0]
	*(--psp) = 0xFFFFFFFDu; // LR with EXC_RETURN to return to Thread using PSP
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	3b04      	subs	r3, #4
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	f06f 0202 	mvn.w	r2, #2
 8000508:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x12121212u; // Dummy R12
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	3b04      	subs	r3, #4
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 8000516:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x03030303u; // Dummy R3
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	3b04      	subs	r3, #4
 800051c:	60fb      	str	r3, [r7, #12]
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 8000524:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x02020202u; // Dummy R2
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	3b04      	subs	r3, #4
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8000532:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x01010101u; // Dummy R1
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	3b04      	subs	r3, #4
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8000540:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x00000000u; // Dummy R0
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	3b04      	subs	r3, #4
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]

	*(--psp) = 0x11111111u; // Dummy R11
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	3b04      	subs	r3, #4
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800055a:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x10101010u; // Dummy R10
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	3b04      	subs	r3, #4
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8000568:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x09090909u; // Dummy R9
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	3b04      	subs	r3, #4
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8000576:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x08080808u; // Dummy R8
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	3b04      	subs	r3, #4
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8000584:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x07070707u; // Dummy R7
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	3b04      	subs	r3, #4
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8000592:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x06060606u; // Dummy R6
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	3b04      	subs	r3, #4
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 80005a0:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x05050505u; // Dummy R5
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	3b04      	subs	r3, #4
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 80005ae:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x04040404u; // Dummy R4
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	3b04      	subs	r3, #4
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 80005bc:	601a      	str	r2, [r3, #0]
	sp[index] = (uint32_t) psp;
 80005be:	68fa      	ldr	r2, [r7, #12]
 80005c0:	490a      	ldr	r1, [pc, #40]	; (80005ec <addTask+0x120>)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	thread[index] = task;
 80005c8:	4909      	ldr	r1, [pc, #36]	; (80005f0 <addTask+0x124>)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	683a      	ldr	r2, [r7, #0]
 80005ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	threadAction[index] = RUNNING;
 80005d2:	4a08      	ldr	r2, [pc, #32]	; (80005f4 <addTask+0x128>)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2100      	movs	r1, #0
 80005d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80005dc:	bf00      	nop
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	200000d8 	.word	0x200000d8
 80005ec:	200002d8 	.word	0x200002d8
 80005f0:	200002e8 	.word	0x200002e8
 80005f4:	200002e0 	.word	0x200002e0

080005f8 <startScheduler>:

static void startScheduler(int index) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	__asm volatile("MOV R0, %0"::"r"(sp[index]));
 8000600:	4a0e      	ldr	r2, [pc, #56]	; (800063c <startScheduler+0x44>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000608:	4618      	mov	r0, r3
	__asm volatile("MSR PSP, R0");
 800060a:	f380 8809 	msr	PSP, r0

	//Stack to PSP
	__asm volatile(
 800060e:	f3ef 8014 	mrs	r0, CONTROL
 8000612:	f040 0002 	orr.w	r0, r0, #2
 8000616:	f380 8814 	msr	CONTROL, r0
			"ORR R0, R0, #2\n\t"
			"MSR CONTROL, r0"
	);

	//Unprivileged Mode
	__asm volatile(
 800061a:	f3ef 8014 	mrs	r0, CONTROL
 800061e:	f040 0001 	orr.w	r0, r0, #1
 8000622:	f380 8814 	msr	CONTROL, r0
			"ORR R0, R0, #1\n\t"
			"MSR CONTROL, r0"
	);

//	void (*task)() = (void (*)())((uint32_t*)sp[index])[14];
	void (*task)() = (void (*)())(stack[index][SIZE - 2]);
 8000626:	4a06      	ldr	r2, [pc, #24]	; (8000640 <startScheduler+0x48>)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	021b      	lsls	r3, r3, #8
 800062c:	4413      	add	r3, r2
 800062e:	33f8      	adds	r3, #248	; 0xf8
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	60fb      	str	r3, [r7, #12]
	task();
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	4798      	blx	r3
	while (1)
 8000638:	e7fe      	b.n	8000638 <startScheduler+0x40>
 800063a:	bf00      	nop
 800063c:	200002d8 	.word	0x200002d8
 8000640:	200000d8 	.word	0x200000d8

08000644 <taskSwitching>:
		;
}

static int count = 0;
__attribute__((naked)) static void taskSwitching() {
	__asm volatile("PUSH {LR}");
 8000644:	b500      	push	{lr}

	/* Save the context of current task */

	// get current PSP
	__asm volatile("MRS R0, PSP");
 8000646:	f3ef 8009 	mrs	r0, PSP
	// save R4 to R11 to PSP Frame Stack
	__asm volatile("STMDB R0!, {R4-R11}");
 800064a:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	// save current value of PSP
	__asm volatile("MOV %0, R0":"=r"(sp[count]));
 800064e:	4b2a      	ldr	r3, [pc, #168]	; (80006f8 <taskSwitching+0xb4>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4602      	mov	r2, r0
 8000654:	4929      	ldr	r1, [pc, #164]	; (80006fc <taskSwitching+0xb8>)
 8000656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	while (1) {
		count++;
 800065a:	4b27      	ldr	r3, [pc, #156]	; (80006f8 <taskSwitching+0xb4>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	3301      	adds	r3, #1
 8000660:	4a25      	ldr	r2, [pc, #148]	; (80006f8 <taskSwitching+0xb4>)
 8000662:	6013      	str	r3, [r2, #0]
		count %= MAX_TASK_NO;
 8000664:	4b24      	ldr	r3, [pc, #144]	; (80006f8 <taskSwitching+0xb4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	bfb8      	it	lt
 8000670:	425b      	neglt	r3, r3
 8000672:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <taskSwitching+0xb4>)
 8000674:	6013      	str	r3, [r2, #0]
		if (sp[count] == 0)
 8000676:	4b20      	ldr	r3, [pc, #128]	; (80006f8 <taskSwitching+0xb4>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a20      	ldr	r2, [pc, #128]	; (80006fc <taskSwitching+0xb8>)
 800067c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d028      	beq.n	80006d6 <taskSwitching+0x92>
			continue; //Empty

		if (threadAction[count] == TASK_DELETE) {
 8000684:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <taskSwitching+0xb4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a1d      	ldr	r2, [pc, #116]	; (8000700 <taskSwitching+0xbc>)
 800068a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d106      	bne.n	80006a0 <taskSwitching+0x5c>
			sp[count] = 0;
 8000692:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <taskSwitching+0xb4>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a19      	ldr	r2, [pc, #100]	; (80006fc <taskSwitching+0xb8>)
 8000698:	2100      	movs	r1, #0
 800069a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			continue;
 800069e:	e01b      	b.n	80006d8 <taskSwitching+0x94>
		} else if (threadAction[count] == TASK_RESTART){
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <taskSwitching+0xb4>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a16      	ldr	r2, [pc, #88]	; (8000700 <taskSwitching+0xbc>)
 80006a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006aa:	2b02      	cmp	r3, #2
 80006ac:	d10b      	bne.n	80006c6 <taskSwitching+0x82>
			addTask(count, thread[count]);
 80006ae:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <taskSwitching+0xb4>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <taskSwitching+0xb4>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4913      	ldr	r1, [pc, #76]	; (8000704 <taskSwitching+0xc0>)
 80006b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006bc:	4619      	mov	r1, r3
 80006be:	4610      	mov	r0, r2
 80006c0:	f7ff ff04 	bl	80004cc <addTask>
		}else if (threadAction[count] == TASK_BLOCK) {
			continue;
		}
		break;
 80006c4:	e009      	b.n	80006da <taskSwitching+0x96>
		}else if (threadAction[count] == TASK_BLOCK) {
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <taskSwitching+0xb4>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a0d      	ldr	r2, [pc, #52]	; (8000700 <taskSwitching+0xbc>)
 80006cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006d0:	2b03      	cmp	r3, #3
 80006d2:	d102      	bne.n	80006da <taskSwitching+0x96>
			continue;
 80006d4:	e000      	b.n	80006d8 <taskSwitching+0x94>
			continue; //Empty
 80006d6:	bf00      	nop
		count++;
 80006d8:	e7bf      	b.n	800065a <taskSwitching+0x16>
		break;
 80006da:	bf00      	nop
	}

	/* Retrieve the context of next task */

	// get its past PSP value
	__asm volatile("MOV R0, %0"::"r"(sp[count]));
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <taskSwitching+0xb4>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a06      	ldr	r2, [pc, #24]	; (80006fc <taskSwitching+0xb8>)
 80006e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006e6:	4618      	mov	r0, r3
	// retrieve R4-R11 from PSP Fram Stack
	__asm volatile("LDMIA R0!, {R4-R11}");
 80006e8:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	// update PSP
	__asm volatile("MSR PSP, R0");
 80006ec:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 80006f0:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 80006f4:	4770      	bx	lr
}
 80006f6:	bf00      	nop
 80006f8:	200002f0 	.word	0x200002f0
 80006fc:	200002d8 	.word	0x200002d8
 8000700:	200002e0 	.word	0x200002e0
 8000704:	200002e8 	.word	0x200002e8

08000708 <task0>:
static int x = 0;
static int a = 0;
static int y = 0;
static int b = 0;

static void task0() {
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	x = 0;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <task0+0x38>)
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
	a = 0;
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <task0+0x3c>)
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
	while (1) {
		x++;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <task0+0x38>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	3301      	adds	r3, #1
 800071e:	4a08      	ldr	r2, [pc, #32]	; (8000740 <task0+0x38>)
 8000720:	6013      	str	r3, [r2, #0]
		HAL_Delay(1000);
 8000722:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000726:	f000 f925 	bl	8000974 <HAL_Delay>
		if(x==20)
 800072a:	4b05      	ldr	r3, [pc, #20]	; (8000740 <task0+0x38>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2b14      	cmp	r3, #20
 8000730:	d100      	bne.n	8000734 <task0+0x2c>
			__asm volatile("SVC 0x11");
 8000732:	df11      	svc	17
		a++;
 8000734:	4b03      	ldr	r3, [pc, #12]	; (8000744 <task0+0x3c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	3301      	adds	r3, #1
 800073a:	4a02      	ldr	r2, [pc, #8]	; (8000744 <task0+0x3c>)
 800073c:	6013      	str	r3, [r2, #0]
		x++;
 800073e:	e7eb      	b.n	8000718 <task0+0x10>
 8000740:	200002f4 	.word	0x200002f4
 8000744:	200002f8 	.word	0x200002f8

08000748 <task1>:
	}
}

static void task1() {
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	y = 0;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <task1+0x38>)
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
	b = 0;
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <task1+0x3c>)
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
	while (1) {
		y++;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <task1+0x38>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	3301      	adds	r3, #1
 800075e:	4a08      	ldr	r2, [pc, #32]	; (8000780 <task1+0x38>)
 8000760:	6013      	str	r3, [r2, #0]
		if (y >= 10)
 8000762:	4b07      	ldr	r3, [pc, #28]	; (8000780 <task1+0x38>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2b09      	cmp	r3, #9
 8000768:	dd00      	ble.n	800076c <task1+0x24>
			__asm volatile("SVC 0x21");
 800076a:	df21      	svc	33	; 0x21
		HAL_Delay(1000);
 800076c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000770:	f000 f900 	bl	8000974 <HAL_Delay>
		b++;
 8000774:	4b03      	ldr	r3, [pc, #12]	; (8000784 <task1+0x3c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	3301      	adds	r3, #1
 800077a:	4a02      	ldr	r2, [pc, #8]	; (8000784 <task1+0x3c>)
 800077c:	6013      	str	r3, [r2, #0]
		y++;
 800077e:	e7eb      	b.n	8000758 <task1+0x10>
 8000780:	200002fc 	.word	0x200002fc
 8000784:	20000300 	.word	0x20000300

08000788 <SVC_Handler>:
	}
}

void SVC_Handler(void) {
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
	uint32_t pc;
	uint8_t svc;
	uint32_t lr;

	//This function SP
	__asm volatile("MRS R0, MSP");
 800078e:	f3ef 8008 	mrs	r0, MSP
	__asm volatile("MOV %0, R0":"=r"(sp):);
 8000792:	4603      	mov	r3, r0
 8000794:	60fb      	str	r3, [r7, #12]

	//SP before Prologue
	sp += 16; //Reversing : sub sp, #16
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	3310      	adds	r3, #16
 800079a:	60fb      	str	r3, [r7, #12]
	sp += 8; // Reversing : push {r7, lr}
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	3308      	adds	r3, #8
 80007a0:	60fb      	str	r3, [r7, #12]
	__asm volatile("MOV %0, LR":"=r"(lr):);
 80007a2:	4673      	mov	r3, lr
 80007a4:	60bb      	str	r3, [r7, #8]

	//Program counter of SVC call
	if (lr == 0xfffffffd) { //process stack
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	f113 0f03 	cmn.w	r3, #3
 80007ac:	d103      	bne.n	80007b6 <SVC_Handler+0x2e>
		__asm volatile("MRS R0, PSP");
 80007ae:	f3ef 8009 	mrs	r0, PSP
		__asm volatile("MOV %0, R0":"=r"(sp):);
 80007b2:	4603      	mov	r3, r0
 80007b4:	60fb      	str	r3, [r7, #12]
	}
	pc = ((uint32_t*) sp)[6] - 2;
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	3318      	adds	r3, #24
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	3b02      	subs	r3, #2
 80007be:	607b      	str	r3, [r7, #4]

	//SVC number
	svc = ((uint16_t*) pc)[0];
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	70fb      	strb	r3, [r7, #3]
	uint8_t thread_no = svc & (0x08);
 80007c6:	78fb      	ldrb	r3, [r7, #3]
 80007c8:	f003 0308 	and.w	r3, r3, #8
 80007cc:	70bb      	strb	r3, [r7, #2]
	uint8_t thread_action = ((svc >> 8) & (0x08));
 80007ce:	2300      	movs	r3, #0
 80007d0:	707b      	strb	r3, [r7, #1]
	threadAction[thread_no] = thread_action;
 80007d2:	78bb      	ldrb	r3, [r7, #2]
 80007d4:	787a      	ldrb	r2, [r7, #1]
 80007d6:	4904      	ldr	r1, [pc, #16]	; (80007e8 <SVC_Handler+0x60>)
 80007d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007dc:	bf00      	nop
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	200002e0 	.word	0x200002e0

080007ec <SysTick_Handler>:

uint32_t tick = 0;
void SysTick_Handler(void) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80007f0:	f000 f8a4 	bl	800093c <HAL_IncTick>
	tick++;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <SysTick_Handler+0x24>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	3301      	adds	r3, #1
 80007fa:	4a05      	ldr	r2, [pc, #20]	; (8000810 <SysTick_Handler+0x24>)
 80007fc:	6013      	str	r3, [r2, #0]
	//	if (tick % 1000 == 0)
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80007fe:	4b05      	ldr	r3, [pc, #20]	; (8000814 <SysTick_Handler+0x28>)
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	4a04      	ldr	r2, [pc, #16]	; (8000814 <SysTick_Handler+0x28>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000808:	6053      	str	r3, [r2, #4]
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000304 	.word	0x20000304
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <PendSV_Handler>:

void PendSV_Handler(void) {
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	//Reversing caller function prologue (PendSV_hanlder) : PUSH {R7, LR}
	__asm volatile("POP {R7,LR}");
 800081c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}

	//Making this function as if __atribute__((naked))
	__asm volatile("PUSH {LR}");
 8000820:	b500      	push	{lr}
	taskSwitching();
 8000822:	f7ff ff0f 	bl	8000644 <taskSwitching>
	__asm volatile("POP {LR}");
 8000826:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 800082a:	4770      	bx	lr
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}

08000830 <task_switching_with_Systick_PendSV_run>:

void task_switching_with_Systick_PendSV_run() {
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	addTask(0, task0);
 8000834:	4906      	ldr	r1, [pc, #24]	; (8000850 <task_switching_with_Systick_PendSV_run+0x20>)
 8000836:	2000      	movs	r0, #0
 8000838:	f7ff fe48 	bl	80004cc <addTask>
	addTask(1, task1);
 800083c:	4905      	ldr	r1, [pc, #20]	; (8000854 <task_switching_with_Systick_PendSV_run+0x24>)
 800083e:	2001      	movs	r0, #1
 8000840:	f7ff fe44 	bl	80004cc <addTask>
	startScheduler(0);
 8000844:	2000      	movs	r0, #0
 8000846:	f7ff fed7 	bl	80005f8 <startScheduler>
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	08000709 	.word	0x08000709
 8000854:	08000749 	.word	0x08000749

08000858 <run>:
extern void SVC_test_run();
extern void task_switching_with_SVC_run();
extern void task_switching_with_SVC_PendSV_run();
extern void task_switching_with_Systick_PendSV_run();

void run() {
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0

//	funtion_call_in_process_stack_run();
//	SVC_test_run();
//	task_switching_with_SVC_run();
//	task_switching_with_SVC_PendSV_run();
	task_switching_with_Systick_PendSV_run();
 800085c:	f7ff ffe8 	bl	8000830 <task_switching_with_Systick_PendSV_run>

	while (1) {
 8000860:	e7fe      	b.n	8000860 <run+0x8>
	...

08000864 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000864:	f7ff fe2c 	bl	80004c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000868:	480b      	ldr	r0, [pc, #44]	; (8000898 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800086a:	490c      	ldr	r1, [pc, #48]	; (800089c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800086c:	4a0c      	ldr	r2, [pc, #48]	; (80008a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000870:	e002      	b.n	8000878 <LoopCopyDataInit>

08000872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000876:	3304      	adds	r3, #4

08000878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800087c:	d3f9      	bcc.n	8000872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087e:	4a09      	ldr	r2, [pc, #36]	; (80008a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000880:	4c09      	ldr	r4, [pc, #36]	; (80008a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000884:	e001      	b.n	800088a <LoopFillZerobss>

08000886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000888:	3204      	adds	r2, #4

0800088a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800088c:	d3fb      	bcc.n	8000886 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800088e:	f001 f8eb 	bl	8001a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000892:	f7ff fc5b 	bl	800014c <main>
  bx lr
 8000896:	4770      	bx	lr
  ldr r0, =_sdata
 8000898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800089c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80008a0:	08002568 	.word	0x08002568
  ldr r2, =_sbss
 80008a4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80008a8:	2000031c 	.word	0x2000031c

080008ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008ac:	e7fe      	b.n	80008ac <ADC1_2_IRQHandler>
	...

080008b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <HAL_Init+0x28>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a07      	ldr	r2, [pc, #28]	; (80008d8 <HAL_Init+0x28>)
 80008ba:	f043 0310 	orr.w	r3, r3, #16
 80008be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c0:	2003      	movs	r0, #3
 80008c2:	f000 f92b 	bl	8000b1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008c6:	200f      	movs	r0, #15
 80008c8:	f000 f808 	bl	80008dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008cc:	f7ff fcf8 	bl	80002c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40022000 	.word	0x40022000

080008dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <HAL_InitTick+0x54>)
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <HAL_InitTick+0x58>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	4619      	mov	r1, r3
 80008ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 f935 	bl	8000b6a <HAL_SYSTICK_Config>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
 8000908:	e00e      	b.n	8000928 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2b0f      	cmp	r3, #15
 800090e:	d80a      	bhi.n	8000926 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000910:	2200      	movs	r2, #0
 8000912:	6879      	ldr	r1, [r7, #4]
 8000914:	f04f 30ff 	mov.w	r0, #4294967295
 8000918:	f000 f90b 	bl	8000b32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800091c:	4a06      	ldr	r2, [pc, #24]	; (8000938 <HAL_InitTick+0x5c>)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000922:	2300      	movs	r3, #0
 8000924:	e000      	b.n	8000928 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
}
 8000928:	4618      	mov	r0, r3
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000000 	.word	0x20000000
 8000934:	20000008 	.word	0x20000008
 8000938:	20000004 	.word	0x20000004

0800093c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <HAL_IncTick+0x1c>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	461a      	mov	r2, r3
 8000946:	4b05      	ldr	r3, [pc, #20]	; (800095c <HAL_IncTick+0x20>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4413      	add	r3, r2
 800094c:	4a03      	ldr	r2, [pc, #12]	; (800095c <HAL_IncTick+0x20>)
 800094e:	6013      	str	r3, [r2, #0]
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	20000008 	.word	0x20000008
 800095c:	20000308 	.word	0x20000308

08000960 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  return uwTick;
 8000964:	4b02      	ldr	r3, [pc, #8]	; (8000970 <HAL_GetTick+0x10>)
 8000966:	681b      	ldr	r3, [r3, #0]
}
 8000968:	4618      	mov	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	20000308 	.word	0x20000308

08000974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800097c:	f7ff fff0 	bl	8000960 <HAL_GetTick>
 8000980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800098c:	d005      	beq.n	800099a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <HAL_Delay+0x44>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	461a      	mov	r2, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	4413      	add	r3, r2
 8000998:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800099a:	bf00      	nop
 800099c:	f7ff ffe0 	bl	8000960 <HAL_GetTick>
 80009a0:	4602      	mov	r2, r0
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d8f7      	bhi.n	800099c <HAL_Delay+0x28>
  {
  }
}
 80009ac:	bf00      	nop
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000008 	.word	0x20000008

080009bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009d8:	4013      	ands	r3, r2
 80009da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ee:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	60d3      	str	r3, [r2, #12]
}
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <__NVIC_GetPriorityGrouping+0x18>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	0a1b      	lsrs	r3, r3, #8
 8000a0e:	f003 0307 	and.w	r3, r3, #7
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bc80      	pop	{r7}
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	6039      	str	r1, [r7, #0]
 8000a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	db0a      	blt.n	8000a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	490c      	ldr	r1, [pc, #48]	; (8000a6c <__NVIC_SetPriority+0x4c>)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	0112      	lsls	r2, r2, #4
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	440b      	add	r3, r1
 8000a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a48:	e00a      	b.n	8000a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4908      	ldr	r1, [pc, #32]	; (8000a70 <__NVIC_SetPriority+0x50>)
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	f003 030f 	and.w	r3, r3, #15
 8000a56:	3b04      	subs	r3, #4
 8000a58:	0112      	lsls	r2, r2, #4
 8000a5a:	b2d2      	uxtb	r2, r2
 8000a5c:	440b      	add	r3, r1
 8000a5e:	761a      	strb	r2, [r3, #24]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000e100 	.word	0xe000e100
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b089      	sub	sp, #36	; 0x24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	f1c3 0307 	rsb	r3, r3, #7
 8000a8e:	2b04      	cmp	r3, #4
 8000a90:	bf28      	it	cs
 8000a92:	2304      	movcs	r3, #4
 8000a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	2b06      	cmp	r3, #6
 8000a9c:	d902      	bls.n	8000aa4 <NVIC_EncodePriority+0x30>
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3b03      	subs	r3, #3
 8000aa2:	e000      	b.n	8000aa6 <NVIC_EncodePriority+0x32>
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43da      	mvns	r2, r3
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000abc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	43d9      	mvns	r1, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	4313      	orrs	r3, r2
         );
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3724      	adds	r7, #36	; 0x24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae8:	d301      	bcc.n	8000aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aea:	2301      	movs	r3, #1
 8000aec:	e00f      	b.n	8000b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aee:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <SysTick_Config+0x40>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000af6:	210f      	movs	r1, #15
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	f7ff ff90 	bl	8000a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <SysTick_Config+0x40>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b06:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <SysTick_Config+0x40>)
 8000b08:	2207      	movs	r2, #7
 8000b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	e000e010 	.word	0xe000e010

08000b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff ff49 	bl	80009bc <__NVIC_SetPriorityGrouping>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b086      	sub	sp, #24
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	4603      	mov	r3, r0
 8000b3a:	60b9      	str	r1, [r7, #8]
 8000b3c:	607a      	str	r2, [r7, #4]
 8000b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b44:	f7ff ff5e 	bl	8000a04 <__NVIC_GetPriorityGrouping>
 8000b48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	68b9      	ldr	r1, [r7, #8]
 8000b4e:	6978      	ldr	r0, [r7, #20]
 8000b50:	f7ff ff90 	bl	8000a74 <NVIC_EncodePriority>
 8000b54:	4602      	mov	r2, r0
 8000b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff ff5f 	bl	8000a20 <__NVIC_SetPriority>
}
 8000b62:	bf00      	nop
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff ffb0 	bl	8000ad8 <SysTick_Config>
 8000b78:	4603      	mov	r3, r0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b08b      	sub	sp, #44	; 0x2c
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b96:	e169      	b.n	8000e6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	69fa      	ldr	r2, [r7, #28]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	f040 8158 	bne.w	8000e66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	4a9a      	ldr	r2, [pc, #616]	; (8000e24 <HAL_GPIO_Init+0x2a0>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d05e      	beq.n	8000c7e <HAL_GPIO_Init+0xfa>
 8000bc0:	4a98      	ldr	r2, [pc, #608]	; (8000e24 <HAL_GPIO_Init+0x2a0>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d875      	bhi.n	8000cb2 <HAL_GPIO_Init+0x12e>
 8000bc6:	4a98      	ldr	r2, [pc, #608]	; (8000e28 <HAL_GPIO_Init+0x2a4>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d058      	beq.n	8000c7e <HAL_GPIO_Init+0xfa>
 8000bcc:	4a96      	ldr	r2, [pc, #600]	; (8000e28 <HAL_GPIO_Init+0x2a4>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d86f      	bhi.n	8000cb2 <HAL_GPIO_Init+0x12e>
 8000bd2:	4a96      	ldr	r2, [pc, #600]	; (8000e2c <HAL_GPIO_Init+0x2a8>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d052      	beq.n	8000c7e <HAL_GPIO_Init+0xfa>
 8000bd8:	4a94      	ldr	r2, [pc, #592]	; (8000e2c <HAL_GPIO_Init+0x2a8>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d869      	bhi.n	8000cb2 <HAL_GPIO_Init+0x12e>
 8000bde:	4a94      	ldr	r2, [pc, #592]	; (8000e30 <HAL_GPIO_Init+0x2ac>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d04c      	beq.n	8000c7e <HAL_GPIO_Init+0xfa>
 8000be4:	4a92      	ldr	r2, [pc, #584]	; (8000e30 <HAL_GPIO_Init+0x2ac>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d863      	bhi.n	8000cb2 <HAL_GPIO_Init+0x12e>
 8000bea:	4a92      	ldr	r2, [pc, #584]	; (8000e34 <HAL_GPIO_Init+0x2b0>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d046      	beq.n	8000c7e <HAL_GPIO_Init+0xfa>
 8000bf0:	4a90      	ldr	r2, [pc, #576]	; (8000e34 <HAL_GPIO_Init+0x2b0>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d85d      	bhi.n	8000cb2 <HAL_GPIO_Init+0x12e>
 8000bf6:	2b12      	cmp	r3, #18
 8000bf8:	d82a      	bhi.n	8000c50 <HAL_GPIO_Init+0xcc>
 8000bfa:	2b12      	cmp	r3, #18
 8000bfc:	d859      	bhi.n	8000cb2 <HAL_GPIO_Init+0x12e>
 8000bfe:	a201      	add	r2, pc, #4	; (adr r2, 8000c04 <HAL_GPIO_Init+0x80>)
 8000c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c04:	08000c7f 	.word	0x08000c7f
 8000c08:	08000c59 	.word	0x08000c59
 8000c0c:	08000c6b 	.word	0x08000c6b
 8000c10:	08000cad 	.word	0x08000cad
 8000c14:	08000cb3 	.word	0x08000cb3
 8000c18:	08000cb3 	.word	0x08000cb3
 8000c1c:	08000cb3 	.word	0x08000cb3
 8000c20:	08000cb3 	.word	0x08000cb3
 8000c24:	08000cb3 	.word	0x08000cb3
 8000c28:	08000cb3 	.word	0x08000cb3
 8000c2c:	08000cb3 	.word	0x08000cb3
 8000c30:	08000cb3 	.word	0x08000cb3
 8000c34:	08000cb3 	.word	0x08000cb3
 8000c38:	08000cb3 	.word	0x08000cb3
 8000c3c:	08000cb3 	.word	0x08000cb3
 8000c40:	08000cb3 	.word	0x08000cb3
 8000c44:	08000cb3 	.word	0x08000cb3
 8000c48:	08000c61 	.word	0x08000c61
 8000c4c:	08000c75 	.word	0x08000c75
 8000c50:	4a79      	ldr	r2, [pc, #484]	; (8000e38 <HAL_GPIO_Init+0x2b4>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d013      	beq.n	8000c7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c56:	e02c      	b.n	8000cb2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	623b      	str	r3, [r7, #32]
          break;
 8000c5e:	e029      	b.n	8000cb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	3304      	adds	r3, #4
 8000c66:	623b      	str	r3, [r7, #32]
          break;
 8000c68:	e024      	b.n	8000cb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	3308      	adds	r3, #8
 8000c70:	623b      	str	r3, [r7, #32]
          break;
 8000c72:	e01f      	b.n	8000cb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	330c      	adds	r3, #12
 8000c7a:	623b      	str	r3, [r7, #32]
          break;
 8000c7c:	e01a      	b.n	8000cb4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d102      	bne.n	8000c8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c86:	2304      	movs	r3, #4
 8000c88:	623b      	str	r3, [r7, #32]
          break;
 8000c8a:	e013      	b.n	8000cb4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d105      	bne.n	8000ca0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c94:	2308      	movs	r3, #8
 8000c96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	69fa      	ldr	r2, [r7, #28]
 8000c9c:	611a      	str	r2, [r3, #16]
          break;
 8000c9e:	e009      	b.n	8000cb4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ca0:	2308      	movs	r3, #8
 8000ca2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	69fa      	ldr	r2, [r7, #28]
 8000ca8:	615a      	str	r2, [r3, #20]
          break;
 8000caa:	e003      	b.n	8000cb4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cac:	2300      	movs	r3, #0
 8000cae:	623b      	str	r3, [r7, #32]
          break;
 8000cb0:	e000      	b.n	8000cb4 <HAL_GPIO_Init+0x130>
          break;
 8000cb2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	2bff      	cmp	r3, #255	; 0xff
 8000cb8:	d801      	bhi.n	8000cbe <HAL_GPIO_Init+0x13a>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	e001      	b.n	8000cc2 <HAL_GPIO_Init+0x13e>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	2bff      	cmp	r3, #255	; 0xff
 8000cc8:	d802      	bhi.n	8000cd0 <HAL_GPIO_Init+0x14c>
 8000cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	e002      	b.n	8000cd6 <HAL_GPIO_Init+0x152>
 8000cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd2:	3b08      	subs	r3, #8
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	210f      	movs	r1, #15
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	6a39      	ldr	r1, [r7, #32]
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf0:	431a      	orrs	r2, r3
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f000 80b1 	beq.w	8000e66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d04:	4b4d      	ldr	r3, [pc, #308]	; (8000e3c <HAL_GPIO_Init+0x2b8>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a4c      	ldr	r2, [pc, #304]	; (8000e3c <HAL_GPIO_Init+0x2b8>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b4a      	ldr	r3, [pc, #296]	; (8000e3c <HAL_GPIO_Init+0x2b8>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d1c:	4a48      	ldr	r2, [pc, #288]	; (8000e40 <HAL_GPIO_Init+0x2bc>)
 8000d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d20:	089b      	lsrs	r3, r3, #2
 8000d22:	3302      	adds	r3, #2
 8000d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	220f      	movs	r2, #15
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a40      	ldr	r2, [pc, #256]	; (8000e44 <HAL_GPIO_Init+0x2c0>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d013      	beq.n	8000d70 <HAL_GPIO_Init+0x1ec>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a3f      	ldr	r2, [pc, #252]	; (8000e48 <HAL_GPIO_Init+0x2c4>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d00d      	beq.n	8000d6c <HAL_GPIO_Init+0x1e8>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a3e      	ldr	r2, [pc, #248]	; (8000e4c <HAL_GPIO_Init+0x2c8>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d007      	beq.n	8000d68 <HAL_GPIO_Init+0x1e4>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a3d      	ldr	r2, [pc, #244]	; (8000e50 <HAL_GPIO_Init+0x2cc>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d101      	bne.n	8000d64 <HAL_GPIO_Init+0x1e0>
 8000d60:	2303      	movs	r3, #3
 8000d62:	e006      	b.n	8000d72 <HAL_GPIO_Init+0x1ee>
 8000d64:	2304      	movs	r3, #4
 8000d66:	e004      	b.n	8000d72 <HAL_GPIO_Init+0x1ee>
 8000d68:	2302      	movs	r3, #2
 8000d6a:	e002      	b.n	8000d72 <HAL_GPIO_Init+0x1ee>
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e000      	b.n	8000d72 <HAL_GPIO_Init+0x1ee>
 8000d70:	2300      	movs	r3, #0
 8000d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d74:	f002 0203 	and.w	r2, r2, #3
 8000d78:	0092      	lsls	r2, r2, #2
 8000d7a:	4093      	lsls	r3, r2
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d82:	492f      	ldr	r1, [pc, #188]	; (8000e40 <HAL_GPIO_Init+0x2bc>)
 8000d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d86:	089b      	lsrs	r3, r3, #2
 8000d88:	3302      	adds	r3, #2
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d006      	beq.n	8000daa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d9c:	4b2d      	ldr	r3, [pc, #180]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000d9e:	689a      	ldr	r2, [r3, #8]
 8000da0:	492c      	ldr	r1, [pc, #176]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	608b      	str	r3, [r1, #8]
 8000da8:	e006      	b.n	8000db8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000daa:	4b2a      	ldr	r3, [pc, #168]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000dac:	689a      	ldr	r2, [r3, #8]
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	43db      	mvns	r3, r3
 8000db2:	4928      	ldr	r1, [pc, #160]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000db4:	4013      	ands	r3, r2
 8000db6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d006      	beq.n	8000dd2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dc4:	4b23      	ldr	r3, [pc, #140]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000dc6:	68da      	ldr	r2, [r3, #12]
 8000dc8:	4922      	ldr	r1, [pc, #136]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	60cb      	str	r3, [r1, #12]
 8000dd0:	e006      	b.n	8000de0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dd2:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000dd4:	68da      	ldr	r2, [r3, #12]
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	491e      	ldr	r1, [pc, #120]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d006      	beq.n	8000dfa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dec:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000dee:	685a      	ldr	r2, [r3, #4]
 8000df0:	4918      	ldr	r1, [pc, #96]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	604b      	str	r3, [r1, #4]
 8000df8:	e006      	b.n	8000e08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dfa:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	4914      	ldr	r1, [pc, #80]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000e04:	4013      	ands	r3, r2
 8000e06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d021      	beq.n	8000e58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	490e      	ldr	r1, [pc, #56]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	600b      	str	r3, [r1, #0]
 8000e20:	e021      	b.n	8000e66 <HAL_GPIO_Init+0x2e2>
 8000e22:	bf00      	nop
 8000e24:	10320000 	.word	0x10320000
 8000e28:	10310000 	.word	0x10310000
 8000e2c:	10220000 	.word	0x10220000
 8000e30:	10210000 	.word	0x10210000
 8000e34:	10120000 	.word	0x10120000
 8000e38:	10110000 	.word	0x10110000
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40010000 	.word	0x40010000
 8000e44:	40010800 	.word	0x40010800
 8000e48:	40010c00 	.word	0x40010c00
 8000e4c:	40011000 	.word	0x40011000
 8000e50:	40011400 	.word	0x40011400
 8000e54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e58:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <HAL_GPIO_Init+0x304>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	4909      	ldr	r1, [pc, #36]	; (8000e88 <HAL_GPIO_Init+0x304>)
 8000e62:	4013      	ands	r3, r2
 8000e64:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e68:	3301      	adds	r3, #1
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e72:	fa22 f303 	lsr.w	r3, r2, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f47f ae8e 	bne.w	8000b98 <HAL_GPIO_Init+0x14>
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	bf00      	nop
 8000e80:	372c      	adds	r7, #44	; 0x2c
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	40010400 	.word	0x40010400

08000e8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e272      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f000 8087 	beq.w	8000fba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eac:	4b92      	ldr	r3, [pc, #584]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 030c 	and.w	r3, r3, #12
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	d00c      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eb8:	4b8f      	ldr	r3, [pc, #572]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 030c 	and.w	r3, r3, #12
 8000ec0:	2b08      	cmp	r3, #8
 8000ec2:	d112      	bne.n	8000eea <HAL_RCC_OscConfig+0x5e>
 8000ec4:	4b8c      	ldr	r3, [pc, #560]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed0:	d10b      	bne.n	8000eea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed2:	4b89      	ldr	r3, [pc, #548]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d06c      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x12c>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d168      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e24c      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef2:	d106      	bne.n	8000f02 <HAL_RCC_OscConfig+0x76>
 8000ef4:	4b80      	ldr	r3, [pc, #512]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a7f      	ldr	r2, [pc, #508]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000efe:	6013      	str	r3, [r2, #0]
 8000f00:	e02e      	b.n	8000f60 <HAL_RCC_OscConfig+0xd4>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d10c      	bne.n	8000f24 <HAL_RCC_OscConfig+0x98>
 8000f0a:	4b7b      	ldr	r3, [pc, #492]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a7a      	ldr	r2, [pc, #488]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	4b78      	ldr	r3, [pc, #480]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a77      	ldr	r2, [pc, #476]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	e01d      	b.n	8000f60 <HAL_RCC_OscConfig+0xd4>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f2c:	d10c      	bne.n	8000f48 <HAL_RCC_OscConfig+0xbc>
 8000f2e:	4b72      	ldr	r3, [pc, #456]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a71      	ldr	r2, [pc, #452]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	4b6f      	ldr	r3, [pc, #444]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a6e      	ldr	r2, [pc, #440]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	e00b      	b.n	8000f60 <HAL_RCC_OscConfig+0xd4>
 8000f48:	4b6b      	ldr	r3, [pc, #428]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a6a      	ldr	r2, [pc, #424]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	4b68      	ldr	r3, [pc, #416]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a67      	ldr	r2, [pc, #412]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d013      	beq.n	8000f90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f68:	f7ff fcfa 	bl	8000960 <HAL_GetTick>
 8000f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f70:	f7ff fcf6 	bl	8000960 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b64      	cmp	r3, #100	; 0x64
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e200      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f82:	4b5d      	ldr	r3, [pc, #372]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0f0      	beq.n	8000f70 <HAL_RCC_OscConfig+0xe4>
 8000f8e:	e014      	b.n	8000fba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f90:	f7ff fce6 	bl	8000960 <HAL_GetTick>
 8000f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f96:	e008      	b.n	8000faa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f98:	f7ff fce2 	bl	8000960 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b64      	cmp	r3, #100	; 0x64
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e1ec      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000faa:	4b53      	ldr	r3, [pc, #332]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f0      	bne.n	8000f98 <HAL_RCC_OscConfig+0x10c>
 8000fb6:	e000      	b.n	8000fba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d063      	beq.n	800108e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fc6:	4b4c      	ldr	r3, [pc, #304]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 030c 	and.w	r3, r3, #12
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00b      	beq.n	8000fea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fd2:	4b49      	ldr	r3, [pc, #292]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 030c 	and.w	r3, r3, #12
 8000fda:	2b08      	cmp	r3, #8
 8000fdc:	d11c      	bne.n	8001018 <HAL_RCC_OscConfig+0x18c>
 8000fde:	4b46      	ldr	r3, [pc, #280]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d116      	bne.n	8001018 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fea:	4b43      	ldr	r3, [pc, #268]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d005      	beq.n	8001002 <HAL_RCC_OscConfig+0x176>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d001      	beq.n	8001002 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e1c0      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001002:	4b3d      	ldr	r3, [pc, #244]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	4939      	ldr	r1, [pc, #228]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8001012:	4313      	orrs	r3, r2
 8001014:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001016:	e03a      	b.n	800108e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d020      	beq.n	8001062 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001020:	4b36      	ldr	r3, [pc, #216]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8001022:	2201      	movs	r2, #1
 8001024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001026:	f7ff fc9b 	bl	8000960 <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800102e:	f7ff fc97 	bl	8000960 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e1a1      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001040:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0f0      	beq.n	800102e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800104c:	4b2a      	ldr	r3, [pc, #168]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	4927      	ldr	r1, [pc, #156]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 800105c:	4313      	orrs	r3, r2
 800105e:	600b      	str	r3, [r1, #0]
 8001060:	e015      	b.n	800108e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001062:	4b26      	ldr	r3, [pc, #152]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001068:	f7ff fc7a 	bl	8000960 <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001070:	f7ff fc76 	bl	8000960 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e180      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001082:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f0      	bne.n	8001070 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	2b00      	cmp	r3, #0
 8001098:	d03a      	beq.n	8001110 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d019      	beq.n	80010d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <HAL_RCC_OscConfig+0x274>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a8:	f7ff fc5a 	bl	8000960 <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010b0:	f7ff fc56 	bl	8000960 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e160      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0f0      	beq.n	80010b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010ce:	2001      	movs	r0, #1
 80010d0:	f000 face 	bl	8001670 <RCC_Delay>
 80010d4:	e01c      	b.n	8001110 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <HAL_RCC_OscConfig+0x274>)
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010dc:	f7ff fc40 	bl	8000960 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010e2:	e00f      	b.n	8001104 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e4:	f7ff fc3c 	bl	8000960 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d908      	bls.n	8001104 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e146      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
 80010f6:	bf00      	nop
 80010f8:	40021000 	.word	0x40021000
 80010fc:	42420000 	.word	0x42420000
 8001100:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001104:	4b92      	ldr	r3, [pc, #584]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1e9      	bne.n	80010e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 80a6 	beq.w	800126a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800111e:	2300      	movs	r3, #0
 8001120:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001122:	4b8b      	ldr	r3, [pc, #556]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10d      	bne.n	800114a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800112e:	4b88      	ldr	r3, [pc, #544]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	4a87      	ldr	r2, [pc, #540]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001138:	61d3      	str	r3, [r2, #28]
 800113a:	4b85      	ldr	r3, [pc, #532]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001146:	2301      	movs	r3, #1
 8001148:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800114a:	4b82      	ldr	r3, [pc, #520]	; (8001354 <HAL_RCC_OscConfig+0x4c8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001152:	2b00      	cmp	r3, #0
 8001154:	d118      	bne.n	8001188 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001156:	4b7f      	ldr	r3, [pc, #508]	; (8001354 <HAL_RCC_OscConfig+0x4c8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a7e      	ldr	r2, [pc, #504]	; (8001354 <HAL_RCC_OscConfig+0x4c8>)
 800115c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001162:	f7ff fbfd 	bl	8000960 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800116a:	f7ff fbf9 	bl	8000960 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b64      	cmp	r3, #100	; 0x64
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e103      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117c:	4b75      	ldr	r3, [pc, #468]	; (8001354 <HAL_RCC_OscConfig+0x4c8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0f0      	beq.n	800116a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d106      	bne.n	800119e <HAL_RCC_OscConfig+0x312>
 8001190:	4b6f      	ldr	r3, [pc, #444]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	4a6e      	ldr	r2, [pc, #440]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6213      	str	r3, [r2, #32]
 800119c:	e02d      	b.n	80011fa <HAL_RCC_OscConfig+0x36e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10c      	bne.n	80011c0 <HAL_RCC_OscConfig+0x334>
 80011a6:	4b6a      	ldr	r3, [pc, #424]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011a8:	6a1b      	ldr	r3, [r3, #32]
 80011aa:	4a69      	ldr	r2, [pc, #420]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011ac:	f023 0301 	bic.w	r3, r3, #1
 80011b0:	6213      	str	r3, [r2, #32]
 80011b2:	4b67      	ldr	r3, [pc, #412]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	4a66      	ldr	r2, [pc, #408]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011b8:	f023 0304 	bic.w	r3, r3, #4
 80011bc:	6213      	str	r3, [r2, #32]
 80011be:	e01c      	b.n	80011fa <HAL_RCC_OscConfig+0x36e>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	2b05      	cmp	r3, #5
 80011c6:	d10c      	bne.n	80011e2 <HAL_RCC_OscConfig+0x356>
 80011c8:	4b61      	ldr	r3, [pc, #388]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	4a60      	ldr	r2, [pc, #384]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011ce:	f043 0304 	orr.w	r3, r3, #4
 80011d2:	6213      	str	r3, [r2, #32]
 80011d4:	4b5e      	ldr	r3, [pc, #376]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	4a5d      	ldr	r2, [pc, #372]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	6213      	str	r3, [r2, #32]
 80011e0:	e00b      	b.n	80011fa <HAL_RCC_OscConfig+0x36e>
 80011e2:	4b5b      	ldr	r3, [pc, #364]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	4a5a      	ldr	r2, [pc, #360]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011e8:	f023 0301 	bic.w	r3, r3, #1
 80011ec:	6213      	str	r3, [r2, #32]
 80011ee:	4b58      	ldr	r3, [pc, #352]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	4a57      	ldr	r2, [pc, #348]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	f023 0304 	bic.w	r3, r3, #4
 80011f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d015      	beq.n	800122e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001202:	f7ff fbad 	bl	8000960 <HAL_GetTick>
 8001206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001208:	e00a      	b.n	8001220 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800120a:	f7ff fba9 	bl	8000960 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	f241 3288 	movw	r2, #5000	; 0x1388
 8001218:	4293      	cmp	r3, r2
 800121a:	d901      	bls.n	8001220 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e0b1      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001220:	4b4b      	ldr	r3, [pc, #300]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0ee      	beq.n	800120a <HAL_RCC_OscConfig+0x37e>
 800122c:	e014      	b.n	8001258 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122e:	f7ff fb97 	bl	8000960 <HAL_GetTick>
 8001232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001234:	e00a      	b.n	800124c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001236:	f7ff fb93 	bl	8000960 <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	f241 3288 	movw	r2, #5000	; 0x1388
 8001244:	4293      	cmp	r3, r2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e09b      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800124c:	4b40      	ldr	r3, [pc, #256]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 800124e:	6a1b      	ldr	r3, [r3, #32]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1ee      	bne.n	8001236 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001258:	7dfb      	ldrb	r3, [r7, #23]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d105      	bne.n	800126a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800125e:	4b3c      	ldr	r3, [pc, #240]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	4a3b      	ldr	r2, [pc, #236]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001268:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 8087 	beq.w	8001382 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001274:	4b36      	ldr	r3, [pc, #216]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 030c 	and.w	r3, r3, #12
 800127c:	2b08      	cmp	r3, #8
 800127e:	d061      	beq.n	8001344 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d146      	bne.n	8001316 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001288:	4b33      	ldr	r3, [pc, #204]	; (8001358 <HAL_RCC_OscConfig+0x4cc>)
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128e:	f7ff fb67 	bl	8000960 <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001294:	e008      	b.n	80012a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001296:	f7ff fb63 	bl	8000960 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e06d      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a8:	4b29      	ldr	r3, [pc, #164]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1f0      	bne.n	8001296 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012bc:	d108      	bne.n	80012d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012be:	4b24      	ldr	r3, [pc, #144]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	4921      	ldr	r1, [pc, #132]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012d0:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a19      	ldr	r1, [r3, #32]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e0:	430b      	orrs	r3, r1
 80012e2:	491b      	ldr	r1, [pc, #108]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <HAL_RCC_OscConfig+0x4cc>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ee:	f7ff fb37 	bl	8000960 <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f6:	f7ff fb33 	bl	8000960 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e03d      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0f0      	beq.n	80012f6 <HAL_RCC_OscConfig+0x46a>
 8001314:	e035      	b.n	8001382 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <HAL_RCC_OscConfig+0x4cc>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fb20 	bl	8000960 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001324:	f7ff fb1c 	bl	8000960 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e026      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0x498>
 8001342:	e01e      	b.n	8001382 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d107      	bne.n	800135c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e019      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
 8001350:	40021000 	.word	0x40021000
 8001354:	40007000 	.word	0x40007000
 8001358:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_RCC_OscConfig+0x500>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	429a      	cmp	r2, r3
 800136e:	d106      	bne.n	800137e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800137a:	429a      	cmp	r2, r3
 800137c:	d001      	beq.n	8001382 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40021000 	.word	0x40021000

08001390 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e0d0      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013a4:	4b6a      	ldr	r3, [pc, #424]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0307 	and.w	r3, r3, #7
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d910      	bls.n	80013d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b2:	4b67      	ldr	r3, [pc, #412]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f023 0207 	bic.w	r2, r3, #7
 80013ba:	4965      	ldr	r1, [pc, #404]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	4313      	orrs	r3, r2
 80013c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013c2:	4b63      	ldr	r3, [pc, #396]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d001      	beq.n	80013d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e0b8      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d020      	beq.n	8001422 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013ec:	4b59      	ldr	r3, [pc, #356]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	4a58      	ldr	r2, [pc, #352]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80013f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001404:	4b53      	ldr	r3, [pc, #332]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	4a52      	ldr	r2, [pc, #328]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800140a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800140e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001410:	4b50      	ldr	r3, [pc, #320]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	494d      	ldr	r1, [pc, #308]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	4313      	orrs	r3, r2
 8001420:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b00      	cmp	r3, #0
 800142c:	d040      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d107      	bne.n	8001446 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001436:	4b47      	ldr	r3, [pc, #284]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d115      	bne.n	800146e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e07f      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d107      	bne.n	800145e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800144e:	4b41      	ldr	r3, [pc, #260]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d109      	bne.n	800146e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e073      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145e:	4b3d      	ldr	r3, [pc, #244]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e06b      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800146e:	4b39      	ldr	r3, [pc, #228]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f023 0203 	bic.w	r2, r3, #3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	4936      	ldr	r1, [pc, #216]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800147c:	4313      	orrs	r3, r2
 800147e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001480:	f7ff fa6e 	bl	8000960 <HAL_GetTick>
 8001484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001486:	e00a      	b.n	800149e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001488:	f7ff fa6a 	bl	8000960 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	f241 3288 	movw	r2, #5000	; 0x1388
 8001496:	4293      	cmp	r3, r2
 8001498:	d901      	bls.n	800149e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e053      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149e:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 020c 	and.w	r2, r3, #12
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d1eb      	bne.n	8001488 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014b0:	4b27      	ldr	r3, [pc, #156]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d210      	bcs.n	80014e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014be:	4b24      	ldr	r3, [pc, #144]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f023 0207 	bic.w	r2, r3, #7
 80014c6:	4922      	ldr	r1, [pc, #136]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ce:	4b20      	ldr	r3, [pc, #128]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d001      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e032      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d008      	beq.n	80014fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	4916      	ldr	r1, [pc, #88]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	2b00      	cmp	r3, #0
 8001508:	d009      	beq.n	800151e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	490e      	ldr	r1, [pc, #56]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800151a:	4313      	orrs	r3, r2
 800151c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800151e:	f000 f821 	bl	8001564 <HAL_RCC_GetSysClockFreq>
 8001522:	4602      	mov	r2, r0
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	091b      	lsrs	r3, r3, #4
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	490a      	ldr	r1, [pc, #40]	; (8001558 <HAL_RCC_ClockConfig+0x1c8>)
 8001530:	5ccb      	ldrb	r3, [r1, r3]
 8001532:	fa22 f303 	lsr.w	r3, r2, r3
 8001536:	4a09      	ldr	r2, [pc, #36]	; (800155c <HAL_RCC_ClockConfig+0x1cc>)
 8001538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <HAL_RCC_ClockConfig+0x1d0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f9cc 	bl	80008dc <HAL_InitTick>

  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40022000 	.word	0x40022000
 8001554:	40021000 	.word	0x40021000
 8001558:	080024d0 	.word	0x080024d0
 800155c:	20000000 	.word	0x20000000
 8001560:	20000004 	.word	0x20000004

08001564 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001564:	b480      	push	{r7}
 8001566:	b087      	sub	sp, #28
 8001568:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800157e:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b04      	cmp	r3, #4
 800158c:	d002      	beq.n	8001594 <HAL_RCC_GetSysClockFreq+0x30>
 800158e:	2b08      	cmp	r3, #8
 8001590:	d003      	beq.n	800159a <HAL_RCC_GetSysClockFreq+0x36>
 8001592:	e027      	b.n	80015e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001594:	4b19      	ldr	r3, [pc, #100]	; (80015fc <HAL_RCC_GetSysClockFreq+0x98>)
 8001596:	613b      	str	r3, [r7, #16]
      break;
 8001598:	e027      	b.n	80015ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	0c9b      	lsrs	r3, r3, #18
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	4a17      	ldr	r2, [pc, #92]	; (8001600 <HAL_RCC_GetSysClockFreq+0x9c>)
 80015a4:	5cd3      	ldrb	r3, [r2, r3]
 80015a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d010      	beq.n	80015d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	0c5b      	lsrs	r3, r3, #17
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	4a11      	ldr	r2, [pc, #68]	; (8001604 <HAL_RCC_GetSysClockFreq+0xa0>)
 80015be:	5cd3      	ldrb	r3, [r2, r3]
 80015c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a0d      	ldr	r2, [pc, #52]	; (80015fc <HAL_RCC_GetSysClockFreq+0x98>)
 80015c6:	fb03 f202 	mul.w	r2, r3, r2
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	e004      	b.n	80015de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a0c      	ldr	r2, [pc, #48]	; (8001608 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015d8:	fb02 f303 	mul.w	r3, r2, r3
 80015dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	613b      	str	r3, [r7, #16]
      break;
 80015e2:	e002      	b.n	80015ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <HAL_RCC_GetSysClockFreq+0x98>)
 80015e6:	613b      	str	r3, [r7, #16]
      break;
 80015e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015ea:	693b      	ldr	r3, [r7, #16]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	371c      	adds	r7, #28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000
 80015fc:	007a1200 	.word	0x007a1200
 8001600:	080024e8 	.word	0x080024e8
 8001604:	080024f8 	.word	0x080024f8
 8001608:	003d0900 	.word	0x003d0900

0800160c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001610:	4b02      	ldr	r3, [pc, #8]	; (800161c <HAL_RCC_GetHCLKFreq+0x10>)
 8001612:	681b      	ldr	r3, [r3, #0]
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	20000000 	.word	0x20000000

08001620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001624:	f7ff fff2 	bl	800160c <HAL_RCC_GetHCLKFreq>
 8001628:	4602      	mov	r2, r0
 800162a:	4b05      	ldr	r3, [pc, #20]	; (8001640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	0a1b      	lsrs	r3, r3, #8
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	4903      	ldr	r1, [pc, #12]	; (8001644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001636:	5ccb      	ldrb	r3, [r1, r3]
 8001638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800163c:	4618      	mov	r0, r3
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40021000 	.word	0x40021000
 8001644:	080024e0 	.word	0x080024e0

08001648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800164c:	f7ff ffde 	bl	800160c <HAL_RCC_GetHCLKFreq>
 8001650:	4602      	mov	r2, r0
 8001652:	4b05      	ldr	r3, [pc, #20]	; (8001668 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	0adb      	lsrs	r3, r3, #11
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	4903      	ldr	r1, [pc, #12]	; (800166c <HAL_RCC_GetPCLK2Freq+0x24>)
 800165e:	5ccb      	ldrb	r3, [r1, r3]
 8001660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001664:	4618      	mov	r0, r3
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40021000 	.word	0x40021000
 800166c:	080024e0 	.word	0x080024e0

08001670 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001678:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <RCC_Delay+0x34>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <RCC_Delay+0x38>)
 800167e:	fba2 2303 	umull	r2, r3, r2, r3
 8001682:	0a5b      	lsrs	r3, r3, #9
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	fb02 f303 	mul.w	r3, r2, r3
 800168a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800168c:	bf00      	nop
  }
  while (Delay --);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1e5a      	subs	r2, r3, #1
 8001692:	60fa      	str	r2, [r7, #12]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1f9      	bne.n	800168c <RCC_Delay+0x1c>
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	20000000 	.word	0x20000000
 80016a8:	10624dd3 	.word	0x10624dd3

080016ac <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e04a      	b.n	8001754 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d106      	bne.n	80016d8 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7fe fe16 	bl	8000304 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2224      	movs	r2, #36	; 0x24
 80016dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 f925 	bl	8001940 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	691a      	ldr	r2, [r3, #16]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001704:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	695a      	ldr	r2, [r3, #20]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8001714:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	695a      	ldr	r2, [r3, #20]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f042 0208 	orr.w	r2, r2, #8
 8001724:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001734:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2220      	movs	r2, #32
 8001740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2220      	movs	r2, #32
 8001748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af02      	add	r7, sp, #8
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	4613      	mov	r3, r2
 800176a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b20      	cmp	r3, #32
 800177a:	d16d      	bne.n	8001858 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <HAL_UART_Transmit+0x2c>
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e066      	b.n	800185a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2221      	movs	r2, #33	; 0x21
 8001796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800179a:	f7ff f8e1 	bl	8000960 <HAL_GetTick>
 800179e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	88fa      	ldrh	r2, [r7, #6]
 80017a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	88fa      	ldrh	r2, [r7, #6]
 80017aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017b4:	d108      	bne.n	80017c8 <HAL_UART_Transmit+0x6c>
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d104      	bne.n	80017c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	61bb      	str	r3, [r7, #24]
 80017c6:	e003      	b.n	80017d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80017d0:	e02a      	b.n	8001828 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2200      	movs	r2, #0
 80017da:	2180      	movs	r1, #128	; 0x80
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f000 f840 	bl	8001862 <UART_WaitOnFlagUntilTimeout>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e036      	b.n	800185a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10b      	bne.n	800180a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001800:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	3302      	adds	r3, #2
 8001806:	61bb      	str	r3, [r7, #24]
 8001808:	e007      	b.n	800181a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	781a      	ldrb	r2, [r3, #0]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	3301      	adds	r3, #1
 8001818:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800181e:	b29b      	uxth	r3, r3
 8001820:	3b01      	subs	r3, #1
 8001822:	b29a      	uxth	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800182c:	b29b      	uxth	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1cf      	bne.n	80017d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	2200      	movs	r2, #0
 800183a:	2140      	movs	r1, #64	; 0x40
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f000 f810 	bl	8001862 <UART_WaitOnFlagUntilTimeout>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e006      	b.n	800185a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2220      	movs	r2, #32
 8001850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001854:	2300      	movs	r3, #0
 8001856:	e000      	b.n	800185a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001858:	2302      	movs	r3, #2
  }
}
 800185a:	4618      	mov	r0, r3
 800185c:	3720      	adds	r7, #32
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b090      	sub	sp, #64	; 0x40
 8001866:	af00      	add	r7, sp, #0
 8001868:	60f8      	str	r0, [r7, #12]
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	603b      	str	r3, [r7, #0]
 800186e:	4613      	mov	r3, r2
 8001870:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001872:	e050      	b.n	8001916 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800187a:	d04c      	beq.n	8001916 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800187c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800187e:	2b00      	cmp	r3, #0
 8001880:	d007      	beq.n	8001892 <UART_WaitOnFlagUntilTimeout+0x30>
 8001882:	f7ff f86d 	bl	8000960 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800188e:	429a      	cmp	r2, r3
 8001890:	d241      	bcs.n	8001916 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	330c      	adds	r3, #12
 8001898:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800189a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800189c:	e853 3f00 	ldrex	r3, [r3]
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80018a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	330c      	adds	r3, #12
 80018b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018b2:	637a      	str	r2, [r7, #52]	; 0x34
 80018b4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80018b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018ba:	e841 2300 	strex	r3, r2, [r1]
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80018c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1e5      	bne.n	8001892 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	3314      	adds	r3, #20
 80018cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	e853 3f00 	ldrex	r3, [r3]
 80018d4:	613b      	str	r3, [r7, #16]
   return(result);
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	f023 0301 	bic.w	r3, r3, #1
 80018dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	3314      	adds	r3, #20
 80018e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018e6:	623a      	str	r2, [r7, #32]
 80018e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018ea:	69f9      	ldr	r1, [r7, #28]
 80018ec:	6a3a      	ldr	r2, [r7, #32]
 80018ee:	e841 2300 	strex	r3, r2, [r1]
 80018f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1e5      	bne.n	80018c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2220      	movs	r2, #32
 80018fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2220      	movs	r2, #32
 8001906:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e00f      	b.n	8001936 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	4013      	ands	r3, r2
 8001920:	68ba      	ldr	r2, [r7, #8]
 8001922:	429a      	cmp	r2, r3
 8001924:	bf0c      	ite	eq
 8001926:	2301      	moveq	r3, #1
 8001928:	2300      	movne	r3, #0
 800192a:	b2db      	uxtb	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	429a      	cmp	r2, r3
 8001932:	d09f      	beq.n	8001874 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3740      	adds	r7, #64	; 0x40
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	4313      	orrs	r3, r2
 800196e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800197a:	f023 030c 	bic.w	r3, r3, #12
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6812      	ldr	r2, [r2, #0]
 8001982:	68b9      	ldr	r1, [r7, #8]
 8001984:	430b      	orrs	r3, r1
 8001986:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	699a      	ldr	r2, [r3, #24]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a2c      	ldr	r2, [pc, #176]	; (8001a54 <UART_SetConfig+0x114>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d103      	bne.n	80019b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80019a8:	f7ff fe4e 	bl	8001648 <HAL_RCC_GetPCLK2Freq>
 80019ac:	60f8      	str	r0, [r7, #12]
 80019ae:	e002      	b.n	80019b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80019b0:	f7ff fe36 	bl	8001620 <HAL_RCC_GetPCLK1Freq>
 80019b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	009a      	lsls	r2, r3, #2
 80019c0:	441a      	add	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019cc:	4a22      	ldr	r2, [pc, #136]	; (8001a58 <UART_SetConfig+0x118>)
 80019ce:	fba2 2303 	umull	r2, r3, r2, r3
 80019d2:	095b      	lsrs	r3, r3, #5
 80019d4:	0119      	lsls	r1, r3, #4
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	009a      	lsls	r2, r3, #2
 80019e0:	441a      	add	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80019ec:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <UART_SetConfig+0x118>)
 80019ee:	fba3 0302 	umull	r0, r3, r3, r2
 80019f2:	095b      	lsrs	r3, r3, #5
 80019f4:	2064      	movs	r0, #100	; 0x64
 80019f6:	fb00 f303 	mul.w	r3, r0, r3
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	3332      	adds	r3, #50	; 0x32
 8001a00:	4a15      	ldr	r2, [pc, #84]	; (8001a58 <UART_SetConfig+0x118>)
 8001a02:	fba2 2303 	umull	r2, r3, r2, r3
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a0c:	4419      	add	r1, r3
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	009a      	lsls	r2, r3, #2
 8001a18:	441a      	add	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <UART_SetConfig+0x118>)
 8001a26:	fba3 0302 	umull	r0, r3, r3, r2
 8001a2a:	095b      	lsrs	r3, r3, #5
 8001a2c:	2064      	movs	r0, #100	; 0x64
 8001a2e:	fb00 f303 	mul.w	r3, r0, r3
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	011b      	lsls	r3, r3, #4
 8001a36:	3332      	adds	r3, #50	; 0x32
 8001a38:	4a07      	ldr	r2, [pc, #28]	; (8001a58 <UART_SetConfig+0x118>)
 8001a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3e:	095b      	lsrs	r3, r3, #5
 8001a40:	f003 020f 	and.w	r2, r3, #15
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	440a      	add	r2, r1
 8001a4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001a4c:	bf00      	nop
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40013800 	.word	0x40013800
 8001a58:	51eb851f 	.word	0x51eb851f

08001a5c <__errno>:
 8001a5c:	4b01      	ldr	r3, [pc, #4]	; (8001a64 <__errno+0x8>)
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	2000000c 	.word	0x2000000c

08001a68 <__libc_init_array>:
 8001a68:	b570      	push	{r4, r5, r6, lr}
 8001a6a:	2600      	movs	r6, #0
 8001a6c:	4d0c      	ldr	r5, [pc, #48]	; (8001aa0 <__libc_init_array+0x38>)
 8001a6e:	4c0d      	ldr	r4, [pc, #52]	; (8001aa4 <__libc_init_array+0x3c>)
 8001a70:	1b64      	subs	r4, r4, r5
 8001a72:	10a4      	asrs	r4, r4, #2
 8001a74:	42a6      	cmp	r6, r4
 8001a76:	d109      	bne.n	8001a8c <__libc_init_array+0x24>
 8001a78:	f000 fd18 	bl	80024ac <_init>
 8001a7c:	2600      	movs	r6, #0
 8001a7e:	4d0a      	ldr	r5, [pc, #40]	; (8001aa8 <__libc_init_array+0x40>)
 8001a80:	4c0a      	ldr	r4, [pc, #40]	; (8001aac <__libc_init_array+0x44>)
 8001a82:	1b64      	subs	r4, r4, r5
 8001a84:	10a4      	asrs	r4, r4, #2
 8001a86:	42a6      	cmp	r6, r4
 8001a88:	d105      	bne.n	8001a96 <__libc_init_array+0x2e>
 8001a8a:	bd70      	pop	{r4, r5, r6, pc}
 8001a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a90:	4798      	blx	r3
 8001a92:	3601      	adds	r6, #1
 8001a94:	e7ee      	b.n	8001a74 <__libc_init_array+0xc>
 8001a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a9a:	4798      	blx	r3
 8001a9c:	3601      	adds	r6, #1
 8001a9e:	e7f2      	b.n	8001a86 <__libc_init_array+0x1e>
 8001aa0:	08002560 	.word	0x08002560
 8001aa4:	08002560 	.word	0x08002560
 8001aa8:	08002560 	.word	0x08002560
 8001aac:	08002564 	.word	0x08002564

08001ab0 <memset>:
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4402      	add	r2, r0
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d100      	bne.n	8001aba <memset+0xa>
 8001ab8:	4770      	bx	lr
 8001aba:	f803 1b01 	strb.w	r1, [r3], #1
 8001abe:	e7f9      	b.n	8001ab4 <memset+0x4>

08001ac0 <_puts_r>:
 8001ac0:	b570      	push	{r4, r5, r6, lr}
 8001ac2:	460e      	mov	r6, r1
 8001ac4:	4605      	mov	r5, r0
 8001ac6:	b118      	cbz	r0, 8001ad0 <_puts_r+0x10>
 8001ac8:	6983      	ldr	r3, [r0, #24]
 8001aca:	b90b      	cbnz	r3, 8001ad0 <_puts_r+0x10>
 8001acc:	f000 fa44 	bl	8001f58 <__sinit>
 8001ad0:	69ab      	ldr	r3, [r5, #24]
 8001ad2:	68ac      	ldr	r4, [r5, #8]
 8001ad4:	b913      	cbnz	r3, 8001adc <_puts_r+0x1c>
 8001ad6:	4628      	mov	r0, r5
 8001ad8:	f000 fa3e 	bl	8001f58 <__sinit>
 8001adc:	4b2c      	ldr	r3, [pc, #176]	; (8001b90 <_puts_r+0xd0>)
 8001ade:	429c      	cmp	r4, r3
 8001ae0:	d120      	bne.n	8001b24 <_puts_r+0x64>
 8001ae2:	686c      	ldr	r4, [r5, #4]
 8001ae4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ae6:	07db      	lsls	r3, r3, #31
 8001ae8:	d405      	bmi.n	8001af6 <_puts_r+0x36>
 8001aea:	89a3      	ldrh	r3, [r4, #12]
 8001aec:	0598      	lsls	r0, r3, #22
 8001aee:	d402      	bmi.n	8001af6 <_puts_r+0x36>
 8001af0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001af2:	f000 facf 	bl	8002094 <__retarget_lock_acquire_recursive>
 8001af6:	89a3      	ldrh	r3, [r4, #12]
 8001af8:	0719      	lsls	r1, r3, #28
 8001afa:	d51d      	bpl.n	8001b38 <_puts_r+0x78>
 8001afc:	6923      	ldr	r3, [r4, #16]
 8001afe:	b1db      	cbz	r3, 8001b38 <_puts_r+0x78>
 8001b00:	3e01      	subs	r6, #1
 8001b02:	68a3      	ldr	r3, [r4, #8]
 8001b04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	60a3      	str	r3, [r4, #8]
 8001b0c:	bb39      	cbnz	r1, 8001b5e <_puts_r+0x9e>
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	da38      	bge.n	8001b84 <_puts_r+0xc4>
 8001b12:	4622      	mov	r2, r4
 8001b14:	210a      	movs	r1, #10
 8001b16:	4628      	mov	r0, r5
 8001b18:	f000 f848 	bl	8001bac <__swbuf_r>
 8001b1c:	3001      	adds	r0, #1
 8001b1e:	d011      	beq.n	8001b44 <_puts_r+0x84>
 8001b20:	250a      	movs	r5, #10
 8001b22:	e011      	b.n	8001b48 <_puts_r+0x88>
 8001b24:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <_puts_r+0xd4>)
 8001b26:	429c      	cmp	r4, r3
 8001b28:	d101      	bne.n	8001b2e <_puts_r+0x6e>
 8001b2a:	68ac      	ldr	r4, [r5, #8]
 8001b2c:	e7da      	b.n	8001ae4 <_puts_r+0x24>
 8001b2e:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <_puts_r+0xd8>)
 8001b30:	429c      	cmp	r4, r3
 8001b32:	bf08      	it	eq
 8001b34:	68ec      	ldreq	r4, [r5, #12]
 8001b36:	e7d5      	b.n	8001ae4 <_puts_r+0x24>
 8001b38:	4621      	mov	r1, r4
 8001b3a:	4628      	mov	r0, r5
 8001b3c:	f000 f888 	bl	8001c50 <__swsetup_r>
 8001b40:	2800      	cmp	r0, #0
 8001b42:	d0dd      	beq.n	8001b00 <_puts_r+0x40>
 8001b44:	f04f 35ff 	mov.w	r5, #4294967295
 8001b48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b4a:	07da      	lsls	r2, r3, #31
 8001b4c:	d405      	bmi.n	8001b5a <_puts_r+0x9a>
 8001b4e:	89a3      	ldrh	r3, [r4, #12]
 8001b50:	059b      	lsls	r3, r3, #22
 8001b52:	d402      	bmi.n	8001b5a <_puts_r+0x9a>
 8001b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b56:	f000 fa9e 	bl	8002096 <__retarget_lock_release_recursive>
 8001b5a:	4628      	mov	r0, r5
 8001b5c:	bd70      	pop	{r4, r5, r6, pc}
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	da04      	bge.n	8001b6c <_puts_r+0xac>
 8001b62:	69a2      	ldr	r2, [r4, #24]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	dc06      	bgt.n	8001b76 <_puts_r+0xb6>
 8001b68:	290a      	cmp	r1, #10
 8001b6a:	d004      	beq.n	8001b76 <_puts_r+0xb6>
 8001b6c:	6823      	ldr	r3, [r4, #0]
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	6022      	str	r2, [r4, #0]
 8001b72:	7019      	strb	r1, [r3, #0]
 8001b74:	e7c5      	b.n	8001b02 <_puts_r+0x42>
 8001b76:	4622      	mov	r2, r4
 8001b78:	4628      	mov	r0, r5
 8001b7a:	f000 f817 	bl	8001bac <__swbuf_r>
 8001b7e:	3001      	adds	r0, #1
 8001b80:	d1bf      	bne.n	8001b02 <_puts_r+0x42>
 8001b82:	e7df      	b.n	8001b44 <_puts_r+0x84>
 8001b84:	250a      	movs	r5, #10
 8001b86:	6823      	ldr	r3, [r4, #0]
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	6022      	str	r2, [r4, #0]
 8001b8c:	701d      	strb	r5, [r3, #0]
 8001b8e:	e7db      	b.n	8001b48 <_puts_r+0x88>
 8001b90:	08002520 	.word	0x08002520
 8001b94:	08002540 	.word	0x08002540
 8001b98:	08002500 	.word	0x08002500

08001b9c <puts>:
 8001b9c:	4b02      	ldr	r3, [pc, #8]	; (8001ba8 <puts+0xc>)
 8001b9e:	4601      	mov	r1, r0
 8001ba0:	6818      	ldr	r0, [r3, #0]
 8001ba2:	f7ff bf8d 	b.w	8001ac0 <_puts_r>
 8001ba6:	bf00      	nop
 8001ba8:	2000000c 	.word	0x2000000c

08001bac <__swbuf_r>:
 8001bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bae:	460e      	mov	r6, r1
 8001bb0:	4614      	mov	r4, r2
 8001bb2:	4605      	mov	r5, r0
 8001bb4:	b118      	cbz	r0, 8001bbe <__swbuf_r+0x12>
 8001bb6:	6983      	ldr	r3, [r0, #24]
 8001bb8:	b90b      	cbnz	r3, 8001bbe <__swbuf_r+0x12>
 8001bba:	f000 f9cd 	bl	8001f58 <__sinit>
 8001bbe:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <__swbuf_r+0x98>)
 8001bc0:	429c      	cmp	r4, r3
 8001bc2:	d12b      	bne.n	8001c1c <__swbuf_r+0x70>
 8001bc4:	686c      	ldr	r4, [r5, #4]
 8001bc6:	69a3      	ldr	r3, [r4, #24]
 8001bc8:	60a3      	str	r3, [r4, #8]
 8001bca:	89a3      	ldrh	r3, [r4, #12]
 8001bcc:	071a      	lsls	r2, r3, #28
 8001bce:	d52f      	bpl.n	8001c30 <__swbuf_r+0x84>
 8001bd0:	6923      	ldr	r3, [r4, #16]
 8001bd2:	b36b      	cbz	r3, 8001c30 <__swbuf_r+0x84>
 8001bd4:	6923      	ldr	r3, [r4, #16]
 8001bd6:	6820      	ldr	r0, [r4, #0]
 8001bd8:	b2f6      	uxtb	r6, r6
 8001bda:	1ac0      	subs	r0, r0, r3
 8001bdc:	6963      	ldr	r3, [r4, #20]
 8001bde:	4637      	mov	r7, r6
 8001be0:	4283      	cmp	r3, r0
 8001be2:	dc04      	bgt.n	8001bee <__swbuf_r+0x42>
 8001be4:	4621      	mov	r1, r4
 8001be6:	4628      	mov	r0, r5
 8001be8:	f000 f922 	bl	8001e30 <_fflush_r>
 8001bec:	bb30      	cbnz	r0, 8001c3c <__swbuf_r+0x90>
 8001bee:	68a3      	ldr	r3, [r4, #8]
 8001bf0:	3001      	adds	r0, #1
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	60a3      	str	r3, [r4, #8]
 8001bf6:	6823      	ldr	r3, [r4, #0]
 8001bf8:	1c5a      	adds	r2, r3, #1
 8001bfa:	6022      	str	r2, [r4, #0]
 8001bfc:	701e      	strb	r6, [r3, #0]
 8001bfe:	6963      	ldr	r3, [r4, #20]
 8001c00:	4283      	cmp	r3, r0
 8001c02:	d004      	beq.n	8001c0e <__swbuf_r+0x62>
 8001c04:	89a3      	ldrh	r3, [r4, #12]
 8001c06:	07db      	lsls	r3, r3, #31
 8001c08:	d506      	bpl.n	8001c18 <__swbuf_r+0x6c>
 8001c0a:	2e0a      	cmp	r6, #10
 8001c0c:	d104      	bne.n	8001c18 <__swbuf_r+0x6c>
 8001c0e:	4621      	mov	r1, r4
 8001c10:	4628      	mov	r0, r5
 8001c12:	f000 f90d 	bl	8001e30 <_fflush_r>
 8001c16:	b988      	cbnz	r0, 8001c3c <__swbuf_r+0x90>
 8001c18:	4638      	mov	r0, r7
 8001c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <__swbuf_r+0x9c>)
 8001c1e:	429c      	cmp	r4, r3
 8001c20:	d101      	bne.n	8001c26 <__swbuf_r+0x7a>
 8001c22:	68ac      	ldr	r4, [r5, #8]
 8001c24:	e7cf      	b.n	8001bc6 <__swbuf_r+0x1a>
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <__swbuf_r+0xa0>)
 8001c28:	429c      	cmp	r4, r3
 8001c2a:	bf08      	it	eq
 8001c2c:	68ec      	ldreq	r4, [r5, #12]
 8001c2e:	e7ca      	b.n	8001bc6 <__swbuf_r+0x1a>
 8001c30:	4621      	mov	r1, r4
 8001c32:	4628      	mov	r0, r5
 8001c34:	f000 f80c 	bl	8001c50 <__swsetup_r>
 8001c38:	2800      	cmp	r0, #0
 8001c3a:	d0cb      	beq.n	8001bd4 <__swbuf_r+0x28>
 8001c3c:	f04f 37ff 	mov.w	r7, #4294967295
 8001c40:	e7ea      	b.n	8001c18 <__swbuf_r+0x6c>
 8001c42:	bf00      	nop
 8001c44:	08002520 	.word	0x08002520
 8001c48:	08002540 	.word	0x08002540
 8001c4c:	08002500 	.word	0x08002500

08001c50 <__swsetup_r>:
 8001c50:	4b32      	ldr	r3, [pc, #200]	; (8001d1c <__swsetup_r+0xcc>)
 8001c52:	b570      	push	{r4, r5, r6, lr}
 8001c54:	681d      	ldr	r5, [r3, #0]
 8001c56:	4606      	mov	r6, r0
 8001c58:	460c      	mov	r4, r1
 8001c5a:	b125      	cbz	r5, 8001c66 <__swsetup_r+0x16>
 8001c5c:	69ab      	ldr	r3, [r5, #24]
 8001c5e:	b913      	cbnz	r3, 8001c66 <__swsetup_r+0x16>
 8001c60:	4628      	mov	r0, r5
 8001c62:	f000 f979 	bl	8001f58 <__sinit>
 8001c66:	4b2e      	ldr	r3, [pc, #184]	; (8001d20 <__swsetup_r+0xd0>)
 8001c68:	429c      	cmp	r4, r3
 8001c6a:	d10f      	bne.n	8001c8c <__swsetup_r+0x3c>
 8001c6c:	686c      	ldr	r4, [r5, #4]
 8001c6e:	89a3      	ldrh	r3, [r4, #12]
 8001c70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c74:	0719      	lsls	r1, r3, #28
 8001c76:	d42c      	bmi.n	8001cd2 <__swsetup_r+0x82>
 8001c78:	06dd      	lsls	r5, r3, #27
 8001c7a:	d411      	bmi.n	8001ca0 <__swsetup_r+0x50>
 8001c7c:	2309      	movs	r3, #9
 8001c7e:	6033      	str	r3, [r6, #0]
 8001c80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001c84:	f04f 30ff 	mov.w	r0, #4294967295
 8001c88:	81a3      	strh	r3, [r4, #12]
 8001c8a:	e03e      	b.n	8001d0a <__swsetup_r+0xba>
 8001c8c:	4b25      	ldr	r3, [pc, #148]	; (8001d24 <__swsetup_r+0xd4>)
 8001c8e:	429c      	cmp	r4, r3
 8001c90:	d101      	bne.n	8001c96 <__swsetup_r+0x46>
 8001c92:	68ac      	ldr	r4, [r5, #8]
 8001c94:	e7eb      	b.n	8001c6e <__swsetup_r+0x1e>
 8001c96:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <__swsetup_r+0xd8>)
 8001c98:	429c      	cmp	r4, r3
 8001c9a:	bf08      	it	eq
 8001c9c:	68ec      	ldreq	r4, [r5, #12]
 8001c9e:	e7e6      	b.n	8001c6e <__swsetup_r+0x1e>
 8001ca0:	0758      	lsls	r0, r3, #29
 8001ca2:	d512      	bpl.n	8001cca <__swsetup_r+0x7a>
 8001ca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ca6:	b141      	cbz	r1, 8001cba <__swsetup_r+0x6a>
 8001ca8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001cac:	4299      	cmp	r1, r3
 8001cae:	d002      	beq.n	8001cb6 <__swsetup_r+0x66>
 8001cb0:	4630      	mov	r0, r6
 8001cb2:	f000 fa57 	bl	8002164 <_free_r>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	6363      	str	r3, [r4, #52]	; 0x34
 8001cba:	89a3      	ldrh	r3, [r4, #12]
 8001cbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001cc0:	81a3      	strh	r3, [r4, #12]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	6063      	str	r3, [r4, #4]
 8001cc6:	6923      	ldr	r3, [r4, #16]
 8001cc8:	6023      	str	r3, [r4, #0]
 8001cca:	89a3      	ldrh	r3, [r4, #12]
 8001ccc:	f043 0308 	orr.w	r3, r3, #8
 8001cd0:	81a3      	strh	r3, [r4, #12]
 8001cd2:	6923      	ldr	r3, [r4, #16]
 8001cd4:	b94b      	cbnz	r3, 8001cea <__swsetup_r+0x9a>
 8001cd6:	89a3      	ldrh	r3, [r4, #12]
 8001cd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ce0:	d003      	beq.n	8001cea <__swsetup_r+0x9a>
 8001ce2:	4621      	mov	r1, r4
 8001ce4:	4630      	mov	r0, r6
 8001ce6:	f000 f9fd 	bl	80020e4 <__smakebuf_r>
 8001cea:	89a0      	ldrh	r0, [r4, #12]
 8001cec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001cf0:	f010 0301 	ands.w	r3, r0, #1
 8001cf4:	d00a      	beq.n	8001d0c <__swsetup_r+0xbc>
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60a3      	str	r3, [r4, #8]
 8001cfa:	6963      	ldr	r3, [r4, #20]
 8001cfc:	425b      	negs	r3, r3
 8001cfe:	61a3      	str	r3, [r4, #24]
 8001d00:	6923      	ldr	r3, [r4, #16]
 8001d02:	b943      	cbnz	r3, 8001d16 <__swsetup_r+0xc6>
 8001d04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001d08:	d1ba      	bne.n	8001c80 <__swsetup_r+0x30>
 8001d0a:	bd70      	pop	{r4, r5, r6, pc}
 8001d0c:	0781      	lsls	r1, r0, #30
 8001d0e:	bf58      	it	pl
 8001d10:	6963      	ldrpl	r3, [r4, #20]
 8001d12:	60a3      	str	r3, [r4, #8]
 8001d14:	e7f4      	b.n	8001d00 <__swsetup_r+0xb0>
 8001d16:	2000      	movs	r0, #0
 8001d18:	e7f7      	b.n	8001d0a <__swsetup_r+0xba>
 8001d1a:	bf00      	nop
 8001d1c:	2000000c 	.word	0x2000000c
 8001d20:	08002520 	.word	0x08002520
 8001d24:	08002540 	.word	0x08002540
 8001d28:	08002500 	.word	0x08002500

08001d2c <__sflush_r>:
 8001d2c:	898a      	ldrh	r2, [r1, #12]
 8001d2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d30:	4605      	mov	r5, r0
 8001d32:	0710      	lsls	r0, r2, #28
 8001d34:	460c      	mov	r4, r1
 8001d36:	d457      	bmi.n	8001de8 <__sflush_r+0xbc>
 8001d38:	684b      	ldr	r3, [r1, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	dc04      	bgt.n	8001d48 <__sflush_r+0x1c>
 8001d3e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	dc01      	bgt.n	8001d48 <__sflush_r+0x1c>
 8001d44:	2000      	movs	r0, #0
 8001d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d4a:	2e00      	cmp	r6, #0
 8001d4c:	d0fa      	beq.n	8001d44 <__sflush_r+0x18>
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001d54:	682f      	ldr	r7, [r5, #0]
 8001d56:	602b      	str	r3, [r5, #0]
 8001d58:	d032      	beq.n	8001dc0 <__sflush_r+0x94>
 8001d5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d5c:	89a3      	ldrh	r3, [r4, #12]
 8001d5e:	075a      	lsls	r2, r3, #29
 8001d60:	d505      	bpl.n	8001d6e <__sflush_r+0x42>
 8001d62:	6863      	ldr	r3, [r4, #4]
 8001d64:	1ac0      	subs	r0, r0, r3
 8001d66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d68:	b10b      	cbz	r3, 8001d6e <__sflush_r+0x42>
 8001d6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d6c:	1ac0      	subs	r0, r0, r3
 8001d6e:	2300      	movs	r3, #0
 8001d70:	4602      	mov	r2, r0
 8001d72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d74:	4628      	mov	r0, r5
 8001d76:	6a21      	ldr	r1, [r4, #32]
 8001d78:	47b0      	blx	r6
 8001d7a:	1c43      	adds	r3, r0, #1
 8001d7c:	89a3      	ldrh	r3, [r4, #12]
 8001d7e:	d106      	bne.n	8001d8e <__sflush_r+0x62>
 8001d80:	6829      	ldr	r1, [r5, #0]
 8001d82:	291d      	cmp	r1, #29
 8001d84:	d82c      	bhi.n	8001de0 <__sflush_r+0xb4>
 8001d86:	4a29      	ldr	r2, [pc, #164]	; (8001e2c <__sflush_r+0x100>)
 8001d88:	40ca      	lsrs	r2, r1
 8001d8a:	07d6      	lsls	r6, r2, #31
 8001d8c:	d528      	bpl.n	8001de0 <__sflush_r+0xb4>
 8001d8e:	2200      	movs	r2, #0
 8001d90:	6062      	str	r2, [r4, #4]
 8001d92:	6922      	ldr	r2, [r4, #16]
 8001d94:	04d9      	lsls	r1, r3, #19
 8001d96:	6022      	str	r2, [r4, #0]
 8001d98:	d504      	bpl.n	8001da4 <__sflush_r+0x78>
 8001d9a:	1c42      	adds	r2, r0, #1
 8001d9c:	d101      	bne.n	8001da2 <__sflush_r+0x76>
 8001d9e:	682b      	ldr	r3, [r5, #0]
 8001da0:	b903      	cbnz	r3, 8001da4 <__sflush_r+0x78>
 8001da2:	6560      	str	r0, [r4, #84]	; 0x54
 8001da4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001da6:	602f      	str	r7, [r5, #0]
 8001da8:	2900      	cmp	r1, #0
 8001daa:	d0cb      	beq.n	8001d44 <__sflush_r+0x18>
 8001dac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001db0:	4299      	cmp	r1, r3
 8001db2:	d002      	beq.n	8001dba <__sflush_r+0x8e>
 8001db4:	4628      	mov	r0, r5
 8001db6:	f000 f9d5 	bl	8002164 <_free_r>
 8001dba:	2000      	movs	r0, #0
 8001dbc:	6360      	str	r0, [r4, #52]	; 0x34
 8001dbe:	e7c2      	b.n	8001d46 <__sflush_r+0x1a>
 8001dc0:	6a21      	ldr	r1, [r4, #32]
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	4628      	mov	r0, r5
 8001dc6:	47b0      	blx	r6
 8001dc8:	1c41      	adds	r1, r0, #1
 8001dca:	d1c7      	bne.n	8001d5c <__sflush_r+0x30>
 8001dcc:	682b      	ldr	r3, [r5, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0c4      	beq.n	8001d5c <__sflush_r+0x30>
 8001dd2:	2b1d      	cmp	r3, #29
 8001dd4:	d001      	beq.n	8001dda <__sflush_r+0xae>
 8001dd6:	2b16      	cmp	r3, #22
 8001dd8:	d101      	bne.n	8001dde <__sflush_r+0xb2>
 8001dda:	602f      	str	r7, [r5, #0]
 8001ddc:	e7b2      	b.n	8001d44 <__sflush_r+0x18>
 8001dde:	89a3      	ldrh	r3, [r4, #12]
 8001de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001de4:	81a3      	strh	r3, [r4, #12]
 8001de6:	e7ae      	b.n	8001d46 <__sflush_r+0x1a>
 8001de8:	690f      	ldr	r7, [r1, #16]
 8001dea:	2f00      	cmp	r7, #0
 8001dec:	d0aa      	beq.n	8001d44 <__sflush_r+0x18>
 8001dee:	0793      	lsls	r3, r2, #30
 8001df0:	bf18      	it	ne
 8001df2:	2300      	movne	r3, #0
 8001df4:	680e      	ldr	r6, [r1, #0]
 8001df6:	bf08      	it	eq
 8001df8:	694b      	ldreq	r3, [r1, #20]
 8001dfa:	1bf6      	subs	r6, r6, r7
 8001dfc:	600f      	str	r7, [r1, #0]
 8001dfe:	608b      	str	r3, [r1, #8]
 8001e00:	2e00      	cmp	r6, #0
 8001e02:	dd9f      	ble.n	8001d44 <__sflush_r+0x18>
 8001e04:	4633      	mov	r3, r6
 8001e06:	463a      	mov	r2, r7
 8001e08:	4628      	mov	r0, r5
 8001e0a:	6a21      	ldr	r1, [r4, #32]
 8001e0c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001e10:	47e0      	blx	ip
 8001e12:	2800      	cmp	r0, #0
 8001e14:	dc06      	bgt.n	8001e24 <__sflush_r+0xf8>
 8001e16:	89a3      	ldrh	r3, [r4, #12]
 8001e18:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e20:	81a3      	strh	r3, [r4, #12]
 8001e22:	e790      	b.n	8001d46 <__sflush_r+0x1a>
 8001e24:	4407      	add	r7, r0
 8001e26:	1a36      	subs	r6, r6, r0
 8001e28:	e7ea      	b.n	8001e00 <__sflush_r+0xd4>
 8001e2a:	bf00      	nop
 8001e2c:	20400001 	.word	0x20400001

08001e30 <_fflush_r>:
 8001e30:	b538      	push	{r3, r4, r5, lr}
 8001e32:	690b      	ldr	r3, [r1, #16]
 8001e34:	4605      	mov	r5, r0
 8001e36:	460c      	mov	r4, r1
 8001e38:	b913      	cbnz	r3, 8001e40 <_fflush_r+0x10>
 8001e3a:	2500      	movs	r5, #0
 8001e3c:	4628      	mov	r0, r5
 8001e3e:	bd38      	pop	{r3, r4, r5, pc}
 8001e40:	b118      	cbz	r0, 8001e4a <_fflush_r+0x1a>
 8001e42:	6983      	ldr	r3, [r0, #24]
 8001e44:	b90b      	cbnz	r3, 8001e4a <_fflush_r+0x1a>
 8001e46:	f000 f887 	bl	8001f58 <__sinit>
 8001e4a:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <_fflush_r+0x6c>)
 8001e4c:	429c      	cmp	r4, r3
 8001e4e:	d11b      	bne.n	8001e88 <_fflush_r+0x58>
 8001e50:	686c      	ldr	r4, [r5, #4]
 8001e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0ef      	beq.n	8001e3a <_fflush_r+0xa>
 8001e5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001e5c:	07d0      	lsls	r0, r2, #31
 8001e5e:	d404      	bmi.n	8001e6a <_fflush_r+0x3a>
 8001e60:	0599      	lsls	r1, r3, #22
 8001e62:	d402      	bmi.n	8001e6a <_fflush_r+0x3a>
 8001e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e66:	f000 f915 	bl	8002094 <__retarget_lock_acquire_recursive>
 8001e6a:	4628      	mov	r0, r5
 8001e6c:	4621      	mov	r1, r4
 8001e6e:	f7ff ff5d 	bl	8001d2c <__sflush_r>
 8001e72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e74:	4605      	mov	r5, r0
 8001e76:	07da      	lsls	r2, r3, #31
 8001e78:	d4e0      	bmi.n	8001e3c <_fflush_r+0xc>
 8001e7a:	89a3      	ldrh	r3, [r4, #12]
 8001e7c:	059b      	lsls	r3, r3, #22
 8001e7e:	d4dd      	bmi.n	8001e3c <_fflush_r+0xc>
 8001e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e82:	f000 f908 	bl	8002096 <__retarget_lock_release_recursive>
 8001e86:	e7d9      	b.n	8001e3c <_fflush_r+0xc>
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <_fflush_r+0x70>)
 8001e8a:	429c      	cmp	r4, r3
 8001e8c:	d101      	bne.n	8001e92 <_fflush_r+0x62>
 8001e8e:	68ac      	ldr	r4, [r5, #8]
 8001e90:	e7df      	b.n	8001e52 <_fflush_r+0x22>
 8001e92:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <_fflush_r+0x74>)
 8001e94:	429c      	cmp	r4, r3
 8001e96:	bf08      	it	eq
 8001e98:	68ec      	ldreq	r4, [r5, #12]
 8001e9a:	e7da      	b.n	8001e52 <_fflush_r+0x22>
 8001e9c:	08002520 	.word	0x08002520
 8001ea0:	08002540 	.word	0x08002540
 8001ea4:	08002500 	.word	0x08002500

08001ea8 <std>:
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	b510      	push	{r4, lr}
 8001eac:	4604      	mov	r4, r0
 8001eae:	e9c0 3300 	strd	r3, r3, [r0]
 8001eb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001eb6:	6083      	str	r3, [r0, #8]
 8001eb8:	8181      	strh	r1, [r0, #12]
 8001eba:	6643      	str	r3, [r0, #100]	; 0x64
 8001ebc:	81c2      	strh	r2, [r0, #14]
 8001ebe:	6183      	str	r3, [r0, #24]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	2208      	movs	r2, #8
 8001ec4:	305c      	adds	r0, #92	; 0x5c
 8001ec6:	f7ff fdf3 	bl	8001ab0 <memset>
 8001eca:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <std+0x38>)
 8001ecc:	6224      	str	r4, [r4, #32]
 8001ece:	6263      	str	r3, [r4, #36]	; 0x24
 8001ed0:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <std+0x3c>)
 8001ed2:	62a3      	str	r3, [r4, #40]	; 0x28
 8001ed4:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <std+0x40>)
 8001ed6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001ed8:	4b04      	ldr	r3, [pc, #16]	; (8001eec <std+0x44>)
 8001eda:	6323      	str	r3, [r4, #48]	; 0x30
 8001edc:	bd10      	pop	{r4, pc}
 8001ede:	bf00      	nop
 8001ee0:	0800233d 	.word	0x0800233d
 8001ee4:	0800235f 	.word	0x0800235f
 8001ee8:	08002397 	.word	0x08002397
 8001eec:	080023bb 	.word	0x080023bb

08001ef0 <_cleanup_r>:
 8001ef0:	4901      	ldr	r1, [pc, #4]	; (8001ef8 <_cleanup_r+0x8>)
 8001ef2:	f000 b8af 	b.w	8002054 <_fwalk_reent>
 8001ef6:	bf00      	nop
 8001ef8:	08001e31 	.word	0x08001e31

08001efc <__sfmoreglue>:
 8001efc:	2268      	movs	r2, #104	; 0x68
 8001efe:	b570      	push	{r4, r5, r6, lr}
 8001f00:	1e4d      	subs	r5, r1, #1
 8001f02:	4355      	muls	r5, r2
 8001f04:	460e      	mov	r6, r1
 8001f06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001f0a:	f000 f993 	bl	8002234 <_malloc_r>
 8001f0e:	4604      	mov	r4, r0
 8001f10:	b140      	cbz	r0, 8001f24 <__sfmoreglue+0x28>
 8001f12:	2100      	movs	r1, #0
 8001f14:	e9c0 1600 	strd	r1, r6, [r0]
 8001f18:	300c      	adds	r0, #12
 8001f1a:	60a0      	str	r0, [r4, #8]
 8001f1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001f20:	f7ff fdc6 	bl	8001ab0 <memset>
 8001f24:	4620      	mov	r0, r4
 8001f26:	bd70      	pop	{r4, r5, r6, pc}

08001f28 <__sfp_lock_acquire>:
 8001f28:	4801      	ldr	r0, [pc, #4]	; (8001f30 <__sfp_lock_acquire+0x8>)
 8001f2a:	f000 b8b3 	b.w	8002094 <__retarget_lock_acquire_recursive>
 8001f2e:	bf00      	nop
 8001f30:	2000030d 	.word	0x2000030d

08001f34 <__sfp_lock_release>:
 8001f34:	4801      	ldr	r0, [pc, #4]	; (8001f3c <__sfp_lock_release+0x8>)
 8001f36:	f000 b8ae 	b.w	8002096 <__retarget_lock_release_recursive>
 8001f3a:	bf00      	nop
 8001f3c:	2000030d 	.word	0x2000030d

08001f40 <__sinit_lock_acquire>:
 8001f40:	4801      	ldr	r0, [pc, #4]	; (8001f48 <__sinit_lock_acquire+0x8>)
 8001f42:	f000 b8a7 	b.w	8002094 <__retarget_lock_acquire_recursive>
 8001f46:	bf00      	nop
 8001f48:	2000030e 	.word	0x2000030e

08001f4c <__sinit_lock_release>:
 8001f4c:	4801      	ldr	r0, [pc, #4]	; (8001f54 <__sinit_lock_release+0x8>)
 8001f4e:	f000 b8a2 	b.w	8002096 <__retarget_lock_release_recursive>
 8001f52:	bf00      	nop
 8001f54:	2000030e 	.word	0x2000030e

08001f58 <__sinit>:
 8001f58:	b510      	push	{r4, lr}
 8001f5a:	4604      	mov	r4, r0
 8001f5c:	f7ff fff0 	bl	8001f40 <__sinit_lock_acquire>
 8001f60:	69a3      	ldr	r3, [r4, #24]
 8001f62:	b11b      	cbz	r3, 8001f6c <__sinit+0x14>
 8001f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f68:	f7ff bff0 	b.w	8001f4c <__sinit_lock_release>
 8001f6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001f70:	6523      	str	r3, [r4, #80]	; 0x50
 8001f72:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <__sinit+0x68>)
 8001f74:	4a13      	ldr	r2, [pc, #76]	; (8001fc4 <__sinit+0x6c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	62a2      	str	r2, [r4, #40]	; 0x28
 8001f7a:	42a3      	cmp	r3, r4
 8001f7c:	bf08      	it	eq
 8001f7e:	2301      	moveq	r3, #1
 8001f80:	4620      	mov	r0, r4
 8001f82:	bf08      	it	eq
 8001f84:	61a3      	streq	r3, [r4, #24]
 8001f86:	f000 f81f 	bl	8001fc8 <__sfp>
 8001f8a:	6060      	str	r0, [r4, #4]
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	f000 f81b 	bl	8001fc8 <__sfp>
 8001f92:	60a0      	str	r0, [r4, #8]
 8001f94:	4620      	mov	r0, r4
 8001f96:	f000 f817 	bl	8001fc8 <__sfp>
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2104      	movs	r1, #4
 8001f9e:	60e0      	str	r0, [r4, #12]
 8001fa0:	6860      	ldr	r0, [r4, #4]
 8001fa2:	f7ff ff81 	bl	8001ea8 <std>
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	2109      	movs	r1, #9
 8001faa:	68a0      	ldr	r0, [r4, #8]
 8001fac:	f7ff ff7c 	bl	8001ea8 <std>
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	2112      	movs	r1, #18
 8001fb4:	68e0      	ldr	r0, [r4, #12]
 8001fb6:	f7ff ff77 	bl	8001ea8 <std>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	61a3      	str	r3, [r4, #24]
 8001fbe:	e7d1      	b.n	8001f64 <__sinit+0xc>
 8001fc0:	080024fc 	.word	0x080024fc
 8001fc4:	08001ef1 	.word	0x08001ef1

08001fc8 <__sfp>:
 8001fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fca:	4607      	mov	r7, r0
 8001fcc:	f7ff ffac 	bl	8001f28 <__sfp_lock_acquire>
 8001fd0:	4b1e      	ldr	r3, [pc, #120]	; (800204c <__sfp+0x84>)
 8001fd2:	681e      	ldr	r6, [r3, #0]
 8001fd4:	69b3      	ldr	r3, [r6, #24]
 8001fd6:	b913      	cbnz	r3, 8001fde <__sfp+0x16>
 8001fd8:	4630      	mov	r0, r6
 8001fda:	f7ff ffbd 	bl	8001f58 <__sinit>
 8001fde:	3648      	adds	r6, #72	; 0x48
 8001fe0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	d503      	bpl.n	8001ff0 <__sfp+0x28>
 8001fe8:	6833      	ldr	r3, [r6, #0]
 8001fea:	b30b      	cbz	r3, 8002030 <__sfp+0x68>
 8001fec:	6836      	ldr	r6, [r6, #0]
 8001fee:	e7f7      	b.n	8001fe0 <__sfp+0x18>
 8001ff0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001ff4:	b9d5      	cbnz	r5, 800202c <__sfp+0x64>
 8001ff6:	4b16      	ldr	r3, [pc, #88]	; (8002050 <__sfp+0x88>)
 8001ff8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001ffc:	60e3      	str	r3, [r4, #12]
 8001ffe:	6665      	str	r5, [r4, #100]	; 0x64
 8002000:	f000 f847 	bl	8002092 <__retarget_lock_init_recursive>
 8002004:	f7ff ff96 	bl	8001f34 <__sfp_lock_release>
 8002008:	2208      	movs	r2, #8
 800200a:	4629      	mov	r1, r5
 800200c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002010:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002014:	6025      	str	r5, [r4, #0]
 8002016:	61a5      	str	r5, [r4, #24]
 8002018:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800201c:	f7ff fd48 	bl	8001ab0 <memset>
 8002020:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002024:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002028:	4620      	mov	r0, r4
 800202a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800202c:	3468      	adds	r4, #104	; 0x68
 800202e:	e7d9      	b.n	8001fe4 <__sfp+0x1c>
 8002030:	2104      	movs	r1, #4
 8002032:	4638      	mov	r0, r7
 8002034:	f7ff ff62 	bl	8001efc <__sfmoreglue>
 8002038:	4604      	mov	r4, r0
 800203a:	6030      	str	r0, [r6, #0]
 800203c:	2800      	cmp	r0, #0
 800203e:	d1d5      	bne.n	8001fec <__sfp+0x24>
 8002040:	f7ff ff78 	bl	8001f34 <__sfp_lock_release>
 8002044:	230c      	movs	r3, #12
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	e7ee      	b.n	8002028 <__sfp+0x60>
 800204a:	bf00      	nop
 800204c:	080024fc 	.word	0x080024fc
 8002050:	ffff0001 	.word	0xffff0001

08002054 <_fwalk_reent>:
 8002054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002058:	4606      	mov	r6, r0
 800205a:	4688      	mov	r8, r1
 800205c:	2700      	movs	r7, #0
 800205e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002062:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002066:	f1b9 0901 	subs.w	r9, r9, #1
 800206a:	d505      	bpl.n	8002078 <_fwalk_reent+0x24>
 800206c:	6824      	ldr	r4, [r4, #0]
 800206e:	2c00      	cmp	r4, #0
 8002070:	d1f7      	bne.n	8002062 <_fwalk_reent+0xe>
 8002072:	4638      	mov	r0, r7
 8002074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002078:	89ab      	ldrh	r3, [r5, #12]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d907      	bls.n	800208e <_fwalk_reent+0x3a>
 800207e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002082:	3301      	adds	r3, #1
 8002084:	d003      	beq.n	800208e <_fwalk_reent+0x3a>
 8002086:	4629      	mov	r1, r5
 8002088:	4630      	mov	r0, r6
 800208a:	47c0      	blx	r8
 800208c:	4307      	orrs	r7, r0
 800208e:	3568      	adds	r5, #104	; 0x68
 8002090:	e7e9      	b.n	8002066 <_fwalk_reent+0x12>

08002092 <__retarget_lock_init_recursive>:
 8002092:	4770      	bx	lr

08002094 <__retarget_lock_acquire_recursive>:
 8002094:	4770      	bx	lr

08002096 <__retarget_lock_release_recursive>:
 8002096:	4770      	bx	lr

08002098 <__swhatbuf_r>:
 8002098:	b570      	push	{r4, r5, r6, lr}
 800209a:	460e      	mov	r6, r1
 800209c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020a0:	4614      	mov	r4, r2
 80020a2:	2900      	cmp	r1, #0
 80020a4:	461d      	mov	r5, r3
 80020a6:	b096      	sub	sp, #88	; 0x58
 80020a8:	da08      	bge.n	80020bc <__swhatbuf_r+0x24>
 80020aa:	2200      	movs	r2, #0
 80020ac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80020b0:	602a      	str	r2, [r5, #0]
 80020b2:	061a      	lsls	r2, r3, #24
 80020b4:	d410      	bmi.n	80020d8 <__swhatbuf_r+0x40>
 80020b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ba:	e00e      	b.n	80020da <__swhatbuf_r+0x42>
 80020bc:	466a      	mov	r2, sp
 80020be:	f000 f9a3 	bl	8002408 <_fstat_r>
 80020c2:	2800      	cmp	r0, #0
 80020c4:	dbf1      	blt.n	80020aa <__swhatbuf_r+0x12>
 80020c6:	9a01      	ldr	r2, [sp, #4]
 80020c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80020cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80020d0:	425a      	negs	r2, r3
 80020d2:	415a      	adcs	r2, r3
 80020d4:	602a      	str	r2, [r5, #0]
 80020d6:	e7ee      	b.n	80020b6 <__swhatbuf_r+0x1e>
 80020d8:	2340      	movs	r3, #64	; 0x40
 80020da:	2000      	movs	r0, #0
 80020dc:	6023      	str	r3, [r4, #0]
 80020de:	b016      	add	sp, #88	; 0x58
 80020e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080020e4 <__smakebuf_r>:
 80020e4:	898b      	ldrh	r3, [r1, #12]
 80020e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80020e8:	079d      	lsls	r5, r3, #30
 80020ea:	4606      	mov	r6, r0
 80020ec:	460c      	mov	r4, r1
 80020ee:	d507      	bpl.n	8002100 <__smakebuf_r+0x1c>
 80020f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80020f4:	6023      	str	r3, [r4, #0]
 80020f6:	6123      	str	r3, [r4, #16]
 80020f8:	2301      	movs	r3, #1
 80020fa:	6163      	str	r3, [r4, #20]
 80020fc:	b002      	add	sp, #8
 80020fe:	bd70      	pop	{r4, r5, r6, pc}
 8002100:	466a      	mov	r2, sp
 8002102:	ab01      	add	r3, sp, #4
 8002104:	f7ff ffc8 	bl	8002098 <__swhatbuf_r>
 8002108:	9900      	ldr	r1, [sp, #0]
 800210a:	4605      	mov	r5, r0
 800210c:	4630      	mov	r0, r6
 800210e:	f000 f891 	bl	8002234 <_malloc_r>
 8002112:	b948      	cbnz	r0, 8002128 <__smakebuf_r+0x44>
 8002114:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002118:	059a      	lsls	r2, r3, #22
 800211a:	d4ef      	bmi.n	80020fc <__smakebuf_r+0x18>
 800211c:	f023 0303 	bic.w	r3, r3, #3
 8002120:	f043 0302 	orr.w	r3, r3, #2
 8002124:	81a3      	strh	r3, [r4, #12]
 8002126:	e7e3      	b.n	80020f0 <__smakebuf_r+0xc>
 8002128:	4b0d      	ldr	r3, [pc, #52]	; (8002160 <__smakebuf_r+0x7c>)
 800212a:	62b3      	str	r3, [r6, #40]	; 0x28
 800212c:	89a3      	ldrh	r3, [r4, #12]
 800212e:	6020      	str	r0, [r4, #0]
 8002130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002134:	81a3      	strh	r3, [r4, #12]
 8002136:	9b00      	ldr	r3, [sp, #0]
 8002138:	6120      	str	r0, [r4, #16]
 800213a:	6163      	str	r3, [r4, #20]
 800213c:	9b01      	ldr	r3, [sp, #4]
 800213e:	b15b      	cbz	r3, 8002158 <__smakebuf_r+0x74>
 8002140:	4630      	mov	r0, r6
 8002142:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002146:	f000 f971 	bl	800242c <_isatty_r>
 800214a:	b128      	cbz	r0, 8002158 <__smakebuf_r+0x74>
 800214c:	89a3      	ldrh	r3, [r4, #12]
 800214e:	f023 0303 	bic.w	r3, r3, #3
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	81a3      	strh	r3, [r4, #12]
 8002158:	89a0      	ldrh	r0, [r4, #12]
 800215a:	4305      	orrs	r5, r0
 800215c:	81a5      	strh	r5, [r4, #12]
 800215e:	e7cd      	b.n	80020fc <__smakebuf_r+0x18>
 8002160:	08001ef1 	.word	0x08001ef1

08002164 <_free_r>:
 8002164:	b538      	push	{r3, r4, r5, lr}
 8002166:	4605      	mov	r5, r0
 8002168:	2900      	cmp	r1, #0
 800216a:	d040      	beq.n	80021ee <_free_r+0x8a>
 800216c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002170:	1f0c      	subs	r4, r1, #4
 8002172:	2b00      	cmp	r3, #0
 8002174:	bfb8      	it	lt
 8002176:	18e4      	addlt	r4, r4, r3
 8002178:	f000 f97a 	bl	8002470 <__malloc_lock>
 800217c:	4a1c      	ldr	r2, [pc, #112]	; (80021f0 <_free_r+0x8c>)
 800217e:	6813      	ldr	r3, [r2, #0]
 8002180:	b933      	cbnz	r3, 8002190 <_free_r+0x2c>
 8002182:	6063      	str	r3, [r4, #4]
 8002184:	6014      	str	r4, [r2, #0]
 8002186:	4628      	mov	r0, r5
 8002188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800218c:	f000 b976 	b.w	800247c <__malloc_unlock>
 8002190:	42a3      	cmp	r3, r4
 8002192:	d908      	bls.n	80021a6 <_free_r+0x42>
 8002194:	6820      	ldr	r0, [r4, #0]
 8002196:	1821      	adds	r1, r4, r0
 8002198:	428b      	cmp	r3, r1
 800219a:	bf01      	itttt	eq
 800219c:	6819      	ldreq	r1, [r3, #0]
 800219e:	685b      	ldreq	r3, [r3, #4]
 80021a0:	1809      	addeq	r1, r1, r0
 80021a2:	6021      	streq	r1, [r4, #0]
 80021a4:	e7ed      	b.n	8002182 <_free_r+0x1e>
 80021a6:	461a      	mov	r2, r3
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	b10b      	cbz	r3, 80021b0 <_free_r+0x4c>
 80021ac:	42a3      	cmp	r3, r4
 80021ae:	d9fa      	bls.n	80021a6 <_free_r+0x42>
 80021b0:	6811      	ldr	r1, [r2, #0]
 80021b2:	1850      	adds	r0, r2, r1
 80021b4:	42a0      	cmp	r0, r4
 80021b6:	d10b      	bne.n	80021d0 <_free_r+0x6c>
 80021b8:	6820      	ldr	r0, [r4, #0]
 80021ba:	4401      	add	r1, r0
 80021bc:	1850      	adds	r0, r2, r1
 80021be:	4283      	cmp	r3, r0
 80021c0:	6011      	str	r1, [r2, #0]
 80021c2:	d1e0      	bne.n	8002186 <_free_r+0x22>
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	4401      	add	r1, r0
 80021ca:	6011      	str	r1, [r2, #0]
 80021cc:	6053      	str	r3, [r2, #4]
 80021ce:	e7da      	b.n	8002186 <_free_r+0x22>
 80021d0:	d902      	bls.n	80021d8 <_free_r+0x74>
 80021d2:	230c      	movs	r3, #12
 80021d4:	602b      	str	r3, [r5, #0]
 80021d6:	e7d6      	b.n	8002186 <_free_r+0x22>
 80021d8:	6820      	ldr	r0, [r4, #0]
 80021da:	1821      	adds	r1, r4, r0
 80021dc:	428b      	cmp	r3, r1
 80021de:	bf01      	itttt	eq
 80021e0:	6819      	ldreq	r1, [r3, #0]
 80021e2:	685b      	ldreq	r3, [r3, #4]
 80021e4:	1809      	addeq	r1, r1, r0
 80021e6:	6021      	streq	r1, [r4, #0]
 80021e8:	6063      	str	r3, [r4, #4]
 80021ea:	6054      	str	r4, [r2, #4]
 80021ec:	e7cb      	b.n	8002186 <_free_r+0x22>
 80021ee:	bd38      	pop	{r3, r4, r5, pc}
 80021f0:	20000310 	.word	0x20000310

080021f4 <sbrk_aligned>:
 80021f4:	b570      	push	{r4, r5, r6, lr}
 80021f6:	4e0e      	ldr	r6, [pc, #56]	; (8002230 <sbrk_aligned+0x3c>)
 80021f8:	460c      	mov	r4, r1
 80021fa:	6831      	ldr	r1, [r6, #0]
 80021fc:	4605      	mov	r5, r0
 80021fe:	b911      	cbnz	r1, 8002206 <sbrk_aligned+0x12>
 8002200:	f000 f88c 	bl	800231c <_sbrk_r>
 8002204:	6030      	str	r0, [r6, #0]
 8002206:	4621      	mov	r1, r4
 8002208:	4628      	mov	r0, r5
 800220a:	f000 f887 	bl	800231c <_sbrk_r>
 800220e:	1c43      	adds	r3, r0, #1
 8002210:	d00a      	beq.n	8002228 <sbrk_aligned+0x34>
 8002212:	1cc4      	adds	r4, r0, #3
 8002214:	f024 0403 	bic.w	r4, r4, #3
 8002218:	42a0      	cmp	r0, r4
 800221a:	d007      	beq.n	800222c <sbrk_aligned+0x38>
 800221c:	1a21      	subs	r1, r4, r0
 800221e:	4628      	mov	r0, r5
 8002220:	f000 f87c 	bl	800231c <_sbrk_r>
 8002224:	3001      	adds	r0, #1
 8002226:	d101      	bne.n	800222c <sbrk_aligned+0x38>
 8002228:	f04f 34ff 	mov.w	r4, #4294967295
 800222c:	4620      	mov	r0, r4
 800222e:	bd70      	pop	{r4, r5, r6, pc}
 8002230:	20000314 	.word	0x20000314

08002234 <_malloc_r>:
 8002234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002238:	1ccd      	adds	r5, r1, #3
 800223a:	f025 0503 	bic.w	r5, r5, #3
 800223e:	3508      	adds	r5, #8
 8002240:	2d0c      	cmp	r5, #12
 8002242:	bf38      	it	cc
 8002244:	250c      	movcc	r5, #12
 8002246:	2d00      	cmp	r5, #0
 8002248:	4607      	mov	r7, r0
 800224a:	db01      	blt.n	8002250 <_malloc_r+0x1c>
 800224c:	42a9      	cmp	r1, r5
 800224e:	d905      	bls.n	800225c <_malloc_r+0x28>
 8002250:	230c      	movs	r3, #12
 8002252:	2600      	movs	r6, #0
 8002254:	603b      	str	r3, [r7, #0]
 8002256:	4630      	mov	r0, r6
 8002258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800225c:	4e2e      	ldr	r6, [pc, #184]	; (8002318 <_malloc_r+0xe4>)
 800225e:	f000 f907 	bl	8002470 <__malloc_lock>
 8002262:	6833      	ldr	r3, [r6, #0]
 8002264:	461c      	mov	r4, r3
 8002266:	bb34      	cbnz	r4, 80022b6 <_malloc_r+0x82>
 8002268:	4629      	mov	r1, r5
 800226a:	4638      	mov	r0, r7
 800226c:	f7ff ffc2 	bl	80021f4 <sbrk_aligned>
 8002270:	1c43      	adds	r3, r0, #1
 8002272:	4604      	mov	r4, r0
 8002274:	d14d      	bne.n	8002312 <_malloc_r+0xde>
 8002276:	6834      	ldr	r4, [r6, #0]
 8002278:	4626      	mov	r6, r4
 800227a:	2e00      	cmp	r6, #0
 800227c:	d140      	bne.n	8002300 <_malloc_r+0xcc>
 800227e:	6823      	ldr	r3, [r4, #0]
 8002280:	4631      	mov	r1, r6
 8002282:	4638      	mov	r0, r7
 8002284:	eb04 0803 	add.w	r8, r4, r3
 8002288:	f000 f848 	bl	800231c <_sbrk_r>
 800228c:	4580      	cmp	r8, r0
 800228e:	d13a      	bne.n	8002306 <_malloc_r+0xd2>
 8002290:	6821      	ldr	r1, [r4, #0]
 8002292:	3503      	adds	r5, #3
 8002294:	1a6d      	subs	r5, r5, r1
 8002296:	f025 0503 	bic.w	r5, r5, #3
 800229a:	3508      	adds	r5, #8
 800229c:	2d0c      	cmp	r5, #12
 800229e:	bf38      	it	cc
 80022a0:	250c      	movcc	r5, #12
 80022a2:	4638      	mov	r0, r7
 80022a4:	4629      	mov	r1, r5
 80022a6:	f7ff ffa5 	bl	80021f4 <sbrk_aligned>
 80022aa:	3001      	adds	r0, #1
 80022ac:	d02b      	beq.n	8002306 <_malloc_r+0xd2>
 80022ae:	6823      	ldr	r3, [r4, #0]
 80022b0:	442b      	add	r3, r5
 80022b2:	6023      	str	r3, [r4, #0]
 80022b4:	e00e      	b.n	80022d4 <_malloc_r+0xa0>
 80022b6:	6822      	ldr	r2, [r4, #0]
 80022b8:	1b52      	subs	r2, r2, r5
 80022ba:	d41e      	bmi.n	80022fa <_malloc_r+0xc6>
 80022bc:	2a0b      	cmp	r2, #11
 80022be:	d916      	bls.n	80022ee <_malloc_r+0xba>
 80022c0:	1961      	adds	r1, r4, r5
 80022c2:	42a3      	cmp	r3, r4
 80022c4:	6025      	str	r5, [r4, #0]
 80022c6:	bf18      	it	ne
 80022c8:	6059      	strne	r1, [r3, #4]
 80022ca:	6863      	ldr	r3, [r4, #4]
 80022cc:	bf08      	it	eq
 80022ce:	6031      	streq	r1, [r6, #0]
 80022d0:	5162      	str	r2, [r4, r5]
 80022d2:	604b      	str	r3, [r1, #4]
 80022d4:	4638      	mov	r0, r7
 80022d6:	f104 060b 	add.w	r6, r4, #11
 80022da:	f000 f8cf 	bl	800247c <__malloc_unlock>
 80022de:	f026 0607 	bic.w	r6, r6, #7
 80022e2:	1d23      	adds	r3, r4, #4
 80022e4:	1af2      	subs	r2, r6, r3
 80022e6:	d0b6      	beq.n	8002256 <_malloc_r+0x22>
 80022e8:	1b9b      	subs	r3, r3, r6
 80022ea:	50a3      	str	r3, [r4, r2]
 80022ec:	e7b3      	b.n	8002256 <_malloc_r+0x22>
 80022ee:	6862      	ldr	r2, [r4, #4]
 80022f0:	42a3      	cmp	r3, r4
 80022f2:	bf0c      	ite	eq
 80022f4:	6032      	streq	r2, [r6, #0]
 80022f6:	605a      	strne	r2, [r3, #4]
 80022f8:	e7ec      	b.n	80022d4 <_malloc_r+0xa0>
 80022fa:	4623      	mov	r3, r4
 80022fc:	6864      	ldr	r4, [r4, #4]
 80022fe:	e7b2      	b.n	8002266 <_malloc_r+0x32>
 8002300:	4634      	mov	r4, r6
 8002302:	6876      	ldr	r6, [r6, #4]
 8002304:	e7b9      	b.n	800227a <_malloc_r+0x46>
 8002306:	230c      	movs	r3, #12
 8002308:	4638      	mov	r0, r7
 800230a:	603b      	str	r3, [r7, #0]
 800230c:	f000 f8b6 	bl	800247c <__malloc_unlock>
 8002310:	e7a1      	b.n	8002256 <_malloc_r+0x22>
 8002312:	6025      	str	r5, [r4, #0]
 8002314:	e7de      	b.n	80022d4 <_malloc_r+0xa0>
 8002316:	bf00      	nop
 8002318:	20000310 	.word	0x20000310

0800231c <_sbrk_r>:
 800231c:	b538      	push	{r3, r4, r5, lr}
 800231e:	2300      	movs	r3, #0
 8002320:	4d05      	ldr	r5, [pc, #20]	; (8002338 <_sbrk_r+0x1c>)
 8002322:	4604      	mov	r4, r0
 8002324:	4608      	mov	r0, r1
 8002326:	602b      	str	r3, [r5, #0]
 8002328:	f7fe f894 	bl	8000454 <_sbrk>
 800232c:	1c43      	adds	r3, r0, #1
 800232e:	d102      	bne.n	8002336 <_sbrk_r+0x1a>
 8002330:	682b      	ldr	r3, [r5, #0]
 8002332:	b103      	cbz	r3, 8002336 <_sbrk_r+0x1a>
 8002334:	6023      	str	r3, [r4, #0]
 8002336:	bd38      	pop	{r3, r4, r5, pc}
 8002338:	20000318 	.word	0x20000318

0800233c <__sread>:
 800233c:	b510      	push	{r4, lr}
 800233e:	460c      	mov	r4, r1
 8002340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002344:	f000 f8a0 	bl	8002488 <_read_r>
 8002348:	2800      	cmp	r0, #0
 800234a:	bfab      	itete	ge
 800234c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800234e:	89a3      	ldrhlt	r3, [r4, #12]
 8002350:	181b      	addge	r3, r3, r0
 8002352:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002356:	bfac      	ite	ge
 8002358:	6563      	strge	r3, [r4, #84]	; 0x54
 800235a:	81a3      	strhlt	r3, [r4, #12]
 800235c:	bd10      	pop	{r4, pc}

0800235e <__swrite>:
 800235e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002362:	461f      	mov	r7, r3
 8002364:	898b      	ldrh	r3, [r1, #12]
 8002366:	4605      	mov	r5, r0
 8002368:	05db      	lsls	r3, r3, #23
 800236a:	460c      	mov	r4, r1
 800236c:	4616      	mov	r6, r2
 800236e:	d505      	bpl.n	800237c <__swrite+0x1e>
 8002370:	2302      	movs	r3, #2
 8002372:	2200      	movs	r2, #0
 8002374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002378:	f000 f868 	bl	800244c <_lseek_r>
 800237c:	89a3      	ldrh	r3, [r4, #12]
 800237e:	4632      	mov	r2, r6
 8002380:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002384:	81a3      	strh	r3, [r4, #12]
 8002386:	4628      	mov	r0, r5
 8002388:	463b      	mov	r3, r7
 800238a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800238e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002392:	f000 b817 	b.w	80023c4 <_write_r>

08002396 <__sseek>:
 8002396:	b510      	push	{r4, lr}
 8002398:	460c      	mov	r4, r1
 800239a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800239e:	f000 f855 	bl	800244c <_lseek_r>
 80023a2:	1c43      	adds	r3, r0, #1
 80023a4:	89a3      	ldrh	r3, [r4, #12]
 80023a6:	bf15      	itete	ne
 80023a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80023aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80023ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80023b2:	81a3      	strheq	r3, [r4, #12]
 80023b4:	bf18      	it	ne
 80023b6:	81a3      	strhne	r3, [r4, #12]
 80023b8:	bd10      	pop	{r4, pc}

080023ba <__sclose>:
 80023ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023be:	f000 b813 	b.w	80023e8 <_close_r>
	...

080023c4 <_write_r>:
 80023c4:	b538      	push	{r3, r4, r5, lr}
 80023c6:	4604      	mov	r4, r0
 80023c8:	4608      	mov	r0, r1
 80023ca:	4611      	mov	r1, r2
 80023cc:	2200      	movs	r2, #0
 80023ce:	4d05      	ldr	r5, [pc, #20]	; (80023e4 <_write_r+0x20>)
 80023d0:	602a      	str	r2, [r5, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	f7fd ff58 	bl	8000288 <_write>
 80023d8:	1c43      	adds	r3, r0, #1
 80023da:	d102      	bne.n	80023e2 <_write_r+0x1e>
 80023dc:	682b      	ldr	r3, [r5, #0]
 80023de:	b103      	cbz	r3, 80023e2 <_write_r+0x1e>
 80023e0:	6023      	str	r3, [r4, #0]
 80023e2:	bd38      	pop	{r3, r4, r5, pc}
 80023e4:	20000318 	.word	0x20000318

080023e8 <_close_r>:
 80023e8:	b538      	push	{r3, r4, r5, lr}
 80023ea:	2300      	movs	r3, #0
 80023ec:	4d05      	ldr	r5, [pc, #20]	; (8002404 <_close_r+0x1c>)
 80023ee:	4604      	mov	r4, r0
 80023f0:	4608      	mov	r0, r1
 80023f2:	602b      	str	r3, [r5, #0]
 80023f4:	f7fd fffe 	bl	80003f4 <_close>
 80023f8:	1c43      	adds	r3, r0, #1
 80023fa:	d102      	bne.n	8002402 <_close_r+0x1a>
 80023fc:	682b      	ldr	r3, [r5, #0]
 80023fe:	b103      	cbz	r3, 8002402 <_close_r+0x1a>
 8002400:	6023      	str	r3, [r4, #0]
 8002402:	bd38      	pop	{r3, r4, r5, pc}
 8002404:	20000318 	.word	0x20000318

08002408 <_fstat_r>:
 8002408:	b538      	push	{r3, r4, r5, lr}
 800240a:	2300      	movs	r3, #0
 800240c:	4d06      	ldr	r5, [pc, #24]	; (8002428 <_fstat_r+0x20>)
 800240e:	4604      	mov	r4, r0
 8002410:	4608      	mov	r0, r1
 8002412:	4611      	mov	r1, r2
 8002414:	602b      	str	r3, [r5, #0]
 8002416:	f7fd fff8 	bl	800040a <_fstat>
 800241a:	1c43      	adds	r3, r0, #1
 800241c:	d102      	bne.n	8002424 <_fstat_r+0x1c>
 800241e:	682b      	ldr	r3, [r5, #0]
 8002420:	b103      	cbz	r3, 8002424 <_fstat_r+0x1c>
 8002422:	6023      	str	r3, [r4, #0]
 8002424:	bd38      	pop	{r3, r4, r5, pc}
 8002426:	bf00      	nop
 8002428:	20000318 	.word	0x20000318

0800242c <_isatty_r>:
 800242c:	b538      	push	{r3, r4, r5, lr}
 800242e:	2300      	movs	r3, #0
 8002430:	4d05      	ldr	r5, [pc, #20]	; (8002448 <_isatty_r+0x1c>)
 8002432:	4604      	mov	r4, r0
 8002434:	4608      	mov	r0, r1
 8002436:	602b      	str	r3, [r5, #0]
 8002438:	f7fd fff6 	bl	8000428 <_isatty>
 800243c:	1c43      	adds	r3, r0, #1
 800243e:	d102      	bne.n	8002446 <_isatty_r+0x1a>
 8002440:	682b      	ldr	r3, [r5, #0]
 8002442:	b103      	cbz	r3, 8002446 <_isatty_r+0x1a>
 8002444:	6023      	str	r3, [r4, #0]
 8002446:	bd38      	pop	{r3, r4, r5, pc}
 8002448:	20000318 	.word	0x20000318

0800244c <_lseek_r>:
 800244c:	b538      	push	{r3, r4, r5, lr}
 800244e:	4604      	mov	r4, r0
 8002450:	4608      	mov	r0, r1
 8002452:	4611      	mov	r1, r2
 8002454:	2200      	movs	r2, #0
 8002456:	4d05      	ldr	r5, [pc, #20]	; (800246c <_lseek_r+0x20>)
 8002458:	602a      	str	r2, [r5, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	f7fd ffee 	bl	800043c <_lseek>
 8002460:	1c43      	adds	r3, r0, #1
 8002462:	d102      	bne.n	800246a <_lseek_r+0x1e>
 8002464:	682b      	ldr	r3, [r5, #0]
 8002466:	b103      	cbz	r3, 800246a <_lseek_r+0x1e>
 8002468:	6023      	str	r3, [r4, #0]
 800246a:	bd38      	pop	{r3, r4, r5, pc}
 800246c:	20000318 	.word	0x20000318

08002470 <__malloc_lock>:
 8002470:	4801      	ldr	r0, [pc, #4]	; (8002478 <__malloc_lock+0x8>)
 8002472:	f7ff be0f 	b.w	8002094 <__retarget_lock_acquire_recursive>
 8002476:	bf00      	nop
 8002478:	2000030c 	.word	0x2000030c

0800247c <__malloc_unlock>:
 800247c:	4801      	ldr	r0, [pc, #4]	; (8002484 <__malloc_unlock+0x8>)
 800247e:	f7ff be0a 	b.w	8002096 <__retarget_lock_release_recursive>
 8002482:	bf00      	nop
 8002484:	2000030c 	.word	0x2000030c

08002488 <_read_r>:
 8002488:	b538      	push	{r3, r4, r5, lr}
 800248a:	4604      	mov	r4, r0
 800248c:	4608      	mov	r0, r1
 800248e:	4611      	mov	r1, r2
 8002490:	2200      	movs	r2, #0
 8002492:	4d05      	ldr	r5, [pc, #20]	; (80024a8 <_read_r+0x20>)
 8002494:	602a      	str	r2, [r5, #0]
 8002496:	461a      	mov	r2, r3
 8002498:	f7fd ff8f 	bl	80003ba <_read>
 800249c:	1c43      	adds	r3, r0, #1
 800249e:	d102      	bne.n	80024a6 <_read_r+0x1e>
 80024a0:	682b      	ldr	r3, [r5, #0]
 80024a2:	b103      	cbz	r3, 80024a6 <_read_r+0x1e>
 80024a4:	6023      	str	r3, [r4, #0]
 80024a6:	bd38      	pop	{r3, r4, r5, pc}
 80024a8:	20000318 	.word	0x20000318

080024ac <_init>:
 80024ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ae:	bf00      	nop
 80024b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024b2:	bc08      	pop	{r3}
 80024b4:	469e      	mov	lr, r3
 80024b6:	4770      	bx	lr

080024b8 <_fini>:
 80024b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ba:	bf00      	nop
 80024bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024be:	bc08      	pop	{r3}
 80024c0:	469e      	mov	lr, r3
 80024c2:	4770      	bx	lr
