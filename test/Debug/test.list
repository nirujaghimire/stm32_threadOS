
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080027f4  080027f4  000127f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028e0  080028e0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080028e0  080028e0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028e0  080028e0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028e0  080028e0  000128e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028e4  080028e4  000128e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080028e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000070  08002958  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08002958  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000071c6  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015ea  00000000  00000000  0002725f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000718  00000000  00000000  00028850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000670  00000000  00000000  00028f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f7f  00000000  00000000  000295d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000091e8  00000000  00000000  00041557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083619  00000000  00000000  0004a73f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cdd58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022d8  00000000  00000000  000cdda8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080027dc 	.word	0x080027dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080027dc 	.word	0x080027dc

0800014c <printSVCNumber>:
 *      Author: peter
 */

#include "main.h"

static void printSVCNumber(uint8_t svc, uint32_t lr) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	6039      	str	r1, [r7, #0]
 8000156:	71fb      	strb	r3, [r7, #7]
	printf("SVC num : %d (%s)\n", svc, lr == 0xfffffff9 ? "MSP" : "PSP");
 8000158:	79f9      	ldrb	r1, [r7, #7]
 800015a:	683b      	ldr	r3, [r7, #0]
 800015c:	f113 0f07 	cmn.w	r3, #7
 8000160:	d101      	bne.n	8000166 <printSVCNumber+0x1a>
 8000162:	4b05      	ldr	r3, [pc, #20]	; (8000178 <printSVCNumber+0x2c>)
 8000164:	e000      	b.n	8000168 <printSVCNumber+0x1c>
 8000166:	4b05      	ldr	r3, [pc, #20]	; (800017c <printSVCNumber+0x30>)
 8000168:	461a      	mov	r2, r3
 800016a:	4805      	ldr	r0, [pc, #20]	; (8000180 <printSVCNumber+0x34>)
 800016c:	f001 fb2c 	bl	80017c8 <iprintf>
}
 8000170:	bf00      	nop
 8000172:	3708      	adds	r7, #8
 8000174:	46bd      	mov	sp, r7
 8000176:	bd80      	pop	{r7, pc}
 8000178:	080027f4 	.word	0x080027f4
 800017c:	080027f8 	.word	0x080027f8
 8000180:	080027fc 	.word	0x080027fc

08000184 <SVC_test_SVC>:

void SVC_test_SVC() {
 8000184:	b580      	push	{r7, lr}
 8000186:	b084      	sub	sp, #16
 8000188:	af00      	add	r7, sp, #0
	uint32_t pc;
	uint8_t svc;
	uint32_t lr;

	//This function SP
	__asm volatile("MRS R0, MSP");
 800018a:	f3ef 8008 	mrs	r0, MSP
	__asm volatile("MOV %0, R0":"=r"(sp):);
 800018e:	4603      	mov	r3, r0
 8000190:	60fb      	str	r3, [r7, #12]

	//Caller function SP (SVC Handler)
	sp += 16; //Reversing : sub sp, #16
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	3310      	adds	r3, #16
 8000196:	60fb      	str	r3, [r7, #12]
	sp += 8; // Reversing : push {r7, lr}
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	3308      	adds	r3, #8
 800019c:	60fb      	str	r3, [r7, #12]
	lr = ((uint32_t*) sp)[1];
 800019e:	68fb      	ldr	r3, [r7, #12]
 80001a0:	3304      	adds	r3, #4
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	60bb      	str	r3, [r7, #8]

	//Caller's caller function SP (SVC handler's SP before Prologue)
	sp += 8; // Reversing : push {r7, lr}
 80001a6:	68fb      	ldr	r3, [r7, #12]
 80001a8:	3308      	adds	r3, #8
 80001aa:	60fb      	str	r3, [r7, #12]

	//Program counter of SVC call
	if (lr == 0xfffffffd) { //process stack
 80001ac:	68bb      	ldr	r3, [r7, #8]
 80001ae:	f113 0f03 	cmn.w	r3, #3
 80001b2:	d103      	bne.n	80001bc <SVC_test_SVC+0x38>
		__asm volatile("MRS R0, PSP");
 80001b4:	f3ef 8009 	mrs	r0, PSP
		__asm volatile("MOV %0, R0":"=r"(sp):);
 80001b8:	4603      	mov	r3, r0
 80001ba:	60fb      	str	r3, [r7, #12]
	}
	pc = ((uint32_t*) sp)[6] - 2;
 80001bc:	68fb      	ldr	r3, [r7, #12]
 80001be:	3318      	adds	r3, #24
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	3b02      	subs	r3, #2
 80001c4:	607b      	str	r3, [r7, #4]

	//SVC number
	svc = ((uint16_t*) pc)[0];
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	881b      	ldrh	r3, [r3, #0]
 80001ca:	70fb      	strb	r3, [r7, #3]
	printSVCNumber(svc, lr);
 80001cc:	78fb      	ldrb	r3, [r7, #3]
 80001ce:	68b9      	ldr	r1, [r7, #8]
 80001d0:	4618      	mov	r0, r3
 80001d2:	f7ff ffbb 	bl	800014c <printSVCNumber>

}
 80001d6:	bf00      	nop
 80001d8:	3710      	adds	r7, #16
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
	...

080001e0 <SVC_test_run>:

static uint32_t stack[32];

void SVC_test_run() {
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0
	//SVC call using main stack
	__asm volatile("SVC #3");
 80001e4:	df03      	svc	3

	//change stack to process stack
	__asm volatile("MOV R0, %0"::"r"(&stack));
 80001e6:	4b06      	ldr	r3, [pc, #24]	; (8000200 <SVC_test_run+0x20>)
 80001e8:	4618      	mov	r0, r3
	__asm volatile("MSR PSP, R0");
 80001ea:	f380 8809 	msr	PSP, r0
	__asm volatile("MRS R1, CONTROL");
 80001ee:	f3ef 8114 	mrs	r1, CONTROL
	__asm volatile("ORR R1, R0, #2");
 80001f2:	f040 0102 	orr.w	r1, r0, #2
	__asm volatile("MSR CONTROL, R1");
 80001f6:	f381 8814 	msr	CONTROL, r1

	//SVC call using process stack
	__asm volatile("SVC #9");
 80001fa:	df09      	svc	9
	while(1){
 80001fc:	e7fe      	b.n	80001fc <SVC_test_run+0x1c>
 80001fe:	bf00      	nop
 8000200:	2000008c 	.word	0x2000008c

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000208:	f000 f9fa 	bl	8000600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020c:	f000 f807 	bl	800021e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000210:	f000 f874 	bl	80002fc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000214:	f000 f848 	bl	80002a8 <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  extern void run();
  run();
 8000218:	f000 f9c6 	bl	80005a8 <run>
  while (1)
 800021c:	e7fe      	b.n	800021c <main+0x18>

0800021e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800021e:	b580      	push	{r7, lr}
 8000220:	b090      	sub	sp, #64	; 0x40
 8000222:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000224:	f107 0318 	add.w	r3, r7, #24
 8000228:	2228      	movs	r2, #40	; 0x28
 800022a:	2100      	movs	r1, #0
 800022c:	4618      	mov	r0, r3
 800022e:	f001 fac3 	bl	80017b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	2200      	movs	r2, #0
 8000236:	601a      	str	r2, [r3, #0]
 8000238:	605a      	str	r2, [r3, #4]
 800023a:	609a      	str	r2, [r3, #8]
 800023c:	60da      	str	r2, [r3, #12]
 800023e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000240:	2301      	movs	r3, #1
 8000242:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000244:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000248:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024e:	2301      	movs	r3, #1
 8000250:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000252:	2302      	movs	r3, #2
 8000254:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800025a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800025c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000260:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000262:	f107 0318 	add.w	r3, r7, #24
 8000266:	4618      	mov	r0, r3
 8000268:	f000 fc94 	bl	8000b94 <HAL_RCC_OscConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000272:	f000 f87b 	bl	800036c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000276:	230f      	movs	r3, #15
 8000278:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027a:	2302      	movs	r3, #2
 800027c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000286:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2102      	movs	r1, #2
 8000290:	4618      	mov	r0, r3
 8000292:	f000 ff01 	bl	8001098 <HAL_RCC_ClockConfig>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800029c:	f000 f866 	bl	800036c <Error_Handler>
  }
}
 80002a0:	bf00      	nop
 80002a2:	3740      	adds	r7, #64	; 0x40
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002ac:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <MX_USART1_UART_Init+0x4c>)
 80002ae:	4a12      	ldr	r2, [pc, #72]	; (80002f8 <MX_USART1_UART_Init+0x50>)
 80002b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002b2:	4b10      	ldr	r3, [pc, #64]	; (80002f4 <MX_USART1_UART_Init+0x4c>)
 80002b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002ba:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <MX_USART1_UART_Init+0x4c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002c0:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <MX_USART1_UART_Init+0x4c>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002c6:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <MX_USART1_UART_Init+0x4c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002cc:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <MX_USART1_UART_Init+0x4c>)
 80002ce:	220c      	movs	r2, #12
 80002d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002d2:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <MX_USART1_UART_Init+0x4c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <MX_USART1_UART_Init+0x4c>)
 80002da:	2200      	movs	r2, #0
 80002dc:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80002de:	4805      	ldr	r0, [pc, #20]	; (80002f4 <MX_USART1_UART_Init+0x4c>)
 80002e0:	f001 f868 	bl	80013b4 <HAL_HalfDuplex_Init>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002ea:	f000 f83f 	bl	800036c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	2000010c 	.word	0x2000010c
 80002f8:	40013800 	.word	0x40013800

080002fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <MX_GPIO_Init+0x40>)
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	4a0d      	ldr	r2, [pc, #52]	; (800033c <MX_GPIO_Init+0x40>)
 8000308:	f043 0320 	orr.w	r3, r3, #32
 800030c:	6193      	str	r3, [r2, #24]
 800030e:	4b0b      	ldr	r3, [pc, #44]	; (800033c <MX_GPIO_Init+0x40>)
 8000310:	699b      	ldr	r3, [r3, #24]
 8000312:	f003 0320 	and.w	r3, r3, #32
 8000316:	607b      	str	r3, [r7, #4]
 8000318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800031a:	4b08      	ldr	r3, [pc, #32]	; (800033c <MX_GPIO_Init+0x40>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	4a07      	ldr	r2, [pc, #28]	; (800033c <MX_GPIO_Init+0x40>)
 8000320:	f043 0304 	orr.w	r3, r3, #4
 8000324:	6193      	str	r3, [r2, #24]
 8000326:	4b05      	ldr	r3, [pc, #20]	; (800033c <MX_GPIO_Init+0x40>)
 8000328:	699b      	ldr	r3, [r3, #24]
 800032a:	f003 0304 	and.w	r3, r3, #4
 800032e:	603b      	str	r3, [r7, #0]
 8000330:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000332:	bf00      	nop
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr
 800033c:	40021000 	.word	0x40021000

08000340 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0
 8000346:	60f8      	str	r0, [r7, #12]
 8000348:	60b9      	str	r1, [r7, #8]
 800034a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	b29a      	uxth	r2, r3
 8000350:	f04f 33ff 	mov.w	r3, #4294967295
 8000354:	68b9      	ldr	r1, [r7, #8]
 8000356:	4804      	ldr	r0, [pc, #16]	; (8000368 <_write+0x28>)
 8000358:	f001 f884 	bl	8001464 <HAL_UART_Transmit>
	return len;
 800035c:	687b      	ldr	r3, [r7, #4]
}
 800035e:	4618      	mov	r0, r3
 8000360:	3710      	adds	r7, #16
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	2000010c 	.word	0x2000010c

0800036c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000370:	b672      	cpsid	i
}
 8000372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000374:	e7fe      	b.n	8000374 <Error_Handler+0x8>
	...

08000378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <HAL_MspInit+0x40>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	4a0d      	ldr	r2, [pc, #52]	; (80003b8 <HAL_MspInit+0x40>)
 8000384:	f043 0301 	orr.w	r3, r3, #1
 8000388:	6193      	str	r3, [r2, #24]
 800038a:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <HAL_MspInit+0x40>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	f003 0301 	and.w	r3, r3, #1
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <HAL_MspInit+0x40>)
 8000398:	69db      	ldr	r3, [r3, #28]
 800039a:	4a07      	ldr	r2, [pc, #28]	; (80003b8 <HAL_MspInit+0x40>)
 800039c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003a0:	61d3      	str	r3, [r2, #28]
 80003a2:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <HAL_MspInit+0x40>)
 80003a4:	69db      	ldr	r3, [r3, #28]
 80003a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003aa:	603b      	str	r3, [r7, #0]
 80003ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ae:	bf00      	nop
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr
 80003b8:	40021000 	.word	0x40021000

080003bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b088      	sub	sp, #32
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c4:	f107 0310 	add.w	r3, r7, #16
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
 80003cc:	605a      	str	r2, [r3, #4]
 80003ce:	609a      	str	r2, [r3, #8]
 80003d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4a16      	ldr	r2, [pc, #88]	; (8000430 <HAL_UART_MspInit+0x74>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d124      	bne.n	8000426 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80003dc:	4b15      	ldr	r3, [pc, #84]	; (8000434 <HAL_UART_MspInit+0x78>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a14      	ldr	r2, [pc, #80]	; (8000434 <HAL_UART_MspInit+0x78>)
 80003e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003e6:	6193      	str	r3, [r2, #24]
 80003e8:	4b12      	ldr	r3, [pc, #72]	; (8000434 <HAL_UART_MspInit+0x78>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003f0:	60fb      	str	r3, [r7, #12]
 80003f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f4:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <HAL_UART_MspInit+0x78>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a0e      	ldr	r2, [pc, #56]	; (8000434 <HAL_UART_MspInit+0x78>)
 80003fa:	f043 0304 	orr.w	r3, r3, #4
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <HAL_UART_MspInit+0x78>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0304 	and.w	r3, r3, #4
 8000408:	60bb      	str	r3, [r7, #8]
 800040a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800040c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000410:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000412:	2312      	movs	r3, #18
 8000414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000416:	2303      	movs	r3, #3
 8000418:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800041a:	f107 0310 	add.w	r3, r7, #16
 800041e:	4619      	mov	r1, r3
 8000420:	4805      	ldr	r0, [pc, #20]	; (8000438 <HAL_UART_MspInit+0x7c>)
 8000422:	f000 fa33 	bl	800088c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000426:	bf00      	nop
 8000428:	3720      	adds	r7, #32
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40013800 	.word	0x40013800
 8000434:	40021000 	.word	0x40021000
 8000438:	40010800 	.word	0x40010800

0800043c <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000440:	e7fe      	b.n	8000440 <NMI_Handler+0x4>
	...

08000444 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */
	printf("Hard Fault\n");
 8000448:	4801      	ldr	r0, [pc, #4]	; (8000450 <HardFault_Handler+0xc>)
 800044a:	f001 fa43 	bl	80018d4 <puts>

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 800044e:	e7fe      	b.n	800044e <HardFault_Handler+0xa>
 8000450:	08002810 	.word	0x08002810

08000454 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8000458:	e7fe      	b.n	8000458 <MemManage_Handler+0x4>

0800045a <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 800045a:	b480      	push	{r7}
 800045c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 800045e:	e7fe      	b.n	800045e <BusFault_Handler+0x4>

08000460 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8000464:	e7fe      	b.n	8000464 <UsageFault_Handler+0x4>

08000466 <DebugMon_Handler>:


/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800046a:	bf00      	nop
 800046c:	46bd      	mov	sp, r7
 800046e:	bc80      	pop	{r7}
 8000470:	4770      	bx	lr

08000472 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000472:	b580      	push	{r7, lr}
 8000474:	b086      	sub	sp, #24
 8000476:	af00      	add	r7, sp, #0
 8000478:	60f8      	str	r0, [r7, #12]
 800047a:	60b9      	str	r1, [r7, #8]
 800047c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800047e:	2300      	movs	r3, #0
 8000480:	617b      	str	r3, [r7, #20]
 8000482:	e00a      	b.n	800049a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000484:	f3af 8000 	nop.w
 8000488:	4601      	mov	r1, r0
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	1c5a      	adds	r2, r3, #1
 800048e:	60ba      	str	r2, [r7, #8]
 8000490:	b2ca      	uxtb	r2, r1
 8000492:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	3301      	adds	r3, #1
 8000498:	617b      	str	r3, [r7, #20]
 800049a:	697a      	ldr	r2, [r7, #20]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	429a      	cmp	r2, r3
 80004a0:	dbf0      	blt.n	8000484 <_read+0x12>
  }

  return len;
 80004a2:	687b      	ldr	r3, [r7, #4]
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	3718      	adds	r7, #24
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}

080004ac <_close>:
  }
  return len;
}

int _close(int file)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	bc80      	pop	{r7}
 80004c0:	4770      	bx	lr

080004c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004c2:	b480      	push	{r7}
 80004c4:	b083      	sub	sp, #12
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
 80004ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004d2:	605a      	str	r2, [r3, #4]
  return 0;
 80004d4:	2300      	movs	r3, #0
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr

080004e0 <_isatty>:

int _isatty(int file)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004e8:	2301      	movs	r3, #1
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr

080004f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr

0800050c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000514:	4a14      	ldr	r2, [pc, #80]	; (8000568 <_sbrk+0x5c>)
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <_sbrk+0x60>)
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000520:	4b13      	ldr	r3, [pc, #76]	; (8000570 <_sbrk+0x64>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d102      	bne.n	800052e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000528:	4b11      	ldr	r3, [pc, #68]	; (8000570 <_sbrk+0x64>)
 800052a:	4a12      	ldr	r2, [pc, #72]	; (8000574 <_sbrk+0x68>)
 800052c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800052e:	4b10      	ldr	r3, [pc, #64]	; (8000570 <_sbrk+0x64>)
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4413      	add	r3, r2
 8000536:	693a      	ldr	r2, [r7, #16]
 8000538:	429a      	cmp	r2, r3
 800053a:	d207      	bcs.n	800054c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800053c:	f001 f912 	bl	8001764 <__errno>
 8000540:	4603      	mov	r3, r0
 8000542:	220c      	movs	r2, #12
 8000544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000546:	f04f 33ff 	mov.w	r3, #4294967295
 800054a:	e009      	b.n	8000560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800054c:	4b08      	ldr	r3, [pc, #32]	; (8000570 <_sbrk+0x64>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <_sbrk+0x64>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4413      	add	r3, r2
 800055a:	4a05      	ldr	r2, [pc, #20]	; (8000570 <_sbrk+0x64>)
 800055c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800055e:	68fb      	ldr	r3, [r7, #12]
}
 8000560:	4618      	mov	r0, r3
 8000562:	3718      	adds	r7, #24
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20005000 	.word	0x20005000
 800056c:	00000400 	.word	0x00000400
 8000570:	20000154 	.word	0x20000154
 8000574:	20000170 	.word	0x20000170

08000578 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr

08000584 <SVC_Handler>:


/**********************EXCEPTION********************/

extern void SVC_test_SVC();
void SVC_Handler(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	SVC_test_SVC();
 8000588:	f7ff fdfc 	bl	8000184 <SVC_test_SVC>
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}

08000590 <SysTick_Handler>:


void SysTick_Handler(void) {
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000594:	f000 f87a 	bl	800068c <HAL_IncTick>
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}

0800059c <PendSV_Handler>:

void PendSV_Handler(void) {
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr

080005a8 <run>:

/************************MAIN**********************/
extern void funtion_call_in_process_stack_run();
extern void SVC_test_run();

void run() {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
//	printf("Initiating....\n");

//	funtion_call_in_process_stack_run();
	SVC_test_run();
 80005ac:	f7ff fe18 	bl	80001e0 <SVC_test_run>

	while (1) {
 80005b0:	e7fe      	b.n	80005b0 <run+0x8>
	...

080005b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005b4:	f7ff ffe0 	bl	8000578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b8:	480b      	ldr	r0, [pc, #44]	; (80005e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005ba:	490c      	ldr	r1, [pc, #48]	; (80005ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005bc:	4a0c      	ldr	r2, [pc, #48]	; (80005f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c0:	e002      	b.n	80005c8 <LoopCopyDataInit>

080005c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c6:	3304      	adds	r3, #4

080005c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005cc:	d3f9      	bcc.n	80005c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ce:	4a09      	ldr	r2, [pc, #36]	; (80005f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005d0:	4c09      	ldr	r4, [pc, #36]	; (80005f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d4:	e001      	b.n	80005da <LoopFillZerobss>

080005d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d8:	3204      	adds	r2, #4

080005da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005dc:	d3fb      	bcc.n	80005d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005de:	f001 f8c7 	bl	8001770 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005e2:	f7ff fe0f 	bl	8000204 <main>
  bx lr
 80005e6:	4770      	bx	lr
  ldr r0, =_sdata
 80005e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005ec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80005f0:	080028e8 	.word	0x080028e8
  ldr r2, =_sbss
 80005f4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80005f8:	2000016c 	.word	0x2000016c

080005fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005fc:	e7fe      	b.n	80005fc <ADC1_2_IRQHandler>
	...

08000600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <HAL_Init+0x28>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a07      	ldr	r2, [pc, #28]	; (8000628 <HAL_Init+0x28>)
 800060a:	f043 0310 	orr.w	r3, r3, #16
 800060e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000610:	2003      	movs	r0, #3
 8000612:	f000 f907 	bl	8000824 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000616:	200f      	movs	r0, #15
 8000618:	f000 f808 	bl	800062c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800061c:	f7ff feac 	bl	8000378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000620:	2300      	movs	r3, #0
}
 8000622:	4618      	mov	r0, r3
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40022000 	.word	0x40022000

0800062c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <HAL_InitTick+0x54>)
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <HAL_InitTick+0x58>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4619      	mov	r1, r3
 800063e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000642:	fbb3 f3f1 	udiv	r3, r3, r1
 8000646:	fbb2 f3f3 	udiv	r3, r2, r3
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f911 	bl	8000872 <HAL_SYSTICK_Config>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000656:	2301      	movs	r3, #1
 8000658:	e00e      	b.n	8000678 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2b0f      	cmp	r3, #15
 800065e:	d80a      	bhi.n	8000676 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000660:	2200      	movs	r2, #0
 8000662:	6879      	ldr	r1, [r7, #4]
 8000664:	f04f 30ff 	mov.w	r0, #4294967295
 8000668:	f000 f8e7 	bl	800083a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800066c:	4a06      	ldr	r2, [pc, #24]	; (8000688 <HAL_InitTick+0x5c>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000672:	2300      	movs	r3, #0
 8000674:	e000      	b.n	8000678 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000676:	2301      	movs	r3, #1
}
 8000678:	4618      	mov	r0, r3
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000000 	.word	0x20000000
 8000684:	20000008 	.word	0x20000008
 8000688:	20000004 	.word	0x20000004

0800068c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <HAL_IncTick+0x1c>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	461a      	mov	r2, r3
 8000696:	4b05      	ldr	r3, [pc, #20]	; (80006ac <HAL_IncTick+0x20>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4413      	add	r3, r2
 800069c:	4a03      	ldr	r2, [pc, #12]	; (80006ac <HAL_IncTick+0x20>)
 800069e:	6013      	str	r3, [r2, #0]
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	20000008 	.word	0x20000008
 80006ac:	20000158 	.word	0x20000158

080006b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  return uwTick;
 80006b4:	4b02      	ldr	r3, [pc, #8]	; (80006c0 <HAL_GetTick+0x10>)
 80006b6:	681b      	ldr	r3, [r3, #0]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr
 80006c0:	20000158 	.word	0x20000158

080006c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <__NVIC_SetPriorityGrouping+0x44>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006da:	68ba      	ldr	r2, [r7, #8]
 80006dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006e0:	4013      	ands	r3, r2
 80006e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006f6:	4a04      	ldr	r2, [pc, #16]	; (8000708 <__NVIC_SetPriorityGrouping+0x44>)
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	60d3      	str	r3, [r2, #12]
}
 80006fc:	bf00      	nop
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000710:	4b04      	ldr	r3, [pc, #16]	; (8000724 <__NVIC_GetPriorityGrouping+0x18>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	0a1b      	lsrs	r3, r3, #8
 8000716:	f003 0307 	and.w	r3, r3, #7
}
 800071a:	4618      	mov	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	6039      	str	r1, [r7, #0]
 8000732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000738:	2b00      	cmp	r3, #0
 800073a:	db0a      	blt.n	8000752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	b2da      	uxtb	r2, r3
 8000740:	490c      	ldr	r1, [pc, #48]	; (8000774 <__NVIC_SetPriority+0x4c>)
 8000742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000746:	0112      	lsls	r2, r2, #4
 8000748:	b2d2      	uxtb	r2, r2
 800074a:	440b      	add	r3, r1
 800074c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000750:	e00a      	b.n	8000768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4908      	ldr	r1, [pc, #32]	; (8000778 <__NVIC_SetPriority+0x50>)
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	f003 030f 	and.w	r3, r3, #15
 800075e:	3b04      	subs	r3, #4
 8000760:	0112      	lsls	r2, r2, #4
 8000762:	b2d2      	uxtb	r2, r2
 8000764:	440b      	add	r3, r1
 8000766:	761a      	strb	r2, [r3, #24]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	e000e100 	.word	0xe000e100
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800077c:	b480      	push	{r7}
 800077e:	b089      	sub	sp, #36	; 0x24
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	f1c3 0307 	rsb	r3, r3, #7
 8000796:	2b04      	cmp	r3, #4
 8000798:	bf28      	it	cs
 800079a:	2304      	movcs	r3, #4
 800079c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	3304      	adds	r3, #4
 80007a2:	2b06      	cmp	r3, #6
 80007a4:	d902      	bls.n	80007ac <NVIC_EncodePriority+0x30>
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	3b03      	subs	r3, #3
 80007aa:	e000      	b.n	80007ae <NVIC_EncodePriority+0x32>
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b0:	f04f 32ff 	mov.w	r2, #4294967295
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ba:	43da      	mvns	r2, r3
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	401a      	ands	r2, r3
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c4:	f04f 31ff 	mov.w	r1, #4294967295
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	fa01 f303 	lsl.w	r3, r1, r3
 80007ce:	43d9      	mvns	r1, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	4313      	orrs	r3, r2
         );
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3724      	adds	r7, #36	; 0x24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007f0:	d301      	bcc.n	80007f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007f2:	2301      	movs	r3, #1
 80007f4:	e00f      	b.n	8000816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007f6:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <SysTick_Config+0x40>)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007fe:	210f      	movs	r1, #15
 8000800:	f04f 30ff 	mov.w	r0, #4294967295
 8000804:	f7ff ff90 	bl	8000728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <SysTick_Config+0x40>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800080e:	4b04      	ldr	r3, [pc, #16]	; (8000820 <SysTick_Config+0x40>)
 8000810:	2207      	movs	r2, #7
 8000812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000814:	2300      	movs	r3, #0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	e000e010 	.word	0xe000e010

08000824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f7ff ff49 	bl	80006c4 <__NVIC_SetPriorityGrouping>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800083a:	b580      	push	{r7, lr}
 800083c:	b086      	sub	sp, #24
 800083e:	af00      	add	r7, sp, #0
 8000840:	4603      	mov	r3, r0
 8000842:	60b9      	str	r1, [r7, #8]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800084c:	f7ff ff5e 	bl	800070c <__NVIC_GetPriorityGrouping>
 8000850:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	68b9      	ldr	r1, [r7, #8]
 8000856:	6978      	ldr	r0, [r7, #20]
 8000858:	f7ff ff90 	bl	800077c <NVIC_EncodePriority>
 800085c:	4602      	mov	r2, r0
 800085e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000862:	4611      	mov	r1, r2
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff5f 	bl	8000728 <__NVIC_SetPriority>
}
 800086a:	bf00      	nop
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff ffb0 	bl	80007e0 <SysTick_Config>
 8000880:	4603      	mov	r3, r0
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800088c:	b480      	push	{r7}
 800088e:	b08b      	sub	sp, #44	; 0x2c
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800089e:	e169      	b.n	8000b74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008a0:	2201      	movs	r2, #1
 80008a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	69fa      	ldr	r2, [r7, #28]
 80008b0:	4013      	ands	r3, r2
 80008b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	f040 8158 	bne.w	8000b6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	4a9a      	ldr	r2, [pc, #616]	; (8000b2c <HAL_GPIO_Init+0x2a0>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d05e      	beq.n	8000986 <HAL_GPIO_Init+0xfa>
 80008c8:	4a98      	ldr	r2, [pc, #608]	; (8000b2c <HAL_GPIO_Init+0x2a0>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d875      	bhi.n	80009ba <HAL_GPIO_Init+0x12e>
 80008ce:	4a98      	ldr	r2, [pc, #608]	; (8000b30 <HAL_GPIO_Init+0x2a4>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d058      	beq.n	8000986 <HAL_GPIO_Init+0xfa>
 80008d4:	4a96      	ldr	r2, [pc, #600]	; (8000b30 <HAL_GPIO_Init+0x2a4>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d86f      	bhi.n	80009ba <HAL_GPIO_Init+0x12e>
 80008da:	4a96      	ldr	r2, [pc, #600]	; (8000b34 <HAL_GPIO_Init+0x2a8>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d052      	beq.n	8000986 <HAL_GPIO_Init+0xfa>
 80008e0:	4a94      	ldr	r2, [pc, #592]	; (8000b34 <HAL_GPIO_Init+0x2a8>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d869      	bhi.n	80009ba <HAL_GPIO_Init+0x12e>
 80008e6:	4a94      	ldr	r2, [pc, #592]	; (8000b38 <HAL_GPIO_Init+0x2ac>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d04c      	beq.n	8000986 <HAL_GPIO_Init+0xfa>
 80008ec:	4a92      	ldr	r2, [pc, #584]	; (8000b38 <HAL_GPIO_Init+0x2ac>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d863      	bhi.n	80009ba <HAL_GPIO_Init+0x12e>
 80008f2:	4a92      	ldr	r2, [pc, #584]	; (8000b3c <HAL_GPIO_Init+0x2b0>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d046      	beq.n	8000986 <HAL_GPIO_Init+0xfa>
 80008f8:	4a90      	ldr	r2, [pc, #576]	; (8000b3c <HAL_GPIO_Init+0x2b0>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d85d      	bhi.n	80009ba <HAL_GPIO_Init+0x12e>
 80008fe:	2b12      	cmp	r3, #18
 8000900:	d82a      	bhi.n	8000958 <HAL_GPIO_Init+0xcc>
 8000902:	2b12      	cmp	r3, #18
 8000904:	d859      	bhi.n	80009ba <HAL_GPIO_Init+0x12e>
 8000906:	a201      	add	r2, pc, #4	; (adr r2, 800090c <HAL_GPIO_Init+0x80>)
 8000908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090c:	08000987 	.word	0x08000987
 8000910:	08000961 	.word	0x08000961
 8000914:	08000973 	.word	0x08000973
 8000918:	080009b5 	.word	0x080009b5
 800091c:	080009bb 	.word	0x080009bb
 8000920:	080009bb 	.word	0x080009bb
 8000924:	080009bb 	.word	0x080009bb
 8000928:	080009bb 	.word	0x080009bb
 800092c:	080009bb 	.word	0x080009bb
 8000930:	080009bb 	.word	0x080009bb
 8000934:	080009bb 	.word	0x080009bb
 8000938:	080009bb 	.word	0x080009bb
 800093c:	080009bb 	.word	0x080009bb
 8000940:	080009bb 	.word	0x080009bb
 8000944:	080009bb 	.word	0x080009bb
 8000948:	080009bb 	.word	0x080009bb
 800094c:	080009bb 	.word	0x080009bb
 8000950:	08000969 	.word	0x08000969
 8000954:	0800097d 	.word	0x0800097d
 8000958:	4a79      	ldr	r2, [pc, #484]	; (8000b40 <HAL_GPIO_Init+0x2b4>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d013      	beq.n	8000986 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800095e:	e02c      	b.n	80009ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	623b      	str	r3, [r7, #32]
          break;
 8000966:	e029      	b.n	80009bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	3304      	adds	r3, #4
 800096e:	623b      	str	r3, [r7, #32]
          break;
 8000970:	e024      	b.n	80009bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	68db      	ldr	r3, [r3, #12]
 8000976:	3308      	adds	r3, #8
 8000978:	623b      	str	r3, [r7, #32]
          break;
 800097a:	e01f      	b.n	80009bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	330c      	adds	r3, #12
 8000982:	623b      	str	r3, [r7, #32]
          break;
 8000984:	e01a      	b.n	80009bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d102      	bne.n	8000994 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800098e:	2304      	movs	r3, #4
 8000990:	623b      	str	r3, [r7, #32]
          break;
 8000992:	e013      	b.n	80009bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d105      	bne.n	80009a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800099c:	2308      	movs	r3, #8
 800099e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	69fa      	ldr	r2, [r7, #28]
 80009a4:	611a      	str	r2, [r3, #16]
          break;
 80009a6:	e009      	b.n	80009bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009a8:	2308      	movs	r3, #8
 80009aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	69fa      	ldr	r2, [r7, #28]
 80009b0:	615a      	str	r2, [r3, #20]
          break;
 80009b2:	e003      	b.n	80009bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
          break;
 80009b8:	e000      	b.n	80009bc <HAL_GPIO_Init+0x130>
          break;
 80009ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	2bff      	cmp	r3, #255	; 0xff
 80009c0:	d801      	bhi.n	80009c6 <HAL_GPIO_Init+0x13a>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	e001      	b.n	80009ca <HAL_GPIO_Init+0x13e>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3304      	adds	r3, #4
 80009ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	2bff      	cmp	r3, #255	; 0xff
 80009d0:	d802      	bhi.n	80009d8 <HAL_GPIO_Init+0x14c>
 80009d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	e002      	b.n	80009de <HAL_GPIO_Init+0x152>
 80009d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009da:	3b08      	subs	r3, #8
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	210f      	movs	r1, #15
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	401a      	ands	r2, r3
 80009f0:	6a39      	ldr	r1, [r7, #32]
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	fa01 f303 	lsl.w	r3, r1, r3
 80009f8:	431a      	orrs	r2, r3
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	f000 80b1 	beq.w	8000b6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a0c:	4b4d      	ldr	r3, [pc, #308]	; (8000b44 <HAL_GPIO_Init+0x2b8>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a4c      	ldr	r2, [pc, #304]	; (8000b44 <HAL_GPIO_Init+0x2b8>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	6193      	str	r3, [r2, #24]
 8000a18:	4b4a      	ldr	r3, [pc, #296]	; (8000b44 <HAL_GPIO_Init+0x2b8>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a24:	4a48      	ldr	r2, [pc, #288]	; (8000b48 <HAL_GPIO_Init+0x2bc>)
 8000a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a28:	089b      	lsrs	r3, r3, #2
 8000a2a:	3302      	adds	r3, #2
 8000a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a34:	f003 0303 	and.w	r3, r3, #3
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	220f      	movs	r2, #15
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	43db      	mvns	r3, r3
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	4013      	ands	r3, r2
 8000a46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a40      	ldr	r2, [pc, #256]	; (8000b4c <HAL_GPIO_Init+0x2c0>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d013      	beq.n	8000a78 <HAL_GPIO_Init+0x1ec>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a3f      	ldr	r2, [pc, #252]	; (8000b50 <HAL_GPIO_Init+0x2c4>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d00d      	beq.n	8000a74 <HAL_GPIO_Init+0x1e8>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a3e      	ldr	r2, [pc, #248]	; (8000b54 <HAL_GPIO_Init+0x2c8>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d007      	beq.n	8000a70 <HAL_GPIO_Init+0x1e4>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a3d      	ldr	r2, [pc, #244]	; (8000b58 <HAL_GPIO_Init+0x2cc>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d101      	bne.n	8000a6c <HAL_GPIO_Init+0x1e0>
 8000a68:	2303      	movs	r3, #3
 8000a6a:	e006      	b.n	8000a7a <HAL_GPIO_Init+0x1ee>
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	e004      	b.n	8000a7a <HAL_GPIO_Init+0x1ee>
 8000a70:	2302      	movs	r3, #2
 8000a72:	e002      	b.n	8000a7a <HAL_GPIO_Init+0x1ee>
 8000a74:	2301      	movs	r3, #1
 8000a76:	e000      	b.n	8000a7a <HAL_GPIO_Init+0x1ee>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a7c:	f002 0203 	and.w	r2, r2, #3
 8000a80:	0092      	lsls	r2, r2, #2
 8000a82:	4093      	lsls	r3, r2
 8000a84:	68fa      	ldr	r2, [r7, #12]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a8a:	492f      	ldr	r1, [pc, #188]	; (8000b48 <HAL_GPIO_Init+0x2bc>)
 8000a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8e:	089b      	lsrs	r3, r3, #2
 8000a90:	3302      	adds	r3, #2
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d006      	beq.n	8000ab2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000aa4:	4b2d      	ldr	r3, [pc, #180]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000aa6:	689a      	ldr	r2, [r3, #8]
 8000aa8:	492c      	ldr	r1, [pc, #176]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	608b      	str	r3, [r1, #8]
 8000ab0:	e006      	b.n	8000ac0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ab2:	4b2a      	ldr	r3, [pc, #168]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000ab4:	689a      	ldr	r2, [r3, #8]
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	4928      	ldr	r1, [pc, #160]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000abc:	4013      	ands	r3, r2
 8000abe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d006      	beq.n	8000ada <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000acc:	4b23      	ldr	r3, [pc, #140]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000ace:	68da      	ldr	r2, [r3, #12]
 8000ad0:	4922      	ldr	r1, [pc, #136]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	60cb      	str	r3, [r1, #12]
 8000ad8:	e006      	b.n	8000ae8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ada:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000adc:	68da      	ldr	r2, [r3, #12]
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	491e      	ldr	r1, [pc, #120]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d006      	beq.n	8000b02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000af4:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000af6:	685a      	ldr	r2, [r3, #4]
 8000af8:	4918      	ldr	r1, [pc, #96]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	604b      	str	r3, [r1, #4]
 8000b00:	e006      	b.n	8000b10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b02:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000b04:	685a      	ldr	r2, [r3, #4]
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	4914      	ldr	r1, [pc, #80]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d021      	beq.n	8000b60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	490e      	ldr	r1, [pc, #56]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	600b      	str	r3, [r1, #0]
 8000b28:	e021      	b.n	8000b6e <HAL_GPIO_Init+0x2e2>
 8000b2a:	bf00      	nop
 8000b2c:	10320000 	.word	0x10320000
 8000b30:	10310000 	.word	0x10310000
 8000b34:	10220000 	.word	0x10220000
 8000b38:	10210000 	.word	0x10210000
 8000b3c:	10120000 	.word	0x10120000
 8000b40:	10110000 	.word	0x10110000
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40010000 	.word	0x40010000
 8000b4c:	40010800 	.word	0x40010800
 8000b50:	40010c00 	.word	0x40010c00
 8000b54:	40011000 	.word	0x40011000
 8000b58:	40011400 	.word	0x40011400
 8000b5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b60:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <HAL_GPIO_Init+0x304>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	43db      	mvns	r3, r3
 8000b68:	4909      	ldr	r1, [pc, #36]	; (8000b90 <HAL_GPIO_Init+0x304>)
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b70:	3301      	adds	r3, #1
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f47f ae8e 	bne.w	80008a0 <HAL_GPIO_Init+0x14>
  }
}
 8000b84:	bf00      	nop
 8000b86:	bf00      	nop
 8000b88:	372c      	adds	r7, #44	; 0x2c
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr
 8000b90:	40010400 	.word	0x40010400

08000b94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d101      	bne.n	8000ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e272      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f000 8087 	beq.w	8000cc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bb4:	4b92      	ldr	r3, [pc, #584]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f003 030c 	and.w	r3, r3, #12
 8000bbc:	2b04      	cmp	r3, #4
 8000bbe:	d00c      	beq.n	8000bda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bc0:	4b8f      	ldr	r3, [pc, #572]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f003 030c 	and.w	r3, r3, #12
 8000bc8:	2b08      	cmp	r3, #8
 8000bca:	d112      	bne.n	8000bf2 <HAL_RCC_OscConfig+0x5e>
 8000bcc:	4b8c      	ldr	r3, [pc, #560]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bd8:	d10b      	bne.n	8000bf2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bda:	4b89      	ldr	r3, [pc, #548]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d06c      	beq.n	8000cc0 <HAL_RCC_OscConfig+0x12c>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d168      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e24c      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bfa:	d106      	bne.n	8000c0a <HAL_RCC_OscConfig+0x76>
 8000bfc:	4b80      	ldr	r3, [pc, #512]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a7f      	ldr	r2, [pc, #508]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	e02e      	b.n	8000c68 <HAL_RCC_OscConfig+0xd4>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d10c      	bne.n	8000c2c <HAL_RCC_OscConfig+0x98>
 8000c12:	4b7b      	ldr	r3, [pc, #492]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a7a      	ldr	r2, [pc, #488]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c1c:	6013      	str	r3, [r2, #0]
 8000c1e:	4b78      	ldr	r3, [pc, #480]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a77      	ldr	r2, [pc, #476]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c28:	6013      	str	r3, [r2, #0]
 8000c2a:	e01d      	b.n	8000c68 <HAL_RCC_OscConfig+0xd4>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c34:	d10c      	bne.n	8000c50 <HAL_RCC_OscConfig+0xbc>
 8000c36:	4b72      	ldr	r3, [pc, #456]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a71      	ldr	r2, [pc, #452]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	4b6f      	ldr	r3, [pc, #444]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a6e      	ldr	r2, [pc, #440]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	e00b      	b.n	8000c68 <HAL_RCC_OscConfig+0xd4>
 8000c50:	4b6b      	ldr	r3, [pc, #428]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a6a      	ldr	r2, [pc, #424]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c5a:	6013      	str	r3, [r2, #0]
 8000c5c:	4b68      	ldr	r3, [pc, #416]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a67      	ldr	r2, [pc, #412]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d013      	beq.n	8000c98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c70:	f7ff fd1e 	bl	80006b0 <HAL_GetTick>
 8000c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c76:	e008      	b.n	8000c8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c78:	f7ff fd1a 	bl	80006b0 <HAL_GetTick>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	2b64      	cmp	r3, #100	; 0x64
 8000c84:	d901      	bls.n	8000c8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c86:	2303      	movs	r3, #3
 8000c88:	e200      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c8a:	4b5d      	ldr	r3, [pc, #372]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d0f0      	beq.n	8000c78 <HAL_RCC_OscConfig+0xe4>
 8000c96:	e014      	b.n	8000cc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c98:	f7ff fd0a 	bl	80006b0 <HAL_GetTick>
 8000c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c9e:	e008      	b.n	8000cb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ca0:	f7ff fd06 	bl	80006b0 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	2b64      	cmp	r3, #100	; 0x64
 8000cac:	d901      	bls.n	8000cb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	e1ec      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cb2:	4b53      	ldr	r3, [pc, #332]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1f0      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x10c>
 8000cbe:	e000      	b.n	8000cc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d063      	beq.n	8000d96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cce:	4b4c      	ldr	r3, [pc, #304]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 030c 	and.w	r3, r3, #12
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d00b      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cda:	4b49      	ldr	r3, [pc, #292]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 030c 	and.w	r3, r3, #12
 8000ce2:	2b08      	cmp	r3, #8
 8000ce4:	d11c      	bne.n	8000d20 <HAL_RCC_OscConfig+0x18c>
 8000ce6:	4b46      	ldr	r3, [pc, #280]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d116      	bne.n	8000d20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cf2:	4b43      	ldr	r3, [pc, #268]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d005      	beq.n	8000d0a <HAL_RCC_OscConfig+0x176>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	691b      	ldr	r3, [r3, #16]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d001      	beq.n	8000d0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e1c0      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d0a:	4b3d      	ldr	r3, [pc, #244]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	4939      	ldr	r1, [pc, #228]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d1e:	e03a      	b.n	8000d96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	691b      	ldr	r3, [r3, #16]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d020      	beq.n	8000d6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d28:	4b36      	ldr	r3, [pc, #216]	; (8000e04 <HAL_RCC_OscConfig+0x270>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2e:	f7ff fcbf 	bl	80006b0 <HAL_GetTick>
 8000d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d34:	e008      	b.n	8000d48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d36:	f7ff fcbb 	bl	80006b0 <HAL_GetTick>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d901      	bls.n	8000d48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d44:	2303      	movs	r3, #3
 8000d46:	e1a1      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d48:	4b2d      	ldr	r3, [pc, #180]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d0f0      	beq.n	8000d36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d54:	4b2a      	ldr	r3, [pc, #168]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	4927      	ldr	r1, [pc, #156]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	4313      	orrs	r3, r2
 8000d66:	600b      	str	r3, [r1, #0]
 8000d68:	e015      	b.n	8000d96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d6a:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <HAL_RCC_OscConfig+0x270>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d70:	f7ff fc9e 	bl	80006b0 <HAL_GetTick>
 8000d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d76:	e008      	b.n	8000d8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d78:	f7ff fc9a 	bl	80006b0 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d901      	bls.n	8000d8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d86:	2303      	movs	r3, #3
 8000d88:	e180      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d8a:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1f0      	bne.n	8000d78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0308 	and.w	r3, r3, #8
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d03a      	beq.n	8000e18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d019      	beq.n	8000dde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <HAL_RCC_OscConfig+0x274>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000db0:	f7ff fc7e 	bl	80006b0 <HAL_GetTick>
 8000db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000db6:	e008      	b.n	8000dca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000db8:	f7ff fc7a 	bl	80006b0 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d901      	bls.n	8000dca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e160      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dca:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d0f0      	beq.n	8000db8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	f000 face 	bl	8001378 <RCC_Delay>
 8000ddc:	e01c      	b.n	8000e18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <HAL_RCC_OscConfig+0x274>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000de4:	f7ff fc64 	bl	80006b0 <HAL_GetTick>
 8000de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dea:	e00f      	b.n	8000e0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dec:	f7ff fc60 	bl	80006b0 <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d908      	bls.n	8000e0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e146      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
 8000dfe:	bf00      	nop
 8000e00:	40021000 	.word	0x40021000
 8000e04:	42420000 	.word	0x42420000
 8000e08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e0c:	4b92      	ldr	r3, [pc, #584]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d1e9      	bne.n	8000dec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f000 80a6 	beq.w	8000f72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e26:	2300      	movs	r3, #0
 8000e28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e2a:	4b8b      	ldr	r3, [pc, #556]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d10d      	bne.n	8000e52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e36:	4b88      	ldr	r3, [pc, #544]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	4a87      	ldr	r2, [pc, #540]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e40:	61d3      	str	r3, [r2, #28]
 8000e42:	4b85      	ldr	r3, [pc, #532]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e52:	4b82      	ldr	r3, [pc, #520]	; (800105c <HAL_RCC_OscConfig+0x4c8>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d118      	bne.n	8000e90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e5e:	4b7f      	ldr	r3, [pc, #508]	; (800105c <HAL_RCC_OscConfig+0x4c8>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a7e      	ldr	r2, [pc, #504]	; (800105c <HAL_RCC_OscConfig+0x4c8>)
 8000e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e6a:	f7ff fc21 	bl	80006b0 <HAL_GetTick>
 8000e6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e70:	e008      	b.n	8000e84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e72:	f7ff fc1d 	bl	80006b0 <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	2b64      	cmp	r3, #100	; 0x64
 8000e7e:	d901      	bls.n	8000e84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e80:	2303      	movs	r3, #3
 8000e82:	e103      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e84:	4b75      	ldr	r3, [pc, #468]	; (800105c <HAL_RCC_OscConfig+0x4c8>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d0f0      	beq.n	8000e72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d106      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x312>
 8000e98:	4b6f      	ldr	r3, [pc, #444]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e9a:	6a1b      	ldr	r3, [r3, #32]
 8000e9c:	4a6e      	ldr	r2, [pc, #440]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6213      	str	r3, [r2, #32]
 8000ea4:	e02d      	b.n	8000f02 <HAL_RCC_OscConfig+0x36e>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d10c      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x334>
 8000eae:	4b6a      	ldr	r3, [pc, #424]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000eb0:	6a1b      	ldr	r3, [r3, #32]
 8000eb2:	4a69      	ldr	r2, [pc, #420]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000eb4:	f023 0301 	bic.w	r3, r3, #1
 8000eb8:	6213      	str	r3, [r2, #32]
 8000eba:	4b67      	ldr	r3, [pc, #412]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ebc:	6a1b      	ldr	r3, [r3, #32]
 8000ebe:	4a66      	ldr	r2, [pc, #408]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ec0:	f023 0304 	bic.w	r3, r3, #4
 8000ec4:	6213      	str	r3, [r2, #32]
 8000ec6:	e01c      	b.n	8000f02 <HAL_RCC_OscConfig+0x36e>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	2b05      	cmp	r3, #5
 8000ece:	d10c      	bne.n	8000eea <HAL_RCC_OscConfig+0x356>
 8000ed0:	4b61      	ldr	r3, [pc, #388]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ed2:	6a1b      	ldr	r3, [r3, #32]
 8000ed4:	4a60      	ldr	r2, [pc, #384]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ed6:	f043 0304 	orr.w	r3, r3, #4
 8000eda:	6213      	str	r3, [r2, #32]
 8000edc:	4b5e      	ldr	r3, [pc, #376]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ede:	6a1b      	ldr	r3, [r3, #32]
 8000ee0:	4a5d      	ldr	r2, [pc, #372]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	6213      	str	r3, [r2, #32]
 8000ee8:	e00b      	b.n	8000f02 <HAL_RCC_OscConfig+0x36e>
 8000eea:	4b5b      	ldr	r3, [pc, #364]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000eec:	6a1b      	ldr	r3, [r3, #32]
 8000eee:	4a5a      	ldr	r2, [pc, #360]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ef0:	f023 0301 	bic.w	r3, r3, #1
 8000ef4:	6213      	str	r3, [r2, #32]
 8000ef6:	4b58      	ldr	r3, [pc, #352]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000ef8:	6a1b      	ldr	r3, [r3, #32]
 8000efa:	4a57      	ldr	r2, [pc, #348]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000efc:	f023 0304 	bic.w	r3, r3, #4
 8000f00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d015      	beq.n	8000f36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f0a:	f7ff fbd1 	bl	80006b0 <HAL_GetTick>
 8000f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f10:	e00a      	b.n	8000f28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f12:	f7ff fbcd 	bl	80006b0 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e0b1      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f28:	4b4b      	ldr	r3, [pc, #300]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000f2a:	6a1b      	ldr	r3, [r3, #32]
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0ee      	beq.n	8000f12 <HAL_RCC_OscConfig+0x37e>
 8000f34:	e014      	b.n	8000f60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f36:	f7ff fbbb 	bl	80006b0 <HAL_GetTick>
 8000f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f3c:	e00a      	b.n	8000f54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f3e:	f7ff fbb7 	bl	80006b0 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d901      	bls.n	8000f54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e09b      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f54:	4b40      	ldr	r3, [pc, #256]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1ee      	bne.n	8000f3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f60:	7dfb      	ldrb	r3, [r7, #23]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d105      	bne.n	8000f72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f66:	4b3c      	ldr	r3, [pc, #240]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	4a3b      	ldr	r2, [pc, #236]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 8087 	beq.w	800108a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f7c:	4b36      	ldr	r3, [pc, #216]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 030c 	and.w	r3, r3, #12
 8000f84:	2b08      	cmp	r3, #8
 8000f86:	d061      	beq.n	800104c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69db      	ldr	r3, [r3, #28]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d146      	bne.n	800101e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f90:	4b33      	ldr	r3, [pc, #204]	; (8001060 <HAL_RCC_OscConfig+0x4cc>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f96:	f7ff fb8b 	bl	80006b0 <HAL_GetTick>
 8000f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f9c:	e008      	b.n	8000fb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f9e:	f7ff fb87 	bl	80006b0 <HAL_GetTick>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d901      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e06d      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fb0:	4b29      	ldr	r3, [pc, #164]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1f0      	bne.n	8000f9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fc4:	d108      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fc6:	4b24      	ldr	r3, [pc, #144]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	4921      	ldr	r1, [pc, #132]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a19      	ldr	r1, [r3, #32]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe8:	430b      	orrs	r3, r1
 8000fea:	491b      	ldr	r1, [pc, #108]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	4313      	orrs	r3, r2
 8000fee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <HAL_RCC_OscConfig+0x4cc>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff6:	f7ff fb5b 	bl	80006b0 <HAL_GetTick>
 8000ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ffc:	e008      	b.n	8001010 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ffe:	f7ff fb57 	bl	80006b0 <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d901      	bls.n	8001010 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e03d      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0f0      	beq.n	8000ffe <HAL_RCC_OscConfig+0x46a>
 800101c:	e035      	b.n	800108a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <HAL_RCC_OscConfig+0x4cc>)
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001024:	f7ff fb44 	bl	80006b0 <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800102c:	f7ff fb40 	bl	80006b0 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e026      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_RCC_OscConfig+0x4c4>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f0      	bne.n	800102c <HAL_RCC_OscConfig+0x498>
 800104a:	e01e      	b.n	800108a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	69db      	ldr	r3, [r3, #28]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d107      	bne.n	8001064 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e019      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
 8001058:	40021000 	.word	0x40021000
 800105c:	40007000 	.word	0x40007000
 8001060:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001064:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <HAL_RCC_OscConfig+0x500>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	429a      	cmp	r2, r3
 8001076:	d106      	bne.n	8001086 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001082:	429a      	cmp	r2, r3
 8001084:	d001      	beq.n	800108a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40021000 	.word	0x40021000

08001098 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d101      	bne.n	80010ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e0d0      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010ac:	4b6a      	ldr	r3, [pc, #424]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0307 	and.w	r3, r3, #7
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d910      	bls.n	80010dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ba:	4b67      	ldr	r3, [pc, #412]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f023 0207 	bic.w	r2, r3, #7
 80010c2:	4965      	ldr	r1, [pc, #404]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ca:	4b63      	ldr	r3, [pc, #396]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d001      	beq.n	80010dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e0b8      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d020      	beq.n	800112a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d005      	beq.n	8001100 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010f4:	4b59      	ldr	r3, [pc, #356]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	4a58      	ldr	r2, [pc, #352]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 80010fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0308 	and.w	r3, r3, #8
 8001108:	2b00      	cmp	r3, #0
 800110a:	d005      	beq.n	8001118 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800110c:	4b53      	ldr	r3, [pc, #332]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	4a52      	ldr	r2, [pc, #328]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001112:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001116:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001118:	4b50      	ldr	r3, [pc, #320]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	494d      	ldr	r1, [pc, #308]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001126:	4313      	orrs	r3, r2
 8001128:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b00      	cmp	r3, #0
 8001134:	d040      	beq.n	80011b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d107      	bne.n	800114e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113e:	4b47      	ldr	r3, [pc, #284]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d115      	bne.n	8001176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e07f      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d107      	bne.n	8001166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001156:	4b41      	ldr	r3, [pc, #260]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d109      	bne.n	8001176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e073      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001166:	4b3d      	ldr	r3, [pc, #244]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e06b      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001176:	4b39      	ldr	r3, [pc, #228]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f023 0203 	bic.w	r2, r3, #3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	4936      	ldr	r1, [pc, #216]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001184:	4313      	orrs	r3, r2
 8001186:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001188:	f7ff fa92 	bl	80006b0 <HAL_GetTick>
 800118c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800118e:	e00a      	b.n	80011a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001190:	f7ff fa8e 	bl	80006b0 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	f241 3288 	movw	r2, #5000	; 0x1388
 800119e:	4293      	cmp	r3, r2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e053      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011a6:	4b2d      	ldr	r3, [pc, #180]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 020c 	and.w	r2, r3, #12
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d1eb      	bne.n	8001190 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011b8:	4b27      	ldr	r3, [pc, #156]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d210      	bcs.n	80011e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011c6:	4b24      	ldr	r3, [pc, #144]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f023 0207 	bic.w	r2, r3, #7
 80011ce:	4922      	ldr	r1, [pc, #136]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d001      	beq.n	80011e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e032      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d008      	beq.n	8001206 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	4916      	ldr	r1, [pc, #88]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001202:	4313      	orrs	r3, r2
 8001204:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	2b00      	cmp	r3, #0
 8001210:	d009      	beq.n	8001226 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	490e      	ldr	r1, [pc, #56]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001222:	4313      	orrs	r3, r2
 8001224:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001226:	f000 f821 	bl	800126c <HAL_RCC_GetSysClockFreq>
 800122a:	4602      	mov	r2, r0
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	490a      	ldr	r1, [pc, #40]	; (8001260 <HAL_RCC_ClockConfig+0x1c8>)
 8001238:	5ccb      	ldrb	r3, [r1, r3]
 800123a:	fa22 f303 	lsr.w	r3, r2, r3
 800123e:	4a09      	ldr	r2, [pc, #36]	; (8001264 <HAL_RCC_ClockConfig+0x1cc>)
 8001240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <HAL_RCC_ClockConfig+0x1d0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f9f0 	bl	800062c <HAL_InitTick>

  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40022000 	.word	0x40022000
 800125c:	40021000 	.word	0x40021000
 8001260:	0800281c 	.word	0x0800281c
 8001264:	20000000 	.word	0x20000000
 8001268:	20000004 	.word	0x20000004

0800126c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800126c:	b480      	push	{r7}
 800126e:	b087      	sub	sp, #28
 8001270:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001286:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <HAL_RCC_GetSysClockFreq+0x94>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	2b04      	cmp	r3, #4
 8001294:	d002      	beq.n	800129c <HAL_RCC_GetSysClockFreq+0x30>
 8001296:	2b08      	cmp	r3, #8
 8001298:	d003      	beq.n	80012a2 <HAL_RCC_GetSysClockFreq+0x36>
 800129a:	e027      	b.n	80012ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800129c:	4b19      	ldr	r3, [pc, #100]	; (8001304 <HAL_RCC_GetSysClockFreq+0x98>)
 800129e:	613b      	str	r3, [r7, #16]
      break;
 80012a0:	e027      	b.n	80012f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	0c9b      	lsrs	r3, r3, #18
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	4a17      	ldr	r2, [pc, #92]	; (8001308 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012ac:	5cd3      	ldrb	r3, [r2, r3]
 80012ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d010      	beq.n	80012dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <HAL_RCC_GetSysClockFreq+0x94>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	0c5b      	lsrs	r3, r3, #17
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	4a11      	ldr	r2, [pc, #68]	; (800130c <HAL_RCC_GetSysClockFreq+0xa0>)
 80012c6:	5cd3      	ldrb	r3, [r2, r3]
 80012c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <HAL_RCC_GetSysClockFreq+0x98>)
 80012ce:	fb03 f202 	mul.w	r2, r3, r2
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	e004      	b.n	80012e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a0c      	ldr	r2, [pc, #48]	; (8001310 <HAL_RCC_GetSysClockFreq+0xa4>)
 80012e0:	fb02 f303 	mul.w	r3, r2, r3
 80012e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	613b      	str	r3, [r7, #16]
      break;
 80012ea:	e002      	b.n	80012f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <HAL_RCC_GetSysClockFreq+0x98>)
 80012ee:	613b      	str	r3, [r7, #16]
      break;
 80012f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012f2:	693b      	ldr	r3, [r7, #16]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	371c      	adds	r7, #28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40021000 	.word	0x40021000
 8001304:	007a1200 	.word	0x007a1200
 8001308:	08002834 	.word	0x08002834
 800130c:	08002844 	.word	0x08002844
 8001310:	003d0900 	.word	0x003d0900

08001314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001318:	4b02      	ldr	r3, [pc, #8]	; (8001324 <HAL_RCC_GetHCLKFreq+0x10>)
 800131a:	681b      	ldr	r3, [r3, #0]
}
 800131c:	4618      	mov	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	20000000 	.word	0x20000000

08001328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800132c:	f7ff fff2 	bl	8001314 <HAL_RCC_GetHCLKFreq>
 8001330:	4602      	mov	r2, r0
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	0a1b      	lsrs	r3, r3, #8
 8001338:	f003 0307 	and.w	r3, r3, #7
 800133c:	4903      	ldr	r1, [pc, #12]	; (800134c <HAL_RCC_GetPCLK1Freq+0x24>)
 800133e:	5ccb      	ldrb	r3, [r1, r3]
 8001340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001344:	4618      	mov	r0, r3
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40021000 	.word	0x40021000
 800134c:	0800282c 	.word	0x0800282c

08001350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001354:	f7ff ffde 	bl	8001314 <HAL_RCC_GetHCLKFreq>
 8001358:	4602      	mov	r2, r0
 800135a:	4b05      	ldr	r3, [pc, #20]	; (8001370 <HAL_RCC_GetPCLK2Freq+0x20>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	0adb      	lsrs	r3, r3, #11
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	4903      	ldr	r1, [pc, #12]	; (8001374 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001366:	5ccb      	ldrb	r3, [r1, r3]
 8001368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800136c:	4618      	mov	r0, r3
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40021000 	.word	0x40021000
 8001374:	0800282c 	.word	0x0800282c

08001378 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <RCC_Delay+0x34>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <RCC_Delay+0x38>)
 8001386:	fba2 2303 	umull	r2, r3, r2, r3
 800138a:	0a5b      	lsrs	r3, r3, #9
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	fb02 f303 	mul.w	r3, r2, r3
 8001392:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001394:	bf00      	nop
  }
  while (Delay --);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	1e5a      	subs	r2, r3, #1
 800139a:	60fa      	str	r2, [r7, #12]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1f9      	bne.n	8001394 <RCC_Delay+0x1c>
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	20000000 	.word	0x20000000
 80013b0:	10624dd3 	.word	0x10624dd3

080013b4 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e04a      	b.n	800145c <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d106      	bne.n	80013e0 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7fe ffee 	bl	80003bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2224      	movs	r2, #36	; 0x24
 80013e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68da      	ldr	r2, [r3, #12]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 f925 	bl	8001648 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	691a      	ldr	r2, [r3, #16]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800140c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	695a      	ldr	r2, [r3, #20]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800141c:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	695a      	ldr	r2, [r3, #20]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f042 0208 	orr.w	r2, r2, #8
 800142c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68da      	ldr	r2, [r3, #12]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800143c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2220      	movs	r2, #32
 8001448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2220      	movs	r2, #32
 8001450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af02      	add	r7, sp, #8
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	603b      	str	r3, [r7, #0]
 8001470:	4613      	mov	r3, r2
 8001472:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b20      	cmp	r3, #32
 8001482:	d16d      	bne.n	8001560 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d002      	beq.n	8001490 <HAL_UART_Transmit+0x2c>
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e066      	b.n	8001562 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2200      	movs	r2, #0
 8001498:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2221      	movs	r2, #33	; 0x21
 800149e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80014a2:	f7ff f905 	bl	80006b0 <HAL_GetTick>
 80014a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	88fa      	ldrh	r2, [r7, #6]
 80014ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	88fa      	ldrh	r2, [r7, #6]
 80014b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014bc:	d108      	bne.n	80014d0 <HAL_UART_Transmit+0x6c>
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d104      	bne.n	80014d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	61bb      	str	r3, [r7, #24]
 80014ce:	e003      	b.n	80014d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80014d8:	e02a      	b.n	8001530 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	2200      	movs	r2, #0
 80014e2:	2180      	movs	r1, #128	; 0x80
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	f000 f840 	bl	800156a <UART_WaitOnFlagUntilTimeout>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e036      	b.n	8001562 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10b      	bne.n	8001512 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001508:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	3302      	adds	r3, #2
 800150e:	61bb      	str	r3, [r7, #24]
 8001510:	e007      	b.n	8001522 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	781a      	ldrb	r2, [r3, #0]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	3301      	adds	r3, #1
 8001520:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001526:	b29b      	uxth	r3, r3
 8001528:	3b01      	subs	r3, #1
 800152a:	b29a      	uxth	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001534:	b29b      	uxth	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1cf      	bne.n	80014da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	2200      	movs	r2, #0
 8001542:	2140      	movs	r1, #64	; 0x40
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f000 f810 	bl	800156a <UART_WaitOnFlagUntilTimeout>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e006      	b.n	8001562 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2220      	movs	r2, #32
 8001558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	e000      	b.n	8001562 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001560:	2302      	movs	r3, #2
  }
}
 8001562:	4618      	mov	r0, r3
 8001564:	3720      	adds	r7, #32
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b090      	sub	sp, #64	; 0x40
 800156e:	af00      	add	r7, sp, #0
 8001570:	60f8      	str	r0, [r7, #12]
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	603b      	str	r3, [r7, #0]
 8001576:	4613      	mov	r3, r2
 8001578:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800157a:	e050      	b.n	800161e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800157c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800157e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001582:	d04c      	beq.n	800161e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001586:	2b00      	cmp	r3, #0
 8001588:	d007      	beq.n	800159a <UART_WaitOnFlagUntilTimeout+0x30>
 800158a:	f7ff f891 	bl	80006b0 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001596:	429a      	cmp	r2, r3
 8001598:	d241      	bcs.n	800161e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	330c      	adds	r3, #12
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a4:	e853 3f00 	ldrex	r3, [r3]
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80015b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	330c      	adds	r3, #12
 80015b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015ba:	637a      	str	r2, [r7, #52]	; 0x34
 80015bc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015c2:	e841 2300 	strex	r3, r2, [r1]
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80015c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1e5      	bne.n	800159a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	3314      	adds	r3, #20
 80015d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	e853 3f00 	ldrex	r3, [r3]
 80015dc:	613b      	str	r3, [r7, #16]
   return(result);
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	f023 0301 	bic.w	r3, r3, #1
 80015e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	3314      	adds	r3, #20
 80015ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015ee:	623a      	str	r2, [r7, #32]
 80015f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015f2:	69f9      	ldr	r1, [r7, #28]
 80015f4:	6a3a      	ldr	r2, [r7, #32]
 80015f6:	e841 2300 	strex	r3, r2, [r1]
 80015fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1e5      	bne.n	80015ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2220      	movs	r2, #32
 8001606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2220      	movs	r2, #32
 800160e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e00f      	b.n	800163e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	4013      	ands	r3, r2
 8001628:	68ba      	ldr	r2, [r7, #8]
 800162a:	429a      	cmp	r2, r3
 800162c:	bf0c      	ite	eq
 800162e:	2301      	moveq	r3, #1
 8001630:	2300      	movne	r3, #0
 8001632:	b2db      	uxtb	r3, r3
 8001634:	461a      	mov	r2, r3
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	429a      	cmp	r2, r3
 800163a:	d09f      	beq.n	800157c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3740      	adds	r7, #64	; 0x40
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	4313      	orrs	r3, r2
 8001676:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001682:	f023 030c 	bic.w	r3, r3, #12
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6812      	ldr	r2, [r2, #0]
 800168a:	68b9      	ldr	r1, [r7, #8]
 800168c:	430b      	orrs	r3, r1
 800168e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	699a      	ldr	r2, [r3, #24]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a2c      	ldr	r2, [pc, #176]	; (800175c <UART_SetConfig+0x114>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d103      	bne.n	80016b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80016b0:	f7ff fe4e 	bl	8001350 <HAL_RCC_GetPCLK2Freq>
 80016b4:	60f8      	str	r0, [r7, #12]
 80016b6:	e002      	b.n	80016be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80016b8:	f7ff fe36 	bl	8001328 <HAL_RCC_GetPCLK1Freq>
 80016bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	009a      	lsls	r2, r3, #2
 80016c8:	441a      	add	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d4:	4a22      	ldr	r2, [pc, #136]	; (8001760 <UART_SetConfig+0x118>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	095b      	lsrs	r3, r3, #5
 80016dc:	0119      	lsls	r1, r3, #4
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	009a      	lsls	r2, r3, #2
 80016e8:	441a      	add	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80016f4:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <UART_SetConfig+0x118>)
 80016f6:	fba3 0302 	umull	r0, r3, r3, r2
 80016fa:	095b      	lsrs	r3, r3, #5
 80016fc:	2064      	movs	r0, #100	; 0x64
 80016fe:	fb00 f303 	mul.w	r3, r0, r3
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	011b      	lsls	r3, r3, #4
 8001706:	3332      	adds	r3, #50	; 0x32
 8001708:	4a15      	ldr	r2, [pc, #84]	; (8001760 <UART_SetConfig+0x118>)
 800170a:	fba2 2303 	umull	r2, r3, r2, r3
 800170e:	095b      	lsrs	r3, r3, #5
 8001710:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001714:	4419      	add	r1, r3
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	009a      	lsls	r2, r3, #2
 8001720:	441a      	add	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	fbb2 f2f3 	udiv	r2, r2, r3
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <UART_SetConfig+0x118>)
 800172e:	fba3 0302 	umull	r0, r3, r3, r2
 8001732:	095b      	lsrs	r3, r3, #5
 8001734:	2064      	movs	r0, #100	; 0x64
 8001736:	fb00 f303 	mul.w	r3, r0, r3
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	011b      	lsls	r3, r3, #4
 800173e:	3332      	adds	r3, #50	; 0x32
 8001740:	4a07      	ldr	r2, [pc, #28]	; (8001760 <UART_SetConfig+0x118>)
 8001742:	fba2 2303 	umull	r2, r3, r2, r3
 8001746:	095b      	lsrs	r3, r3, #5
 8001748:	f003 020f 	and.w	r2, r3, #15
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	440a      	add	r2, r1
 8001752:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001754:	bf00      	nop
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40013800 	.word	0x40013800
 8001760:	51eb851f 	.word	0x51eb851f

08001764 <__errno>:
 8001764:	4b01      	ldr	r3, [pc, #4]	; (800176c <__errno+0x8>)
 8001766:	6818      	ldr	r0, [r3, #0]
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	2000000c 	.word	0x2000000c

08001770 <__libc_init_array>:
 8001770:	b570      	push	{r4, r5, r6, lr}
 8001772:	2600      	movs	r6, #0
 8001774:	4d0c      	ldr	r5, [pc, #48]	; (80017a8 <__libc_init_array+0x38>)
 8001776:	4c0d      	ldr	r4, [pc, #52]	; (80017ac <__libc_init_array+0x3c>)
 8001778:	1b64      	subs	r4, r4, r5
 800177a:	10a4      	asrs	r4, r4, #2
 800177c:	42a6      	cmp	r6, r4
 800177e:	d109      	bne.n	8001794 <__libc_init_array+0x24>
 8001780:	f001 f82c 	bl	80027dc <_init>
 8001784:	2600      	movs	r6, #0
 8001786:	4d0a      	ldr	r5, [pc, #40]	; (80017b0 <__libc_init_array+0x40>)
 8001788:	4c0a      	ldr	r4, [pc, #40]	; (80017b4 <__libc_init_array+0x44>)
 800178a:	1b64      	subs	r4, r4, r5
 800178c:	10a4      	asrs	r4, r4, #2
 800178e:	42a6      	cmp	r6, r4
 8001790:	d105      	bne.n	800179e <__libc_init_array+0x2e>
 8001792:	bd70      	pop	{r4, r5, r6, pc}
 8001794:	f855 3b04 	ldr.w	r3, [r5], #4
 8001798:	4798      	blx	r3
 800179a:	3601      	adds	r6, #1
 800179c:	e7ee      	b.n	800177c <__libc_init_array+0xc>
 800179e:	f855 3b04 	ldr.w	r3, [r5], #4
 80017a2:	4798      	blx	r3
 80017a4:	3601      	adds	r6, #1
 80017a6:	e7f2      	b.n	800178e <__libc_init_array+0x1e>
 80017a8:	080028e0 	.word	0x080028e0
 80017ac:	080028e0 	.word	0x080028e0
 80017b0:	080028e0 	.word	0x080028e0
 80017b4:	080028e4 	.word	0x080028e4

080017b8 <memset>:
 80017b8:	4603      	mov	r3, r0
 80017ba:	4402      	add	r2, r0
 80017bc:	4293      	cmp	r3, r2
 80017be:	d100      	bne.n	80017c2 <memset+0xa>
 80017c0:	4770      	bx	lr
 80017c2:	f803 1b01 	strb.w	r1, [r3], #1
 80017c6:	e7f9      	b.n	80017bc <memset+0x4>

080017c8 <iprintf>:
 80017c8:	b40f      	push	{r0, r1, r2, r3}
 80017ca:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <iprintf+0x2c>)
 80017cc:	b513      	push	{r0, r1, r4, lr}
 80017ce:	681c      	ldr	r4, [r3, #0]
 80017d0:	b124      	cbz	r4, 80017dc <iprintf+0x14>
 80017d2:	69a3      	ldr	r3, [r4, #24]
 80017d4:	b913      	cbnz	r3, 80017dc <iprintf+0x14>
 80017d6:	4620      	mov	r0, r4
 80017d8:	f000 fa5a 	bl	8001c90 <__sinit>
 80017dc:	ab05      	add	r3, sp, #20
 80017de:	4620      	mov	r0, r4
 80017e0:	9a04      	ldr	r2, [sp, #16]
 80017e2:	68a1      	ldr	r1, [r4, #8]
 80017e4:	9301      	str	r3, [sp, #4]
 80017e6:	f000 fc5d 	bl	80020a4 <_vfiprintf_r>
 80017ea:	b002      	add	sp, #8
 80017ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017f0:	b004      	add	sp, #16
 80017f2:	4770      	bx	lr
 80017f4:	2000000c 	.word	0x2000000c

080017f8 <_puts_r>:
 80017f8:	b570      	push	{r4, r5, r6, lr}
 80017fa:	460e      	mov	r6, r1
 80017fc:	4605      	mov	r5, r0
 80017fe:	b118      	cbz	r0, 8001808 <_puts_r+0x10>
 8001800:	6983      	ldr	r3, [r0, #24]
 8001802:	b90b      	cbnz	r3, 8001808 <_puts_r+0x10>
 8001804:	f000 fa44 	bl	8001c90 <__sinit>
 8001808:	69ab      	ldr	r3, [r5, #24]
 800180a:	68ac      	ldr	r4, [r5, #8]
 800180c:	b913      	cbnz	r3, 8001814 <_puts_r+0x1c>
 800180e:	4628      	mov	r0, r5
 8001810:	f000 fa3e 	bl	8001c90 <__sinit>
 8001814:	4b2c      	ldr	r3, [pc, #176]	; (80018c8 <_puts_r+0xd0>)
 8001816:	429c      	cmp	r4, r3
 8001818:	d120      	bne.n	800185c <_puts_r+0x64>
 800181a:	686c      	ldr	r4, [r5, #4]
 800181c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800181e:	07db      	lsls	r3, r3, #31
 8001820:	d405      	bmi.n	800182e <_puts_r+0x36>
 8001822:	89a3      	ldrh	r3, [r4, #12]
 8001824:	0598      	lsls	r0, r3, #22
 8001826:	d402      	bmi.n	800182e <_puts_r+0x36>
 8001828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800182a:	f000 facf 	bl	8001dcc <__retarget_lock_acquire_recursive>
 800182e:	89a3      	ldrh	r3, [r4, #12]
 8001830:	0719      	lsls	r1, r3, #28
 8001832:	d51d      	bpl.n	8001870 <_puts_r+0x78>
 8001834:	6923      	ldr	r3, [r4, #16]
 8001836:	b1db      	cbz	r3, 8001870 <_puts_r+0x78>
 8001838:	3e01      	subs	r6, #1
 800183a:	68a3      	ldr	r3, [r4, #8]
 800183c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001840:	3b01      	subs	r3, #1
 8001842:	60a3      	str	r3, [r4, #8]
 8001844:	bb39      	cbnz	r1, 8001896 <_puts_r+0x9e>
 8001846:	2b00      	cmp	r3, #0
 8001848:	da38      	bge.n	80018bc <_puts_r+0xc4>
 800184a:	4622      	mov	r2, r4
 800184c:	210a      	movs	r1, #10
 800184e:	4628      	mov	r0, r5
 8001850:	f000 f848 	bl	80018e4 <__swbuf_r>
 8001854:	3001      	adds	r0, #1
 8001856:	d011      	beq.n	800187c <_puts_r+0x84>
 8001858:	250a      	movs	r5, #10
 800185a:	e011      	b.n	8001880 <_puts_r+0x88>
 800185c:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <_puts_r+0xd4>)
 800185e:	429c      	cmp	r4, r3
 8001860:	d101      	bne.n	8001866 <_puts_r+0x6e>
 8001862:	68ac      	ldr	r4, [r5, #8]
 8001864:	e7da      	b.n	800181c <_puts_r+0x24>
 8001866:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <_puts_r+0xd8>)
 8001868:	429c      	cmp	r4, r3
 800186a:	bf08      	it	eq
 800186c:	68ec      	ldreq	r4, [r5, #12]
 800186e:	e7d5      	b.n	800181c <_puts_r+0x24>
 8001870:	4621      	mov	r1, r4
 8001872:	4628      	mov	r0, r5
 8001874:	f000 f888 	bl	8001988 <__swsetup_r>
 8001878:	2800      	cmp	r0, #0
 800187a:	d0dd      	beq.n	8001838 <_puts_r+0x40>
 800187c:	f04f 35ff 	mov.w	r5, #4294967295
 8001880:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001882:	07da      	lsls	r2, r3, #31
 8001884:	d405      	bmi.n	8001892 <_puts_r+0x9a>
 8001886:	89a3      	ldrh	r3, [r4, #12]
 8001888:	059b      	lsls	r3, r3, #22
 800188a:	d402      	bmi.n	8001892 <_puts_r+0x9a>
 800188c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800188e:	f000 fa9e 	bl	8001dce <__retarget_lock_release_recursive>
 8001892:	4628      	mov	r0, r5
 8001894:	bd70      	pop	{r4, r5, r6, pc}
 8001896:	2b00      	cmp	r3, #0
 8001898:	da04      	bge.n	80018a4 <_puts_r+0xac>
 800189a:	69a2      	ldr	r2, [r4, #24]
 800189c:	429a      	cmp	r2, r3
 800189e:	dc06      	bgt.n	80018ae <_puts_r+0xb6>
 80018a0:	290a      	cmp	r1, #10
 80018a2:	d004      	beq.n	80018ae <_puts_r+0xb6>
 80018a4:	6823      	ldr	r3, [r4, #0]
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	6022      	str	r2, [r4, #0]
 80018aa:	7019      	strb	r1, [r3, #0]
 80018ac:	e7c5      	b.n	800183a <_puts_r+0x42>
 80018ae:	4622      	mov	r2, r4
 80018b0:	4628      	mov	r0, r5
 80018b2:	f000 f817 	bl	80018e4 <__swbuf_r>
 80018b6:	3001      	adds	r0, #1
 80018b8:	d1bf      	bne.n	800183a <_puts_r+0x42>
 80018ba:	e7df      	b.n	800187c <_puts_r+0x84>
 80018bc:	250a      	movs	r5, #10
 80018be:	6823      	ldr	r3, [r4, #0]
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	6022      	str	r2, [r4, #0]
 80018c4:	701d      	strb	r5, [r3, #0]
 80018c6:	e7db      	b.n	8001880 <_puts_r+0x88>
 80018c8:	0800286c 	.word	0x0800286c
 80018cc:	0800288c 	.word	0x0800288c
 80018d0:	0800284c 	.word	0x0800284c

080018d4 <puts>:
 80018d4:	4b02      	ldr	r3, [pc, #8]	; (80018e0 <puts+0xc>)
 80018d6:	4601      	mov	r1, r0
 80018d8:	6818      	ldr	r0, [r3, #0]
 80018da:	f7ff bf8d 	b.w	80017f8 <_puts_r>
 80018de:	bf00      	nop
 80018e0:	2000000c 	.word	0x2000000c

080018e4 <__swbuf_r>:
 80018e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018e6:	460e      	mov	r6, r1
 80018e8:	4614      	mov	r4, r2
 80018ea:	4605      	mov	r5, r0
 80018ec:	b118      	cbz	r0, 80018f6 <__swbuf_r+0x12>
 80018ee:	6983      	ldr	r3, [r0, #24]
 80018f0:	b90b      	cbnz	r3, 80018f6 <__swbuf_r+0x12>
 80018f2:	f000 f9cd 	bl	8001c90 <__sinit>
 80018f6:	4b21      	ldr	r3, [pc, #132]	; (800197c <__swbuf_r+0x98>)
 80018f8:	429c      	cmp	r4, r3
 80018fa:	d12b      	bne.n	8001954 <__swbuf_r+0x70>
 80018fc:	686c      	ldr	r4, [r5, #4]
 80018fe:	69a3      	ldr	r3, [r4, #24]
 8001900:	60a3      	str	r3, [r4, #8]
 8001902:	89a3      	ldrh	r3, [r4, #12]
 8001904:	071a      	lsls	r2, r3, #28
 8001906:	d52f      	bpl.n	8001968 <__swbuf_r+0x84>
 8001908:	6923      	ldr	r3, [r4, #16]
 800190a:	b36b      	cbz	r3, 8001968 <__swbuf_r+0x84>
 800190c:	6923      	ldr	r3, [r4, #16]
 800190e:	6820      	ldr	r0, [r4, #0]
 8001910:	b2f6      	uxtb	r6, r6
 8001912:	1ac0      	subs	r0, r0, r3
 8001914:	6963      	ldr	r3, [r4, #20]
 8001916:	4637      	mov	r7, r6
 8001918:	4283      	cmp	r3, r0
 800191a:	dc04      	bgt.n	8001926 <__swbuf_r+0x42>
 800191c:	4621      	mov	r1, r4
 800191e:	4628      	mov	r0, r5
 8001920:	f000 f922 	bl	8001b68 <_fflush_r>
 8001924:	bb30      	cbnz	r0, 8001974 <__swbuf_r+0x90>
 8001926:	68a3      	ldr	r3, [r4, #8]
 8001928:	3001      	adds	r0, #1
 800192a:	3b01      	subs	r3, #1
 800192c:	60a3      	str	r3, [r4, #8]
 800192e:	6823      	ldr	r3, [r4, #0]
 8001930:	1c5a      	adds	r2, r3, #1
 8001932:	6022      	str	r2, [r4, #0]
 8001934:	701e      	strb	r6, [r3, #0]
 8001936:	6963      	ldr	r3, [r4, #20]
 8001938:	4283      	cmp	r3, r0
 800193a:	d004      	beq.n	8001946 <__swbuf_r+0x62>
 800193c:	89a3      	ldrh	r3, [r4, #12]
 800193e:	07db      	lsls	r3, r3, #31
 8001940:	d506      	bpl.n	8001950 <__swbuf_r+0x6c>
 8001942:	2e0a      	cmp	r6, #10
 8001944:	d104      	bne.n	8001950 <__swbuf_r+0x6c>
 8001946:	4621      	mov	r1, r4
 8001948:	4628      	mov	r0, r5
 800194a:	f000 f90d 	bl	8001b68 <_fflush_r>
 800194e:	b988      	cbnz	r0, 8001974 <__swbuf_r+0x90>
 8001950:	4638      	mov	r0, r7
 8001952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001954:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <__swbuf_r+0x9c>)
 8001956:	429c      	cmp	r4, r3
 8001958:	d101      	bne.n	800195e <__swbuf_r+0x7a>
 800195a:	68ac      	ldr	r4, [r5, #8]
 800195c:	e7cf      	b.n	80018fe <__swbuf_r+0x1a>
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <__swbuf_r+0xa0>)
 8001960:	429c      	cmp	r4, r3
 8001962:	bf08      	it	eq
 8001964:	68ec      	ldreq	r4, [r5, #12]
 8001966:	e7ca      	b.n	80018fe <__swbuf_r+0x1a>
 8001968:	4621      	mov	r1, r4
 800196a:	4628      	mov	r0, r5
 800196c:	f000 f80c 	bl	8001988 <__swsetup_r>
 8001970:	2800      	cmp	r0, #0
 8001972:	d0cb      	beq.n	800190c <__swbuf_r+0x28>
 8001974:	f04f 37ff 	mov.w	r7, #4294967295
 8001978:	e7ea      	b.n	8001950 <__swbuf_r+0x6c>
 800197a:	bf00      	nop
 800197c:	0800286c 	.word	0x0800286c
 8001980:	0800288c 	.word	0x0800288c
 8001984:	0800284c 	.word	0x0800284c

08001988 <__swsetup_r>:
 8001988:	4b32      	ldr	r3, [pc, #200]	; (8001a54 <__swsetup_r+0xcc>)
 800198a:	b570      	push	{r4, r5, r6, lr}
 800198c:	681d      	ldr	r5, [r3, #0]
 800198e:	4606      	mov	r6, r0
 8001990:	460c      	mov	r4, r1
 8001992:	b125      	cbz	r5, 800199e <__swsetup_r+0x16>
 8001994:	69ab      	ldr	r3, [r5, #24]
 8001996:	b913      	cbnz	r3, 800199e <__swsetup_r+0x16>
 8001998:	4628      	mov	r0, r5
 800199a:	f000 f979 	bl	8001c90 <__sinit>
 800199e:	4b2e      	ldr	r3, [pc, #184]	; (8001a58 <__swsetup_r+0xd0>)
 80019a0:	429c      	cmp	r4, r3
 80019a2:	d10f      	bne.n	80019c4 <__swsetup_r+0x3c>
 80019a4:	686c      	ldr	r4, [r5, #4]
 80019a6:	89a3      	ldrh	r3, [r4, #12]
 80019a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80019ac:	0719      	lsls	r1, r3, #28
 80019ae:	d42c      	bmi.n	8001a0a <__swsetup_r+0x82>
 80019b0:	06dd      	lsls	r5, r3, #27
 80019b2:	d411      	bmi.n	80019d8 <__swsetup_r+0x50>
 80019b4:	2309      	movs	r3, #9
 80019b6:	6033      	str	r3, [r6, #0]
 80019b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295
 80019c0:	81a3      	strh	r3, [r4, #12]
 80019c2:	e03e      	b.n	8001a42 <__swsetup_r+0xba>
 80019c4:	4b25      	ldr	r3, [pc, #148]	; (8001a5c <__swsetup_r+0xd4>)
 80019c6:	429c      	cmp	r4, r3
 80019c8:	d101      	bne.n	80019ce <__swsetup_r+0x46>
 80019ca:	68ac      	ldr	r4, [r5, #8]
 80019cc:	e7eb      	b.n	80019a6 <__swsetup_r+0x1e>
 80019ce:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <__swsetup_r+0xd8>)
 80019d0:	429c      	cmp	r4, r3
 80019d2:	bf08      	it	eq
 80019d4:	68ec      	ldreq	r4, [r5, #12]
 80019d6:	e7e6      	b.n	80019a6 <__swsetup_r+0x1e>
 80019d8:	0758      	lsls	r0, r3, #29
 80019da:	d512      	bpl.n	8001a02 <__swsetup_r+0x7a>
 80019dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80019de:	b141      	cbz	r1, 80019f2 <__swsetup_r+0x6a>
 80019e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80019e4:	4299      	cmp	r1, r3
 80019e6:	d002      	beq.n	80019ee <__swsetup_r+0x66>
 80019e8:	4630      	mov	r0, r6
 80019ea:	f000 fa57 	bl	8001e9c <_free_r>
 80019ee:	2300      	movs	r3, #0
 80019f0:	6363      	str	r3, [r4, #52]	; 0x34
 80019f2:	89a3      	ldrh	r3, [r4, #12]
 80019f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80019f8:	81a3      	strh	r3, [r4, #12]
 80019fa:	2300      	movs	r3, #0
 80019fc:	6063      	str	r3, [r4, #4]
 80019fe:	6923      	ldr	r3, [r4, #16]
 8001a00:	6023      	str	r3, [r4, #0]
 8001a02:	89a3      	ldrh	r3, [r4, #12]
 8001a04:	f043 0308 	orr.w	r3, r3, #8
 8001a08:	81a3      	strh	r3, [r4, #12]
 8001a0a:	6923      	ldr	r3, [r4, #16]
 8001a0c:	b94b      	cbnz	r3, 8001a22 <__swsetup_r+0x9a>
 8001a0e:	89a3      	ldrh	r3, [r4, #12]
 8001a10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a18:	d003      	beq.n	8001a22 <__swsetup_r+0x9a>
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	4630      	mov	r0, r6
 8001a1e:	f000 f9fd 	bl	8001e1c <__smakebuf_r>
 8001a22:	89a0      	ldrh	r0, [r4, #12]
 8001a24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001a28:	f010 0301 	ands.w	r3, r0, #1
 8001a2c:	d00a      	beq.n	8001a44 <__swsetup_r+0xbc>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60a3      	str	r3, [r4, #8]
 8001a32:	6963      	ldr	r3, [r4, #20]
 8001a34:	425b      	negs	r3, r3
 8001a36:	61a3      	str	r3, [r4, #24]
 8001a38:	6923      	ldr	r3, [r4, #16]
 8001a3a:	b943      	cbnz	r3, 8001a4e <__swsetup_r+0xc6>
 8001a3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001a40:	d1ba      	bne.n	80019b8 <__swsetup_r+0x30>
 8001a42:	bd70      	pop	{r4, r5, r6, pc}
 8001a44:	0781      	lsls	r1, r0, #30
 8001a46:	bf58      	it	pl
 8001a48:	6963      	ldrpl	r3, [r4, #20]
 8001a4a:	60a3      	str	r3, [r4, #8]
 8001a4c:	e7f4      	b.n	8001a38 <__swsetup_r+0xb0>
 8001a4e:	2000      	movs	r0, #0
 8001a50:	e7f7      	b.n	8001a42 <__swsetup_r+0xba>
 8001a52:	bf00      	nop
 8001a54:	2000000c 	.word	0x2000000c
 8001a58:	0800286c 	.word	0x0800286c
 8001a5c:	0800288c 	.word	0x0800288c
 8001a60:	0800284c 	.word	0x0800284c

08001a64 <__sflush_r>:
 8001a64:	898a      	ldrh	r2, [r1, #12]
 8001a66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a68:	4605      	mov	r5, r0
 8001a6a:	0710      	lsls	r0, r2, #28
 8001a6c:	460c      	mov	r4, r1
 8001a6e:	d457      	bmi.n	8001b20 <__sflush_r+0xbc>
 8001a70:	684b      	ldr	r3, [r1, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	dc04      	bgt.n	8001a80 <__sflush_r+0x1c>
 8001a76:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	dc01      	bgt.n	8001a80 <__sflush_r+0x1c>
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a82:	2e00      	cmp	r6, #0
 8001a84:	d0fa      	beq.n	8001a7c <__sflush_r+0x18>
 8001a86:	2300      	movs	r3, #0
 8001a88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001a8c:	682f      	ldr	r7, [r5, #0]
 8001a8e:	602b      	str	r3, [r5, #0]
 8001a90:	d032      	beq.n	8001af8 <__sflush_r+0x94>
 8001a92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001a94:	89a3      	ldrh	r3, [r4, #12]
 8001a96:	075a      	lsls	r2, r3, #29
 8001a98:	d505      	bpl.n	8001aa6 <__sflush_r+0x42>
 8001a9a:	6863      	ldr	r3, [r4, #4]
 8001a9c:	1ac0      	subs	r0, r0, r3
 8001a9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001aa0:	b10b      	cbz	r3, 8001aa6 <__sflush_r+0x42>
 8001aa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001aa4:	1ac0      	subs	r0, r0, r3
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001aac:	4628      	mov	r0, r5
 8001aae:	6a21      	ldr	r1, [r4, #32]
 8001ab0:	47b0      	blx	r6
 8001ab2:	1c43      	adds	r3, r0, #1
 8001ab4:	89a3      	ldrh	r3, [r4, #12]
 8001ab6:	d106      	bne.n	8001ac6 <__sflush_r+0x62>
 8001ab8:	6829      	ldr	r1, [r5, #0]
 8001aba:	291d      	cmp	r1, #29
 8001abc:	d82c      	bhi.n	8001b18 <__sflush_r+0xb4>
 8001abe:	4a29      	ldr	r2, [pc, #164]	; (8001b64 <__sflush_r+0x100>)
 8001ac0:	40ca      	lsrs	r2, r1
 8001ac2:	07d6      	lsls	r6, r2, #31
 8001ac4:	d528      	bpl.n	8001b18 <__sflush_r+0xb4>
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	6062      	str	r2, [r4, #4]
 8001aca:	6922      	ldr	r2, [r4, #16]
 8001acc:	04d9      	lsls	r1, r3, #19
 8001ace:	6022      	str	r2, [r4, #0]
 8001ad0:	d504      	bpl.n	8001adc <__sflush_r+0x78>
 8001ad2:	1c42      	adds	r2, r0, #1
 8001ad4:	d101      	bne.n	8001ada <__sflush_r+0x76>
 8001ad6:	682b      	ldr	r3, [r5, #0]
 8001ad8:	b903      	cbnz	r3, 8001adc <__sflush_r+0x78>
 8001ada:	6560      	str	r0, [r4, #84]	; 0x54
 8001adc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ade:	602f      	str	r7, [r5, #0]
 8001ae0:	2900      	cmp	r1, #0
 8001ae2:	d0cb      	beq.n	8001a7c <__sflush_r+0x18>
 8001ae4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ae8:	4299      	cmp	r1, r3
 8001aea:	d002      	beq.n	8001af2 <__sflush_r+0x8e>
 8001aec:	4628      	mov	r0, r5
 8001aee:	f000 f9d5 	bl	8001e9c <_free_r>
 8001af2:	2000      	movs	r0, #0
 8001af4:	6360      	str	r0, [r4, #52]	; 0x34
 8001af6:	e7c2      	b.n	8001a7e <__sflush_r+0x1a>
 8001af8:	6a21      	ldr	r1, [r4, #32]
 8001afa:	2301      	movs	r3, #1
 8001afc:	4628      	mov	r0, r5
 8001afe:	47b0      	blx	r6
 8001b00:	1c41      	adds	r1, r0, #1
 8001b02:	d1c7      	bne.n	8001a94 <__sflush_r+0x30>
 8001b04:	682b      	ldr	r3, [r5, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0c4      	beq.n	8001a94 <__sflush_r+0x30>
 8001b0a:	2b1d      	cmp	r3, #29
 8001b0c:	d001      	beq.n	8001b12 <__sflush_r+0xae>
 8001b0e:	2b16      	cmp	r3, #22
 8001b10:	d101      	bne.n	8001b16 <__sflush_r+0xb2>
 8001b12:	602f      	str	r7, [r5, #0]
 8001b14:	e7b2      	b.n	8001a7c <__sflush_r+0x18>
 8001b16:	89a3      	ldrh	r3, [r4, #12]
 8001b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b1c:	81a3      	strh	r3, [r4, #12]
 8001b1e:	e7ae      	b.n	8001a7e <__sflush_r+0x1a>
 8001b20:	690f      	ldr	r7, [r1, #16]
 8001b22:	2f00      	cmp	r7, #0
 8001b24:	d0aa      	beq.n	8001a7c <__sflush_r+0x18>
 8001b26:	0793      	lsls	r3, r2, #30
 8001b28:	bf18      	it	ne
 8001b2a:	2300      	movne	r3, #0
 8001b2c:	680e      	ldr	r6, [r1, #0]
 8001b2e:	bf08      	it	eq
 8001b30:	694b      	ldreq	r3, [r1, #20]
 8001b32:	1bf6      	subs	r6, r6, r7
 8001b34:	600f      	str	r7, [r1, #0]
 8001b36:	608b      	str	r3, [r1, #8]
 8001b38:	2e00      	cmp	r6, #0
 8001b3a:	dd9f      	ble.n	8001a7c <__sflush_r+0x18>
 8001b3c:	4633      	mov	r3, r6
 8001b3e:	463a      	mov	r2, r7
 8001b40:	4628      	mov	r0, r5
 8001b42:	6a21      	ldr	r1, [r4, #32]
 8001b44:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001b48:	47e0      	blx	ip
 8001b4a:	2800      	cmp	r0, #0
 8001b4c:	dc06      	bgt.n	8001b5c <__sflush_r+0xf8>
 8001b4e:	89a3      	ldrh	r3, [r4, #12]
 8001b50:	f04f 30ff 	mov.w	r0, #4294967295
 8001b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b58:	81a3      	strh	r3, [r4, #12]
 8001b5a:	e790      	b.n	8001a7e <__sflush_r+0x1a>
 8001b5c:	4407      	add	r7, r0
 8001b5e:	1a36      	subs	r6, r6, r0
 8001b60:	e7ea      	b.n	8001b38 <__sflush_r+0xd4>
 8001b62:	bf00      	nop
 8001b64:	20400001 	.word	0x20400001

08001b68 <_fflush_r>:
 8001b68:	b538      	push	{r3, r4, r5, lr}
 8001b6a:	690b      	ldr	r3, [r1, #16]
 8001b6c:	4605      	mov	r5, r0
 8001b6e:	460c      	mov	r4, r1
 8001b70:	b913      	cbnz	r3, 8001b78 <_fflush_r+0x10>
 8001b72:	2500      	movs	r5, #0
 8001b74:	4628      	mov	r0, r5
 8001b76:	bd38      	pop	{r3, r4, r5, pc}
 8001b78:	b118      	cbz	r0, 8001b82 <_fflush_r+0x1a>
 8001b7a:	6983      	ldr	r3, [r0, #24]
 8001b7c:	b90b      	cbnz	r3, 8001b82 <_fflush_r+0x1a>
 8001b7e:	f000 f887 	bl	8001c90 <__sinit>
 8001b82:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <_fflush_r+0x6c>)
 8001b84:	429c      	cmp	r4, r3
 8001b86:	d11b      	bne.n	8001bc0 <_fflush_r+0x58>
 8001b88:	686c      	ldr	r4, [r5, #4]
 8001b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0ef      	beq.n	8001b72 <_fflush_r+0xa>
 8001b92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001b94:	07d0      	lsls	r0, r2, #31
 8001b96:	d404      	bmi.n	8001ba2 <_fflush_r+0x3a>
 8001b98:	0599      	lsls	r1, r3, #22
 8001b9a:	d402      	bmi.n	8001ba2 <_fflush_r+0x3a>
 8001b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b9e:	f000 f915 	bl	8001dcc <__retarget_lock_acquire_recursive>
 8001ba2:	4628      	mov	r0, r5
 8001ba4:	4621      	mov	r1, r4
 8001ba6:	f7ff ff5d 	bl	8001a64 <__sflush_r>
 8001baa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001bac:	4605      	mov	r5, r0
 8001bae:	07da      	lsls	r2, r3, #31
 8001bb0:	d4e0      	bmi.n	8001b74 <_fflush_r+0xc>
 8001bb2:	89a3      	ldrh	r3, [r4, #12]
 8001bb4:	059b      	lsls	r3, r3, #22
 8001bb6:	d4dd      	bmi.n	8001b74 <_fflush_r+0xc>
 8001bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001bba:	f000 f908 	bl	8001dce <__retarget_lock_release_recursive>
 8001bbe:	e7d9      	b.n	8001b74 <_fflush_r+0xc>
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <_fflush_r+0x70>)
 8001bc2:	429c      	cmp	r4, r3
 8001bc4:	d101      	bne.n	8001bca <_fflush_r+0x62>
 8001bc6:	68ac      	ldr	r4, [r5, #8]
 8001bc8:	e7df      	b.n	8001b8a <_fflush_r+0x22>
 8001bca:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <_fflush_r+0x74>)
 8001bcc:	429c      	cmp	r4, r3
 8001bce:	bf08      	it	eq
 8001bd0:	68ec      	ldreq	r4, [r5, #12]
 8001bd2:	e7da      	b.n	8001b8a <_fflush_r+0x22>
 8001bd4:	0800286c 	.word	0x0800286c
 8001bd8:	0800288c 	.word	0x0800288c
 8001bdc:	0800284c 	.word	0x0800284c

08001be0 <std>:
 8001be0:	2300      	movs	r3, #0
 8001be2:	b510      	push	{r4, lr}
 8001be4:	4604      	mov	r4, r0
 8001be6:	e9c0 3300 	strd	r3, r3, [r0]
 8001bea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001bee:	6083      	str	r3, [r0, #8]
 8001bf0:	8181      	strh	r1, [r0, #12]
 8001bf2:	6643      	str	r3, [r0, #100]	; 0x64
 8001bf4:	81c2      	strh	r2, [r0, #14]
 8001bf6:	6183      	str	r3, [r0, #24]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	2208      	movs	r2, #8
 8001bfc:	305c      	adds	r0, #92	; 0x5c
 8001bfe:	f7ff fddb 	bl	80017b8 <memset>
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <std+0x38>)
 8001c04:	6224      	str	r4, [r4, #32]
 8001c06:	6263      	str	r3, [r4, #36]	; 0x24
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <std+0x3c>)
 8001c0a:	62a3      	str	r3, [r4, #40]	; 0x28
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <std+0x40>)
 8001c0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001c10:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <std+0x44>)
 8001c12:	6323      	str	r3, [r4, #48]	; 0x30
 8001c14:	bd10      	pop	{r4, pc}
 8001c16:	bf00      	nop
 8001c18:	08002651 	.word	0x08002651
 8001c1c:	08002673 	.word	0x08002673
 8001c20:	080026ab 	.word	0x080026ab
 8001c24:	080026cf 	.word	0x080026cf

08001c28 <_cleanup_r>:
 8001c28:	4901      	ldr	r1, [pc, #4]	; (8001c30 <_cleanup_r+0x8>)
 8001c2a:	f000 b8af 	b.w	8001d8c <_fwalk_reent>
 8001c2e:	bf00      	nop
 8001c30:	08001b69 	.word	0x08001b69

08001c34 <__sfmoreglue>:
 8001c34:	2268      	movs	r2, #104	; 0x68
 8001c36:	b570      	push	{r4, r5, r6, lr}
 8001c38:	1e4d      	subs	r5, r1, #1
 8001c3a:	4355      	muls	r5, r2
 8001c3c:	460e      	mov	r6, r1
 8001c3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001c42:	f000 f993 	bl	8001f6c <_malloc_r>
 8001c46:	4604      	mov	r4, r0
 8001c48:	b140      	cbz	r0, 8001c5c <__sfmoreglue+0x28>
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	e9c0 1600 	strd	r1, r6, [r0]
 8001c50:	300c      	adds	r0, #12
 8001c52:	60a0      	str	r0, [r4, #8]
 8001c54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001c58:	f7ff fdae 	bl	80017b8 <memset>
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	bd70      	pop	{r4, r5, r6, pc}

08001c60 <__sfp_lock_acquire>:
 8001c60:	4801      	ldr	r0, [pc, #4]	; (8001c68 <__sfp_lock_acquire+0x8>)
 8001c62:	f000 b8b3 	b.w	8001dcc <__retarget_lock_acquire_recursive>
 8001c66:	bf00      	nop
 8001c68:	2000015d 	.word	0x2000015d

08001c6c <__sfp_lock_release>:
 8001c6c:	4801      	ldr	r0, [pc, #4]	; (8001c74 <__sfp_lock_release+0x8>)
 8001c6e:	f000 b8ae 	b.w	8001dce <__retarget_lock_release_recursive>
 8001c72:	bf00      	nop
 8001c74:	2000015d 	.word	0x2000015d

08001c78 <__sinit_lock_acquire>:
 8001c78:	4801      	ldr	r0, [pc, #4]	; (8001c80 <__sinit_lock_acquire+0x8>)
 8001c7a:	f000 b8a7 	b.w	8001dcc <__retarget_lock_acquire_recursive>
 8001c7e:	bf00      	nop
 8001c80:	2000015e 	.word	0x2000015e

08001c84 <__sinit_lock_release>:
 8001c84:	4801      	ldr	r0, [pc, #4]	; (8001c8c <__sinit_lock_release+0x8>)
 8001c86:	f000 b8a2 	b.w	8001dce <__retarget_lock_release_recursive>
 8001c8a:	bf00      	nop
 8001c8c:	2000015e 	.word	0x2000015e

08001c90 <__sinit>:
 8001c90:	b510      	push	{r4, lr}
 8001c92:	4604      	mov	r4, r0
 8001c94:	f7ff fff0 	bl	8001c78 <__sinit_lock_acquire>
 8001c98:	69a3      	ldr	r3, [r4, #24]
 8001c9a:	b11b      	cbz	r3, 8001ca4 <__sinit+0x14>
 8001c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ca0:	f7ff bff0 	b.w	8001c84 <__sinit_lock_release>
 8001ca4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001ca8:	6523      	str	r3, [r4, #80]	; 0x50
 8001caa:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <__sinit+0x68>)
 8001cac:	4a13      	ldr	r2, [pc, #76]	; (8001cfc <__sinit+0x6c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	62a2      	str	r2, [r4, #40]	; 0x28
 8001cb2:	42a3      	cmp	r3, r4
 8001cb4:	bf08      	it	eq
 8001cb6:	2301      	moveq	r3, #1
 8001cb8:	4620      	mov	r0, r4
 8001cba:	bf08      	it	eq
 8001cbc:	61a3      	streq	r3, [r4, #24]
 8001cbe:	f000 f81f 	bl	8001d00 <__sfp>
 8001cc2:	6060      	str	r0, [r4, #4]
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	f000 f81b 	bl	8001d00 <__sfp>
 8001cca:	60a0      	str	r0, [r4, #8]
 8001ccc:	4620      	mov	r0, r4
 8001cce:	f000 f817 	bl	8001d00 <__sfp>
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2104      	movs	r1, #4
 8001cd6:	60e0      	str	r0, [r4, #12]
 8001cd8:	6860      	ldr	r0, [r4, #4]
 8001cda:	f7ff ff81 	bl	8001be0 <std>
 8001cde:	2201      	movs	r2, #1
 8001ce0:	2109      	movs	r1, #9
 8001ce2:	68a0      	ldr	r0, [r4, #8]
 8001ce4:	f7ff ff7c 	bl	8001be0 <std>
 8001ce8:	2202      	movs	r2, #2
 8001cea:	2112      	movs	r1, #18
 8001cec:	68e0      	ldr	r0, [r4, #12]
 8001cee:	f7ff ff77 	bl	8001be0 <std>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	61a3      	str	r3, [r4, #24]
 8001cf6:	e7d1      	b.n	8001c9c <__sinit+0xc>
 8001cf8:	08002848 	.word	0x08002848
 8001cfc:	08001c29 	.word	0x08001c29

08001d00 <__sfp>:
 8001d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d02:	4607      	mov	r7, r0
 8001d04:	f7ff ffac 	bl	8001c60 <__sfp_lock_acquire>
 8001d08:	4b1e      	ldr	r3, [pc, #120]	; (8001d84 <__sfp+0x84>)
 8001d0a:	681e      	ldr	r6, [r3, #0]
 8001d0c:	69b3      	ldr	r3, [r6, #24]
 8001d0e:	b913      	cbnz	r3, 8001d16 <__sfp+0x16>
 8001d10:	4630      	mov	r0, r6
 8001d12:	f7ff ffbd 	bl	8001c90 <__sinit>
 8001d16:	3648      	adds	r6, #72	; 0x48
 8001d18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	d503      	bpl.n	8001d28 <__sfp+0x28>
 8001d20:	6833      	ldr	r3, [r6, #0]
 8001d22:	b30b      	cbz	r3, 8001d68 <__sfp+0x68>
 8001d24:	6836      	ldr	r6, [r6, #0]
 8001d26:	e7f7      	b.n	8001d18 <__sfp+0x18>
 8001d28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001d2c:	b9d5      	cbnz	r5, 8001d64 <__sfp+0x64>
 8001d2e:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <__sfp+0x88>)
 8001d30:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001d34:	60e3      	str	r3, [r4, #12]
 8001d36:	6665      	str	r5, [r4, #100]	; 0x64
 8001d38:	f000 f847 	bl	8001dca <__retarget_lock_init_recursive>
 8001d3c:	f7ff ff96 	bl	8001c6c <__sfp_lock_release>
 8001d40:	2208      	movs	r2, #8
 8001d42:	4629      	mov	r1, r5
 8001d44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001d48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001d4c:	6025      	str	r5, [r4, #0]
 8001d4e:	61a5      	str	r5, [r4, #24]
 8001d50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001d54:	f7ff fd30 	bl	80017b8 <memset>
 8001d58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001d5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001d60:	4620      	mov	r0, r4
 8001d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d64:	3468      	adds	r4, #104	; 0x68
 8001d66:	e7d9      	b.n	8001d1c <__sfp+0x1c>
 8001d68:	2104      	movs	r1, #4
 8001d6a:	4638      	mov	r0, r7
 8001d6c:	f7ff ff62 	bl	8001c34 <__sfmoreglue>
 8001d70:	4604      	mov	r4, r0
 8001d72:	6030      	str	r0, [r6, #0]
 8001d74:	2800      	cmp	r0, #0
 8001d76:	d1d5      	bne.n	8001d24 <__sfp+0x24>
 8001d78:	f7ff ff78 	bl	8001c6c <__sfp_lock_release>
 8001d7c:	230c      	movs	r3, #12
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	e7ee      	b.n	8001d60 <__sfp+0x60>
 8001d82:	bf00      	nop
 8001d84:	08002848 	.word	0x08002848
 8001d88:	ffff0001 	.word	0xffff0001

08001d8c <_fwalk_reent>:
 8001d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d90:	4606      	mov	r6, r0
 8001d92:	4688      	mov	r8, r1
 8001d94:	2700      	movs	r7, #0
 8001d96:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001d9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001d9e:	f1b9 0901 	subs.w	r9, r9, #1
 8001da2:	d505      	bpl.n	8001db0 <_fwalk_reent+0x24>
 8001da4:	6824      	ldr	r4, [r4, #0]
 8001da6:	2c00      	cmp	r4, #0
 8001da8:	d1f7      	bne.n	8001d9a <_fwalk_reent+0xe>
 8001daa:	4638      	mov	r0, r7
 8001dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001db0:	89ab      	ldrh	r3, [r5, #12]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d907      	bls.n	8001dc6 <_fwalk_reent+0x3a>
 8001db6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	d003      	beq.n	8001dc6 <_fwalk_reent+0x3a>
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	4630      	mov	r0, r6
 8001dc2:	47c0      	blx	r8
 8001dc4:	4307      	orrs	r7, r0
 8001dc6:	3568      	adds	r5, #104	; 0x68
 8001dc8:	e7e9      	b.n	8001d9e <_fwalk_reent+0x12>

08001dca <__retarget_lock_init_recursive>:
 8001dca:	4770      	bx	lr

08001dcc <__retarget_lock_acquire_recursive>:
 8001dcc:	4770      	bx	lr

08001dce <__retarget_lock_release_recursive>:
 8001dce:	4770      	bx	lr

08001dd0 <__swhatbuf_r>:
 8001dd0:	b570      	push	{r4, r5, r6, lr}
 8001dd2:	460e      	mov	r6, r1
 8001dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dd8:	4614      	mov	r4, r2
 8001dda:	2900      	cmp	r1, #0
 8001ddc:	461d      	mov	r5, r3
 8001dde:	b096      	sub	sp, #88	; 0x58
 8001de0:	da08      	bge.n	8001df4 <__swhatbuf_r+0x24>
 8001de2:	2200      	movs	r2, #0
 8001de4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001de8:	602a      	str	r2, [r5, #0]
 8001dea:	061a      	lsls	r2, r3, #24
 8001dec:	d410      	bmi.n	8001e10 <__swhatbuf_r+0x40>
 8001dee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001df2:	e00e      	b.n	8001e12 <__swhatbuf_r+0x42>
 8001df4:	466a      	mov	r2, sp
 8001df6:	f000 fc91 	bl	800271c <_fstat_r>
 8001dfa:	2800      	cmp	r0, #0
 8001dfc:	dbf1      	blt.n	8001de2 <__swhatbuf_r+0x12>
 8001dfe:	9a01      	ldr	r2, [sp, #4]
 8001e00:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001e04:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001e08:	425a      	negs	r2, r3
 8001e0a:	415a      	adcs	r2, r3
 8001e0c:	602a      	str	r2, [r5, #0]
 8001e0e:	e7ee      	b.n	8001dee <__swhatbuf_r+0x1e>
 8001e10:	2340      	movs	r3, #64	; 0x40
 8001e12:	2000      	movs	r0, #0
 8001e14:	6023      	str	r3, [r4, #0]
 8001e16:	b016      	add	sp, #88	; 0x58
 8001e18:	bd70      	pop	{r4, r5, r6, pc}
	...

08001e1c <__smakebuf_r>:
 8001e1c:	898b      	ldrh	r3, [r1, #12]
 8001e1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e20:	079d      	lsls	r5, r3, #30
 8001e22:	4606      	mov	r6, r0
 8001e24:	460c      	mov	r4, r1
 8001e26:	d507      	bpl.n	8001e38 <__smakebuf_r+0x1c>
 8001e28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001e2c:	6023      	str	r3, [r4, #0]
 8001e2e:	6123      	str	r3, [r4, #16]
 8001e30:	2301      	movs	r3, #1
 8001e32:	6163      	str	r3, [r4, #20]
 8001e34:	b002      	add	sp, #8
 8001e36:	bd70      	pop	{r4, r5, r6, pc}
 8001e38:	466a      	mov	r2, sp
 8001e3a:	ab01      	add	r3, sp, #4
 8001e3c:	f7ff ffc8 	bl	8001dd0 <__swhatbuf_r>
 8001e40:	9900      	ldr	r1, [sp, #0]
 8001e42:	4605      	mov	r5, r0
 8001e44:	4630      	mov	r0, r6
 8001e46:	f000 f891 	bl	8001f6c <_malloc_r>
 8001e4a:	b948      	cbnz	r0, 8001e60 <__smakebuf_r+0x44>
 8001e4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e50:	059a      	lsls	r2, r3, #22
 8001e52:	d4ef      	bmi.n	8001e34 <__smakebuf_r+0x18>
 8001e54:	f023 0303 	bic.w	r3, r3, #3
 8001e58:	f043 0302 	orr.w	r3, r3, #2
 8001e5c:	81a3      	strh	r3, [r4, #12]
 8001e5e:	e7e3      	b.n	8001e28 <__smakebuf_r+0xc>
 8001e60:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <__smakebuf_r+0x7c>)
 8001e62:	62b3      	str	r3, [r6, #40]	; 0x28
 8001e64:	89a3      	ldrh	r3, [r4, #12]
 8001e66:	6020      	str	r0, [r4, #0]
 8001e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e6c:	81a3      	strh	r3, [r4, #12]
 8001e6e:	9b00      	ldr	r3, [sp, #0]
 8001e70:	6120      	str	r0, [r4, #16]
 8001e72:	6163      	str	r3, [r4, #20]
 8001e74:	9b01      	ldr	r3, [sp, #4]
 8001e76:	b15b      	cbz	r3, 8001e90 <__smakebuf_r+0x74>
 8001e78:	4630      	mov	r0, r6
 8001e7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e7e:	f000 fc5f 	bl	8002740 <_isatty_r>
 8001e82:	b128      	cbz	r0, 8001e90 <__smakebuf_r+0x74>
 8001e84:	89a3      	ldrh	r3, [r4, #12]
 8001e86:	f023 0303 	bic.w	r3, r3, #3
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	81a3      	strh	r3, [r4, #12]
 8001e90:	89a0      	ldrh	r0, [r4, #12]
 8001e92:	4305      	orrs	r5, r0
 8001e94:	81a5      	strh	r5, [r4, #12]
 8001e96:	e7cd      	b.n	8001e34 <__smakebuf_r+0x18>
 8001e98:	08001c29 	.word	0x08001c29

08001e9c <_free_r>:
 8001e9c:	b538      	push	{r3, r4, r5, lr}
 8001e9e:	4605      	mov	r5, r0
 8001ea0:	2900      	cmp	r1, #0
 8001ea2:	d040      	beq.n	8001f26 <_free_r+0x8a>
 8001ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ea8:	1f0c      	subs	r4, r1, #4
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	bfb8      	it	lt
 8001eae:	18e4      	addlt	r4, r4, r3
 8001eb0:	f000 fc76 	bl	80027a0 <__malloc_lock>
 8001eb4:	4a1c      	ldr	r2, [pc, #112]	; (8001f28 <_free_r+0x8c>)
 8001eb6:	6813      	ldr	r3, [r2, #0]
 8001eb8:	b933      	cbnz	r3, 8001ec8 <_free_r+0x2c>
 8001eba:	6063      	str	r3, [r4, #4]
 8001ebc:	6014      	str	r4, [r2, #0]
 8001ebe:	4628      	mov	r0, r5
 8001ec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ec4:	f000 bc72 	b.w	80027ac <__malloc_unlock>
 8001ec8:	42a3      	cmp	r3, r4
 8001eca:	d908      	bls.n	8001ede <_free_r+0x42>
 8001ecc:	6820      	ldr	r0, [r4, #0]
 8001ece:	1821      	adds	r1, r4, r0
 8001ed0:	428b      	cmp	r3, r1
 8001ed2:	bf01      	itttt	eq
 8001ed4:	6819      	ldreq	r1, [r3, #0]
 8001ed6:	685b      	ldreq	r3, [r3, #4]
 8001ed8:	1809      	addeq	r1, r1, r0
 8001eda:	6021      	streq	r1, [r4, #0]
 8001edc:	e7ed      	b.n	8001eba <_free_r+0x1e>
 8001ede:	461a      	mov	r2, r3
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	b10b      	cbz	r3, 8001ee8 <_free_r+0x4c>
 8001ee4:	42a3      	cmp	r3, r4
 8001ee6:	d9fa      	bls.n	8001ede <_free_r+0x42>
 8001ee8:	6811      	ldr	r1, [r2, #0]
 8001eea:	1850      	adds	r0, r2, r1
 8001eec:	42a0      	cmp	r0, r4
 8001eee:	d10b      	bne.n	8001f08 <_free_r+0x6c>
 8001ef0:	6820      	ldr	r0, [r4, #0]
 8001ef2:	4401      	add	r1, r0
 8001ef4:	1850      	adds	r0, r2, r1
 8001ef6:	4283      	cmp	r3, r0
 8001ef8:	6011      	str	r1, [r2, #0]
 8001efa:	d1e0      	bne.n	8001ebe <_free_r+0x22>
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	4401      	add	r1, r0
 8001f02:	6011      	str	r1, [r2, #0]
 8001f04:	6053      	str	r3, [r2, #4]
 8001f06:	e7da      	b.n	8001ebe <_free_r+0x22>
 8001f08:	d902      	bls.n	8001f10 <_free_r+0x74>
 8001f0a:	230c      	movs	r3, #12
 8001f0c:	602b      	str	r3, [r5, #0]
 8001f0e:	e7d6      	b.n	8001ebe <_free_r+0x22>
 8001f10:	6820      	ldr	r0, [r4, #0]
 8001f12:	1821      	adds	r1, r4, r0
 8001f14:	428b      	cmp	r3, r1
 8001f16:	bf01      	itttt	eq
 8001f18:	6819      	ldreq	r1, [r3, #0]
 8001f1a:	685b      	ldreq	r3, [r3, #4]
 8001f1c:	1809      	addeq	r1, r1, r0
 8001f1e:	6021      	streq	r1, [r4, #0]
 8001f20:	6063      	str	r3, [r4, #4]
 8001f22:	6054      	str	r4, [r2, #4]
 8001f24:	e7cb      	b.n	8001ebe <_free_r+0x22>
 8001f26:	bd38      	pop	{r3, r4, r5, pc}
 8001f28:	20000160 	.word	0x20000160

08001f2c <sbrk_aligned>:
 8001f2c:	b570      	push	{r4, r5, r6, lr}
 8001f2e:	4e0e      	ldr	r6, [pc, #56]	; (8001f68 <sbrk_aligned+0x3c>)
 8001f30:	460c      	mov	r4, r1
 8001f32:	6831      	ldr	r1, [r6, #0]
 8001f34:	4605      	mov	r5, r0
 8001f36:	b911      	cbnz	r1, 8001f3e <sbrk_aligned+0x12>
 8001f38:	f000 fb7a 	bl	8002630 <_sbrk_r>
 8001f3c:	6030      	str	r0, [r6, #0]
 8001f3e:	4621      	mov	r1, r4
 8001f40:	4628      	mov	r0, r5
 8001f42:	f000 fb75 	bl	8002630 <_sbrk_r>
 8001f46:	1c43      	adds	r3, r0, #1
 8001f48:	d00a      	beq.n	8001f60 <sbrk_aligned+0x34>
 8001f4a:	1cc4      	adds	r4, r0, #3
 8001f4c:	f024 0403 	bic.w	r4, r4, #3
 8001f50:	42a0      	cmp	r0, r4
 8001f52:	d007      	beq.n	8001f64 <sbrk_aligned+0x38>
 8001f54:	1a21      	subs	r1, r4, r0
 8001f56:	4628      	mov	r0, r5
 8001f58:	f000 fb6a 	bl	8002630 <_sbrk_r>
 8001f5c:	3001      	adds	r0, #1
 8001f5e:	d101      	bne.n	8001f64 <sbrk_aligned+0x38>
 8001f60:	f04f 34ff 	mov.w	r4, #4294967295
 8001f64:	4620      	mov	r0, r4
 8001f66:	bd70      	pop	{r4, r5, r6, pc}
 8001f68:	20000164 	.word	0x20000164

08001f6c <_malloc_r>:
 8001f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f70:	1ccd      	adds	r5, r1, #3
 8001f72:	f025 0503 	bic.w	r5, r5, #3
 8001f76:	3508      	adds	r5, #8
 8001f78:	2d0c      	cmp	r5, #12
 8001f7a:	bf38      	it	cc
 8001f7c:	250c      	movcc	r5, #12
 8001f7e:	2d00      	cmp	r5, #0
 8001f80:	4607      	mov	r7, r0
 8001f82:	db01      	blt.n	8001f88 <_malloc_r+0x1c>
 8001f84:	42a9      	cmp	r1, r5
 8001f86:	d905      	bls.n	8001f94 <_malloc_r+0x28>
 8001f88:	230c      	movs	r3, #12
 8001f8a:	2600      	movs	r6, #0
 8001f8c:	603b      	str	r3, [r7, #0]
 8001f8e:	4630      	mov	r0, r6
 8001f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f94:	4e2e      	ldr	r6, [pc, #184]	; (8002050 <_malloc_r+0xe4>)
 8001f96:	f000 fc03 	bl	80027a0 <__malloc_lock>
 8001f9a:	6833      	ldr	r3, [r6, #0]
 8001f9c:	461c      	mov	r4, r3
 8001f9e:	bb34      	cbnz	r4, 8001fee <_malloc_r+0x82>
 8001fa0:	4629      	mov	r1, r5
 8001fa2:	4638      	mov	r0, r7
 8001fa4:	f7ff ffc2 	bl	8001f2c <sbrk_aligned>
 8001fa8:	1c43      	adds	r3, r0, #1
 8001faa:	4604      	mov	r4, r0
 8001fac:	d14d      	bne.n	800204a <_malloc_r+0xde>
 8001fae:	6834      	ldr	r4, [r6, #0]
 8001fb0:	4626      	mov	r6, r4
 8001fb2:	2e00      	cmp	r6, #0
 8001fb4:	d140      	bne.n	8002038 <_malloc_r+0xcc>
 8001fb6:	6823      	ldr	r3, [r4, #0]
 8001fb8:	4631      	mov	r1, r6
 8001fba:	4638      	mov	r0, r7
 8001fbc:	eb04 0803 	add.w	r8, r4, r3
 8001fc0:	f000 fb36 	bl	8002630 <_sbrk_r>
 8001fc4:	4580      	cmp	r8, r0
 8001fc6:	d13a      	bne.n	800203e <_malloc_r+0xd2>
 8001fc8:	6821      	ldr	r1, [r4, #0]
 8001fca:	3503      	adds	r5, #3
 8001fcc:	1a6d      	subs	r5, r5, r1
 8001fce:	f025 0503 	bic.w	r5, r5, #3
 8001fd2:	3508      	adds	r5, #8
 8001fd4:	2d0c      	cmp	r5, #12
 8001fd6:	bf38      	it	cc
 8001fd8:	250c      	movcc	r5, #12
 8001fda:	4638      	mov	r0, r7
 8001fdc:	4629      	mov	r1, r5
 8001fde:	f7ff ffa5 	bl	8001f2c <sbrk_aligned>
 8001fe2:	3001      	adds	r0, #1
 8001fe4:	d02b      	beq.n	800203e <_malloc_r+0xd2>
 8001fe6:	6823      	ldr	r3, [r4, #0]
 8001fe8:	442b      	add	r3, r5
 8001fea:	6023      	str	r3, [r4, #0]
 8001fec:	e00e      	b.n	800200c <_malloc_r+0xa0>
 8001fee:	6822      	ldr	r2, [r4, #0]
 8001ff0:	1b52      	subs	r2, r2, r5
 8001ff2:	d41e      	bmi.n	8002032 <_malloc_r+0xc6>
 8001ff4:	2a0b      	cmp	r2, #11
 8001ff6:	d916      	bls.n	8002026 <_malloc_r+0xba>
 8001ff8:	1961      	adds	r1, r4, r5
 8001ffa:	42a3      	cmp	r3, r4
 8001ffc:	6025      	str	r5, [r4, #0]
 8001ffe:	bf18      	it	ne
 8002000:	6059      	strne	r1, [r3, #4]
 8002002:	6863      	ldr	r3, [r4, #4]
 8002004:	bf08      	it	eq
 8002006:	6031      	streq	r1, [r6, #0]
 8002008:	5162      	str	r2, [r4, r5]
 800200a:	604b      	str	r3, [r1, #4]
 800200c:	4638      	mov	r0, r7
 800200e:	f104 060b 	add.w	r6, r4, #11
 8002012:	f000 fbcb 	bl	80027ac <__malloc_unlock>
 8002016:	f026 0607 	bic.w	r6, r6, #7
 800201a:	1d23      	adds	r3, r4, #4
 800201c:	1af2      	subs	r2, r6, r3
 800201e:	d0b6      	beq.n	8001f8e <_malloc_r+0x22>
 8002020:	1b9b      	subs	r3, r3, r6
 8002022:	50a3      	str	r3, [r4, r2]
 8002024:	e7b3      	b.n	8001f8e <_malloc_r+0x22>
 8002026:	6862      	ldr	r2, [r4, #4]
 8002028:	42a3      	cmp	r3, r4
 800202a:	bf0c      	ite	eq
 800202c:	6032      	streq	r2, [r6, #0]
 800202e:	605a      	strne	r2, [r3, #4]
 8002030:	e7ec      	b.n	800200c <_malloc_r+0xa0>
 8002032:	4623      	mov	r3, r4
 8002034:	6864      	ldr	r4, [r4, #4]
 8002036:	e7b2      	b.n	8001f9e <_malloc_r+0x32>
 8002038:	4634      	mov	r4, r6
 800203a:	6876      	ldr	r6, [r6, #4]
 800203c:	e7b9      	b.n	8001fb2 <_malloc_r+0x46>
 800203e:	230c      	movs	r3, #12
 8002040:	4638      	mov	r0, r7
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	f000 fbb2 	bl	80027ac <__malloc_unlock>
 8002048:	e7a1      	b.n	8001f8e <_malloc_r+0x22>
 800204a:	6025      	str	r5, [r4, #0]
 800204c:	e7de      	b.n	800200c <_malloc_r+0xa0>
 800204e:	bf00      	nop
 8002050:	20000160 	.word	0x20000160

08002054 <__sfputc_r>:
 8002054:	6893      	ldr	r3, [r2, #8]
 8002056:	b410      	push	{r4}
 8002058:	3b01      	subs	r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	6093      	str	r3, [r2, #8]
 800205e:	da07      	bge.n	8002070 <__sfputc_r+0x1c>
 8002060:	6994      	ldr	r4, [r2, #24]
 8002062:	42a3      	cmp	r3, r4
 8002064:	db01      	blt.n	800206a <__sfputc_r+0x16>
 8002066:	290a      	cmp	r1, #10
 8002068:	d102      	bne.n	8002070 <__sfputc_r+0x1c>
 800206a:	bc10      	pop	{r4}
 800206c:	f7ff bc3a 	b.w	80018e4 <__swbuf_r>
 8002070:	6813      	ldr	r3, [r2, #0]
 8002072:	1c58      	adds	r0, r3, #1
 8002074:	6010      	str	r0, [r2, #0]
 8002076:	7019      	strb	r1, [r3, #0]
 8002078:	4608      	mov	r0, r1
 800207a:	bc10      	pop	{r4}
 800207c:	4770      	bx	lr

0800207e <__sfputs_r>:
 800207e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002080:	4606      	mov	r6, r0
 8002082:	460f      	mov	r7, r1
 8002084:	4614      	mov	r4, r2
 8002086:	18d5      	adds	r5, r2, r3
 8002088:	42ac      	cmp	r4, r5
 800208a:	d101      	bne.n	8002090 <__sfputs_r+0x12>
 800208c:	2000      	movs	r0, #0
 800208e:	e007      	b.n	80020a0 <__sfputs_r+0x22>
 8002090:	463a      	mov	r2, r7
 8002092:	4630      	mov	r0, r6
 8002094:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002098:	f7ff ffdc 	bl	8002054 <__sfputc_r>
 800209c:	1c43      	adds	r3, r0, #1
 800209e:	d1f3      	bne.n	8002088 <__sfputs_r+0xa>
 80020a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080020a4 <_vfiprintf_r>:
 80020a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020a8:	460d      	mov	r5, r1
 80020aa:	4614      	mov	r4, r2
 80020ac:	4698      	mov	r8, r3
 80020ae:	4606      	mov	r6, r0
 80020b0:	b09d      	sub	sp, #116	; 0x74
 80020b2:	b118      	cbz	r0, 80020bc <_vfiprintf_r+0x18>
 80020b4:	6983      	ldr	r3, [r0, #24]
 80020b6:	b90b      	cbnz	r3, 80020bc <_vfiprintf_r+0x18>
 80020b8:	f7ff fdea 	bl	8001c90 <__sinit>
 80020bc:	4b89      	ldr	r3, [pc, #548]	; (80022e4 <_vfiprintf_r+0x240>)
 80020be:	429d      	cmp	r5, r3
 80020c0:	d11b      	bne.n	80020fa <_vfiprintf_r+0x56>
 80020c2:	6875      	ldr	r5, [r6, #4]
 80020c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80020c6:	07d9      	lsls	r1, r3, #31
 80020c8:	d405      	bmi.n	80020d6 <_vfiprintf_r+0x32>
 80020ca:	89ab      	ldrh	r3, [r5, #12]
 80020cc:	059a      	lsls	r2, r3, #22
 80020ce:	d402      	bmi.n	80020d6 <_vfiprintf_r+0x32>
 80020d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80020d2:	f7ff fe7b 	bl	8001dcc <__retarget_lock_acquire_recursive>
 80020d6:	89ab      	ldrh	r3, [r5, #12]
 80020d8:	071b      	lsls	r3, r3, #28
 80020da:	d501      	bpl.n	80020e0 <_vfiprintf_r+0x3c>
 80020dc:	692b      	ldr	r3, [r5, #16]
 80020de:	b9eb      	cbnz	r3, 800211c <_vfiprintf_r+0x78>
 80020e0:	4629      	mov	r1, r5
 80020e2:	4630      	mov	r0, r6
 80020e4:	f7ff fc50 	bl	8001988 <__swsetup_r>
 80020e8:	b1c0      	cbz	r0, 800211c <_vfiprintf_r+0x78>
 80020ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80020ec:	07dc      	lsls	r4, r3, #31
 80020ee:	d50e      	bpl.n	800210e <_vfiprintf_r+0x6a>
 80020f0:	f04f 30ff 	mov.w	r0, #4294967295
 80020f4:	b01d      	add	sp, #116	; 0x74
 80020f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020fa:	4b7b      	ldr	r3, [pc, #492]	; (80022e8 <_vfiprintf_r+0x244>)
 80020fc:	429d      	cmp	r5, r3
 80020fe:	d101      	bne.n	8002104 <_vfiprintf_r+0x60>
 8002100:	68b5      	ldr	r5, [r6, #8]
 8002102:	e7df      	b.n	80020c4 <_vfiprintf_r+0x20>
 8002104:	4b79      	ldr	r3, [pc, #484]	; (80022ec <_vfiprintf_r+0x248>)
 8002106:	429d      	cmp	r5, r3
 8002108:	bf08      	it	eq
 800210a:	68f5      	ldreq	r5, [r6, #12]
 800210c:	e7da      	b.n	80020c4 <_vfiprintf_r+0x20>
 800210e:	89ab      	ldrh	r3, [r5, #12]
 8002110:	0598      	lsls	r0, r3, #22
 8002112:	d4ed      	bmi.n	80020f0 <_vfiprintf_r+0x4c>
 8002114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002116:	f7ff fe5a 	bl	8001dce <__retarget_lock_release_recursive>
 800211a:	e7e9      	b.n	80020f0 <_vfiprintf_r+0x4c>
 800211c:	2300      	movs	r3, #0
 800211e:	9309      	str	r3, [sp, #36]	; 0x24
 8002120:	2320      	movs	r3, #32
 8002122:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002126:	2330      	movs	r3, #48	; 0x30
 8002128:	f04f 0901 	mov.w	r9, #1
 800212c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002130:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80022f0 <_vfiprintf_r+0x24c>
 8002134:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002138:	4623      	mov	r3, r4
 800213a:	469a      	mov	sl, r3
 800213c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002140:	b10a      	cbz	r2, 8002146 <_vfiprintf_r+0xa2>
 8002142:	2a25      	cmp	r2, #37	; 0x25
 8002144:	d1f9      	bne.n	800213a <_vfiprintf_r+0x96>
 8002146:	ebba 0b04 	subs.w	fp, sl, r4
 800214a:	d00b      	beq.n	8002164 <_vfiprintf_r+0xc0>
 800214c:	465b      	mov	r3, fp
 800214e:	4622      	mov	r2, r4
 8002150:	4629      	mov	r1, r5
 8002152:	4630      	mov	r0, r6
 8002154:	f7ff ff93 	bl	800207e <__sfputs_r>
 8002158:	3001      	adds	r0, #1
 800215a:	f000 80aa 	beq.w	80022b2 <_vfiprintf_r+0x20e>
 800215e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002160:	445a      	add	r2, fp
 8002162:	9209      	str	r2, [sp, #36]	; 0x24
 8002164:	f89a 3000 	ldrb.w	r3, [sl]
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 80a2 	beq.w	80022b2 <_vfiprintf_r+0x20e>
 800216e:	2300      	movs	r3, #0
 8002170:	f04f 32ff 	mov.w	r2, #4294967295
 8002174:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002178:	f10a 0a01 	add.w	sl, sl, #1
 800217c:	9304      	str	r3, [sp, #16]
 800217e:	9307      	str	r3, [sp, #28]
 8002180:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002184:	931a      	str	r3, [sp, #104]	; 0x68
 8002186:	4654      	mov	r4, sl
 8002188:	2205      	movs	r2, #5
 800218a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800218e:	4858      	ldr	r0, [pc, #352]	; (80022f0 <_vfiprintf_r+0x24c>)
 8002190:	f000 faf8 	bl	8002784 <memchr>
 8002194:	9a04      	ldr	r2, [sp, #16]
 8002196:	b9d8      	cbnz	r0, 80021d0 <_vfiprintf_r+0x12c>
 8002198:	06d1      	lsls	r1, r2, #27
 800219a:	bf44      	itt	mi
 800219c:	2320      	movmi	r3, #32
 800219e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80021a2:	0713      	lsls	r3, r2, #28
 80021a4:	bf44      	itt	mi
 80021a6:	232b      	movmi	r3, #43	; 0x2b
 80021a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80021ac:	f89a 3000 	ldrb.w	r3, [sl]
 80021b0:	2b2a      	cmp	r3, #42	; 0x2a
 80021b2:	d015      	beq.n	80021e0 <_vfiprintf_r+0x13c>
 80021b4:	4654      	mov	r4, sl
 80021b6:	2000      	movs	r0, #0
 80021b8:	f04f 0c0a 	mov.w	ip, #10
 80021bc:	9a07      	ldr	r2, [sp, #28]
 80021be:	4621      	mov	r1, r4
 80021c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80021c4:	3b30      	subs	r3, #48	; 0x30
 80021c6:	2b09      	cmp	r3, #9
 80021c8:	d94e      	bls.n	8002268 <_vfiprintf_r+0x1c4>
 80021ca:	b1b0      	cbz	r0, 80021fa <_vfiprintf_r+0x156>
 80021cc:	9207      	str	r2, [sp, #28]
 80021ce:	e014      	b.n	80021fa <_vfiprintf_r+0x156>
 80021d0:	eba0 0308 	sub.w	r3, r0, r8
 80021d4:	fa09 f303 	lsl.w	r3, r9, r3
 80021d8:	4313      	orrs	r3, r2
 80021da:	46a2      	mov	sl, r4
 80021dc:	9304      	str	r3, [sp, #16]
 80021de:	e7d2      	b.n	8002186 <_vfiprintf_r+0xe2>
 80021e0:	9b03      	ldr	r3, [sp, #12]
 80021e2:	1d19      	adds	r1, r3, #4
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	9103      	str	r1, [sp, #12]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	bfbb      	ittet	lt
 80021ec:	425b      	neglt	r3, r3
 80021ee:	f042 0202 	orrlt.w	r2, r2, #2
 80021f2:	9307      	strge	r3, [sp, #28]
 80021f4:	9307      	strlt	r3, [sp, #28]
 80021f6:	bfb8      	it	lt
 80021f8:	9204      	strlt	r2, [sp, #16]
 80021fa:	7823      	ldrb	r3, [r4, #0]
 80021fc:	2b2e      	cmp	r3, #46	; 0x2e
 80021fe:	d10c      	bne.n	800221a <_vfiprintf_r+0x176>
 8002200:	7863      	ldrb	r3, [r4, #1]
 8002202:	2b2a      	cmp	r3, #42	; 0x2a
 8002204:	d135      	bne.n	8002272 <_vfiprintf_r+0x1ce>
 8002206:	9b03      	ldr	r3, [sp, #12]
 8002208:	3402      	adds	r4, #2
 800220a:	1d1a      	adds	r2, r3, #4
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	9203      	str	r2, [sp, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	bfb8      	it	lt
 8002214:	f04f 33ff 	movlt.w	r3, #4294967295
 8002218:	9305      	str	r3, [sp, #20]
 800221a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80022f4 <_vfiprintf_r+0x250>
 800221e:	2203      	movs	r2, #3
 8002220:	4650      	mov	r0, sl
 8002222:	7821      	ldrb	r1, [r4, #0]
 8002224:	f000 faae 	bl	8002784 <memchr>
 8002228:	b140      	cbz	r0, 800223c <_vfiprintf_r+0x198>
 800222a:	2340      	movs	r3, #64	; 0x40
 800222c:	eba0 000a 	sub.w	r0, r0, sl
 8002230:	fa03 f000 	lsl.w	r0, r3, r0
 8002234:	9b04      	ldr	r3, [sp, #16]
 8002236:	3401      	adds	r4, #1
 8002238:	4303      	orrs	r3, r0
 800223a:	9304      	str	r3, [sp, #16]
 800223c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002240:	2206      	movs	r2, #6
 8002242:	482d      	ldr	r0, [pc, #180]	; (80022f8 <_vfiprintf_r+0x254>)
 8002244:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002248:	f000 fa9c 	bl	8002784 <memchr>
 800224c:	2800      	cmp	r0, #0
 800224e:	d03f      	beq.n	80022d0 <_vfiprintf_r+0x22c>
 8002250:	4b2a      	ldr	r3, [pc, #168]	; (80022fc <_vfiprintf_r+0x258>)
 8002252:	bb1b      	cbnz	r3, 800229c <_vfiprintf_r+0x1f8>
 8002254:	9b03      	ldr	r3, [sp, #12]
 8002256:	3307      	adds	r3, #7
 8002258:	f023 0307 	bic.w	r3, r3, #7
 800225c:	3308      	adds	r3, #8
 800225e:	9303      	str	r3, [sp, #12]
 8002260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002262:	443b      	add	r3, r7
 8002264:	9309      	str	r3, [sp, #36]	; 0x24
 8002266:	e767      	b.n	8002138 <_vfiprintf_r+0x94>
 8002268:	460c      	mov	r4, r1
 800226a:	2001      	movs	r0, #1
 800226c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002270:	e7a5      	b.n	80021be <_vfiprintf_r+0x11a>
 8002272:	2300      	movs	r3, #0
 8002274:	f04f 0c0a 	mov.w	ip, #10
 8002278:	4619      	mov	r1, r3
 800227a:	3401      	adds	r4, #1
 800227c:	9305      	str	r3, [sp, #20]
 800227e:	4620      	mov	r0, r4
 8002280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002284:	3a30      	subs	r2, #48	; 0x30
 8002286:	2a09      	cmp	r2, #9
 8002288:	d903      	bls.n	8002292 <_vfiprintf_r+0x1ee>
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0c5      	beq.n	800221a <_vfiprintf_r+0x176>
 800228e:	9105      	str	r1, [sp, #20]
 8002290:	e7c3      	b.n	800221a <_vfiprintf_r+0x176>
 8002292:	4604      	mov	r4, r0
 8002294:	2301      	movs	r3, #1
 8002296:	fb0c 2101 	mla	r1, ip, r1, r2
 800229a:	e7f0      	b.n	800227e <_vfiprintf_r+0x1da>
 800229c:	ab03      	add	r3, sp, #12
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	462a      	mov	r2, r5
 80022a2:	4630      	mov	r0, r6
 80022a4:	4b16      	ldr	r3, [pc, #88]	; (8002300 <_vfiprintf_r+0x25c>)
 80022a6:	a904      	add	r1, sp, #16
 80022a8:	f3af 8000 	nop.w
 80022ac:	4607      	mov	r7, r0
 80022ae:	1c78      	adds	r0, r7, #1
 80022b0:	d1d6      	bne.n	8002260 <_vfiprintf_r+0x1bc>
 80022b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80022b4:	07d9      	lsls	r1, r3, #31
 80022b6:	d405      	bmi.n	80022c4 <_vfiprintf_r+0x220>
 80022b8:	89ab      	ldrh	r3, [r5, #12]
 80022ba:	059a      	lsls	r2, r3, #22
 80022bc:	d402      	bmi.n	80022c4 <_vfiprintf_r+0x220>
 80022be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80022c0:	f7ff fd85 	bl	8001dce <__retarget_lock_release_recursive>
 80022c4:	89ab      	ldrh	r3, [r5, #12]
 80022c6:	065b      	lsls	r3, r3, #25
 80022c8:	f53f af12 	bmi.w	80020f0 <_vfiprintf_r+0x4c>
 80022cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80022ce:	e711      	b.n	80020f4 <_vfiprintf_r+0x50>
 80022d0:	ab03      	add	r3, sp, #12
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	462a      	mov	r2, r5
 80022d6:	4630      	mov	r0, r6
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <_vfiprintf_r+0x25c>)
 80022da:	a904      	add	r1, sp, #16
 80022dc:	f000 f882 	bl	80023e4 <_printf_i>
 80022e0:	e7e4      	b.n	80022ac <_vfiprintf_r+0x208>
 80022e2:	bf00      	nop
 80022e4:	0800286c 	.word	0x0800286c
 80022e8:	0800288c 	.word	0x0800288c
 80022ec:	0800284c 	.word	0x0800284c
 80022f0:	080028ac 	.word	0x080028ac
 80022f4:	080028b2 	.word	0x080028b2
 80022f8:	080028b6 	.word	0x080028b6
 80022fc:	00000000 	.word	0x00000000
 8002300:	0800207f 	.word	0x0800207f

08002304 <_printf_common>:
 8002304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002308:	4616      	mov	r6, r2
 800230a:	4699      	mov	r9, r3
 800230c:	688a      	ldr	r2, [r1, #8]
 800230e:	690b      	ldr	r3, [r1, #16]
 8002310:	4607      	mov	r7, r0
 8002312:	4293      	cmp	r3, r2
 8002314:	bfb8      	it	lt
 8002316:	4613      	movlt	r3, r2
 8002318:	6033      	str	r3, [r6, #0]
 800231a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800231e:	460c      	mov	r4, r1
 8002320:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002324:	b10a      	cbz	r2, 800232a <_printf_common+0x26>
 8002326:	3301      	adds	r3, #1
 8002328:	6033      	str	r3, [r6, #0]
 800232a:	6823      	ldr	r3, [r4, #0]
 800232c:	0699      	lsls	r1, r3, #26
 800232e:	bf42      	ittt	mi
 8002330:	6833      	ldrmi	r3, [r6, #0]
 8002332:	3302      	addmi	r3, #2
 8002334:	6033      	strmi	r3, [r6, #0]
 8002336:	6825      	ldr	r5, [r4, #0]
 8002338:	f015 0506 	ands.w	r5, r5, #6
 800233c:	d106      	bne.n	800234c <_printf_common+0x48>
 800233e:	f104 0a19 	add.w	sl, r4, #25
 8002342:	68e3      	ldr	r3, [r4, #12]
 8002344:	6832      	ldr	r2, [r6, #0]
 8002346:	1a9b      	subs	r3, r3, r2
 8002348:	42ab      	cmp	r3, r5
 800234a:	dc28      	bgt.n	800239e <_printf_common+0x9a>
 800234c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002350:	1e13      	subs	r3, r2, #0
 8002352:	6822      	ldr	r2, [r4, #0]
 8002354:	bf18      	it	ne
 8002356:	2301      	movne	r3, #1
 8002358:	0692      	lsls	r2, r2, #26
 800235a:	d42d      	bmi.n	80023b8 <_printf_common+0xb4>
 800235c:	4649      	mov	r1, r9
 800235e:	4638      	mov	r0, r7
 8002360:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002364:	47c0      	blx	r8
 8002366:	3001      	adds	r0, #1
 8002368:	d020      	beq.n	80023ac <_printf_common+0xa8>
 800236a:	6823      	ldr	r3, [r4, #0]
 800236c:	68e5      	ldr	r5, [r4, #12]
 800236e:	f003 0306 	and.w	r3, r3, #6
 8002372:	2b04      	cmp	r3, #4
 8002374:	bf18      	it	ne
 8002376:	2500      	movne	r5, #0
 8002378:	6832      	ldr	r2, [r6, #0]
 800237a:	f04f 0600 	mov.w	r6, #0
 800237e:	68a3      	ldr	r3, [r4, #8]
 8002380:	bf08      	it	eq
 8002382:	1aad      	subeq	r5, r5, r2
 8002384:	6922      	ldr	r2, [r4, #16]
 8002386:	bf08      	it	eq
 8002388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800238c:	4293      	cmp	r3, r2
 800238e:	bfc4      	itt	gt
 8002390:	1a9b      	subgt	r3, r3, r2
 8002392:	18ed      	addgt	r5, r5, r3
 8002394:	341a      	adds	r4, #26
 8002396:	42b5      	cmp	r5, r6
 8002398:	d11a      	bne.n	80023d0 <_printf_common+0xcc>
 800239a:	2000      	movs	r0, #0
 800239c:	e008      	b.n	80023b0 <_printf_common+0xac>
 800239e:	2301      	movs	r3, #1
 80023a0:	4652      	mov	r2, sl
 80023a2:	4649      	mov	r1, r9
 80023a4:	4638      	mov	r0, r7
 80023a6:	47c0      	blx	r8
 80023a8:	3001      	adds	r0, #1
 80023aa:	d103      	bne.n	80023b4 <_printf_common+0xb0>
 80023ac:	f04f 30ff 	mov.w	r0, #4294967295
 80023b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023b4:	3501      	adds	r5, #1
 80023b6:	e7c4      	b.n	8002342 <_printf_common+0x3e>
 80023b8:	2030      	movs	r0, #48	; 0x30
 80023ba:	18e1      	adds	r1, r4, r3
 80023bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80023c6:	4422      	add	r2, r4
 80023c8:	3302      	adds	r3, #2
 80023ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80023ce:	e7c5      	b.n	800235c <_printf_common+0x58>
 80023d0:	2301      	movs	r3, #1
 80023d2:	4622      	mov	r2, r4
 80023d4:	4649      	mov	r1, r9
 80023d6:	4638      	mov	r0, r7
 80023d8:	47c0      	blx	r8
 80023da:	3001      	adds	r0, #1
 80023dc:	d0e6      	beq.n	80023ac <_printf_common+0xa8>
 80023de:	3601      	adds	r6, #1
 80023e0:	e7d9      	b.n	8002396 <_printf_common+0x92>
	...

080023e4 <_printf_i>:
 80023e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80023e8:	7e0f      	ldrb	r7, [r1, #24]
 80023ea:	4691      	mov	r9, r2
 80023ec:	2f78      	cmp	r7, #120	; 0x78
 80023ee:	4680      	mov	r8, r0
 80023f0:	460c      	mov	r4, r1
 80023f2:	469a      	mov	sl, r3
 80023f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80023f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80023fa:	d807      	bhi.n	800240c <_printf_i+0x28>
 80023fc:	2f62      	cmp	r7, #98	; 0x62
 80023fe:	d80a      	bhi.n	8002416 <_printf_i+0x32>
 8002400:	2f00      	cmp	r7, #0
 8002402:	f000 80d9 	beq.w	80025b8 <_printf_i+0x1d4>
 8002406:	2f58      	cmp	r7, #88	; 0x58
 8002408:	f000 80a4 	beq.w	8002554 <_printf_i+0x170>
 800240c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002410:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002414:	e03a      	b.n	800248c <_printf_i+0xa8>
 8002416:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800241a:	2b15      	cmp	r3, #21
 800241c:	d8f6      	bhi.n	800240c <_printf_i+0x28>
 800241e:	a101      	add	r1, pc, #4	; (adr r1, 8002424 <_printf_i+0x40>)
 8002420:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002424:	0800247d 	.word	0x0800247d
 8002428:	08002491 	.word	0x08002491
 800242c:	0800240d 	.word	0x0800240d
 8002430:	0800240d 	.word	0x0800240d
 8002434:	0800240d 	.word	0x0800240d
 8002438:	0800240d 	.word	0x0800240d
 800243c:	08002491 	.word	0x08002491
 8002440:	0800240d 	.word	0x0800240d
 8002444:	0800240d 	.word	0x0800240d
 8002448:	0800240d 	.word	0x0800240d
 800244c:	0800240d 	.word	0x0800240d
 8002450:	0800259f 	.word	0x0800259f
 8002454:	080024c1 	.word	0x080024c1
 8002458:	08002581 	.word	0x08002581
 800245c:	0800240d 	.word	0x0800240d
 8002460:	0800240d 	.word	0x0800240d
 8002464:	080025c1 	.word	0x080025c1
 8002468:	0800240d 	.word	0x0800240d
 800246c:	080024c1 	.word	0x080024c1
 8002470:	0800240d 	.word	0x0800240d
 8002474:	0800240d 	.word	0x0800240d
 8002478:	08002589 	.word	0x08002589
 800247c:	682b      	ldr	r3, [r5, #0]
 800247e:	1d1a      	adds	r2, r3, #4
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	602a      	str	r2, [r5, #0]
 8002484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800248c:	2301      	movs	r3, #1
 800248e:	e0a4      	b.n	80025da <_printf_i+0x1f6>
 8002490:	6820      	ldr	r0, [r4, #0]
 8002492:	6829      	ldr	r1, [r5, #0]
 8002494:	0606      	lsls	r6, r0, #24
 8002496:	f101 0304 	add.w	r3, r1, #4
 800249a:	d50a      	bpl.n	80024b2 <_printf_i+0xce>
 800249c:	680e      	ldr	r6, [r1, #0]
 800249e:	602b      	str	r3, [r5, #0]
 80024a0:	2e00      	cmp	r6, #0
 80024a2:	da03      	bge.n	80024ac <_printf_i+0xc8>
 80024a4:	232d      	movs	r3, #45	; 0x2d
 80024a6:	4276      	negs	r6, r6
 80024a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024ac:	230a      	movs	r3, #10
 80024ae:	485e      	ldr	r0, [pc, #376]	; (8002628 <_printf_i+0x244>)
 80024b0:	e019      	b.n	80024e6 <_printf_i+0x102>
 80024b2:	680e      	ldr	r6, [r1, #0]
 80024b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80024b8:	602b      	str	r3, [r5, #0]
 80024ba:	bf18      	it	ne
 80024bc:	b236      	sxthne	r6, r6
 80024be:	e7ef      	b.n	80024a0 <_printf_i+0xbc>
 80024c0:	682b      	ldr	r3, [r5, #0]
 80024c2:	6820      	ldr	r0, [r4, #0]
 80024c4:	1d19      	adds	r1, r3, #4
 80024c6:	6029      	str	r1, [r5, #0]
 80024c8:	0601      	lsls	r1, r0, #24
 80024ca:	d501      	bpl.n	80024d0 <_printf_i+0xec>
 80024cc:	681e      	ldr	r6, [r3, #0]
 80024ce:	e002      	b.n	80024d6 <_printf_i+0xf2>
 80024d0:	0646      	lsls	r6, r0, #25
 80024d2:	d5fb      	bpl.n	80024cc <_printf_i+0xe8>
 80024d4:	881e      	ldrh	r6, [r3, #0]
 80024d6:	2f6f      	cmp	r7, #111	; 0x6f
 80024d8:	bf0c      	ite	eq
 80024da:	2308      	moveq	r3, #8
 80024dc:	230a      	movne	r3, #10
 80024de:	4852      	ldr	r0, [pc, #328]	; (8002628 <_printf_i+0x244>)
 80024e0:	2100      	movs	r1, #0
 80024e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80024e6:	6865      	ldr	r5, [r4, #4]
 80024e8:	2d00      	cmp	r5, #0
 80024ea:	bfa8      	it	ge
 80024ec:	6821      	ldrge	r1, [r4, #0]
 80024ee:	60a5      	str	r5, [r4, #8]
 80024f0:	bfa4      	itt	ge
 80024f2:	f021 0104 	bicge.w	r1, r1, #4
 80024f6:	6021      	strge	r1, [r4, #0]
 80024f8:	b90e      	cbnz	r6, 80024fe <_printf_i+0x11a>
 80024fa:	2d00      	cmp	r5, #0
 80024fc:	d04d      	beq.n	800259a <_printf_i+0x1b6>
 80024fe:	4615      	mov	r5, r2
 8002500:	fbb6 f1f3 	udiv	r1, r6, r3
 8002504:	fb03 6711 	mls	r7, r3, r1, r6
 8002508:	5dc7      	ldrb	r7, [r0, r7]
 800250a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800250e:	4637      	mov	r7, r6
 8002510:	42bb      	cmp	r3, r7
 8002512:	460e      	mov	r6, r1
 8002514:	d9f4      	bls.n	8002500 <_printf_i+0x11c>
 8002516:	2b08      	cmp	r3, #8
 8002518:	d10b      	bne.n	8002532 <_printf_i+0x14e>
 800251a:	6823      	ldr	r3, [r4, #0]
 800251c:	07de      	lsls	r6, r3, #31
 800251e:	d508      	bpl.n	8002532 <_printf_i+0x14e>
 8002520:	6923      	ldr	r3, [r4, #16]
 8002522:	6861      	ldr	r1, [r4, #4]
 8002524:	4299      	cmp	r1, r3
 8002526:	bfde      	ittt	le
 8002528:	2330      	movle	r3, #48	; 0x30
 800252a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800252e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002532:	1b52      	subs	r2, r2, r5
 8002534:	6122      	str	r2, [r4, #16]
 8002536:	464b      	mov	r3, r9
 8002538:	4621      	mov	r1, r4
 800253a:	4640      	mov	r0, r8
 800253c:	f8cd a000 	str.w	sl, [sp]
 8002540:	aa03      	add	r2, sp, #12
 8002542:	f7ff fedf 	bl	8002304 <_printf_common>
 8002546:	3001      	adds	r0, #1
 8002548:	d14c      	bne.n	80025e4 <_printf_i+0x200>
 800254a:	f04f 30ff 	mov.w	r0, #4294967295
 800254e:	b004      	add	sp, #16
 8002550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002554:	4834      	ldr	r0, [pc, #208]	; (8002628 <_printf_i+0x244>)
 8002556:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800255a:	6829      	ldr	r1, [r5, #0]
 800255c:	6823      	ldr	r3, [r4, #0]
 800255e:	f851 6b04 	ldr.w	r6, [r1], #4
 8002562:	6029      	str	r1, [r5, #0]
 8002564:	061d      	lsls	r5, r3, #24
 8002566:	d514      	bpl.n	8002592 <_printf_i+0x1ae>
 8002568:	07df      	lsls	r7, r3, #31
 800256a:	bf44      	itt	mi
 800256c:	f043 0320 	orrmi.w	r3, r3, #32
 8002570:	6023      	strmi	r3, [r4, #0]
 8002572:	b91e      	cbnz	r6, 800257c <_printf_i+0x198>
 8002574:	6823      	ldr	r3, [r4, #0]
 8002576:	f023 0320 	bic.w	r3, r3, #32
 800257a:	6023      	str	r3, [r4, #0]
 800257c:	2310      	movs	r3, #16
 800257e:	e7af      	b.n	80024e0 <_printf_i+0xfc>
 8002580:	6823      	ldr	r3, [r4, #0]
 8002582:	f043 0320 	orr.w	r3, r3, #32
 8002586:	6023      	str	r3, [r4, #0]
 8002588:	2378      	movs	r3, #120	; 0x78
 800258a:	4828      	ldr	r0, [pc, #160]	; (800262c <_printf_i+0x248>)
 800258c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002590:	e7e3      	b.n	800255a <_printf_i+0x176>
 8002592:	0659      	lsls	r1, r3, #25
 8002594:	bf48      	it	mi
 8002596:	b2b6      	uxthmi	r6, r6
 8002598:	e7e6      	b.n	8002568 <_printf_i+0x184>
 800259a:	4615      	mov	r5, r2
 800259c:	e7bb      	b.n	8002516 <_printf_i+0x132>
 800259e:	682b      	ldr	r3, [r5, #0]
 80025a0:	6826      	ldr	r6, [r4, #0]
 80025a2:	1d18      	adds	r0, r3, #4
 80025a4:	6961      	ldr	r1, [r4, #20]
 80025a6:	6028      	str	r0, [r5, #0]
 80025a8:	0635      	lsls	r5, r6, #24
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	d501      	bpl.n	80025b2 <_printf_i+0x1ce>
 80025ae:	6019      	str	r1, [r3, #0]
 80025b0:	e002      	b.n	80025b8 <_printf_i+0x1d4>
 80025b2:	0670      	lsls	r0, r6, #25
 80025b4:	d5fb      	bpl.n	80025ae <_printf_i+0x1ca>
 80025b6:	8019      	strh	r1, [r3, #0]
 80025b8:	2300      	movs	r3, #0
 80025ba:	4615      	mov	r5, r2
 80025bc:	6123      	str	r3, [r4, #16]
 80025be:	e7ba      	b.n	8002536 <_printf_i+0x152>
 80025c0:	682b      	ldr	r3, [r5, #0]
 80025c2:	2100      	movs	r1, #0
 80025c4:	1d1a      	adds	r2, r3, #4
 80025c6:	602a      	str	r2, [r5, #0]
 80025c8:	681d      	ldr	r5, [r3, #0]
 80025ca:	6862      	ldr	r2, [r4, #4]
 80025cc:	4628      	mov	r0, r5
 80025ce:	f000 f8d9 	bl	8002784 <memchr>
 80025d2:	b108      	cbz	r0, 80025d8 <_printf_i+0x1f4>
 80025d4:	1b40      	subs	r0, r0, r5
 80025d6:	6060      	str	r0, [r4, #4]
 80025d8:	6863      	ldr	r3, [r4, #4]
 80025da:	6123      	str	r3, [r4, #16]
 80025dc:	2300      	movs	r3, #0
 80025de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025e2:	e7a8      	b.n	8002536 <_printf_i+0x152>
 80025e4:	462a      	mov	r2, r5
 80025e6:	4649      	mov	r1, r9
 80025e8:	4640      	mov	r0, r8
 80025ea:	6923      	ldr	r3, [r4, #16]
 80025ec:	47d0      	blx	sl
 80025ee:	3001      	adds	r0, #1
 80025f0:	d0ab      	beq.n	800254a <_printf_i+0x166>
 80025f2:	6823      	ldr	r3, [r4, #0]
 80025f4:	079b      	lsls	r3, r3, #30
 80025f6:	d413      	bmi.n	8002620 <_printf_i+0x23c>
 80025f8:	68e0      	ldr	r0, [r4, #12]
 80025fa:	9b03      	ldr	r3, [sp, #12]
 80025fc:	4298      	cmp	r0, r3
 80025fe:	bfb8      	it	lt
 8002600:	4618      	movlt	r0, r3
 8002602:	e7a4      	b.n	800254e <_printf_i+0x16a>
 8002604:	2301      	movs	r3, #1
 8002606:	4632      	mov	r2, r6
 8002608:	4649      	mov	r1, r9
 800260a:	4640      	mov	r0, r8
 800260c:	47d0      	blx	sl
 800260e:	3001      	adds	r0, #1
 8002610:	d09b      	beq.n	800254a <_printf_i+0x166>
 8002612:	3501      	adds	r5, #1
 8002614:	68e3      	ldr	r3, [r4, #12]
 8002616:	9903      	ldr	r1, [sp, #12]
 8002618:	1a5b      	subs	r3, r3, r1
 800261a:	42ab      	cmp	r3, r5
 800261c:	dcf2      	bgt.n	8002604 <_printf_i+0x220>
 800261e:	e7eb      	b.n	80025f8 <_printf_i+0x214>
 8002620:	2500      	movs	r5, #0
 8002622:	f104 0619 	add.w	r6, r4, #25
 8002626:	e7f5      	b.n	8002614 <_printf_i+0x230>
 8002628:	080028bd 	.word	0x080028bd
 800262c:	080028ce 	.word	0x080028ce

08002630 <_sbrk_r>:
 8002630:	b538      	push	{r3, r4, r5, lr}
 8002632:	2300      	movs	r3, #0
 8002634:	4d05      	ldr	r5, [pc, #20]	; (800264c <_sbrk_r+0x1c>)
 8002636:	4604      	mov	r4, r0
 8002638:	4608      	mov	r0, r1
 800263a:	602b      	str	r3, [r5, #0]
 800263c:	f7fd ff66 	bl	800050c <_sbrk>
 8002640:	1c43      	adds	r3, r0, #1
 8002642:	d102      	bne.n	800264a <_sbrk_r+0x1a>
 8002644:	682b      	ldr	r3, [r5, #0]
 8002646:	b103      	cbz	r3, 800264a <_sbrk_r+0x1a>
 8002648:	6023      	str	r3, [r4, #0]
 800264a:	bd38      	pop	{r3, r4, r5, pc}
 800264c:	20000168 	.word	0x20000168

08002650 <__sread>:
 8002650:	b510      	push	{r4, lr}
 8002652:	460c      	mov	r4, r1
 8002654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002658:	f000 f8ae 	bl	80027b8 <_read_r>
 800265c:	2800      	cmp	r0, #0
 800265e:	bfab      	itete	ge
 8002660:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002662:	89a3      	ldrhlt	r3, [r4, #12]
 8002664:	181b      	addge	r3, r3, r0
 8002666:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800266a:	bfac      	ite	ge
 800266c:	6563      	strge	r3, [r4, #84]	; 0x54
 800266e:	81a3      	strhlt	r3, [r4, #12]
 8002670:	bd10      	pop	{r4, pc}

08002672 <__swrite>:
 8002672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002676:	461f      	mov	r7, r3
 8002678:	898b      	ldrh	r3, [r1, #12]
 800267a:	4605      	mov	r5, r0
 800267c:	05db      	lsls	r3, r3, #23
 800267e:	460c      	mov	r4, r1
 8002680:	4616      	mov	r6, r2
 8002682:	d505      	bpl.n	8002690 <__swrite+0x1e>
 8002684:	2302      	movs	r3, #2
 8002686:	2200      	movs	r2, #0
 8002688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800268c:	f000 f868 	bl	8002760 <_lseek_r>
 8002690:	89a3      	ldrh	r3, [r4, #12]
 8002692:	4632      	mov	r2, r6
 8002694:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002698:	81a3      	strh	r3, [r4, #12]
 800269a:	4628      	mov	r0, r5
 800269c:	463b      	mov	r3, r7
 800269e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80026a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026a6:	f000 b817 	b.w	80026d8 <_write_r>

080026aa <__sseek>:
 80026aa:	b510      	push	{r4, lr}
 80026ac:	460c      	mov	r4, r1
 80026ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026b2:	f000 f855 	bl	8002760 <_lseek_r>
 80026b6:	1c43      	adds	r3, r0, #1
 80026b8:	89a3      	ldrh	r3, [r4, #12]
 80026ba:	bf15      	itete	ne
 80026bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80026be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80026c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80026c6:	81a3      	strheq	r3, [r4, #12]
 80026c8:	bf18      	it	ne
 80026ca:	81a3      	strhne	r3, [r4, #12]
 80026cc:	bd10      	pop	{r4, pc}

080026ce <__sclose>:
 80026ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026d2:	f000 b813 	b.w	80026fc <_close_r>
	...

080026d8 <_write_r>:
 80026d8:	b538      	push	{r3, r4, r5, lr}
 80026da:	4604      	mov	r4, r0
 80026dc:	4608      	mov	r0, r1
 80026de:	4611      	mov	r1, r2
 80026e0:	2200      	movs	r2, #0
 80026e2:	4d05      	ldr	r5, [pc, #20]	; (80026f8 <_write_r+0x20>)
 80026e4:	602a      	str	r2, [r5, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	f7fd fe2a 	bl	8000340 <_write>
 80026ec:	1c43      	adds	r3, r0, #1
 80026ee:	d102      	bne.n	80026f6 <_write_r+0x1e>
 80026f0:	682b      	ldr	r3, [r5, #0]
 80026f2:	b103      	cbz	r3, 80026f6 <_write_r+0x1e>
 80026f4:	6023      	str	r3, [r4, #0]
 80026f6:	bd38      	pop	{r3, r4, r5, pc}
 80026f8:	20000168 	.word	0x20000168

080026fc <_close_r>:
 80026fc:	b538      	push	{r3, r4, r5, lr}
 80026fe:	2300      	movs	r3, #0
 8002700:	4d05      	ldr	r5, [pc, #20]	; (8002718 <_close_r+0x1c>)
 8002702:	4604      	mov	r4, r0
 8002704:	4608      	mov	r0, r1
 8002706:	602b      	str	r3, [r5, #0]
 8002708:	f7fd fed0 	bl	80004ac <_close>
 800270c:	1c43      	adds	r3, r0, #1
 800270e:	d102      	bne.n	8002716 <_close_r+0x1a>
 8002710:	682b      	ldr	r3, [r5, #0]
 8002712:	b103      	cbz	r3, 8002716 <_close_r+0x1a>
 8002714:	6023      	str	r3, [r4, #0]
 8002716:	bd38      	pop	{r3, r4, r5, pc}
 8002718:	20000168 	.word	0x20000168

0800271c <_fstat_r>:
 800271c:	b538      	push	{r3, r4, r5, lr}
 800271e:	2300      	movs	r3, #0
 8002720:	4d06      	ldr	r5, [pc, #24]	; (800273c <_fstat_r+0x20>)
 8002722:	4604      	mov	r4, r0
 8002724:	4608      	mov	r0, r1
 8002726:	4611      	mov	r1, r2
 8002728:	602b      	str	r3, [r5, #0]
 800272a:	f7fd feca 	bl	80004c2 <_fstat>
 800272e:	1c43      	adds	r3, r0, #1
 8002730:	d102      	bne.n	8002738 <_fstat_r+0x1c>
 8002732:	682b      	ldr	r3, [r5, #0]
 8002734:	b103      	cbz	r3, 8002738 <_fstat_r+0x1c>
 8002736:	6023      	str	r3, [r4, #0]
 8002738:	bd38      	pop	{r3, r4, r5, pc}
 800273a:	bf00      	nop
 800273c:	20000168 	.word	0x20000168

08002740 <_isatty_r>:
 8002740:	b538      	push	{r3, r4, r5, lr}
 8002742:	2300      	movs	r3, #0
 8002744:	4d05      	ldr	r5, [pc, #20]	; (800275c <_isatty_r+0x1c>)
 8002746:	4604      	mov	r4, r0
 8002748:	4608      	mov	r0, r1
 800274a:	602b      	str	r3, [r5, #0]
 800274c:	f7fd fec8 	bl	80004e0 <_isatty>
 8002750:	1c43      	adds	r3, r0, #1
 8002752:	d102      	bne.n	800275a <_isatty_r+0x1a>
 8002754:	682b      	ldr	r3, [r5, #0]
 8002756:	b103      	cbz	r3, 800275a <_isatty_r+0x1a>
 8002758:	6023      	str	r3, [r4, #0]
 800275a:	bd38      	pop	{r3, r4, r5, pc}
 800275c:	20000168 	.word	0x20000168

08002760 <_lseek_r>:
 8002760:	b538      	push	{r3, r4, r5, lr}
 8002762:	4604      	mov	r4, r0
 8002764:	4608      	mov	r0, r1
 8002766:	4611      	mov	r1, r2
 8002768:	2200      	movs	r2, #0
 800276a:	4d05      	ldr	r5, [pc, #20]	; (8002780 <_lseek_r+0x20>)
 800276c:	602a      	str	r2, [r5, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	f7fd fec0 	bl	80004f4 <_lseek>
 8002774:	1c43      	adds	r3, r0, #1
 8002776:	d102      	bne.n	800277e <_lseek_r+0x1e>
 8002778:	682b      	ldr	r3, [r5, #0]
 800277a:	b103      	cbz	r3, 800277e <_lseek_r+0x1e>
 800277c:	6023      	str	r3, [r4, #0]
 800277e:	bd38      	pop	{r3, r4, r5, pc}
 8002780:	20000168 	.word	0x20000168

08002784 <memchr>:
 8002784:	4603      	mov	r3, r0
 8002786:	b510      	push	{r4, lr}
 8002788:	b2c9      	uxtb	r1, r1
 800278a:	4402      	add	r2, r0
 800278c:	4293      	cmp	r3, r2
 800278e:	4618      	mov	r0, r3
 8002790:	d101      	bne.n	8002796 <memchr+0x12>
 8002792:	2000      	movs	r0, #0
 8002794:	e003      	b.n	800279e <memchr+0x1a>
 8002796:	7804      	ldrb	r4, [r0, #0]
 8002798:	3301      	adds	r3, #1
 800279a:	428c      	cmp	r4, r1
 800279c:	d1f6      	bne.n	800278c <memchr+0x8>
 800279e:	bd10      	pop	{r4, pc}

080027a0 <__malloc_lock>:
 80027a0:	4801      	ldr	r0, [pc, #4]	; (80027a8 <__malloc_lock+0x8>)
 80027a2:	f7ff bb13 	b.w	8001dcc <__retarget_lock_acquire_recursive>
 80027a6:	bf00      	nop
 80027a8:	2000015c 	.word	0x2000015c

080027ac <__malloc_unlock>:
 80027ac:	4801      	ldr	r0, [pc, #4]	; (80027b4 <__malloc_unlock+0x8>)
 80027ae:	f7ff bb0e 	b.w	8001dce <__retarget_lock_release_recursive>
 80027b2:	bf00      	nop
 80027b4:	2000015c 	.word	0x2000015c

080027b8 <_read_r>:
 80027b8:	b538      	push	{r3, r4, r5, lr}
 80027ba:	4604      	mov	r4, r0
 80027bc:	4608      	mov	r0, r1
 80027be:	4611      	mov	r1, r2
 80027c0:	2200      	movs	r2, #0
 80027c2:	4d05      	ldr	r5, [pc, #20]	; (80027d8 <_read_r+0x20>)
 80027c4:	602a      	str	r2, [r5, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	f7fd fe53 	bl	8000472 <_read>
 80027cc:	1c43      	adds	r3, r0, #1
 80027ce:	d102      	bne.n	80027d6 <_read_r+0x1e>
 80027d0:	682b      	ldr	r3, [r5, #0]
 80027d2:	b103      	cbz	r3, 80027d6 <_read_r+0x1e>
 80027d4:	6023      	str	r3, [r4, #0]
 80027d6:	bd38      	pop	{r3, r4, r5, pc}
 80027d8:	20000168 	.word	0x20000168

080027dc <_init>:
 80027dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027de:	bf00      	nop
 80027e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027e2:	bc08      	pop	{r3}
 80027e4:	469e      	mov	lr, r3
 80027e6:	4770      	bx	lr

080027e8 <_fini>:
 80027e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ea:	bf00      	nop
 80027ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ee:	bc08      	pop	{r3}
 80027f0:	469e      	mov	lr, r3
 80027f2:	4770      	bx	lr
