
stm32_threadOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ff4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08003100  08003100  00013100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800323c  0800323c  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  0800323c  0800323c  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800323c  0800323c  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800323c  0800323c  0001323c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003240  08003240  00013240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08003244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001230  200000b0  080032f4  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012e0  080032f4  000212e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008375  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019f8  00000000  00000000  0002844e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b8  00000000  00000000  00029e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000710  00000000  00000000  0002a600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017be0  00000000  00000000  0002ad10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009163  00000000  00000000  000428f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083a25  00000000  00000000  0004ba53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf478  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002588  00000000  00000000  000cf4c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b0 	.word	0x200000b0
 8000128:	00000000 	.word	0x00000000
 800012c:	080030e8 	.word	0x080030e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b4 	.word	0x200000b4
 8000148:	080030e8 	.word	0x080030e8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f9c4 	bl	80004dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f807 	bl	8000166 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f874 	bl	8000244 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015c:	f000 f848 	bl	80001f0 <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  extern void run();
  run();
 8000160:	f001 ff6e 	bl	8002040 <run>
  while (1)
 8000164:	e7fe      	b.n	8000164 <main+0x18>

08000166 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000166:	b580      	push	{r7, lr}
 8000168:	b090      	sub	sp, #64	; 0x40
 800016a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800016c:	f107 0318 	add.w	r3, r7, #24
 8000170:	2228      	movs	r2, #40	; 0x28
 8000172:	2100      	movs	r1, #0
 8000174:	4618      	mov	r0, r3
 8000176:	f001 ffa7 	bl	80020c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800017a:	1d3b      	adds	r3, r7, #4
 800017c:	2200      	movs	r2, #0
 800017e:	601a      	str	r2, [r3, #0]
 8000180:	605a      	str	r2, [r3, #4]
 8000182:	609a      	str	r2, [r3, #8]
 8000184:	60da      	str	r2, [r3, #12]
 8000186:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000188:	2301      	movs	r3, #1
 800018a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800018c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000190:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000192:	2300      	movs	r3, #0
 8000194:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000196:	2301      	movs	r3, #1
 8000198:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800019a:	2302      	movs	r3, #2
 800019c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800019e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001a4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001aa:	f107 0318 	add.w	r3, r7, #24
 80001ae:	4618      	mov	r0, r3
 80001b0:	f000 fc82 	bl	8000ab8 <HAL_RCC_OscConfig>
 80001b4:	4603      	mov	r3, r0
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d001      	beq.n	80001be <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001ba:	f000 f865 	bl	8000288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001be:	230f      	movs	r3, #15
 80001c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001c2:	2302      	movs	r3, #2
 80001c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001c6:	2300      	movs	r3, #0
 80001c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d0:	2300      	movs	r3, #0
 80001d2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	2102      	movs	r1, #2
 80001d8:	4618      	mov	r0, r3
 80001da:	f000 feef 	bl	8000fbc <HAL_RCC_ClockConfig>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d001      	beq.n	80001e8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001e4:	f000 f850 	bl	8000288 <Error_Handler>
  }
}
 80001e8:	bf00      	nop
 80001ea:	3740      	adds	r7, #64	; 0x40
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}

080001f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80001f4:	4b11      	ldr	r3, [pc, #68]	; (800023c <MX_USART1_UART_Init+0x4c>)
 80001f6:	4a12      	ldr	r2, [pc, #72]	; (8000240 <MX_USART1_UART_Init+0x50>)
 80001f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80001fa:	4b10      	ldr	r3, [pc, #64]	; (800023c <MX_USART1_UART_Init+0x4c>)
 80001fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000200:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000202:	4b0e      	ldr	r3, [pc, #56]	; (800023c <MX_USART1_UART_Init+0x4c>)
 8000204:	2200      	movs	r2, #0
 8000206:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000208:	4b0c      	ldr	r3, [pc, #48]	; (800023c <MX_USART1_UART_Init+0x4c>)
 800020a:	2200      	movs	r2, #0
 800020c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800020e:	4b0b      	ldr	r3, [pc, #44]	; (800023c <MX_USART1_UART_Init+0x4c>)
 8000210:	2200      	movs	r2, #0
 8000212:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000214:	4b09      	ldr	r3, [pc, #36]	; (800023c <MX_USART1_UART_Init+0x4c>)
 8000216:	220c      	movs	r2, #12
 8000218:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800021a:	4b08      	ldr	r3, [pc, #32]	; (800023c <MX_USART1_UART_Init+0x4c>)
 800021c:	2200      	movs	r2, #0
 800021e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000220:	4b06      	ldr	r3, [pc, #24]	; (800023c <MX_USART1_UART_Init+0x4c>)
 8000222:	2200      	movs	r2, #0
 8000224:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000226:	4805      	ldr	r0, [pc, #20]	; (800023c <MX_USART1_UART_Init+0x4c>)
 8000228:	f001 f856 	bl	80012d8 <HAL_HalfDuplex_Init>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000232:	f000 f829 	bl	8000288 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000236:	bf00      	nop
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	200000cc 	.word	0x200000cc
 8000240:	40013800 	.word	0x40013800

08000244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800024a:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <MX_GPIO_Init+0x40>)
 800024c:	699b      	ldr	r3, [r3, #24]
 800024e:	4a0d      	ldr	r2, [pc, #52]	; (8000284 <MX_GPIO_Init+0x40>)
 8000250:	f043 0320 	orr.w	r3, r3, #32
 8000254:	6193      	str	r3, [r2, #24]
 8000256:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <MX_GPIO_Init+0x40>)
 8000258:	699b      	ldr	r3, [r3, #24]
 800025a:	f003 0320 	and.w	r3, r3, #32
 800025e:	607b      	str	r3, [r7, #4]
 8000260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000262:	4b08      	ldr	r3, [pc, #32]	; (8000284 <MX_GPIO_Init+0x40>)
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	4a07      	ldr	r2, [pc, #28]	; (8000284 <MX_GPIO_Init+0x40>)
 8000268:	f043 0304 	orr.w	r3, r3, #4
 800026c:	6193      	str	r3, [r2, #24]
 800026e:	4b05      	ldr	r3, [pc, #20]	; (8000284 <MX_GPIO_Init+0x40>)
 8000270:	699b      	ldr	r3, [r3, #24]
 8000272:	f003 0304 	and.w	r3, r3, #4
 8000276:	603b      	str	r3, [r7, #0]
 8000278:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800027a:	bf00      	nop
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr
 8000284:	40021000 	.word	0x40021000

08000288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800028c:	b672      	cpsid	i
}
 800028e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000290:	e7fe      	b.n	8000290 <Error_Handler+0x8>
	...

08000294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800029a:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <HAL_MspInit+0x40>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	4a0d      	ldr	r2, [pc, #52]	; (80002d4 <HAL_MspInit+0x40>)
 80002a0:	f043 0301 	orr.w	r3, r3, #1
 80002a4:	6193      	str	r3, [r2, #24]
 80002a6:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <HAL_MspInit+0x40>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	607b      	str	r3, [r7, #4]
 80002b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <HAL_MspInit+0x40>)
 80002b4:	69db      	ldr	r3, [r3, #28]
 80002b6:	4a07      	ldr	r2, [pc, #28]	; (80002d4 <HAL_MspInit+0x40>)
 80002b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002bc:	61d3      	str	r3, [r2, #28]
 80002be:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <HAL_MspInit+0x40>)
 80002c0:	69db      	ldr	r3, [r3, #28]
 80002c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002c6:	603b      	str	r3, [r7, #0]
 80002c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr
 80002d4:	40021000 	.word	0x40021000

080002d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e0:	f107 0310 	add.w	r3, r7, #16
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
 80002ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a16      	ldr	r2, [pc, #88]	; (800034c <HAL_UART_MspInit+0x74>)
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d124      	bne.n	8000342 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80002f8:	4b15      	ldr	r3, [pc, #84]	; (8000350 <HAL_UART_MspInit+0x78>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a14      	ldr	r2, [pc, #80]	; (8000350 <HAL_UART_MspInit+0x78>)
 80002fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b12      	ldr	r3, [pc, #72]	; (8000350 <HAL_UART_MspInit+0x78>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000310:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <HAL_UART_MspInit+0x78>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a0e      	ldr	r2, [pc, #56]	; (8000350 <HAL_UART_MspInit+0x78>)
 8000316:	f043 0304 	orr.w	r3, r3, #4
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <HAL_UART_MspInit+0x78>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0304 	and.w	r3, r3, #4
 8000324:	60bb      	str	r3, [r7, #8]
 8000326:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000328:	f44f 7300 	mov.w	r3, #512	; 0x200
 800032c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800032e:	2312      	movs	r3, #18
 8000330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000332:	2303      	movs	r3, #3
 8000334:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000336:	f107 0310 	add.w	r3, r7, #16
 800033a:	4619      	mov	r1, r3
 800033c:	4805      	ldr	r0, [pc, #20]	; (8000354 <HAL_UART_MspInit+0x7c>)
 800033e:	f000 fa37 	bl	80007b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000342:	bf00      	nop
 8000344:	3720      	adds	r7, #32
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40013800 	.word	0x40013800
 8000350:	40021000 	.word	0x40021000
 8000354:	40010800 	.word	0x40010800

08000358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800035c:	e7fe      	b.n	800035c <NMI_Handler+0x4>

0800035e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800035e:	b480      	push	{r7}
 8000360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000362:	e7fe      	b.n	8000362 <MemManage_Handler+0x4>

08000364 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000368:	e7fe      	b.n	8000368 <BusFault_Handler+0x4>

0800036a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800036a:	b480      	push	{r7}
 800036c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800036e:	e7fe      	b.n	800036e <UsageFault_Handler+0x4>

08000370 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr

0800037c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b086      	sub	sp, #24
 8000380:	af00      	add	r7, sp, #0
 8000382:	60f8      	str	r0, [r7, #12]
 8000384:	60b9      	str	r1, [r7, #8]
 8000386:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000388:	2300      	movs	r3, #0
 800038a:	617b      	str	r3, [r7, #20]
 800038c:	e00a      	b.n	80003a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800038e:	f3af 8000 	nop.w
 8000392:	4601      	mov	r1, r0
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	1c5a      	adds	r2, r3, #1
 8000398:	60ba      	str	r2, [r7, #8]
 800039a:	b2ca      	uxtb	r2, r1
 800039c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800039e:	697b      	ldr	r3, [r7, #20]
 80003a0:	3301      	adds	r3, #1
 80003a2:	617b      	str	r3, [r7, #20]
 80003a4:	697a      	ldr	r2, [r7, #20]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	429a      	cmp	r2, r3
 80003aa:	dbf0      	blt.n	800038e <_read+0x12>
  }

  return len;
 80003ac:	687b      	ldr	r3, [r7, #4]
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3718      	adds	r7, #24
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80003b6:	b480      	push	{r7}
 80003b8:	b083      	sub	sp, #12
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80003be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr

080003cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003dc:	605a      	str	r2, [r3, #4]
  return 0;
 80003de:	2300      	movs	r3, #0
}
 80003e0:	4618      	mov	r0, r3
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bc80      	pop	{r7}
 80003e8:	4770      	bx	lr

080003ea <_isatty>:

int _isatty(int file)
{
 80003ea:	b480      	push	{r7}
 80003ec:	b083      	sub	sp, #12
 80003ee:	af00      	add	r7, sp, #0
 80003f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80003f2:	2301      	movs	r3, #1
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	370c      	adds	r7, #12
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr

080003fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003fe:	b480      	push	{r7}
 8000400:	b085      	sub	sp, #20
 8000402:	af00      	add	r7, sp, #0
 8000404:	60f8      	str	r0, [r7, #12]
 8000406:	60b9      	str	r1, [r7, #8]
 8000408:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800040a:	2300      	movs	r3, #0
}
 800040c:	4618      	mov	r0, r3
 800040e:	3714      	adds	r7, #20
 8000410:	46bd      	mov	sp, r7
 8000412:	bc80      	pop	{r7}
 8000414:	4770      	bx	lr
	...

08000418 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000420:	4a14      	ldr	r2, [pc, #80]	; (8000474 <_sbrk+0x5c>)
 8000422:	4b15      	ldr	r3, [pc, #84]	; (8000478 <_sbrk+0x60>)
 8000424:	1ad3      	subs	r3, r2, r3
 8000426:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800042c:	4b13      	ldr	r3, [pc, #76]	; (800047c <_sbrk+0x64>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d102      	bne.n	800043a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000434:	4b11      	ldr	r3, [pc, #68]	; (800047c <_sbrk+0x64>)
 8000436:	4a12      	ldr	r2, [pc, #72]	; (8000480 <_sbrk+0x68>)
 8000438:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800043a:	4b10      	ldr	r3, [pc, #64]	; (800047c <_sbrk+0x64>)
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4413      	add	r3, r2
 8000442:	693a      	ldr	r2, [r7, #16]
 8000444:	429a      	cmp	r2, r3
 8000446:	d207      	bcs.n	8000458 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000448:	f001 fe14 	bl	8002074 <__errno>
 800044c:	4603      	mov	r3, r0
 800044e:	220c      	movs	r2, #12
 8000450:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000452:	f04f 33ff 	mov.w	r3, #4294967295
 8000456:	e009      	b.n	800046c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <_sbrk+0x64>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800045e:	4b07      	ldr	r3, [pc, #28]	; (800047c <_sbrk+0x64>)
 8000460:	681a      	ldr	r2, [r3, #0]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4413      	add	r3, r2
 8000466:	4a05      	ldr	r2, [pc, #20]	; (800047c <_sbrk+0x64>)
 8000468:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800046a:	68fb      	ldr	r3, [r7, #12]
}
 800046c:	4618      	mov	r0, r3
 800046e:	3718      	adds	r7, #24
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	20005000 	.word	0x20005000
 8000478:	00000400 	.word	0x00000400
 800047c:	20000114 	.word	0x20000114
 8000480:	200012e0 	.word	0x200012e0

08000484 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr

08000490 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/

    bl  SystemInit
 8000490:	f7ff fff8 	bl	8000484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000494:	480b      	ldr	r0, [pc, #44]	; (80004c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000496:	490c      	ldr	r1, [pc, #48]	; (80004c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000498:	4a0c      	ldr	r2, [pc, #48]	; (80004cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800049a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800049c:	e002      	b.n	80004a4 <LoopCopyDataInit>

0800049e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800049e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004a2:	3304      	adds	r3, #4

080004a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a8:	d3f9      	bcc.n	800049e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004aa:	4a09      	ldr	r2, [pc, #36]	; (80004d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004ac:	4c09      	ldr	r4, [pc, #36]	; (80004d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004b0:	e001      	b.n	80004b6 <LoopFillZerobss>

080004b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b4:	3204      	adds	r2, #4

080004b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b8:	d3fb      	bcc.n	80004b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004ba:	f001 fde1 	bl	8002080 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004be:	f7ff fe45 	bl	800014c <main>
  bx lr
 80004c2:	4770      	bx	lr
  ldr r0, =_sdata
 80004c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c8:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 80004cc:	08003244 	.word	0x08003244
  ldr r2, =_sbss
 80004d0:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80004d4:	200012e0 	.word	0x200012e0

080004d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004d8:	e7fe      	b.n	80004d8 <ADC1_2_IRQHandler>
	...

080004dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <HAL_Init+0x28>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a07      	ldr	r2, [pc, #28]	; (8000504 <HAL_Init+0x28>)
 80004e6:	f043 0310 	orr.w	r3, r3, #16
 80004ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ec:	2003      	movs	r0, #3
 80004ee:	f000 f92b 	bl	8000748 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f2:	200f      	movs	r0, #15
 80004f4:	f000 f808 	bl	8000508 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004f8:	f7ff fecc 	bl	8000294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004fc:	2300      	movs	r3, #0
}
 80004fe:	4618      	mov	r0, r3
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40022000 	.word	0x40022000

08000508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <HAL_InitTick+0x54>)
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x58>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	4619      	mov	r1, r3
 800051a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000522:	fbb2 f3f3 	udiv	r3, r2, r3
 8000526:	4618      	mov	r0, r3
 8000528:	f000 f935 	bl	8000796 <HAL_SYSTICK_Config>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000532:	2301      	movs	r3, #1
 8000534:	e00e      	b.n	8000554 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2b0f      	cmp	r3, #15
 800053a:	d80a      	bhi.n	8000552 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800053c:	2200      	movs	r2, #0
 800053e:	6879      	ldr	r1, [r7, #4]
 8000540:	f04f 30ff 	mov.w	r0, #4294967295
 8000544:	f000 f90b 	bl	800075e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000548:	4a06      	ldr	r2, [pc, #24]	; (8000564 <HAL_InitTick+0x5c>)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800054e:	2300      	movs	r3, #0
 8000550:	e000      	b.n	8000554 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000552:	2301      	movs	r3, #1
}
 8000554:	4618      	mov	r0, r3
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000000 	.word	0x20000000
 8000560:	20000008 	.word	0x20000008
 8000564:	20000004 	.word	0x20000004

08000568 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800056c:	4b05      	ldr	r3, [pc, #20]	; (8000584 <HAL_IncTick+0x1c>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	461a      	mov	r2, r3
 8000572:	4b05      	ldr	r3, [pc, #20]	; (8000588 <HAL_IncTick+0x20>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4413      	add	r3, r2
 8000578:	4a03      	ldr	r2, [pc, #12]	; (8000588 <HAL_IncTick+0x20>)
 800057a:	6013      	str	r3, [r2, #0]
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	20000008 	.word	0x20000008
 8000588:	20000118 	.word	0x20000118

0800058c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  return uwTick;
 8000590:	4b02      	ldr	r3, [pc, #8]	; (800059c <HAL_GetTick+0x10>)
 8000592:	681b      	ldr	r3, [r3, #0]
}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr
 800059c:	20000118 	.word	0x20000118

080005a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005a8:	f7ff fff0 	bl	800058c <HAL_GetTick>
 80005ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005b8:	d005      	beq.n	80005c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005ba:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <HAL_Delay+0x44>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	461a      	mov	r2, r3
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4413      	add	r3, r2
 80005c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005c6:	bf00      	nop
 80005c8:	f7ff ffe0 	bl	800058c <HAL_GetTick>
 80005cc:	4602      	mov	r2, r0
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	68fa      	ldr	r2, [r7, #12]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d8f7      	bhi.n	80005c8 <HAL_Delay+0x28>
  {
  }
}
 80005d8:	bf00      	nop
 80005da:	bf00      	nop
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000008 	.word	0x20000008

080005e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f003 0307 	and.w	r3, r3, #7
 80005f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <__NVIC_SetPriorityGrouping+0x44>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fe:	68ba      	ldr	r2, [r7, #8]
 8000600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000604:	4013      	ands	r3, r2
 8000606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800061a:	4a04      	ldr	r2, [pc, #16]	; (800062c <__NVIC_SetPriorityGrouping+0x44>)
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	60d3      	str	r3, [r2, #12]
}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <__NVIC_GetPriorityGrouping+0x18>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	0a1b      	lsrs	r3, r3, #8
 800063a:	f003 0307 	and.w	r3, r3, #7
}
 800063e:	4618      	mov	r0, r3
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	6039      	str	r1, [r7, #0]
 8000656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065c:	2b00      	cmp	r3, #0
 800065e:	db0a      	blt.n	8000676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b2da      	uxtb	r2, r3
 8000664:	490c      	ldr	r1, [pc, #48]	; (8000698 <__NVIC_SetPriority+0x4c>)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	0112      	lsls	r2, r2, #4
 800066c:	b2d2      	uxtb	r2, r2
 800066e:	440b      	add	r3, r1
 8000670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000674:	e00a      	b.n	800068c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4908      	ldr	r1, [pc, #32]	; (800069c <__NVIC_SetPriority+0x50>)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	f003 030f 	and.w	r3, r3, #15
 8000682:	3b04      	subs	r3, #4
 8000684:	0112      	lsls	r2, r2, #4
 8000686:	b2d2      	uxtb	r2, r2
 8000688:	440b      	add	r3, r1
 800068a:	761a      	strb	r2, [r3, #24]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000e100 	.word	0xe000e100
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b089      	sub	sp, #36	; 0x24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	f1c3 0307 	rsb	r3, r3, #7
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	bf28      	it	cs
 80006be:	2304      	movcs	r3, #4
 80006c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	3304      	adds	r3, #4
 80006c6:	2b06      	cmp	r3, #6
 80006c8:	d902      	bls.n	80006d0 <NVIC_EncodePriority+0x30>
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3b03      	subs	r3, #3
 80006ce:	e000      	b.n	80006d2 <NVIC_EncodePriority+0x32>
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	f04f 32ff 	mov.w	r2, #4294967295
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	fa02 f303 	lsl.w	r3, r2, r3
 80006de:	43da      	mvns	r2, r3
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	401a      	ands	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e8:	f04f 31ff 	mov.w	r1, #4294967295
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	fa01 f303 	lsl.w	r3, r1, r3
 80006f2:	43d9      	mvns	r1, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	4313      	orrs	r3, r2
         );
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3724      	adds	r7, #36	; 0x24
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr

08000704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	3b01      	subs	r3, #1
 8000710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000714:	d301      	bcc.n	800071a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000716:	2301      	movs	r3, #1
 8000718:	e00f      	b.n	800073a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800071a:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <SysTick_Config+0x40>)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3b01      	subs	r3, #1
 8000720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000722:	210f      	movs	r1, #15
 8000724:	f04f 30ff 	mov.w	r0, #4294967295
 8000728:	f7ff ff90 	bl	800064c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <SysTick_Config+0x40>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000732:	4b04      	ldr	r3, [pc, #16]	; (8000744 <SysTick_Config+0x40>)
 8000734:	2207      	movs	r2, #7
 8000736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000738:	2300      	movs	r3, #0
}
 800073a:	4618      	mov	r0, r3
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	e000e010 	.word	0xe000e010

08000748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff ff49 	bl	80005e8 <__NVIC_SetPriorityGrouping>
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800075e:	b580      	push	{r7, lr}
 8000760:	b086      	sub	sp, #24
 8000762:	af00      	add	r7, sp, #0
 8000764:	4603      	mov	r3, r0
 8000766:	60b9      	str	r1, [r7, #8]
 8000768:	607a      	str	r2, [r7, #4]
 800076a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000770:	f7ff ff5e 	bl	8000630 <__NVIC_GetPriorityGrouping>
 8000774:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	68b9      	ldr	r1, [r7, #8]
 800077a:	6978      	ldr	r0, [r7, #20]
 800077c:	f7ff ff90 	bl	80006a0 <NVIC_EncodePriority>
 8000780:	4602      	mov	r2, r0
 8000782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000786:	4611      	mov	r1, r2
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ff5f 	bl	800064c <__NVIC_SetPriority>
}
 800078e:	bf00      	nop
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff ffb0 	bl	8000704 <SysTick_Config>
 80007a4:	4603      	mov	r3, r0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b08b      	sub	sp, #44	; 0x2c
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007be:	2300      	movs	r3, #0
 80007c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007c2:	e169      	b.n	8000a98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80007c4:	2201      	movs	r2, #1
 80007c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c8:	fa02 f303 	lsl.w	r3, r2, r3
 80007cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	69fa      	ldr	r2, [r7, #28]
 80007d4:	4013      	ands	r3, r2
 80007d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007d8:	69ba      	ldr	r2, [r7, #24]
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	429a      	cmp	r2, r3
 80007de:	f040 8158 	bne.w	8000a92 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	4a9a      	ldr	r2, [pc, #616]	; (8000a50 <HAL_GPIO_Init+0x2a0>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d05e      	beq.n	80008aa <HAL_GPIO_Init+0xfa>
 80007ec:	4a98      	ldr	r2, [pc, #608]	; (8000a50 <HAL_GPIO_Init+0x2a0>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d875      	bhi.n	80008de <HAL_GPIO_Init+0x12e>
 80007f2:	4a98      	ldr	r2, [pc, #608]	; (8000a54 <HAL_GPIO_Init+0x2a4>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d058      	beq.n	80008aa <HAL_GPIO_Init+0xfa>
 80007f8:	4a96      	ldr	r2, [pc, #600]	; (8000a54 <HAL_GPIO_Init+0x2a4>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d86f      	bhi.n	80008de <HAL_GPIO_Init+0x12e>
 80007fe:	4a96      	ldr	r2, [pc, #600]	; (8000a58 <HAL_GPIO_Init+0x2a8>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d052      	beq.n	80008aa <HAL_GPIO_Init+0xfa>
 8000804:	4a94      	ldr	r2, [pc, #592]	; (8000a58 <HAL_GPIO_Init+0x2a8>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d869      	bhi.n	80008de <HAL_GPIO_Init+0x12e>
 800080a:	4a94      	ldr	r2, [pc, #592]	; (8000a5c <HAL_GPIO_Init+0x2ac>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d04c      	beq.n	80008aa <HAL_GPIO_Init+0xfa>
 8000810:	4a92      	ldr	r2, [pc, #584]	; (8000a5c <HAL_GPIO_Init+0x2ac>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d863      	bhi.n	80008de <HAL_GPIO_Init+0x12e>
 8000816:	4a92      	ldr	r2, [pc, #584]	; (8000a60 <HAL_GPIO_Init+0x2b0>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d046      	beq.n	80008aa <HAL_GPIO_Init+0xfa>
 800081c:	4a90      	ldr	r2, [pc, #576]	; (8000a60 <HAL_GPIO_Init+0x2b0>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d85d      	bhi.n	80008de <HAL_GPIO_Init+0x12e>
 8000822:	2b12      	cmp	r3, #18
 8000824:	d82a      	bhi.n	800087c <HAL_GPIO_Init+0xcc>
 8000826:	2b12      	cmp	r3, #18
 8000828:	d859      	bhi.n	80008de <HAL_GPIO_Init+0x12e>
 800082a:	a201      	add	r2, pc, #4	; (adr r2, 8000830 <HAL_GPIO_Init+0x80>)
 800082c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000830:	080008ab 	.word	0x080008ab
 8000834:	08000885 	.word	0x08000885
 8000838:	08000897 	.word	0x08000897
 800083c:	080008d9 	.word	0x080008d9
 8000840:	080008df 	.word	0x080008df
 8000844:	080008df 	.word	0x080008df
 8000848:	080008df 	.word	0x080008df
 800084c:	080008df 	.word	0x080008df
 8000850:	080008df 	.word	0x080008df
 8000854:	080008df 	.word	0x080008df
 8000858:	080008df 	.word	0x080008df
 800085c:	080008df 	.word	0x080008df
 8000860:	080008df 	.word	0x080008df
 8000864:	080008df 	.word	0x080008df
 8000868:	080008df 	.word	0x080008df
 800086c:	080008df 	.word	0x080008df
 8000870:	080008df 	.word	0x080008df
 8000874:	0800088d 	.word	0x0800088d
 8000878:	080008a1 	.word	0x080008a1
 800087c:	4a79      	ldr	r2, [pc, #484]	; (8000a64 <HAL_GPIO_Init+0x2b4>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d013      	beq.n	80008aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000882:	e02c      	b.n	80008de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	623b      	str	r3, [r7, #32]
          break;
 800088a:	e029      	b.n	80008e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	3304      	adds	r3, #4
 8000892:	623b      	str	r3, [r7, #32]
          break;
 8000894:	e024      	b.n	80008e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	68db      	ldr	r3, [r3, #12]
 800089a:	3308      	adds	r3, #8
 800089c:	623b      	str	r3, [r7, #32]
          break;
 800089e:	e01f      	b.n	80008e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	330c      	adds	r3, #12
 80008a6:	623b      	str	r3, [r7, #32]
          break;
 80008a8:	e01a      	b.n	80008e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d102      	bne.n	80008b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008b2:	2304      	movs	r3, #4
 80008b4:	623b      	str	r3, [r7, #32]
          break;
 80008b6:	e013      	b.n	80008e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d105      	bne.n	80008cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008c0:	2308      	movs	r3, #8
 80008c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	69fa      	ldr	r2, [r7, #28]
 80008c8:	611a      	str	r2, [r3, #16]
          break;
 80008ca:	e009      	b.n	80008e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008cc:	2308      	movs	r3, #8
 80008ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	69fa      	ldr	r2, [r7, #28]
 80008d4:	615a      	str	r2, [r3, #20]
          break;
 80008d6:	e003      	b.n	80008e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
          break;
 80008dc:	e000      	b.n	80008e0 <HAL_GPIO_Init+0x130>
          break;
 80008de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008e0:	69bb      	ldr	r3, [r7, #24]
 80008e2:	2bff      	cmp	r3, #255	; 0xff
 80008e4:	d801      	bhi.n	80008ea <HAL_GPIO_Init+0x13a>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	e001      	b.n	80008ee <HAL_GPIO_Init+0x13e>
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	3304      	adds	r3, #4
 80008ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	2bff      	cmp	r3, #255	; 0xff
 80008f4:	d802      	bhi.n	80008fc <HAL_GPIO_Init+0x14c>
 80008f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	e002      	b.n	8000902 <HAL_GPIO_Init+0x152>
 80008fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fe:	3b08      	subs	r3, #8
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	210f      	movs	r1, #15
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	fa01 f303 	lsl.w	r3, r1, r3
 8000910:	43db      	mvns	r3, r3
 8000912:	401a      	ands	r2, r3
 8000914:	6a39      	ldr	r1, [r7, #32]
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	fa01 f303 	lsl.w	r3, r1, r3
 800091c:	431a      	orrs	r2, r3
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092a:	2b00      	cmp	r3, #0
 800092c:	f000 80b1 	beq.w	8000a92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000930:	4b4d      	ldr	r3, [pc, #308]	; (8000a68 <HAL_GPIO_Init+0x2b8>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a4c      	ldr	r2, [pc, #304]	; (8000a68 <HAL_GPIO_Init+0x2b8>)
 8000936:	f043 0301 	orr.w	r3, r3, #1
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b4a      	ldr	r3, [pc, #296]	; (8000a68 <HAL_GPIO_Init+0x2b8>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000948:	4a48      	ldr	r2, [pc, #288]	; (8000a6c <HAL_GPIO_Init+0x2bc>)
 800094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094c:	089b      	lsrs	r3, r3, #2
 800094e:	3302      	adds	r3, #2
 8000950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000954:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000958:	f003 0303 	and.w	r3, r3, #3
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	220f      	movs	r2, #15
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	43db      	mvns	r3, r3
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	4013      	ands	r3, r2
 800096a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a40      	ldr	r2, [pc, #256]	; (8000a70 <HAL_GPIO_Init+0x2c0>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d013      	beq.n	800099c <HAL_GPIO_Init+0x1ec>
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a3f      	ldr	r2, [pc, #252]	; (8000a74 <HAL_GPIO_Init+0x2c4>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d00d      	beq.n	8000998 <HAL_GPIO_Init+0x1e8>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a3e      	ldr	r2, [pc, #248]	; (8000a78 <HAL_GPIO_Init+0x2c8>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d007      	beq.n	8000994 <HAL_GPIO_Init+0x1e4>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4a3d      	ldr	r2, [pc, #244]	; (8000a7c <HAL_GPIO_Init+0x2cc>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d101      	bne.n	8000990 <HAL_GPIO_Init+0x1e0>
 800098c:	2303      	movs	r3, #3
 800098e:	e006      	b.n	800099e <HAL_GPIO_Init+0x1ee>
 8000990:	2304      	movs	r3, #4
 8000992:	e004      	b.n	800099e <HAL_GPIO_Init+0x1ee>
 8000994:	2302      	movs	r3, #2
 8000996:	e002      	b.n	800099e <HAL_GPIO_Init+0x1ee>
 8000998:	2301      	movs	r3, #1
 800099a:	e000      	b.n	800099e <HAL_GPIO_Init+0x1ee>
 800099c:	2300      	movs	r3, #0
 800099e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009a0:	f002 0203 	and.w	r2, r2, #3
 80009a4:	0092      	lsls	r2, r2, #2
 80009a6:	4093      	lsls	r3, r2
 80009a8:	68fa      	ldr	r2, [r7, #12]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009ae:	492f      	ldr	r1, [pc, #188]	; (8000a6c <HAL_GPIO_Init+0x2bc>)
 80009b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b2:	089b      	lsrs	r3, r3, #2
 80009b4:	3302      	adds	r3, #2
 80009b6:	68fa      	ldr	r2, [r7, #12]
 80009b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d006      	beq.n	80009d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009c8:	4b2d      	ldr	r3, [pc, #180]	; (8000a80 <HAL_GPIO_Init+0x2d0>)
 80009ca:	689a      	ldr	r2, [r3, #8]
 80009cc:	492c      	ldr	r1, [pc, #176]	; (8000a80 <HAL_GPIO_Init+0x2d0>)
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	608b      	str	r3, [r1, #8]
 80009d4:	e006      	b.n	80009e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009d6:	4b2a      	ldr	r3, [pc, #168]	; (8000a80 <HAL_GPIO_Init+0x2d0>)
 80009d8:	689a      	ldr	r2, [r3, #8]
 80009da:	69bb      	ldr	r3, [r7, #24]
 80009dc:	43db      	mvns	r3, r3
 80009de:	4928      	ldr	r1, [pc, #160]	; (8000a80 <HAL_GPIO_Init+0x2d0>)
 80009e0:	4013      	ands	r3, r2
 80009e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d006      	beq.n	80009fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009f0:	4b23      	ldr	r3, [pc, #140]	; (8000a80 <HAL_GPIO_Init+0x2d0>)
 80009f2:	68da      	ldr	r2, [r3, #12]
 80009f4:	4922      	ldr	r1, [pc, #136]	; (8000a80 <HAL_GPIO_Init+0x2d0>)
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	60cb      	str	r3, [r1, #12]
 80009fc:	e006      	b.n	8000a0c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009fe:	4b20      	ldr	r3, [pc, #128]	; (8000a80 <HAL_GPIO_Init+0x2d0>)
 8000a00:	68da      	ldr	r2, [r3, #12]
 8000a02:	69bb      	ldr	r3, [r7, #24]
 8000a04:	43db      	mvns	r3, r3
 8000a06:	491e      	ldr	r1, [pc, #120]	; (8000a80 <HAL_GPIO_Init+0x2d0>)
 8000a08:	4013      	ands	r3, r2
 8000a0a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d006      	beq.n	8000a26 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a18:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <HAL_GPIO_Init+0x2d0>)
 8000a1a:	685a      	ldr	r2, [r3, #4]
 8000a1c:	4918      	ldr	r1, [pc, #96]	; (8000a80 <HAL_GPIO_Init+0x2d0>)
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	604b      	str	r3, [r1, #4]
 8000a24:	e006      	b.n	8000a34 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a26:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <HAL_GPIO_Init+0x2d0>)
 8000a28:	685a      	ldr	r2, [r3, #4]
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	4914      	ldr	r1, [pc, #80]	; (8000a80 <HAL_GPIO_Init+0x2d0>)
 8000a30:	4013      	ands	r3, r2
 8000a32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d021      	beq.n	8000a84 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <HAL_GPIO_Init+0x2d0>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	490e      	ldr	r1, [pc, #56]	; (8000a80 <HAL_GPIO_Init+0x2d0>)
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	600b      	str	r3, [r1, #0]
 8000a4c:	e021      	b.n	8000a92 <HAL_GPIO_Init+0x2e2>
 8000a4e:	bf00      	nop
 8000a50:	10320000 	.word	0x10320000
 8000a54:	10310000 	.word	0x10310000
 8000a58:	10220000 	.word	0x10220000
 8000a5c:	10210000 	.word	0x10210000
 8000a60:	10120000 	.word	0x10120000
 8000a64:	10110000 	.word	0x10110000
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	40010000 	.word	0x40010000
 8000a70:	40010800 	.word	0x40010800
 8000a74:	40010c00 	.word	0x40010c00
 8000a78:	40011000 	.word	0x40011000
 8000a7c:	40011400 	.word	0x40011400
 8000a80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <HAL_GPIO_Init+0x304>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	4909      	ldr	r1, [pc, #36]	; (8000ab4 <HAL_GPIO_Init+0x304>)
 8000a8e:	4013      	ands	r3, r2
 8000a90:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a94:	3301      	adds	r3, #1
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	f47f ae8e 	bne.w	80007c4 <HAL_GPIO_Init+0x14>
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	bf00      	nop
 8000aac:	372c      	adds	r7, #44	; 0x2c
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	40010400 	.word	0x40010400

08000ab8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d101      	bne.n	8000aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e272      	b.n	8000fb0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	f000 8087 	beq.w	8000be6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ad8:	4b92      	ldr	r3, [pc, #584]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f003 030c 	and.w	r3, r3, #12
 8000ae0:	2b04      	cmp	r3, #4
 8000ae2:	d00c      	beq.n	8000afe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ae4:	4b8f      	ldr	r3, [pc, #572]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f003 030c 	and.w	r3, r3, #12
 8000aec:	2b08      	cmp	r3, #8
 8000aee:	d112      	bne.n	8000b16 <HAL_RCC_OscConfig+0x5e>
 8000af0:	4b8c      	ldr	r3, [pc, #560]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000afc:	d10b      	bne.n	8000b16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000afe:	4b89      	ldr	r3, [pc, #548]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d06c      	beq.n	8000be4 <HAL_RCC_OscConfig+0x12c>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d168      	bne.n	8000be4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e24c      	b.n	8000fb0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b1e:	d106      	bne.n	8000b2e <HAL_RCC_OscConfig+0x76>
 8000b20:	4b80      	ldr	r3, [pc, #512]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a7f      	ldr	r2, [pc, #508]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b2a:	6013      	str	r3, [r2, #0]
 8000b2c:	e02e      	b.n	8000b8c <HAL_RCC_OscConfig+0xd4>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d10c      	bne.n	8000b50 <HAL_RCC_OscConfig+0x98>
 8000b36:	4b7b      	ldr	r3, [pc, #492]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a7a      	ldr	r2, [pc, #488]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b40:	6013      	str	r3, [r2, #0]
 8000b42:	4b78      	ldr	r3, [pc, #480]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a77      	ldr	r2, [pc, #476]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000b48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b4c:	6013      	str	r3, [r2, #0]
 8000b4e:	e01d      	b.n	8000b8c <HAL_RCC_OscConfig+0xd4>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b58:	d10c      	bne.n	8000b74 <HAL_RCC_OscConfig+0xbc>
 8000b5a:	4b72      	ldr	r3, [pc, #456]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a71      	ldr	r2, [pc, #452]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b64:	6013      	str	r3, [r2, #0]
 8000b66:	4b6f      	ldr	r3, [pc, #444]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a6e      	ldr	r2, [pc, #440]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b70:	6013      	str	r3, [r2, #0]
 8000b72:	e00b      	b.n	8000b8c <HAL_RCC_OscConfig+0xd4>
 8000b74:	4b6b      	ldr	r3, [pc, #428]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a6a      	ldr	r2, [pc, #424]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b7e:	6013      	str	r3, [r2, #0]
 8000b80:	4b68      	ldr	r3, [pc, #416]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a67      	ldr	r2, [pc, #412]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d013      	beq.n	8000bbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b94:	f7ff fcfa 	bl	800058c <HAL_GetTick>
 8000b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b9a:	e008      	b.n	8000bae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b9c:	f7ff fcf6 	bl	800058c <HAL_GetTick>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	2b64      	cmp	r3, #100	; 0x64
 8000ba8:	d901      	bls.n	8000bae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000baa:	2303      	movs	r3, #3
 8000bac:	e200      	b.n	8000fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bae:	4b5d      	ldr	r3, [pc, #372]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d0f0      	beq.n	8000b9c <HAL_RCC_OscConfig+0xe4>
 8000bba:	e014      	b.n	8000be6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bbc:	f7ff fce6 	bl	800058c <HAL_GetTick>
 8000bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bc2:	e008      	b.n	8000bd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bc4:	f7ff fce2 	bl	800058c <HAL_GetTick>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	2b64      	cmp	r3, #100	; 0x64
 8000bd0:	d901      	bls.n	8000bd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	e1ec      	b.n	8000fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bd6:	4b53      	ldr	r3, [pc, #332]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d1f0      	bne.n	8000bc4 <HAL_RCC_OscConfig+0x10c>
 8000be2:	e000      	b.n	8000be6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d063      	beq.n	8000cba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bf2:	4b4c      	ldr	r3, [pc, #304]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f003 030c 	and.w	r3, r3, #12
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d00b      	beq.n	8000c16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000bfe:	4b49      	ldr	r3, [pc, #292]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f003 030c 	and.w	r3, r3, #12
 8000c06:	2b08      	cmp	r3, #8
 8000c08:	d11c      	bne.n	8000c44 <HAL_RCC_OscConfig+0x18c>
 8000c0a:	4b46      	ldr	r3, [pc, #280]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d116      	bne.n	8000c44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c16:	4b43      	ldr	r3, [pc, #268]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d005      	beq.n	8000c2e <HAL_RCC_OscConfig+0x176>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	691b      	ldr	r3, [r3, #16]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d001      	beq.n	8000c2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e1c0      	b.n	8000fb0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c2e:	4b3d      	ldr	r3, [pc, #244]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	00db      	lsls	r3, r3, #3
 8000c3c:	4939      	ldr	r1, [pc, #228]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c42:	e03a      	b.n	8000cba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	691b      	ldr	r3, [r3, #16]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d020      	beq.n	8000c8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c4c:	4b36      	ldr	r3, [pc, #216]	; (8000d28 <HAL_RCC_OscConfig+0x270>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c52:	f7ff fc9b 	bl	800058c <HAL_GetTick>
 8000c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c58:	e008      	b.n	8000c6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c5a:	f7ff fc97 	bl	800058c <HAL_GetTick>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	d901      	bls.n	8000c6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	e1a1      	b.n	8000fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c6c:	4b2d      	ldr	r3, [pc, #180]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f003 0302 	and.w	r3, r3, #2
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d0f0      	beq.n	8000c5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c78:	4b2a      	ldr	r3, [pc, #168]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	695b      	ldr	r3, [r3, #20]
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	4927      	ldr	r1, [pc, #156]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	600b      	str	r3, [r1, #0]
 8000c8c:	e015      	b.n	8000cba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c8e:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <HAL_RCC_OscConfig+0x270>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c94:	f7ff fc7a 	bl	800058c <HAL_GetTick>
 8000c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c9a:	e008      	b.n	8000cae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c9c:	f7ff fc76 	bl	800058c <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d901      	bls.n	8000cae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000caa:	2303      	movs	r3, #3
 8000cac:	e180      	b.n	8000fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cae:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1f0      	bne.n	8000c9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 0308 	and.w	r3, r3, #8
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d03a      	beq.n	8000d3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d019      	beq.n	8000d02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <HAL_RCC_OscConfig+0x274>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cd4:	f7ff fc5a 	bl	800058c <HAL_GetTick>
 8000cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cda:	e008      	b.n	8000cee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cdc:	f7ff fc56 	bl	800058c <HAL_GetTick>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d901      	bls.n	8000cee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000cea:	2303      	movs	r3, #3
 8000cec:	e160      	b.n	8000fb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d0f0      	beq.n	8000cdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f000 face 	bl	800129c <RCC_Delay>
 8000d00:	e01c      	b.n	8000d3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d02:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <HAL_RCC_OscConfig+0x274>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d08:	f7ff fc40 	bl	800058c <HAL_GetTick>
 8000d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d0e:	e00f      	b.n	8000d30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d10:	f7ff fc3c 	bl	800058c <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d908      	bls.n	8000d30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e146      	b.n	8000fb0 <HAL_RCC_OscConfig+0x4f8>
 8000d22:	bf00      	nop
 8000d24:	40021000 	.word	0x40021000
 8000d28:	42420000 	.word	0x42420000
 8000d2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d30:	4b92      	ldr	r3, [pc, #584]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d34:	f003 0302 	and.w	r3, r3, #2
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d1e9      	bne.n	8000d10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f003 0304 	and.w	r3, r3, #4
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	f000 80a6 	beq.w	8000e96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d4e:	4b8b      	ldr	r3, [pc, #556]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d10d      	bne.n	8000d76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	4b88      	ldr	r3, [pc, #544]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	4a87      	ldr	r2, [pc, #540]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d64:	61d3      	str	r3, [r2, #28]
 8000d66:	4b85      	ldr	r3, [pc, #532]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d72:	2301      	movs	r3, #1
 8000d74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d76:	4b82      	ldr	r3, [pc, #520]	; (8000f80 <HAL_RCC_OscConfig+0x4c8>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d118      	bne.n	8000db4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d82:	4b7f      	ldr	r3, [pc, #508]	; (8000f80 <HAL_RCC_OscConfig+0x4c8>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a7e      	ldr	r2, [pc, #504]	; (8000f80 <HAL_RCC_OscConfig+0x4c8>)
 8000d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d8e:	f7ff fbfd 	bl	800058c <HAL_GetTick>
 8000d92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d94:	e008      	b.n	8000da8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d96:	f7ff fbf9 	bl	800058c <HAL_GetTick>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	2b64      	cmp	r3, #100	; 0x64
 8000da2:	d901      	bls.n	8000da8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000da4:	2303      	movs	r3, #3
 8000da6:	e103      	b.n	8000fb0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000da8:	4b75      	ldr	r3, [pc, #468]	; (8000f80 <HAL_RCC_OscConfig+0x4c8>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d0f0      	beq.n	8000d96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d106      	bne.n	8000dca <HAL_RCC_OscConfig+0x312>
 8000dbc:	4b6f      	ldr	r3, [pc, #444]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000dbe:	6a1b      	ldr	r3, [r3, #32]
 8000dc0:	4a6e      	ldr	r2, [pc, #440]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	6213      	str	r3, [r2, #32]
 8000dc8:	e02d      	b.n	8000e26 <HAL_RCC_OscConfig+0x36e>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d10c      	bne.n	8000dec <HAL_RCC_OscConfig+0x334>
 8000dd2:	4b6a      	ldr	r3, [pc, #424]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000dd4:	6a1b      	ldr	r3, [r3, #32]
 8000dd6:	4a69      	ldr	r2, [pc, #420]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000dd8:	f023 0301 	bic.w	r3, r3, #1
 8000ddc:	6213      	str	r3, [r2, #32]
 8000dde:	4b67      	ldr	r3, [pc, #412]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000de0:	6a1b      	ldr	r3, [r3, #32]
 8000de2:	4a66      	ldr	r2, [pc, #408]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000de4:	f023 0304 	bic.w	r3, r3, #4
 8000de8:	6213      	str	r3, [r2, #32]
 8000dea:	e01c      	b.n	8000e26 <HAL_RCC_OscConfig+0x36e>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	2b05      	cmp	r3, #5
 8000df2:	d10c      	bne.n	8000e0e <HAL_RCC_OscConfig+0x356>
 8000df4:	4b61      	ldr	r3, [pc, #388]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000df6:	6a1b      	ldr	r3, [r3, #32]
 8000df8:	4a60      	ldr	r2, [pc, #384]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000dfa:	f043 0304 	orr.w	r3, r3, #4
 8000dfe:	6213      	str	r3, [r2, #32]
 8000e00:	4b5e      	ldr	r3, [pc, #376]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000e02:	6a1b      	ldr	r3, [r3, #32]
 8000e04:	4a5d      	ldr	r2, [pc, #372]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	6213      	str	r3, [r2, #32]
 8000e0c:	e00b      	b.n	8000e26 <HAL_RCC_OscConfig+0x36e>
 8000e0e:	4b5b      	ldr	r3, [pc, #364]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000e10:	6a1b      	ldr	r3, [r3, #32]
 8000e12:	4a5a      	ldr	r2, [pc, #360]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000e14:	f023 0301 	bic.w	r3, r3, #1
 8000e18:	6213      	str	r3, [r2, #32]
 8000e1a:	4b58      	ldr	r3, [pc, #352]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000e1c:	6a1b      	ldr	r3, [r3, #32]
 8000e1e:	4a57      	ldr	r2, [pc, #348]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000e20:	f023 0304 	bic.w	r3, r3, #4
 8000e24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d015      	beq.n	8000e5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e2e:	f7ff fbad 	bl	800058c <HAL_GetTick>
 8000e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e34:	e00a      	b.n	8000e4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e36:	f7ff fba9 	bl	800058c <HAL_GetTick>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d901      	bls.n	8000e4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e0b1      	b.n	8000fb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e4c:	4b4b      	ldr	r3, [pc, #300]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000e4e:	6a1b      	ldr	r3, [r3, #32]
 8000e50:	f003 0302 	and.w	r3, r3, #2
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d0ee      	beq.n	8000e36 <HAL_RCC_OscConfig+0x37e>
 8000e58:	e014      	b.n	8000e84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e5a:	f7ff fb97 	bl	800058c <HAL_GetTick>
 8000e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e60:	e00a      	b.n	8000e78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e62:	f7ff fb93 	bl	800058c <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d901      	bls.n	8000e78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e09b      	b.n	8000fb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e78:	4b40      	ldr	r3, [pc, #256]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000e7a:	6a1b      	ldr	r3, [r3, #32]
 8000e7c:	f003 0302 	and.w	r3, r3, #2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1ee      	bne.n	8000e62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000e84:	7dfb      	ldrb	r3, [r7, #23]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d105      	bne.n	8000e96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e8a:	4b3c      	ldr	r3, [pc, #240]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	4a3b      	ldr	r2, [pc, #236]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	f000 8087 	beq.w	8000fae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ea0:	4b36      	ldr	r3, [pc, #216]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 030c 	and.w	r3, r3, #12
 8000ea8:	2b08      	cmp	r3, #8
 8000eaa:	d061      	beq.n	8000f70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	69db      	ldr	r3, [r3, #28]
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d146      	bne.n	8000f42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000eb4:	4b33      	ldr	r3, [pc, #204]	; (8000f84 <HAL_RCC_OscConfig+0x4cc>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eba:	f7ff fb67 	bl	800058c <HAL_GetTick>
 8000ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ec0:	e008      	b.n	8000ed4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ec2:	f7ff fb63 	bl	800058c <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d901      	bls.n	8000ed4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e06d      	b.n	8000fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ed4:	4b29      	ldr	r3, [pc, #164]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d1f0      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6a1b      	ldr	r3, [r3, #32]
 8000ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ee8:	d108      	bne.n	8000efc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000eea:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	4921      	ldr	r1, [pc, #132]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000efc:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a19      	ldr	r1, [r3, #32]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0c:	430b      	orrs	r3, r1
 8000f0e:	491b      	ldr	r1, [pc, #108]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000f10:	4313      	orrs	r3, r2
 8000f12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f14:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <HAL_RCC_OscConfig+0x4cc>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f1a:	f7ff fb37 	bl	800058c <HAL_GetTick>
 8000f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f20:	e008      	b.n	8000f34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f22:	f7ff fb33 	bl	800058c <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d901      	bls.n	8000f34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f30:	2303      	movs	r3, #3
 8000f32:	e03d      	b.n	8000fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d0f0      	beq.n	8000f22 <HAL_RCC_OscConfig+0x46a>
 8000f40:	e035      	b.n	8000fae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <HAL_RCC_OscConfig+0x4cc>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f48:	f7ff fb20 	bl	800058c <HAL_GetTick>
 8000f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f4e:	e008      	b.n	8000f62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f50:	f7ff fb1c 	bl	800058c <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d901      	bls.n	8000f62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e026      	b.n	8000fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_RCC_OscConfig+0x4c4>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1f0      	bne.n	8000f50 <HAL_RCC_OscConfig+0x498>
 8000f6e:	e01e      	b.n	8000fae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	69db      	ldr	r3, [r3, #28]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d107      	bne.n	8000f88 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e019      	b.n	8000fb0 <HAL_RCC_OscConfig+0x4f8>
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40007000 	.word	0x40007000
 8000f84:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_RCC_OscConfig+0x500>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a1b      	ldr	r3, [r3, #32]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d106      	bne.n	8000faa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d001      	beq.n	8000fae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e000      	b.n	8000fb0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40021000 	.word	0x40021000

08000fbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d101      	bne.n	8000fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e0d0      	b.n	8001172 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000fd0:	4b6a      	ldr	r3, [pc, #424]	; (800117c <HAL_RCC_ClockConfig+0x1c0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0307 	and.w	r3, r3, #7
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d910      	bls.n	8001000 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fde:	4b67      	ldr	r3, [pc, #412]	; (800117c <HAL_RCC_ClockConfig+0x1c0>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f023 0207 	bic.w	r2, r3, #7
 8000fe6:	4965      	ldr	r1, [pc, #404]	; (800117c <HAL_RCC_ClockConfig+0x1c0>)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fee:	4b63      	ldr	r3, [pc, #396]	; (800117c <HAL_RCC_ClockConfig+0x1c0>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	683a      	ldr	r2, [r7, #0]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d001      	beq.n	8001000 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e0b8      	b.n	8001172 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d020      	beq.n	800104e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	2b00      	cmp	r3, #0
 8001016:	d005      	beq.n	8001024 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001018:	4b59      	ldr	r3, [pc, #356]	; (8001180 <HAL_RCC_ClockConfig+0x1c4>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	4a58      	ldr	r2, [pc, #352]	; (8001180 <HAL_RCC_ClockConfig+0x1c4>)
 800101e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001022:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0308 	and.w	r3, r3, #8
 800102c:	2b00      	cmp	r3, #0
 800102e:	d005      	beq.n	800103c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001030:	4b53      	ldr	r3, [pc, #332]	; (8001180 <HAL_RCC_ClockConfig+0x1c4>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	4a52      	ldr	r2, [pc, #328]	; (8001180 <HAL_RCC_ClockConfig+0x1c4>)
 8001036:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800103a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800103c:	4b50      	ldr	r3, [pc, #320]	; (8001180 <HAL_RCC_ClockConfig+0x1c4>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	494d      	ldr	r1, [pc, #308]	; (8001180 <HAL_RCC_ClockConfig+0x1c4>)
 800104a:	4313      	orrs	r3, r2
 800104c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	2b00      	cmp	r3, #0
 8001058:	d040      	beq.n	80010dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d107      	bne.n	8001072 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001062:	4b47      	ldr	r3, [pc, #284]	; (8001180 <HAL_RCC_ClockConfig+0x1c4>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d115      	bne.n	800109a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e07f      	b.n	8001172 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2b02      	cmp	r3, #2
 8001078:	d107      	bne.n	800108a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800107a:	4b41      	ldr	r3, [pc, #260]	; (8001180 <HAL_RCC_ClockConfig+0x1c4>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d109      	bne.n	800109a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e073      	b.n	8001172 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800108a:	4b3d      	ldr	r3, [pc, #244]	; (8001180 <HAL_RCC_ClockConfig+0x1c4>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e06b      	b.n	8001172 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800109a:	4b39      	ldr	r3, [pc, #228]	; (8001180 <HAL_RCC_ClockConfig+0x1c4>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f023 0203 	bic.w	r2, r3, #3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	4936      	ldr	r1, [pc, #216]	; (8001180 <HAL_RCC_ClockConfig+0x1c4>)
 80010a8:	4313      	orrs	r3, r2
 80010aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010ac:	f7ff fa6e 	bl	800058c <HAL_GetTick>
 80010b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010b2:	e00a      	b.n	80010ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010b4:	f7ff fa6a 	bl	800058c <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	f241 3288 	movw	r2, #5000	; 0x1388
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e053      	b.n	8001172 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010ca:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <HAL_RCC_ClockConfig+0x1c4>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 020c 	and.w	r2, r3, #12
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	429a      	cmp	r2, r3
 80010da:	d1eb      	bne.n	80010b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80010dc:	4b27      	ldr	r3, [pc, #156]	; (800117c <HAL_RCC_ClockConfig+0x1c0>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	683a      	ldr	r2, [r7, #0]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d210      	bcs.n	800110c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ea:	4b24      	ldr	r3, [pc, #144]	; (800117c <HAL_RCC_ClockConfig+0x1c0>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f023 0207 	bic.w	r2, r3, #7
 80010f2:	4922      	ldr	r1, [pc, #136]	; (800117c <HAL_RCC_ClockConfig+0x1c0>)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010fa:	4b20      	ldr	r3, [pc, #128]	; (800117c <HAL_RCC_ClockConfig+0x1c0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	d001      	beq.n	800110c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e032      	b.n	8001172 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	d008      	beq.n	800112a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001118:	4b19      	ldr	r3, [pc, #100]	; (8001180 <HAL_RCC_ClockConfig+0x1c4>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	4916      	ldr	r1, [pc, #88]	; (8001180 <HAL_RCC_ClockConfig+0x1c4>)
 8001126:	4313      	orrs	r3, r2
 8001128:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	2b00      	cmp	r3, #0
 8001134:	d009      	beq.n	800114a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001136:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_RCC_ClockConfig+0x1c4>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	490e      	ldr	r1, [pc, #56]	; (8001180 <HAL_RCC_ClockConfig+0x1c4>)
 8001146:	4313      	orrs	r3, r2
 8001148:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800114a:	f000 f821 	bl	8001190 <HAL_RCC_GetSysClockFreq>
 800114e:	4602      	mov	r2, r0
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <HAL_RCC_ClockConfig+0x1c4>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	091b      	lsrs	r3, r3, #4
 8001156:	f003 030f 	and.w	r3, r3, #15
 800115a:	490a      	ldr	r1, [pc, #40]	; (8001184 <HAL_RCC_ClockConfig+0x1c8>)
 800115c:	5ccb      	ldrb	r3, [r1, r3]
 800115e:	fa22 f303 	lsr.w	r3, r2, r3
 8001162:	4a09      	ldr	r2, [pc, #36]	; (8001188 <HAL_RCC_ClockConfig+0x1cc>)
 8001164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <HAL_RCC_ClockConfig+0x1d0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f9cc 	bl	8000508 <HAL_InitTick>

  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40022000 	.word	0x40022000
 8001180:	40021000 	.word	0x40021000
 8001184:	08003178 	.word	0x08003178
 8001188:	20000000 	.word	0x20000000
 800118c:	20000004 	.word	0x20000004

08001190 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001190:	b480      	push	{r7}
 8001192:	b087      	sub	sp, #28
 8001194:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80011aa:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <HAL_RCC_GetSysClockFreq+0x94>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f003 030c 	and.w	r3, r3, #12
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	d002      	beq.n	80011c0 <HAL_RCC_GetSysClockFreq+0x30>
 80011ba:	2b08      	cmp	r3, #8
 80011bc:	d003      	beq.n	80011c6 <HAL_RCC_GetSysClockFreq+0x36>
 80011be:	e027      	b.n	8001210 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80011c0:	4b19      	ldr	r3, [pc, #100]	; (8001228 <HAL_RCC_GetSysClockFreq+0x98>)
 80011c2:	613b      	str	r3, [r7, #16]
      break;
 80011c4:	e027      	b.n	8001216 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	0c9b      	lsrs	r3, r3, #18
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	4a17      	ldr	r2, [pc, #92]	; (800122c <HAL_RCC_GetSysClockFreq+0x9c>)
 80011d0:	5cd3      	ldrb	r3, [r2, r3]
 80011d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d010      	beq.n	8001200 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <HAL_RCC_GetSysClockFreq+0x94>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	0c5b      	lsrs	r3, r3, #17
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	4a11      	ldr	r2, [pc, #68]	; (8001230 <HAL_RCC_GetSysClockFreq+0xa0>)
 80011ea:	5cd3      	ldrb	r3, [r2, r3]
 80011ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <HAL_RCC_GetSysClockFreq+0x98>)
 80011f2:	fb03 f202 	mul.w	r2, r3, r2
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	e004      	b.n	800120a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a0c      	ldr	r2, [pc, #48]	; (8001234 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001204:	fb02 f303 	mul.w	r3, r2, r3
 8001208:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	613b      	str	r3, [r7, #16]
      break;
 800120e:	e002      	b.n	8001216 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_RCC_GetSysClockFreq+0x98>)
 8001212:	613b      	str	r3, [r7, #16]
      break;
 8001214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001216:	693b      	ldr	r3, [r7, #16]
}
 8001218:	4618      	mov	r0, r3
 800121a:	371c      	adds	r7, #28
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000
 8001228:	007a1200 	.word	0x007a1200
 800122c:	08003190 	.word	0x08003190
 8001230:	080031a0 	.word	0x080031a0
 8001234:	003d0900 	.word	0x003d0900

08001238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800123c:	4b02      	ldr	r3, [pc, #8]	; (8001248 <HAL_RCC_GetHCLKFreq+0x10>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	20000000 	.word	0x20000000

0800124c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001250:	f7ff fff2 	bl	8001238 <HAL_RCC_GetHCLKFreq>
 8001254:	4602      	mov	r2, r0
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	0a1b      	lsrs	r3, r3, #8
 800125c:	f003 0307 	and.w	r3, r3, #7
 8001260:	4903      	ldr	r1, [pc, #12]	; (8001270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001262:	5ccb      	ldrb	r3, [r1, r3]
 8001264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001268:	4618      	mov	r0, r3
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40021000 	.word	0x40021000
 8001270:	08003188 	.word	0x08003188

08001274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001278:	f7ff ffde 	bl	8001238 <HAL_RCC_GetHCLKFreq>
 800127c:	4602      	mov	r2, r0
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	0adb      	lsrs	r3, r3, #11
 8001284:	f003 0307 	and.w	r3, r3, #7
 8001288:	4903      	ldr	r1, [pc, #12]	; (8001298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800128a:	5ccb      	ldrb	r3, [r1, r3]
 800128c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001290:	4618      	mov	r0, r3
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40021000 	.word	0x40021000
 8001298:	08003188 	.word	0x08003188

0800129c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80012a4:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <RCC_Delay+0x34>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <RCC_Delay+0x38>)
 80012aa:	fba2 2303 	umull	r2, r3, r2, r3
 80012ae:	0a5b      	lsrs	r3, r3, #9
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	fb02 f303 	mul.w	r3, r2, r3
 80012b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80012b8:	bf00      	nop
  }
  while (Delay --);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	1e5a      	subs	r2, r3, #1
 80012be:	60fa      	str	r2, [r7, #12]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f9      	bne.n	80012b8 <RCC_Delay+0x1c>
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr
 80012d0:	20000000 	.word	0x20000000
 80012d4:	10624dd3 	.word	0x10624dd3

080012d8 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e04a      	b.n	8001380 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d106      	bne.n	8001304 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7fe ffea 	bl	80002d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2224      	movs	r2, #36	; 0x24
 8001308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	68da      	ldr	r2, [r3, #12]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800131a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 f925 	bl	800156c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	691a      	ldr	r2, [r3, #16]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001330:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	695a      	ldr	r2, [r3, #20]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8001340:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	695a      	ldr	r2, [r3, #20]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f042 0208 	orr.w	r2, r2, #8
 8001350:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	68da      	ldr	r2, [r3, #12]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001360:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2220      	movs	r2, #32
 800136c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2220      	movs	r2, #32
 8001374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af02      	add	r7, sp, #8
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	4613      	mov	r3, r2
 8001396:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b20      	cmp	r3, #32
 80013a6:	d16d      	bne.n	8001484 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d002      	beq.n	80013b4 <HAL_UART_Transmit+0x2c>
 80013ae:	88fb      	ldrh	r3, [r7, #6]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e066      	b.n	8001486 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2200      	movs	r2, #0
 80013bc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2221      	movs	r2, #33	; 0x21
 80013c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80013c6:	f7ff f8e1 	bl	800058c <HAL_GetTick>
 80013ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	88fa      	ldrh	r2, [r7, #6]
 80013d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	88fa      	ldrh	r2, [r7, #6]
 80013d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013e0:	d108      	bne.n	80013f4 <HAL_UART_Transmit+0x6c>
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d104      	bne.n	80013f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	61bb      	str	r3, [r7, #24]
 80013f2:	e003      	b.n	80013fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80013fc:	e02a      	b.n	8001454 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	2200      	movs	r2, #0
 8001406:	2180      	movs	r1, #128	; 0x80
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f000 f840 	bl	800148e <UART_WaitOnFlagUntilTimeout>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e036      	b.n	8001486 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10b      	bne.n	8001436 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800142c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	3302      	adds	r3, #2
 8001432:	61bb      	str	r3, [r7, #24]
 8001434:	e007      	b.n	8001446 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	781a      	ldrb	r2, [r3, #0]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	3301      	adds	r3, #1
 8001444:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800144a:	b29b      	uxth	r3, r3
 800144c:	3b01      	subs	r3, #1
 800144e:	b29a      	uxth	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001458:	b29b      	uxth	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1cf      	bne.n	80013fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	2200      	movs	r2, #0
 8001466:	2140      	movs	r1, #64	; 0x40
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f000 f810 	bl	800148e <UART_WaitOnFlagUntilTimeout>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e006      	b.n	8001486 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2220      	movs	r2, #32
 800147c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001480:	2300      	movs	r3, #0
 8001482:	e000      	b.n	8001486 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001484:	2302      	movs	r3, #2
  }
}
 8001486:	4618      	mov	r0, r3
 8001488:	3720      	adds	r7, #32
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b090      	sub	sp, #64	; 0x40
 8001492:	af00      	add	r7, sp, #0
 8001494:	60f8      	str	r0, [r7, #12]
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	603b      	str	r3, [r7, #0]
 800149a:	4613      	mov	r3, r2
 800149c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800149e:	e050      	b.n	8001542 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a6:	d04c      	beq.n	8001542 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80014a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d007      	beq.n	80014be <UART_WaitOnFlagUntilTimeout+0x30>
 80014ae:	f7ff f86d 	bl	800058c <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d241      	bcs.n	8001542 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	330c      	adds	r3, #12
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c8:	e853 3f00 	ldrex	r3, [r3]
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80014d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	330c      	adds	r3, #12
 80014dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014de:	637a      	str	r2, [r7, #52]	; 0x34
 80014e0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014e6:	e841 2300 	strex	r3, r2, [r1]
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80014ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1e5      	bne.n	80014be <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	3314      	adds	r3, #20
 80014f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	e853 3f00 	ldrex	r3, [r3]
 8001500:	613b      	str	r3, [r7, #16]
   return(result);
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	f023 0301 	bic.w	r3, r3, #1
 8001508:	63bb      	str	r3, [r7, #56]	; 0x38
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	3314      	adds	r3, #20
 8001510:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001512:	623a      	str	r2, [r7, #32]
 8001514:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001516:	69f9      	ldr	r1, [r7, #28]
 8001518:	6a3a      	ldr	r2, [r7, #32]
 800151a:	e841 2300 	strex	r3, r2, [r1]
 800151e:	61bb      	str	r3, [r7, #24]
   return(result);
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1e5      	bne.n	80014f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2220      	movs	r2, #32
 800152a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2220      	movs	r2, #32
 8001532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e00f      	b.n	8001562 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	4013      	ands	r3, r2
 800154c:	68ba      	ldr	r2, [r7, #8]
 800154e:	429a      	cmp	r2, r3
 8001550:	bf0c      	ite	eq
 8001552:	2301      	moveq	r3, #1
 8001554:	2300      	movne	r3, #0
 8001556:	b2db      	uxtb	r3, r3
 8001558:	461a      	mov	r2, r3
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	429a      	cmp	r2, r3
 800155e:	d09f      	beq.n	80014a0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3740      	adds	r7, #64	; 0x40
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	4313      	orrs	r3, r2
 800159a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80015a6:	f023 030c 	bic.w	r3, r3, #12
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6812      	ldr	r2, [r2, #0]
 80015ae:	68b9      	ldr	r1, [r7, #8]
 80015b0:	430b      	orrs	r3, r1
 80015b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	699a      	ldr	r2, [r3, #24]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a2c      	ldr	r2, [pc, #176]	; (8001680 <UART_SetConfig+0x114>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d103      	bne.n	80015dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80015d4:	f7ff fe4e 	bl	8001274 <HAL_RCC_GetPCLK2Freq>
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	e002      	b.n	80015e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80015dc:	f7ff fe36 	bl	800124c <HAL_RCC_GetPCLK1Freq>
 80015e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	009a      	lsls	r2, r3, #2
 80015ec:	441a      	add	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f8:	4a22      	ldr	r2, [pc, #136]	; (8001684 <UART_SetConfig+0x118>)
 80015fa:	fba2 2303 	umull	r2, r3, r2, r3
 80015fe:	095b      	lsrs	r3, r3, #5
 8001600:	0119      	lsls	r1, r3, #4
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	009a      	lsls	r2, r3, #2
 800160c:	441a      	add	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	fbb2 f2f3 	udiv	r2, r2, r3
 8001618:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <UART_SetConfig+0x118>)
 800161a:	fba3 0302 	umull	r0, r3, r3, r2
 800161e:	095b      	lsrs	r3, r3, #5
 8001620:	2064      	movs	r0, #100	; 0x64
 8001622:	fb00 f303 	mul.w	r3, r0, r3
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	011b      	lsls	r3, r3, #4
 800162a:	3332      	adds	r3, #50	; 0x32
 800162c:	4a15      	ldr	r2, [pc, #84]	; (8001684 <UART_SetConfig+0x118>)
 800162e:	fba2 2303 	umull	r2, r3, r2, r3
 8001632:	095b      	lsrs	r3, r3, #5
 8001634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001638:	4419      	add	r1, r3
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	4613      	mov	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	009a      	lsls	r2, r3, #2
 8001644:	441a      	add	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <UART_SetConfig+0x118>)
 8001652:	fba3 0302 	umull	r0, r3, r3, r2
 8001656:	095b      	lsrs	r3, r3, #5
 8001658:	2064      	movs	r0, #100	; 0x64
 800165a:	fb00 f303 	mul.w	r3, r0, r3
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	3332      	adds	r3, #50	; 0x32
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <UART_SetConfig+0x118>)
 8001666:	fba2 2303 	umull	r2, r3, r2, r3
 800166a:	095b      	lsrs	r3, r3, #5
 800166c:	f003 020f 	and.w	r2, r3, #15
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	440a      	add	r2, r1
 8001676:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40013800 	.word	0x40013800
 8001684:	51eb851f 	.word	0x51eb851f

08001688 <__NVIC_SetPriority>:
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	6039      	str	r1, [r7, #0]
 8001692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001698:	2b00      	cmp	r3, #0
 800169a:	db0a      	blt.n	80016b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	490c      	ldr	r1, [pc, #48]	; (80016d4 <__NVIC_SetPriority+0x4c>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	0112      	lsls	r2, r2, #4
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	440b      	add	r3, r1
 80016ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016b0:	e00a      	b.n	80016c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4908      	ldr	r1, [pc, #32]	; (80016d8 <__NVIC_SetPriority+0x50>)
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	3b04      	subs	r3, #4
 80016c0:	0112      	lsls	r2, r2, #4
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	440b      	add	r3, r1
 80016c6:	761a      	strb	r2, [r3, #24]
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000e100 	.word	0xe000e100
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <idleThread>:
static volatile int countThread = 0;
static volatile uint8_t mutexLock = 0;

static uint32_t idleThreadStack[64];
uint32_t stm32_thread_idle_count;
static void idleThread() {
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
	stm32_thread_idle_count = 0;
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <idleThread+0x18>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
	while (1) {
		stm32_thread_idle_count++;
 80016e6:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <idleThread+0x18>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	3301      	adds	r3, #1
 80016ec:	4a01      	ldr	r2, [pc, #4]	; (80016f4 <idleThread+0x18>)
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	e7f9      	b.n	80016e6 <idleThread+0xa>
 80016f2:	bf00      	nop
 80016f4:	200002b0 	.word	0x200002b0

080016f8 <addThread>:
	}
}

static void addThread(int freeIndex, void (*threadTask)(), uint32_t *stack,
		uint32_t stackLen) {
 80016f8:	b480      	push	{r7}
 80016fa:	b087      	sub	sp, #28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
 8001704:	603b      	str	r3, [r7, #0]
	int i = freeIndex;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	617b      	str	r3, [r7, #20]
	//Empty thread found
	thread[i].ID = freeIndex;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	b2d8      	uxtb	r0, r3
 800170e:	4959      	ldr	r1, [pc, #356]	; (8001874 <addThread+0x17c>)
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	4613      	mov	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	1a9b      	subs	r3, r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	440b      	add	r3, r1
 800171c:	4602      	mov	r2, r0
 800171e:	701a      	strb	r2, [r3, #0]
	thread[i].stack = stack;
 8001720:	4954      	ldr	r1, [pc, #336]	; (8001874 <addThread+0x17c>)
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	4613      	mov	r3, r2
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	1a9b      	subs	r3, r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	3304      	adds	r3, #4
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	601a      	str	r2, [r3, #0]
	thread[i].stackLen = stackLen;
 8001734:	494f      	ldr	r1, [pc, #316]	; (8001874 <addThread+0x17c>)
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	4613      	mov	r3, r2
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	1a9b      	subs	r3, r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	440b      	add	r3, r1
 8001742:	3308      	adds	r3, #8
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	601a      	str	r2, [r3, #0]
	thread[i].threadFunc = threadTask;
 8001748:	494a      	ldr	r1, [pc, #296]	; (8001874 <addThread+0x17c>)
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	4613      	mov	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	1a9b      	subs	r3, r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	440b      	add	r3, r1
 8001756:	3314      	adds	r3, #20
 8001758:	68ba      	ldr	r2, [r7, #8]
 800175a:	601a      	str	r2, [r3, #0]
	thread[i].action = STM32_THREAD_ACTION_RUNNING;
 800175c:	4945      	ldr	r1, [pc, #276]	; (8001874 <addThread+0x17c>)
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	4613      	mov	r3, r2
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	1a9b      	subs	r3, r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	3310      	adds	r3, #16
 800176c:	2201      	movs	r2, #1
 800176e:	701a      	strb	r2, [r3, #0]

	uint32_t *psp = (uint32_t*) &stack[stackLen];
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	4413      	add	r3, r2
 8001778:	613b      	str	r3, [r7, #16]

	// fill dummy stack frame
	*(--psp) = 0x01000000u; // Dummy xPSR, just enable Thumb State bit;
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	3b04      	subs	r3, #4
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001786:	601a      	str	r2, [r3, #0]
	*(--psp) = (uint32_t) threadTask; // PC
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	3b04      	subs	r3, #4
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	601a      	str	r2, [r3, #0]
	*(--psp) = 0xFFFFFFFDu; // LR with EXC_RETURN to return to Thread using PSP
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	3b04      	subs	r3, #4
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	f06f 0202 	mvn.w	r2, #2
 80017a0:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x12121212u; // Dummy R12
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	3b04      	subs	r3, #4
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 80017ae:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x03030303u; // Dummy R3
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	3b04      	subs	r3, #4
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 80017bc:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x02020202u; // Dummy R2
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	3b04      	subs	r3, #4
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 80017ca:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x01010101u; // Dummy R1
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	3b04      	subs	r3, #4
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 80017d8:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x00000000u; // Dummy R0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	3b04      	subs	r3, #4
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]

	*(--psp) = 0x11111111u; // Dummy R11
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	3b04      	subs	r3, #4
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 80017f2:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x10101010u; // Dummy R10
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	3b04      	subs	r3, #4
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8001800:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x09090909u; // Dummy R9
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	3b04      	subs	r3, #4
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800180e:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x08080808u; // Dummy R8
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	3b04      	subs	r3, #4
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800181c:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x07070707u; // Dummy R7
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	3b04      	subs	r3, #4
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800182a:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x06060606u; // Dummy R6
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	3b04      	subs	r3, #4
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8001838:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x05050505u; // Dummy R5
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	3b04      	subs	r3, #4
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8001846:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x04040404u; // Dummy R4
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	3b04      	subs	r3, #4
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8001854:	601a      	str	r2, [r3, #0]
	thread[i].sp = (uint32_t) psp;
 8001856:	6939      	ldr	r1, [r7, #16]
 8001858:	4806      	ldr	r0, [pc, #24]	; (8001874 <addThread+0x17c>)
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	4613      	mov	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	1a9b      	subs	r3, r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4403      	add	r3, r0
 8001866:	330c      	adds	r3, #12
 8001868:	6019      	str	r1, [r3, #0]
}
 800186a:	bf00      	nop
 800186c:	371c      	adds	r7, #28
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr
 8001874:	2000011c 	.word	0x2000011c

08001878 <new>:
 * @param stack			: Pointer to stack array
 * @param stackLen		: Length of stack array
 * @return				: ID of created thread (This ID is required for restart or delete of thread)
 * 						: -1 if MAX_THREAD limit exceeds
 */
static int new(void (*threadTask)(), uint32_t *stack, uint32_t stackLen) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
	mutexLock = 1;
 8001884:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <new+0x68>)
 8001886:	2201      	movs	r2, #1
 8001888:	701a      	strb	r2, [r3, #0]
	int freeIndex = 1;
 800188a:	2301      	movs	r3, #1
 800188c:	617b      	str	r3, [r7, #20]
	for (; freeIndex < MAX_THREAD; freeIndex++)
 800188e:	e00d      	b.n	80018ac <new+0x34>
		if (thread[freeIndex].ID == 0)
 8001890:	4914      	ldr	r1, [pc, #80]	; (80018e4 <new+0x6c>)
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	4613      	mov	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	1a9b      	subs	r3, r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d006      	beq.n	80018b4 <new+0x3c>
	for (; freeIndex < MAX_THREAD; freeIndex++)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	3301      	adds	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	ddee      	ble.n	8001890 <new+0x18>
 80018b2:	e000      	b.n	80018b6 <new+0x3e>
			break; //empty thread found
 80018b4:	bf00      	nop
	if (freeIndex >= MAX_THREAD)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	dd02      	ble.n	80018c2 <new+0x4a>
		return -1;
 80018bc:	f04f 33ff 	mov.w	r3, #4294967295
 80018c0:	e009      	b.n	80018d6 <new+0x5e>
	addThread(freeIndex, threadTask, stack, stackLen);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	68f9      	ldr	r1, [r7, #12]
 80018c8:	6978      	ldr	r0, [r7, #20]
 80018ca:	f7ff ff15 	bl	80016f8 <addThread>
	mutexLock = 0;
 80018ce:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <new+0x68>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
	return freeIndex;
 80018d4:	697b      	ldr	r3, [r7, #20]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200001ac 	.word	0x200001ac
 80018e4:	2000011c 	.word	0x2000011c

080018e8 <startScheduler>:

/**
 * This starts threading
 */
static void startScheduler() {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
	//Adding idle thread
	addThread(0, idleThread, idleThreadStack,
 80018ee:	2340      	movs	r3, #64	; 0x40
 80018f0:	4a14      	ldr	r2, [pc, #80]	; (8001944 <startScheduler+0x5c>)
 80018f2:	4915      	ldr	r1, [pc, #84]	; (8001948 <startScheduler+0x60>)
 80018f4:	2000      	movs	r0, #0
 80018f6:	f7ff feff 	bl	80016f8 <addThread>
			sizeof(idleThreadStack) / sizeof(uint32_t));

	NVIC_SetPriority(PendSV_IRQn, 0xFF);
 80018fa:	21ff      	movs	r1, #255	; 0xff
 80018fc:	f06f 0001 	mvn.w	r0, #1
 8001900:	f7ff fec2 	bl	8001688 <__NVIC_SetPriority>

	uint32_t sp = thread[0].sp;
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <startScheduler+0x64>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	607b      	str	r3, [r7, #4]

	__asm volatile("MOV R0, %0"::"r"(sp));
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4618      	mov	r0, r3
	__asm volatile("MSR PSP, R0");
 800190e:	f380 8809 	msr	PSP, r0

	//Stack to PSP
	__asm volatile(
 8001912:	f3ef 8014 	mrs	r0, CONTROL
 8001916:	f040 0002 	orr.w	r0, r0, #2
 800191a:	f380 8814 	msr	CONTROL, r0
			"ORR R0, R0, #2\n\t"
			"MSR CONTROL, r0"
	);

	//Unprivileged Mode
	__asm volatile(
 800191e:	f3ef 8014 	mrs	r0, CONTROL
 8001922:	f040 0001 	orr.w	r0, r0, #1
 8001926:	f380 8814 	msr	CONTROL, r0
			"MRS R0, CONTROL\n\t"
			"ORR R0, R0, #1\n\t"
			"MSR CONTROL, r0"
	);

	currentThread = 0;
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <startScheduler+0x68>)
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
	void (*task)() = (void (*)())((uint32_t*)sp)[14];
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3338      	adds	r3, #56	; 0x38
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	603b      	str	r3, [r7, #0]
	task();
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	4798      	blx	r3
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	200001b0 	.word	0x200001b0
 8001948:	080016dd 	.word	0x080016dd
 800194c:	2000011c 	.word	0x2000011c
 8001950:	2000000c 	.word	0x2000000c

08001954 <threadSwitching>:

static void threadSwitching() {
 8001954:	b5b0      	push	{r4, r5, r7, lr}
 8001956:	af00      	add	r7, sp, #0
	if (mutexLock)
 8001958:	4b53      	ldr	r3, [pc, #332]	; (8001aa8 <threadSwitching+0x154>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	f040 809f 	bne.w	8001aa2 <threadSwitching+0x14e>
		return;
	for (countThread = 0; countThread <= MAX_THREAD; countThread++) {
 8001964:	4b51      	ldr	r3, [pc, #324]	; (8001aac <threadSwitching+0x158>)
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	e08d      	b.n	8001a88 <threadSwitching+0x134>
		currentThread = (currentThread + 1) % MAX_THREAD;
 800196c:	4b50      	ldr	r3, [pc, #320]	; (8001ab0 <threadSwitching+0x15c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	1c59      	adds	r1, r3, #1
 8001972:	4b50      	ldr	r3, [pc, #320]	; (8001ab4 <threadSwitching+0x160>)
 8001974:	fb83 2301 	smull	r2, r3, r3, r1
 8001978:	105a      	asrs	r2, r3, #1
 800197a:	17cb      	asrs	r3, r1, #31
 800197c:	1ad2      	subs	r2, r2, r3
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	1aca      	subs	r2, r1, r3
 8001986:	4b4a      	ldr	r3, [pc, #296]	; (8001ab0 <threadSwitching+0x15c>)
 8001988:	601a      	str	r2, [r3, #0]
		if (thread[currentThread].ID == 0)
 800198a:	4b49      	ldr	r3, [pc, #292]	; (8001ab0 <threadSwitching+0x15c>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	494a      	ldr	r1, [pc, #296]	; (8001ab8 <threadSwitching+0x164>)
 8001990:	4613      	mov	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	1a9b      	subs	r3, r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	440b      	add	r3, r1
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d068      	beq.n	8001a74 <threadSwitching+0x120>
			continue; //Empty or idle thread

		if (HAL_GetTick() <= thread[currentThread].waitTill)
 80019a2:	f7fe fdf3 	bl	800058c <HAL_GetTick>
 80019a6:	4601      	mov	r1, r0
 80019a8:	4b41      	ldr	r3, [pc, #260]	; (8001ab0 <threadSwitching+0x15c>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4842      	ldr	r0, [pc, #264]	; (8001ab8 <threadSwitching+0x164>)
 80019ae:	4613      	mov	r3, r2
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	1a9b      	subs	r3, r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4403      	add	r3, r0
 80019b8:	3318      	adds	r3, #24
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4299      	cmp	r1, r3
 80019be:	d95b      	bls.n	8001a78 <threadSwitching+0x124>
			continue; //Delay has been executing

		if (thread[currentThread].action == STM32_THREAD_ACTION_DELETE) {
 80019c0:	4b3b      	ldr	r3, [pc, #236]	; (8001ab0 <threadSwitching+0x15c>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	493c      	ldr	r1, [pc, #240]	; (8001ab8 <threadSwitching+0x164>)
 80019c6:	4613      	mov	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	1a9b      	subs	r3, r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	440b      	add	r3, r1
 80019d0:	3310      	adds	r3, #16
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d10a      	bne.n	80019f0 <threadSwitching+0x9c>
			thread[currentThread].ID = 0;
 80019da:	4b35      	ldr	r3, [pc, #212]	; (8001ab0 <threadSwitching+0x15c>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	4936      	ldr	r1, [pc, #216]	; (8001ab8 <threadSwitching+0x164>)
 80019e0:	4613      	mov	r3, r2
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	1a9b      	subs	r3, r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
			continue;
 80019ee:	e046      	b.n	8001a7e <threadSwitching+0x12a>
		} else if (thread[currentThread].action
 80019f0:	4b2f      	ldr	r3, [pc, #188]	; (8001ab0 <threadSwitching+0x15c>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4930      	ldr	r1, [pc, #192]	; (8001ab8 <threadSwitching+0x164>)
 80019f6:	4613      	mov	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	1a9b      	subs	r3, r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	440b      	add	r3, r1
 8001a00:	3310      	adds	r3, #16
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d123      	bne.n	8001a52 <threadSwitching+0xfe>
				== STM32_THREAD_ACTION_RESTART) {
			addThread(currentThread, thread[currentThread].threadFunc,
 8001a0a:	4b29      	ldr	r3, [pc, #164]	; (8001ab0 <threadSwitching+0x15c>)
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	4b28      	ldr	r3, [pc, #160]	; (8001ab0 <threadSwitching+0x15c>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	4929      	ldr	r1, [pc, #164]	; (8001ab8 <threadSwitching+0x164>)
 8001a14:	4613      	mov	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	1a9b      	subs	r3, r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	3314      	adds	r3, #20
 8001a20:	6819      	ldr	r1, [r3, #0]
 8001a22:	4b23      	ldr	r3, [pc, #140]	; (8001ab0 <threadSwitching+0x15c>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	4c24      	ldr	r4, [pc, #144]	; (8001ab8 <threadSwitching+0x164>)
 8001a28:	4613      	mov	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	1a9b      	subs	r3, r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4423      	add	r3, r4
 8001a32:	3304      	adds	r3, #4
 8001a34:	681c      	ldr	r4, [r3, #0]
 8001a36:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <threadSwitching+0x15c>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	4d1f      	ldr	r5, [pc, #124]	; (8001ab8 <threadSwitching+0x164>)
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	1a9b      	subs	r3, r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	442b      	add	r3, r5
 8001a46:	3308      	adds	r3, #8
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4622      	mov	r2, r4
 8001a4c:	f7ff fe54 	bl	80016f8 <addThread>
 8001a50:	e00c      	b.n	8001a6c <threadSwitching+0x118>
					thread[currentThread].stack,
					thread[currentThread].stackLen);
		} else if (thread[currentThread].action == STM32_THREAD_ACTION_BLOCK) {
 8001a52:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <threadSwitching+0x15c>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	4918      	ldr	r1, [pc, #96]	; (8001ab8 <threadSwitching+0x164>)
 8001a58:	4613      	mov	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	1a9b      	subs	r3, r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	3310      	adds	r3, #16
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d007      	beq.n	8001a7c <threadSwitching+0x128>
			continue;
		}

		countThread = 0;
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <threadSwitching+0x158>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
		break;
 8001a72:	e00e      	b.n	8001a92 <threadSwitching+0x13e>
			continue; //Empty or idle thread
 8001a74:	bf00      	nop
 8001a76:	e002      	b.n	8001a7e <threadSwitching+0x12a>
			continue; //Delay has been executing
 8001a78:	bf00      	nop
 8001a7a:	e000      	b.n	8001a7e <threadSwitching+0x12a>
			continue;
 8001a7c:	bf00      	nop
	for (countThread = 0; countThread <= MAX_THREAD; countThread++) {
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <threadSwitching+0x158>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	3301      	adds	r3, #1
 8001a84:	4a09      	ldr	r2, [pc, #36]	; (8001aac <threadSwitching+0x158>)
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <threadSwitching+0x158>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b05      	cmp	r3, #5
 8001a8e:	f77f af6d 	ble.w	800196c <threadSwitching+0x18>
	}
	if (countThread > 0) {
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <threadSwitching+0x158>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	dd04      	ble.n	8001aa4 <threadSwitching+0x150>
		//No thread remaining so assign idle
		currentThread = 0;
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <threadSwitching+0x15c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	e000      	b.n	8001aa4 <threadSwitching+0x150>
		return;
 8001aa2:	bf00      	nop
	}
}
 8001aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200001ac 	.word	0x200001ac
 8001aac:	200001a8 	.word	0x200001a8
 8001ab0:	2000000c 	.word	0x2000000c
 8001ab4:	66666667 	.word	0x66666667
 8001ab8:	2000011c 	.word	0x2000011c

08001abc <threadSysTickHandler>:

/**
 * This should be called in SysTick_Handler
 */
void threadSysTickHandler() {
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
	if (currentThread >= 0)
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <threadSysTickHandler+0x20>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	db05      	blt.n	8001ad4 <threadSysTickHandler+0x18>
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <threadSysTickHandler+0x24>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <threadSysTickHandler+0x24>)
 8001ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	6053      	str	r3, [r2, #4]
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr
 8001adc:	2000000c 	.word	0x2000000c
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <threadPendSVHandler>:

/**
 * This should be called in PendSV_Handler
 */
__attribute__((naked)) void threadPendSVHandler() {
	__asm volatile("POP {R7,LR}");
 8001ae4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}

	//Making this function as if __attribute__((naked))
	__asm volatile("PUSH {LR}");
 8001ae8:	b500      	push	{lr}

	/* Save the context of current task */

	// get current PSP
	__asm volatile("MRS R0, PSP");
 8001aea:	f3ef 8009 	mrs	r0, PSP
	// save R4 to R11 to PSP Frame Stack
	__asm volatile("STMDB R0!, {R4-R11}");
 8001aee:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	// save current value of PSP
	__asm volatile("MOV %0, R0":"=r"(thread[currentThread].sp));
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <threadPendSVHandler+0x50>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	4601      	mov	r1, r0
 8001af8:	480f      	ldr	r0, [pc, #60]	; (8001b38 <threadPendSVHandler+0x54>)
 8001afa:	4613      	mov	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	1a9b      	subs	r3, r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4403      	add	r3, r0
 8001b04:	330c      	adds	r3, #12
 8001b06:	6019      	str	r1, [r3, #0]

	/* Scheduling */
	threadSwitching();
 8001b08:	f7ff ff24 	bl	8001954 <threadSwitching>

	/* Retrieve the context of next task */

	// get its past PSP value
	__asm volatile("MOV R0, %0"::"r"(thread[currentThread].sp));
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <threadPendSVHandler+0x50>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4909      	ldr	r1, [pc, #36]	; (8001b38 <threadPendSVHandler+0x54>)
 8001b12:	4613      	mov	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	1a9b      	subs	r3, r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	330c      	adds	r3, #12
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
	// retrieve R4-R11 from PSP Fram Stack
	__asm volatile("LDMIA R0!, {R4-R11}");
 8001b22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	// update PSP
	__asm volatile("MSR PSP, R0");
 8001b26:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}");
 8001b2a:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("NOP");
 8001b2e:	bf00      	nop
	__asm volatile("BX LR");
 8001b30:	4770      	bx	lr
}
 8001b32:	bf00      	nop
 8001b34:	2000000c 	.word	0x2000000c
 8001b38:	2000011c 	.word	0x2000011c

08001b3c <reschedule>:

static void reschedule(){
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
	__asm volatile("SVC #0");
 8001b40:	df00      	svc	0
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr
	...

08001b4c <threadSVCHandler>:

/**
 * This should be called in SVC_Handler
 */
void threadSVCHandler(){
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
	if (currentThread >= 0)
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <threadSVCHandler+0x20>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	db05      	blt.n	8001b64 <threadSVCHandler+0x18>
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <threadSVCHandler+0x24>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <threadSVCHandler+0x24>)
 8001b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b62:	6053      	str	r3, [r2, #4]
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	2000000c 	.word	0x2000000c
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <threadDelete>:
//////////////////////////UTILS/////////////////////////
/**
 * This deletes this thread
 * @param threadID : ID of thread to be deleted
 */
static void threadDelete(int threadID) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	mutexLock = 1;
 8001b7c:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <threadDelete+0x54>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	701a      	strb	r2, [r3, #0]
	if (threadID > 0 && threadID<MAX_THREAD)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	dd0c      	ble.n	8001ba2 <threadDelete+0x2e>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	dc09      	bgt.n	8001ba2 <threadDelete+0x2e>
		thread[threadID].action = STM32_THREAD_ACTION_DELETE;
 8001b8e:	490f      	ldr	r1, [pc, #60]	; (8001bcc <threadDelete+0x58>)
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	1a9b      	subs	r3, r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	3310      	adds	r3, #16
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	701a      	strb	r2, [r3, #0]
	mutexLock = 0;
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <threadDelete+0x54>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
	if (threadID == 0 && threadID != currentThread)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d104      	bne.n	8001bb8 <threadDelete+0x44>
 8001bae:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <threadDelete+0x5c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d102      	bne.n	8001bbe <threadDelete+0x4a>
		return;
	reschedule();
 8001bb8:	f7ff ffc0 	bl	8001b3c <reschedule>
 8001bbc:	e000      	b.n	8001bc0 <threadDelete+0x4c>
		return;
 8001bbe:	bf00      	nop
}
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200001ac 	.word	0x200001ac
 8001bcc:	2000011c 	.word	0x2000011c
 8001bd0:	2000000c 	.word	0x2000000c

08001bd4 <threadRestart>:

/**
 * This restarts this thread
 * @param threadID : ID of thread to be restarted
 */
static void threadRestart(int threadID) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	mutexLock = 1;
 8001bdc:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <threadRestart+0x54>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	701a      	strb	r2, [r3, #0]
	if (threadID > 0 && threadID<MAX_THREAD)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	dd0c      	ble.n	8001c02 <threadRestart+0x2e>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	dc09      	bgt.n	8001c02 <threadRestart+0x2e>
		thread[threadID].action = STM32_THREAD_ACTION_RESTART;
 8001bee:	490f      	ldr	r1, [pc, #60]	; (8001c2c <threadRestart+0x58>)
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	1a9b      	subs	r3, r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	3310      	adds	r3, #16
 8001bfe:	2203      	movs	r2, #3
 8001c00:	701a      	strb	r2, [r3, #0]
	mutexLock = 0;
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <threadRestart+0x54>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	701a      	strb	r2, [r3, #0]
	if (threadID == 0 && threadID != currentThread)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d104      	bne.n	8001c18 <threadRestart+0x44>
 8001c0e:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <threadRestart+0x5c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d102      	bne.n	8001c1e <threadRestart+0x4a>
		return;
	reschedule();
 8001c18:	f7ff ff90 	bl	8001b3c <reschedule>
 8001c1c:	e000      	b.n	8001c20 <threadRestart+0x4c>
		return;
 8001c1e:	bf00      	nop
}
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200001ac 	.word	0x200001ac
 8001c2c:	2000011c 	.word	0x2000011c
 8001c30:	2000000c 	.word	0x2000000c

08001c34 <threadBlock>:

/**
 * This blocks this thread
 * @param threadID : ID of thread to be blocked
 */
static void threadBlock(int threadID) {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
	mutexLock = 1;
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <threadBlock+0x54>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	701a      	strb	r2, [r3, #0]
	if (threadID > 0 && threadID<MAX_THREAD)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	dd0c      	ble.n	8001c62 <threadBlock+0x2e>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	dc09      	bgt.n	8001c62 <threadBlock+0x2e>
		thread[threadID].action = STM32_THREAD_ACTION_BLOCK;
 8001c4e:	490f      	ldr	r1, [pc, #60]	; (8001c8c <threadBlock+0x58>)
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	1a9b      	subs	r3, r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	3310      	adds	r3, #16
 8001c5e:	2200      	movs	r2, #0
 8001c60:	701a      	strb	r2, [r3, #0]
	mutexLock = 0;
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <threadBlock+0x54>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	701a      	strb	r2, [r3, #0]
	if (threadID == 0 && threadID != currentThread)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d104      	bne.n	8001c78 <threadBlock+0x44>
 8001c6e:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <threadBlock+0x5c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d102      	bne.n	8001c7e <threadBlock+0x4a>
		return;
	reschedule();
 8001c78:	f7ff ff60 	bl	8001b3c <reschedule>
 8001c7c:	e000      	b.n	8001c80 <threadBlock+0x4c>
		return;
 8001c7e:	bf00      	nop
}
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	200001ac 	.word	0x200001ac
 8001c8c:	2000011c 	.word	0x2000011c
 8001c90:	2000000c 	.word	0x2000000c

08001c94 <threadUnblock>:

/**
 * This unblocks this thread
 * @param threadID : ID of thread to be unblocked
 */
static void threadUnblock(int threadID) {
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
	mutexLock = 1;
 8001c9c:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <threadUnblock+0x40>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	701a      	strb	r2, [r3, #0]
	if (threadID > 0 && threadID<MAX_THREAD)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	dd0c      	ble.n	8001cc2 <threadUnblock+0x2e>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	dc09      	bgt.n	8001cc2 <threadUnblock+0x2e>
		thread[threadID].action = STM32_THREAD_ACTION_RUNNING;
 8001cae:	490a      	ldr	r1, [pc, #40]	; (8001cd8 <threadUnblock+0x44>)
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	1a9b      	subs	r3, r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	440b      	add	r3, r1
 8001cbc:	3310      	adds	r3, #16
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	701a      	strb	r2, [r3, #0]
	mutexLock = 0;
 8001cc2:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <threadUnblock+0x40>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	200001ac 	.word	0x200001ac
 8001cd8:	2000011c 	.word	0x2000011c

08001cdc <threadDelay>:

/**
 * This is delay for thread which do not comsume clock cycle
 * @param millis	: duration for delay in millis
 */
static void threadDelay(uint32_t millis) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
	mutexLock = 1;
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <threadDelay+0x50>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	701a      	strb	r2, [r3, #0]
	if (currentThread > 0 && currentThread<MAX_THREAD)
 8001cea:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <threadDelay+0x54>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	dd12      	ble.n	8001d18 <threadDelay+0x3c>
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <threadDelay+0x54>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	dc0e      	bgt.n	8001d18 <threadDelay+0x3c>
		thread[currentThread].waitTill = HAL_GetTick() + millis;
 8001cfa:	f7fe fc47 	bl	800058c <HAL_GetTick>
 8001cfe:	4601      	mov	r1, r0
 8001d00:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <threadDelay+0x54>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4419      	add	r1, r3
 8001d08:	480a      	ldr	r0, [pc, #40]	; (8001d34 <threadDelay+0x58>)
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	1a9b      	subs	r3, r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4403      	add	r3, r0
 8001d14:	3318      	adds	r3, #24
 8001d16:	6019      	str	r1, [r3, #0]
	mutexLock = 0;
 8001d18:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <threadDelay+0x50>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	701a      	strb	r2, [r3, #0]
	reschedule();
 8001d1e:	f7ff ff0d 	bl	8001b3c <reschedule>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200001ac 	.word	0x200001ac
 8001d30:	2000000c 	.word	0x2000000c
 8001d34:	2000011c 	.word	0x2000011c

08001d38 <threadPrint>:

/**
 * This is printf for thread which prints completely this text
 */
static void threadPrint(const char *msg, ...) {
 8001d38:	b40f      	push	{r0, r1, r2, r3}
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
	mutexLock = 1;
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <threadPrint+0x30>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	701a      	strb	r2, [r3, #0]
	va_list args;
	va_start(args, msg);
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	607b      	str	r3, [r7, #4]
	vprintf(msg, args);
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	6938      	ldr	r0, [r7, #16]
 8001d50:	f000 fa38 	bl	80021c4 <viprintf>
	va_end(args);
	mutexLock = 0;
 8001d54:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <threadPrint+0x30>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d64:	b004      	add	sp, #16
 8001d66:	4770      	bx	lr
 8001d68:	200001ac 	.word	0x200001ac

08001d6c <threadMutexLock>:

/**
 * This blocks all thread except current thread (this thread)
 */
static void threadMutexLock(){
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
	mutexLock = 1;
 8001d70:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <threadMutexLock+0x14>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	701a      	strb	r2, [r3, #0]
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	200001ac 	.word	0x200001ac

08001d84 <threadMutexUnlock>:

/**
 * This unlocks mutex lock
 */
static void threadMutexUnlock(){
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
	mutexLock = 0;
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <threadMutexUnlock+0x14>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
}
 8001d8e:	bf00      	nop
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	200001ac 	.word	0x200001ac

08001d9c <threadTakeBinarySemaphore>:

/**
 * This blocks this thread unless other thread give binary semaphore for this thread
 * @param threadIDptr	: binary semaphore ID which is also thread ID of this thread
 */
static void threadTakeBinarySemaphore(int *threadIDptr){
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
	mutexLock = 1;
 8001da4:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <threadTakeBinarySemaphore+0x54>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	701a      	strb	r2, [r3, #0]
	if(threadIDptr!=NULL && (currentThread>0 && currentThread<MAX_THREAD)){
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d016      	beq.n	8001dde <threadTakeBinarySemaphore+0x42>
 8001db0:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <threadTakeBinarySemaphore+0x58>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	dd12      	ble.n	8001dde <threadTakeBinarySemaphore+0x42>
 8001db8:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <threadTakeBinarySemaphore+0x58>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	dc0e      	bgt.n	8001dde <threadTakeBinarySemaphore+0x42>
		*threadIDptr = currentThread;
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <threadTakeBinarySemaphore+0x58>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	601a      	str	r2, [r3, #0]
		thread[currentThread].action = STM32_THREAD_ACTION_BLOCK;
 8001dc8:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <threadTakeBinarySemaphore+0x58>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	490a      	ldr	r1, [pc, #40]	; (8001df8 <threadTakeBinarySemaphore+0x5c>)
 8001dce:	4613      	mov	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	1a9b      	subs	r3, r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	3310      	adds	r3, #16
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]
	}
	mutexLock = 0;
 8001dde:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <threadTakeBinarySemaphore+0x54>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	701a      	strb	r2, [r3, #0]
	reschedule();
 8001de4:	f7ff feaa 	bl	8001b3c <reschedule>
}
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	200001ac 	.word	0x200001ac
 8001df4:	2000000c 	.word	0x2000000c
 8001df8:	2000011c 	.word	0x2000011c

08001dfc <threadGiveBinarySemaphore>:

/**
 * This blocks this thread corresponding to this threadID
 * @param threadID	: binary semaphore ID which is also thread ID of this thread to be unblocked
 */
static void threadGiveBinarySemaphore(int threadID){
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
	mutexLock = 1;
 8001e04:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <threadGiveBinarySemaphore+0x40>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]
	if(threadID>0 && threadID<MAX_THREAD)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	dd0c      	ble.n	8001e2a <threadGiveBinarySemaphore+0x2e>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	dc09      	bgt.n	8001e2a <threadGiveBinarySemaphore+0x2e>
		thread[threadID].action = STM32_THREAD_ACTION_RUNNING;
 8001e16:	490a      	ldr	r1, [pc, #40]	; (8001e40 <threadGiveBinarySemaphore+0x44>)
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	1a9b      	subs	r3, r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	440b      	add	r3, r1
 8001e24:	3310      	adds	r3, #16
 8001e26:	2201      	movs	r2, #1
 8001e28:	701a      	strb	r2, [r3, #0]
	mutexLock = 0;
 8001e2a:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <threadGiveBinarySemaphore+0x40>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	701a      	strb	r2, [r3, #0]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	200001ac 	.word	0x200001ac
 8001e40:	2000011c 	.word	0x2000011c

08001e44 <_write>:
#include "stdio.h"
#include "stdarg.h"

extern UART_HandleTypeDef huart1;

int _write(int file, char *data, int len) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
	StaticThread.mutexLock();
 8001e50:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <_write+0x34>)
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	4798      	blx	r3
	HAL_UART_Transmit(&huart1, (uint8_t*) data, len, HAL_MAX_DELAY);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5e:	68b9      	ldr	r1, [r7, #8]
 8001e60:	4806      	ldr	r0, [pc, #24]	; (8001e7c <_write+0x38>)
 8001e62:	f7ff fa91 	bl	8001388 <HAL_UART_Transmit>
	StaticThread.mutexUnlock();
 8001e66:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <_write+0x34>)
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	4798      	blx	r3
	return len;
 8001e6c:	687b      	ldr	r3, [r7, #4]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000010 	.word	0x20000010
 8001e7c:	200000cc 	.word	0x200000cc

08001e80 <HardFault_Handler>:


///////////////////////////HANDLER///////////////////////
void HardFault_Handler(void) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	printf("Hard Fault\n");
 8001e84:	4801      	ldr	r0, [pc, #4]	; (8001e8c <HardFault_Handler+0xc>)
 8001e86:	f000 f995 	bl	80021b4 <puts>
	while (1) {
 8001e8a:	e7fe      	b.n	8001e8a <HardFault_Handler+0xa>
 8001e8c:	08003100 	.word	0x08003100

08001e90 <SVC_Handler>:

	}
}

void SVC_Handler(void){
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	StaticThread.SVCHandler();
 8001e94:	4b02      	ldr	r3, [pc, #8]	; (8001ea0 <SVC_Handler+0x10>)
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e98:	4798      	blx	r3
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000010 	.word	0x20000010

08001ea4 <PendSV_Handler>:

void PendSV_Handler(void) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
	StaticThread.PendSVHandler();
 8001ea8:	4b02      	ldr	r3, [pc, #8]	; (8001eb4 <PendSV_Handler+0x10>)
 8001eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eac:	4798      	blx	r3
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000010 	.word	0x20000010

08001eb8 <SysTick_Handler>:

void SysTick_Handler(void) {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001ebc:	f7fe fb54 	bl	8000568 <HAL_IncTick>
	StaticThread.SysTickHandler();
 8001ec0:	4b02      	ldr	r3, [pc, #8]	; (8001ecc <SysTick_Handler+0x14>)
 8001ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec4:	4798      	blx	r3
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000010 	.word	0x20000010

08001ed0 <printX>:
}

int *x_rr;
int x_len;
int x_id;
void printX(){
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
//	printOdd(x_rr, x_len);
	for(int i = 0; i<x_len; i++){
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	e010      	b.n	8001efe <printX+0x2e>
		StaticThread.print("x = %d\n",x_rr[i]);
 8001edc:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <printX+0x4c>)
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	4a0f      	ldr	r2, [pc, #60]	; (8001f20 <printX+0x50>)
 8001ee2:	6811      	ldr	r1, [r2, #0]
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	0092      	lsls	r2, r2, #2
 8001ee8:	440a      	add	r2, r1
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	4611      	mov	r1, r2
 8001eee:	480d      	ldr	r0, [pc, #52]	; (8001f24 <printX+0x54>)
 8001ef0:	4798      	blx	r3
		HAL_Delay(10);
 8001ef2:	200a      	movs	r0, #10
 8001ef4:	f7fe fb54 	bl	80005a0 <HAL_Delay>
	for(int i = 0; i<x_len; i++){
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3301      	adds	r3, #1
 8001efc:	607b      	str	r3, [r7, #4]
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <printX+0x58>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	dbe9      	blt.n	8001edc <printX+0xc>
	}
	StaticThread.delete(x_id);
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <printX+0x4c>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	4a07      	ldr	r2, [pc, #28]	; (8001f2c <printX+0x5c>)
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	4610      	mov	r0, r2
 8001f12:	4798      	blx	r3
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000010 	.word	0x20000010
 8001f20:	200002b4 	.word	0x200002b4
 8001f24:	08003110 	.word	0x08003110
 8001f28:	200002b8 	.word	0x200002b8
 8001f2c:	200002bc 	.word	0x200002bc

08001f30 <printY>:

int *y_rr;
int y_len;
int y_id;
void printY(){
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
//	printOdd(y_rr, y_len);
	for(int i = 0; i<y_len; i++){
 8001f36:	2300      	movs	r3, #0
 8001f38:	607b      	str	r3, [r7, #4]
 8001f3a:	e010      	b.n	8001f5e <printY+0x2e>
		StaticThread.print("y = %d\n",y_rr[i]);
 8001f3c:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <printY+0x4c>)
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	4a0f      	ldr	r2, [pc, #60]	; (8001f80 <printY+0x50>)
 8001f42:	6811      	ldr	r1, [r2, #0]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	0092      	lsls	r2, r2, #2
 8001f48:	440a      	add	r2, r1
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	480d      	ldr	r0, [pc, #52]	; (8001f84 <printY+0x54>)
 8001f50:	4798      	blx	r3
		HAL_Delay(10);
 8001f52:	200a      	movs	r0, #10
 8001f54:	f7fe fb24 	bl	80005a0 <HAL_Delay>
	for(int i = 0; i<y_len; i++){
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	607b      	str	r3, [r7, #4]
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <printY+0x58>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	dbe9      	blt.n	8001f3c <printY+0xc>
	}
	StaticThread.delete(y_id);
 8001f68:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <printY+0x4c>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	4a07      	ldr	r2, [pc, #28]	; (8001f8c <printY+0x5c>)
 8001f6e:	6812      	ldr	r2, [r2, #0]
 8001f70:	4610      	mov	r0, r2
 8001f72:	4798      	blx	r3
}
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000010 	.word	0x20000010
 8001f80:	200002c0 	.word	0x200002c0
 8001f84:	08003118 	.word	0x08003118
 8001f88:	200002c4 	.word	0x200002c4
 8001f8c:	200002c8 	.word	0x200002c8

08001f90 <taskMain>:


int idMain;
uint32_t stackMain[1024];
void taskMain(){
 8001f90:	b5b0      	push	{r4, r5, r7, lr}
 8001f92:	f6ad 0d48 	subw	sp, sp, #2120	; 0x848
 8001f96:	af00      	add	r7, sp, #0
	StaticThread.print("Initiating....\n");
 8001f98:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <taskMain+0x80>)
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	481d      	ldr	r0, [pc, #116]	; (8002014 <taskMain+0x84>)
 8001f9e:	4798      	blx	r3

	int x[] = {1,2,3,4,5,6,7,8,9};
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <taskMain+0x88>)
 8001fa2:	f607 0424 	addw	r4, r7, #2084	; 0x824
 8001fa6:	461d      	mov	r5, r3
 8001fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001faa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fb0:	682b      	ldr	r3, [r5, #0]
 8001fb2:	6023      	str	r3, [r4, #0]
	int y[] = {10,11,12,13,14,15,16,17,18};
 8001fb4:	4b19      	ldr	r3, [pc, #100]	; (800201c <taskMain+0x8c>)
 8001fb6:	f507 6400 	add.w	r4, r7, #2048	; 0x800
 8001fba:	461d      	mov	r5, r3
 8001fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fc4:	682b      	ldr	r3, [r5, #0]
 8001fc6:	6023      	str	r3, [r4, #0]

	uint32_t x_stack[256],y_stack[256];


	x_rr = x;
 8001fc8:	4a15      	ldr	r2, [pc, #84]	; (8002020 <taskMain+0x90>)
 8001fca:	f607 0324 	addw	r3, r7, #2084	; 0x824
 8001fce:	6013      	str	r3, [r2, #0]
	x_len = sizeof(x)/sizeof(int);
 8001fd0:	4b14      	ldr	r3, [pc, #80]	; (8002024 <taskMain+0x94>)
 8001fd2:	2209      	movs	r2, #9
 8001fd4:	601a      	str	r2, [r3, #0]
	x_id = StaticThread.new(printX,x_stack,sizeof(x_stack) / 4);
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <taskMain+0x80>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 8001fde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fe2:	4811      	ldr	r0, [pc, #68]	; (8002028 <taskMain+0x98>)
 8001fe4:	4798      	blx	r3
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4a10      	ldr	r2, [pc, #64]	; (800202c <taskMain+0x9c>)
 8001fea:	6013      	str	r3, [r2, #0]


	y_rr = y;
 8001fec:	4a10      	ldr	r2, [pc, #64]	; (8002030 <taskMain+0xa0>)
 8001fee:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8001ff2:	6013      	str	r3, [r2, #0]
	y_len = sizeof(y)/sizeof(int);
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <taskMain+0xa4>)
 8001ff6:	2209      	movs	r2, #9
 8001ff8:	601a      	str	r2, [r3, #0]
	y_id = StaticThread.new(printY,y_stack,sizeof(y_stack) / 4);
 8001ffa:	4b05      	ldr	r3, [pc, #20]	; (8002010 <taskMain+0x80>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4639      	mov	r1, r7
 8002000:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002004:	480c      	ldr	r0, [pc, #48]	; (8002038 <taskMain+0xa8>)
 8002006:	4798      	blx	r3
 8002008:	4603      	mov	r3, r0
 800200a:	4a0c      	ldr	r2, [pc, #48]	; (800203c <taskMain+0xac>)
 800200c:	6013      	str	r3, [r2, #0]

	while(1){
 800200e:	e7fe      	b.n	800200e <taskMain+0x7e>
 8002010:	20000010 	.word	0x20000010
 8002014:	08003120 	.word	0x08003120
 8002018:	08003130 	.word	0x08003130
 800201c:	08003154 	.word	0x08003154
 8002020:	200002b4 	.word	0x200002b4
 8002024:	200002b8 	.word	0x200002b8
 8002028:	08001ed1 	.word	0x08001ed1
 800202c:	200002bc 	.word	0x200002bc
 8002030:	200002c0 	.word	0x200002c0
 8002034:	200002c4 	.word	0x200002c4
 8002038:	08001f31 	.word	0x08001f31
 800203c:	200002c8 	.word	0x200002c8

08002040 <run>:


	}
}

void run() {
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
//	id1 = StaticThread.new(task1,stack1,sizeof(stack1) / 4);
//	id2 = StaticThread.new(task2,stack2,sizeof(stack2) / 4);
//	id3 = StaticThread.new(task3,stack3,sizeof(stack3) / 4);;

	idMain = StaticThread.new(taskMain,stackMain,sizeof(stackMain) / 4);
 8002044:	4b07      	ldr	r3, [pc, #28]	; (8002064 <run+0x24>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800204c:	4906      	ldr	r1, [pc, #24]	; (8002068 <run+0x28>)
 800204e:	4807      	ldr	r0, [pc, #28]	; (800206c <run+0x2c>)
 8002050:	4798      	blx	r3
 8002052:	4603      	mov	r3, r0
 8002054:	4a06      	ldr	r2, [pc, #24]	; (8002070 <run+0x30>)
 8002056:	6013      	str	r3, [r2, #0]
	StaticThread.startScheduler();
 8002058:	4b02      	ldr	r3, [pc, #8]	; (8002064 <run+0x24>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	4798      	blx	r3

}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000010 	.word	0x20000010
 8002068:	200002d0 	.word	0x200002d0
 800206c:	08001f91 	.word	0x08001f91
 8002070:	200002cc 	.word	0x200002cc

08002074 <__errno>:
 8002074:	4b01      	ldr	r3, [pc, #4]	; (800207c <__errno+0x8>)
 8002076:	6818      	ldr	r0, [r3, #0]
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	2000004c 	.word	0x2000004c

08002080 <__libc_init_array>:
 8002080:	b570      	push	{r4, r5, r6, lr}
 8002082:	2600      	movs	r6, #0
 8002084:	4d0c      	ldr	r5, [pc, #48]	; (80020b8 <__libc_init_array+0x38>)
 8002086:	4c0d      	ldr	r4, [pc, #52]	; (80020bc <__libc_init_array+0x3c>)
 8002088:	1b64      	subs	r4, r4, r5
 800208a:	10a4      	asrs	r4, r4, #2
 800208c:	42a6      	cmp	r6, r4
 800208e:	d109      	bne.n	80020a4 <__libc_init_array+0x24>
 8002090:	f001 f82a 	bl	80030e8 <_init>
 8002094:	2600      	movs	r6, #0
 8002096:	4d0a      	ldr	r5, [pc, #40]	; (80020c0 <__libc_init_array+0x40>)
 8002098:	4c0a      	ldr	r4, [pc, #40]	; (80020c4 <__libc_init_array+0x44>)
 800209a:	1b64      	subs	r4, r4, r5
 800209c:	10a4      	asrs	r4, r4, #2
 800209e:	42a6      	cmp	r6, r4
 80020a0:	d105      	bne.n	80020ae <__libc_init_array+0x2e>
 80020a2:	bd70      	pop	{r4, r5, r6, pc}
 80020a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80020a8:	4798      	blx	r3
 80020aa:	3601      	adds	r6, #1
 80020ac:	e7ee      	b.n	800208c <__libc_init_array+0xc>
 80020ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80020b2:	4798      	blx	r3
 80020b4:	3601      	adds	r6, #1
 80020b6:	e7f2      	b.n	800209e <__libc_init_array+0x1e>
 80020b8:	0800323c 	.word	0x0800323c
 80020bc:	0800323c 	.word	0x0800323c
 80020c0:	0800323c 	.word	0x0800323c
 80020c4:	08003240 	.word	0x08003240

080020c8 <memset>:
 80020c8:	4603      	mov	r3, r0
 80020ca:	4402      	add	r2, r0
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d100      	bne.n	80020d2 <memset+0xa>
 80020d0:	4770      	bx	lr
 80020d2:	f803 1b01 	strb.w	r1, [r3], #1
 80020d6:	e7f9      	b.n	80020cc <memset+0x4>

080020d8 <_puts_r>:
 80020d8:	b570      	push	{r4, r5, r6, lr}
 80020da:	460e      	mov	r6, r1
 80020dc:	4605      	mov	r5, r0
 80020de:	b118      	cbz	r0, 80020e8 <_puts_r+0x10>
 80020e0:	6983      	ldr	r3, [r0, #24]
 80020e2:	b90b      	cbnz	r3, 80020e8 <_puts_r+0x10>
 80020e4:	f000 fa5a 	bl	800259c <__sinit>
 80020e8:	69ab      	ldr	r3, [r5, #24]
 80020ea:	68ac      	ldr	r4, [r5, #8]
 80020ec:	b913      	cbnz	r3, 80020f4 <_puts_r+0x1c>
 80020ee:	4628      	mov	r0, r5
 80020f0:	f000 fa54 	bl	800259c <__sinit>
 80020f4:	4b2c      	ldr	r3, [pc, #176]	; (80021a8 <_puts_r+0xd0>)
 80020f6:	429c      	cmp	r4, r3
 80020f8:	d120      	bne.n	800213c <_puts_r+0x64>
 80020fa:	686c      	ldr	r4, [r5, #4]
 80020fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80020fe:	07db      	lsls	r3, r3, #31
 8002100:	d405      	bmi.n	800210e <_puts_r+0x36>
 8002102:	89a3      	ldrh	r3, [r4, #12]
 8002104:	0598      	lsls	r0, r3, #22
 8002106:	d402      	bmi.n	800210e <_puts_r+0x36>
 8002108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800210a:	f000 fae5 	bl	80026d8 <__retarget_lock_acquire_recursive>
 800210e:	89a3      	ldrh	r3, [r4, #12]
 8002110:	0719      	lsls	r1, r3, #28
 8002112:	d51d      	bpl.n	8002150 <_puts_r+0x78>
 8002114:	6923      	ldr	r3, [r4, #16]
 8002116:	b1db      	cbz	r3, 8002150 <_puts_r+0x78>
 8002118:	3e01      	subs	r6, #1
 800211a:	68a3      	ldr	r3, [r4, #8]
 800211c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002120:	3b01      	subs	r3, #1
 8002122:	60a3      	str	r3, [r4, #8]
 8002124:	bb39      	cbnz	r1, 8002176 <_puts_r+0x9e>
 8002126:	2b00      	cmp	r3, #0
 8002128:	da38      	bge.n	800219c <_puts_r+0xc4>
 800212a:	4622      	mov	r2, r4
 800212c:	210a      	movs	r1, #10
 800212e:	4628      	mov	r0, r5
 8002130:	f000 f85e 	bl	80021f0 <__swbuf_r>
 8002134:	3001      	adds	r0, #1
 8002136:	d011      	beq.n	800215c <_puts_r+0x84>
 8002138:	250a      	movs	r5, #10
 800213a:	e011      	b.n	8002160 <_puts_r+0x88>
 800213c:	4b1b      	ldr	r3, [pc, #108]	; (80021ac <_puts_r+0xd4>)
 800213e:	429c      	cmp	r4, r3
 8002140:	d101      	bne.n	8002146 <_puts_r+0x6e>
 8002142:	68ac      	ldr	r4, [r5, #8]
 8002144:	e7da      	b.n	80020fc <_puts_r+0x24>
 8002146:	4b1a      	ldr	r3, [pc, #104]	; (80021b0 <_puts_r+0xd8>)
 8002148:	429c      	cmp	r4, r3
 800214a:	bf08      	it	eq
 800214c:	68ec      	ldreq	r4, [r5, #12]
 800214e:	e7d5      	b.n	80020fc <_puts_r+0x24>
 8002150:	4621      	mov	r1, r4
 8002152:	4628      	mov	r0, r5
 8002154:	f000 f89e 	bl	8002294 <__swsetup_r>
 8002158:	2800      	cmp	r0, #0
 800215a:	d0dd      	beq.n	8002118 <_puts_r+0x40>
 800215c:	f04f 35ff 	mov.w	r5, #4294967295
 8002160:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002162:	07da      	lsls	r2, r3, #31
 8002164:	d405      	bmi.n	8002172 <_puts_r+0x9a>
 8002166:	89a3      	ldrh	r3, [r4, #12]
 8002168:	059b      	lsls	r3, r3, #22
 800216a:	d402      	bmi.n	8002172 <_puts_r+0x9a>
 800216c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800216e:	f000 fab4 	bl	80026da <__retarget_lock_release_recursive>
 8002172:	4628      	mov	r0, r5
 8002174:	bd70      	pop	{r4, r5, r6, pc}
 8002176:	2b00      	cmp	r3, #0
 8002178:	da04      	bge.n	8002184 <_puts_r+0xac>
 800217a:	69a2      	ldr	r2, [r4, #24]
 800217c:	429a      	cmp	r2, r3
 800217e:	dc06      	bgt.n	800218e <_puts_r+0xb6>
 8002180:	290a      	cmp	r1, #10
 8002182:	d004      	beq.n	800218e <_puts_r+0xb6>
 8002184:	6823      	ldr	r3, [r4, #0]
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	6022      	str	r2, [r4, #0]
 800218a:	7019      	strb	r1, [r3, #0]
 800218c:	e7c5      	b.n	800211a <_puts_r+0x42>
 800218e:	4622      	mov	r2, r4
 8002190:	4628      	mov	r0, r5
 8002192:	f000 f82d 	bl	80021f0 <__swbuf_r>
 8002196:	3001      	adds	r0, #1
 8002198:	d1bf      	bne.n	800211a <_puts_r+0x42>
 800219a:	e7df      	b.n	800215c <_puts_r+0x84>
 800219c:	250a      	movs	r5, #10
 800219e:	6823      	ldr	r3, [r4, #0]
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	6022      	str	r2, [r4, #0]
 80021a4:	701d      	strb	r5, [r3, #0]
 80021a6:	e7db      	b.n	8002160 <_puts_r+0x88>
 80021a8:	080031c8 	.word	0x080031c8
 80021ac:	080031e8 	.word	0x080031e8
 80021b0:	080031a8 	.word	0x080031a8

080021b4 <puts>:
 80021b4:	4b02      	ldr	r3, [pc, #8]	; (80021c0 <puts+0xc>)
 80021b6:	4601      	mov	r1, r0
 80021b8:	6818      	ldr	r0, [r3, #0]
 80021ba:	f7ff bf8d 	b.w	80020d8 <_puts_r>
 80021be:	bf00      	nop
 80021c0:	2000004c 	.word	0x2000004c

080021c4 <viprintf>:
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <viprintf+0x28>)
 80021c6:	b570      	push	{r4, r5, r6, lr}
 80021c8:	681c      	ldr	r4, [r3, #0]
 80021ca:	4605      	mov	r5, r0
 80021cc:	460e      	mov	r6, r1
 80021ce:	b124      	cbz	r4, 80021da <viprintf+0x16>
 80021d0:	69a3      	ldr	r3, [r4, #24]
 80021d2:	b913      	cbnz	r3, 80021da <viprintf+0x16>
 80021d4:	4620      	mov	r0, r4
 80021d6:	f000 f9e1 	bl	800259c <__sinit>
 80021da:	4633      	mov	r3, r6
 80021dc:	462a      	mov	r2, r5
 80021de:	4620      	mov	r0, r4
 80021e0:	68a1      	ldr	r1, [r4, #8]
 80021e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80021e6:	f000 bbe3 	b.w	80029b0 <_vfiprintf_r>
 80021ea:	bf00      	nop
 80021ec:	2000004c 	.word	0x2000004c

080021f0 <__swbuf_r>:
 80021f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021f2:	460e      	mov	r6, r1
 80021f4:	4614      	mov	r4, r2
 80021f6:	4605      	mov	r5, r0
 80021f8:	b118      	cbz	r0, 8002202 <__swbuf_r+0x12>
 80021fa:	6983      	ldr	r3, [r0, #24]
 80021fc:	b90b      	cbnz	r3, 8002202 <__swbuf_r+0x12>
 80021fe:	f000 f9cd 	bl	800259c <__sinit>
 8002202:	4b21      	ldr	r3, [pc, #132]	; (8002288 <__swbuf_r+0x98>)
 8002204:	429c      	cmp	r4, r3
 8002206:	d12b      	bne.n	8002260 <__swbuf_r+0x70>
 8002208:	686c      	ldr	r4, [r5, #4]
 800220a:	69a3      	ldr	r3, [r4, #24]
 800220c:	60a3      	str	r3, [r4, #8]
 800220e:	89a3      	ldrh	r3, [r4, #12]
 8002210:	071a      	lsls	r2, r3, #28
 8002212:	d52f      	bpl.n	8002274 <__swbuf_r+0x84>
 8002214:	6923      	ldr	r3, [r4, #16]
 8002216:	b36b      	cbz	r3, 8002274 <__swbuf_r+0x84>
 8002218:	6923      	ldr	r3, [r4, #16]
 800221a:	6820      	ldr	r0, [r4, #0]
 800221c:	b2f6      	uxtb	r6, r6
 800221e:	1ac0      	subs	r0, r0, r3
 8002220:	6963      	ldr	r3, [r4, #20]
 8002222:	4637      	mov	r7, r6
 8002224:	4283      	cmp	r3, r0
 8002226:	dc04      	bgt.n	8002232 <__swbuf_r+0x42>
 8002228:	4621      	mov	r1, r4
 800222a:	4628      	mov	r0, r5
 800222c:	f000 f922 	bl	8002474 <_fflush_r>
 8002230:	bb30      	cbnz	r0, 8002280 <__swbuf_r+0x90>
 8002232:	68a3      	ldr	r3, [r4, #8]
 8002234:	3001      	adds	r0, #1
 8002236:	3b01      	subs	r3, #1
 8002238:	60a3      	str	r3, [r4, #8]
 800223a:	6823      	ldr	r3, [r4, #0]
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	6022      	str	r2, [r4, #0]
 8002240:	701e      	strb	r6, [r3, #0]
 8002242:	6963      	ldr	r3, [r4, #20]
 8002244:	4283      	cmp	r3, r0
 8002246:	d004      	beq.n	8002252 <__swbuf_r+0x62>
 8002248:	89a3      	ldrh	r3, [r4, #12]
 800224a:	07db      	lsls	r3, r3, #31
 800224c:	d506      	bpl.n	800225c <__swbuf_r+0x6c>
 800224e:	2e0a      	cmp	r6, #10
 8002250:	d104      	bne.n	800225c <__swbuf_r+0x6c>
 8002252:	4621      	mov	r1, r4
 8002254:	4628      	mov	r0, r5
 8002256:	f000 f90d 	bl	8002474 <_fflush_r>
 800225a:	b988      	cbnz	r0, 8002280 <__swbuf_r+0x90>
 800225c:	4638      	mov	r0, r7
 800225e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002260:	4b0a      	ldr	r3, [pc, #40]	; (800228c <__swbuf_r+0x9c>)
 8002262:	429c      	cmp	r4, r3
 8002264:	d101      	bne.n	800226a <__swbuf_r+0x7a>
 8002266:	68ac      	ldr	r4, [r5, #8]
 8002268:	e7cf      	b.n	800220a <__swbuf_r+0x1a>
 800226a:	4b09      	ldr	r3, [pc, #36]	; (8002290 <__swbuf_r+0xa0>)
 800226c:	429c      	cmp	r4, r3
 800226e:	bf08      	it	eq
 8002270:	68ec      	ldreq	r4, [r5, #12]
 8002272:	e7ca      	b.n	800220a <__swbuf_r+0x1a>
 8002274:	4621      	mov	r1, r4
 8002276:	4628      	mov	r0, r5
 8002278:	f000 f80c 	bl	8002294 <__swsetup_r>
 800227c:	2800      	cmp	r0, #0
 800227e:	d0cb      	beq.n	8002218 <__swbuf_r+0x28>
 8002280:	f04f 37ff 	mov.w	r7, #4294967295
 8002284:	e7ea      	b.n	800225c <__swbuf_r+0x6c>
 8002286:	bf00      	nop
 8002288:	080031c8 	.word	0x080031c8
 800228c:	080031e8 	.word	0x080031e8
 8002290:	080031a8 	.word	0x080031a8

08002294 <__swsetup_r>:
 8002294:	4b32      	ldr	r3, [pc, #200]	; (8002360 <__swsetup_r+0xcc>)
 8002296:	b570      	push	{r4, r5, r6, lr}
 8002298:	681d      	ldr	r5, [r3, #0]
 800229a:	4606      	mov	r6, r0
 800229c:	460c      	mov	r4, r1
 800229e:	b125      	cbz	r5, 80022aa <__swsetup_r+0x16>
 80022a0:	69ab      	ldr	r3, [r5, #24]
 80022a2:	b913      	cbnz	r3, 80022aa <__swsetup_r+0x16>
 80022a4:	4628      	mov	r0, r5
 80022a6:	f000 f979 	bl	800259c <__sinit>
 80022aa:	4b2e      	ldr	r3, [pc, #184]	; (8002364 <__swsetup_r+0xd0>)
 80022ac:	429c      	cmp	r4, r3
 80022ae:	d10f      	bne.n	80022d0 <__swsetup_r+0x3c>
 80022b0:	686c      	ldr	r4, [r5, #4]
 80022b2:	89a3      	ldrh	r3, [r4, #12]
 80022b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80022b8:	0719      	lsls	r1, r3, #28
 80022ba:	d42c      	bmi.n	8002316 <__swsetup_r+0x82>
 80022bc:	06dd      	lsls	r5, r3, #27
 80022be:	d411      	bmi.n	80022e4 <__swsetup_r+0x50>
 80022c0:	2309      	movs	r3, #9
 80022c2:	6033      	str	r3, [r6, #0]
 80022c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80022c8:	f04f 30ff 	mov.w	r0, #4294967295
 80022cc:	81a3      	strh	r3, [r4, #12]
 80022ce:	e03e      	b.n	800234e <__swsetup_r+0xba>
 80022d0:	4b25      	ldr	r3, [pc, #148]	; (8002368 <__swsetup_r+0xd4>)
 80022d2:	429c      	cmp	r4, r3
 80022d4:	d101      	bne.n	80022da <__swsetup_r+0x46>
 80022d6:	68ac      	ldr	r4, [r5, #8]
 80022d8:	e7eb      	b.n	80022b2 <__swsetup_r+0x1e>
 80022da:	4b24      	ldr	r3, [pc, #144]	; (800236c <__swsetup_r+0xd8>)
 80022dc:	429c      	cmp	r4, r3
 80022de:	bf08      	it	eq
 80022e0:	68ec      	ldreq	r4, [r5, #12]
 80022e2:	e7e6      	b.n	80022b2 <__swsetup_r+0x1e>
 80022e4:	0758      	lsls	r0, r3, #29
 80022e6:	d512      	bpl.n	800230e <__swsetup_r+0x7a>
 80022e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80022ea:	b141      	cbz	r1, 80022fe <__swsetup_r+0x6a>
 80022ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80022f0:	4299      	cmp	r1, r3
 80022f2:	d002      	beq.n	80022fa <__swsetup_r+0x66>
 80022f4:	4630      	mov	r0, r6
 80022f6:	f000 fa57 	bl	80027a8 <_free_r>
 80022fa:	2300      	movs	r3, #0
 80022fc:	6363      	str	r3, [r4, #52]	; 0x34
 80022fe:	89a3      	ldrh	r3, [r4, #12]
 8002300:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002304:	81a3      	strh	r3, [r4, #12]
 8002306:	2300      	movs	r3, #0
 8002308:	6063      	str	r3, [r4, #4]
 800230a:	6923      	ldr	r3, [r4, #16]
 800230c:	6023      	str	r3, [r4, #0]
 800230e:	89a3      	ldrh	r3, [r4, #12]
 8002310:	f043 0308 	orr.w	r3, r3, #8
 8002314:	81a3      	strh	r3, [r4, #12]
 8002316:	6923      	ldr	r3, [r4, #16]
 8002318:	b94b      	cbnz	r3, 800232e <__swsetup_r+0x9a>
 800231a:	89a3      	ldrh	r3, [r4, #12]
 800231c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002324:	d003      	beq.n	800232e <__swsetup_r+0x9a>
 8002326:	4621      	mov	r1, r4
 8002328:	4630      	mov	r0, r6
 800232a:	f000 f9fd 	bl	8002728 <__smakebuf_r>
 800232e:	89a0      	ldrh	r0, [r4, #12]
 8002330:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002334:	f010 0301 	ands.w	r3, r0, #1
 8002338:	d00a      	beq.n	8002350 <__swsetup_r+0xbc>
 800233a:	2300      	movs	r3, #0
 800233c:	60a3      	str	r3, [r4, #8]
 800233e:	6963      	ldr	r3, [r4, #20]
 8002340:	425b      	negs	r3, r3
 8002342:	61a3      	str	r3, [r4, #24]
 8002344:	6923      	ldr	r3, [r4, #16]
 8002346:	b943      	cbnz	r3, 800235a <__swsetup_r+0xc6>
 8002348:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800234c:	d1ba      	bne.n	80022c4 <__swsetup_r+0x30>
 800234e:	bd70      	pop	{r4, r5, r6, pc}
 8002350:	0781      	lsls	r1, r0, #30
 8002352:	bf58      	it	pl
 8002354:	6963      	ldrpl	r3, [r4, #20]
 8002356:	60a3      	str	r3, [r4, #8]
 8002358:	e7f4      	b.n	8002344 <__swsetup_r+0xb0>
 800235a:	2000      	movs	r0, #0
 800235c:	e7f7      	b.n	800234e <__swsetup_r+0xba>
 800235e:	bf00      	nop
 8002360:	2000004c 	.word	0x2000004c
 8002364:	080031c8 	.word	0x080031c8
 8002368:	080031e8 	.word	0x080031e8
 800236c:	080031a8 	.word	0x080031a8

08002370 <__sflush_r>:
 8002370:	898a      	ldrh	r2, [r1, #12]
 8002372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002374:	4605      	mov	r5, r0
 8002376:	0710      	lsls	r0, r2, #28
 8002378:	460c      	mov	r4, r1
 800237a:	d457      	bmi.n	800242c <__sflush_r+0xbc>
 800237c:	684b      	ldr	r3, [r1, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	dc04      	bgt.n	800238c <__sflush_r+0x1c>
 8002382:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002384:	2b00      	cmp	r3, #0
 8002386:	dc01      	bgt.n	800238c <__sflush_r+0x1c>
 8002388:	2000      	movs	r0, #0
 800238a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800238c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800238e:	2e00      	cmp	r6, #0
 8002390:	d0fa      	beq.n	8002388 <__sflush_r+0x18>
 8002392:	2300      	movs	r3, #0
 8002394:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002398:	682f      	ldr	r7, [r5, #0]
 800239a:	602b      	str	r3, [r5, #0]
 800239c:	d032      	beq.n	8002404 <__sflush_r+0x94>
 800239e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80023a0:	89a3      	ldrh	r3, [r4, #12]
 80023a2:	075a      	lsls	r2, r3, #29
 80023a4:	d505      	bpl.n	80023b2 <__sflush_r+0x42>
 80023a6:	6863      	ldr	r3, [r4, #4]
 80023a8:	1ac0      	subs	r0, r0, r3
 80023aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80023ac:	b10b      	cbz	r3, 80023b2 <__sflush_r+0x42>
 80023ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023b0:	1ac0      	subs	r0, r0, r3
 80023b2:	2300      	movs	r3, #0
 80023b4:	4602      	mov	r2, r0
 80023b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80023b8:	4628      	mov	r0, r5
 80023ba:	6a21      	ldr	r1, [r4, #32]
 80023bc:	47b0      	blx	r6
 80023be:	1c43      	adds	r3, r0, #1
 80023c0:	89a3      	ldrh	r3, [r4, #12]
 80023c2:	d106      	bne.n	80023d2 <__sflush_r+0x62>
 80023c4:	6829      	ldr	r1, [r5, #0]
 80023c6:	291d      	cmp	r1, #29
 80023c8:	d82c      	bhi.n	8002424 <__sflush_r+0xb4>
 80023ca:	4a29      	ldr	r2, [pc, #164]	; (8002470 <__sflush_r+0x100>)
 80023cc:	40ca      	lsrs	r2, r1
 80023ce:	07d6      	lsls	r6, r2, #31
 80023d0:	d528      	bpl.n	8002424 <__sflush_r+0xb4>
 80023d2:	2200      	movs	r2, #0
 80023d4:	6062      	str	r2, [r4, #4]
 80023d6:	6922      	ldr	r2, [r4, #16]
 80023d8:	04d9      	lsls	r1, r3, #19
 80023da:	6022      	str	r2, [r4, #0]
 80023dc:	d504      	bpl.n	80023e8 <__sflush_r+0x78>
 80023de:	1c42      	adds	r2, r0, #1
 80023e0:	d101      	bne.n	80023e6 <__sflush_r+0x76>
 80023e2:	682b      	ldr	r3, [r5, #0]
 80023e4:	b903      	cbnz	r3, 80023e8 <__sflush_r+0x78>
 80023e6:	6560      	str	r0, [r4, #84]	; 0x54
 80023e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80023ea:	602f      	str	r7, [r5, #0]
 80023ec:	2900      	cmp	r1, #0
 80023ee:	d0cb      	beq.n	8002388 <__sflush_r+0x18>
 80023f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80023f4:	4299      	cmp	r1, r3
 80023f6:	d002      	beq.n	80023fe <__sflush_r+0x8e>
 80023f8:	4628      	mov	r0, r5
 80023fa:	f000 f9d5 	bl	80027a8 <_free_r>
 80023fe:	2000      	movs	r0, #0
 8002400:	6360      	str	r0, [r4, #52]	; 0x34
 8002402:	e7c2      	b.n	800238a <__sflush_r+0x1a>
 8002404:	6a21      	ldr	r1, [r4, #32]
 8002406:	2301      	movs	r3, #1
 8002408:	4628      	mov	r0, r5
 800240a:	47b0      	blx	r6
 800240c:	1c41      	adds	r1, r0, #1
 800240e:	d1c7      	bne.n	80023a0 <__sflush_r+0x30>
 8002410:	682b      	ldr	r3, [r5, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0c4      	beq.n	80023a0 <__sflush_r+0x30>
 8002416:	2b1d      	cmp	r3, #29
 8002418:	d001      	beq.n	800241e <__sflush_r+0xae>
 800241a:	2b16      	cmp	r3, #22
 800241c:	d101      	bne.n	8002422 <__sflush_r+0xb2>
 800241e:	602f      	str	r7, [r5, #0]
 8002420:	e7b2      	b.n	8002388 <__sflush_r+0x18>
 8002422:	89a3      	ldrh	r3, [r4, #12]
 8002424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002428:	81a3      	strh	r3, [r4, #12]
 800242a:	e7ae      	b.n	800238a <__sflush_r+0x1a>
 800242c:	690f      	ldr	r7, [r1, #16]
 800242e:	2f00      	cmp	r7, #0
 8002430:	d0aa      	beq.n	8002388 <__sflush_r+0x18>
 8002432:	0793      	lsls	r3, r2, #30
 8002434:	bf18      	it	ne
 8002436:	2300      	movne	r3, #0
 8002438:	680e      	ldr	r6, [r1, #0]
 800243a:	bf08      	it	eq
 800243c:	694b      	ldreq	r3, [r1, #20]
 800243e:	1bf6      	subs	r6, r6, r7
 8002440:	600f      	str	r7, [r1, #0]
 8002442:	608b      	str	r3, [r1, #8]
 8002444:	2e00      	cmp	r6, #0
 8002446:	dd9f      	ble.n	8002388 <__sflush_r+0x18>
 8002448:	4633      	mov	r3, r6
 800244a:	463a      	mov	r2, r7
 800244c:	4628      	mov	r0, r5
 800244e:	6a21      	ldr	r1, [r4, #32]
 8002450:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002454:	47e0      	blx	ip
 8002456:	2800      	cmp	r0, #0
 8002458:	dc06      	bgt.n	8002468 <__sflush_r+0xf8>
 800245a:	89a3      	ldrh	r3, [r4, #12]
 800245c:	f04f 30ff 	mov.w	r0, #4294967295
 8002460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002464:	81a3      	strh	r3, [r4, #12]
 8002466:	e790      	b.n	800238a <__sflush_r+0x1a>
 8002468:	4407      	add	r7, r0
 800246a:	1a36      	subs	r6, r6, r0
 800246c:	e7ea      	b.n	8002444 <__sflush_r+0xd4>
 800246e:	bf00      	nop
 8002470:	20400001 	.word	0x20400001

08002474 <_fflush_r>:
 8002474:	b538      	push	{r3, r4, r5, lr}
 8002476:	690b      	ldr	r3, [r1, #16]
 8002478:	4605      	mov	r5, r0
 800247a:	460c      	mov	r4, r1
 800247c:	b913      	cbnz	r3, 8002484 <_fflush_r+0x10>
 800247e:	2500      	movs	r5, #0
 8002480:	4628      	mov	r0, r5
 8002482:	bd38      	pop	{r3, r4, r5, pc}
 8002484:	b118      	cbz	r0, 800248e <_fflush_r+0x1a>
 8002486:	6983      	ldr	r3, [r0, #24]
 8002488:	b90b      	cbnz	r3, 800248e <_fflush_r+0x1a>
 800248a:	f000 f887 	bl	800259c <__sinit>
 800248e:	4b14      	ldr	r3, [pc, #80]	; (80024e0 <_fflush_r+0x6c>)
 8002490:	429c      	cmp	r4, r3
 8002492:	d11b      	bne.n	80024cc <_fflush_r+0x58>
 8002494:	686c      	ldr	r4, [r5, #4]
 8002496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0ef      	beq.n	800247e <_fflush_r+0xa>
 800249e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80024a0:	07d0      	lsls	r0, r2, #31
 80024a2:	d404      	bmi.n	80024ae <_fflush_r+0x3a>
 80024a4:	0599      	lsls	r1, r3, #22
 80024a6:	d402      	bmi.n	80024ae <_fflush_r+0x3a>
 80024a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024aa:	f000 f915 	bl	80026d8 <__retarget_lock_acquire_recursive>
 80024ae:	4628      	mov	r0, r5
 80024b0:	4621      	mov	r1, r4
 80024b2:	f7ff ff5d 	bl	8002370 <__sflush_r>
 80024b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80024b8:	4605      	mov	r5, r0
 80024ba:	07da      	lsls	r2, r3, #31
 80024bc:	d4e0      	bmi.n	8002480 <_fflush_r+0xc>
 80024be:	89a3      	ldrh	r3, [r4, #12]
 80024c0:	059b      	lsls	r3, r3, #22
 80024c2:	d4dd      	bmi.n	8002480 <_fflush_r+0xc>
 80024c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024c6:	f000 f908 	bl	80026da <__retarget_lock_release_recursive>
 80024ca:	e7d9      	b.n	8002480 <_fflush_r+0xc>
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <_fflush_r+0x70>)
 80024ce:	429c      	cmp	r4, r3
 80024d0:	d101      	bne.n	80024d6 <_fflush_r+0x62>
 80024d2:	68ac      	ldr	r4, [r5, #8]
 80024d4:	e7df      	b.n	8002496 <_fflush_r+0x22>
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <_fflush_r+0x74>)
 80024d8:	429c      	cmp	r4, r3
 80024da:	bf08      	it	eq
 80024dc:	68ec      	ldreq	r4, [r5, #12]
 80024de:	e7da      	b.n	8002496 <_fflush_r+0x22>
 80024e0:	080031c8 	.word	0x080031c8
 80024e4:	080031e8 	.word	0x080031e8
 80024e8:	080031a8 	.word	0x080031a8

080024ec <std>:
 80024ec:	2300      	movs	r3, #0
 80024ee:	b510      	push	{r4, lr}
 80024f0:	4604      	mov	r4, r0
 80024f2:	e9c0 3300 	strd	r3, r3, [r0]
 80024f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80024fa:	6083      	str	r3, [r0, #8]
 80024fc:	8181      	strh	r1, [r0, #12]
 80024fe:	6643      	str	r3, [r0, #100]	; 0x64
 8002500:	81c2      	strh	r2, [r0, #14]
 8002502:	6183      	str	r3, [r0, #24]
 8002504:	4619      	mov	r1, r3
 8002506:	2208      	movs	r2, #8
 8002508:	305c      	adds	r0, #92	; 0x5c
 800250a:	f7ff fddd 	bl	80020c8 <memset>
 800250e:	4b05      	ldr	r3, [pc, #20]	; (8002524 <std+0x38>)
 8002510:	6224      	str	r4, [r4, #32]
 8002512:	6263      	str	r3, [r4, #36]	; 0x24
 8002514:	4b04      	ldr	r3, [pc, #16]	; (8002528 <std+0x3c>)
 8002516:	62a3      	str	r3, [r4, #40]	; 0x28
 8002518:	4b04      	ldr	r3, [pc, #16]	; (800252c <std+0x40>)
 800251a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800251c:	4b04      	ldr	r3, [pc, #16]	; (8002530 <std+0x44>)
 800251e:	6323      	str	r3, [r4, #48]	; 0x30
 8002520:	bd10      	pop	{r4, pc}
 8002522:	bf00      	nop
 8002524:	08002f5d 	.word	0x08002f5d
 8002528:	08002f7f 	.word	0x08002f7f
 800252c:	08002fb7 	.word	0x08002fb7
 8002530:	08002fdb 	.word	0x08002fdb

08002534 <_cleanup_r>:
 8002534:	4901      	ldr	r1, [pc, #4]	; (800253c <_cleanup_r+0x8>)
 8002536:	f000 b8af 	b.w	8002698 <_fwalk_reent>
 800253a:	bf00      	nop
 800253c:	08002475 	.word	0x08002475

08002540 <__sfmoreglue>:
 8002540:	2268      	movs	r2, #104	; 0x68
 8002542:	b570      	push	{r4, r5, r6, lr}
 8002544:	1e4d      	subs	r5, r1, #1
 8002546:	4355      	muls	r5, r2
 8002548:	460e      	mov	r6, r1
 800254a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800254e:	f000 f993 	bl	8002878 <_malloc_r>
 8002552:	4604      	mov	r4, r0
 8002554:	b140      	cbz	r0, 8002568 <__sfmoreglue+0x28>
 8002556:	2100      	movs	r1, #0
 8002558:	e9c0 1600 	strd	r1, r6, [r0]
 800255c:	300c      	adds	r0, #12
 800255e:	60a0      	str	r0, [r4, #8]
 8002560:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002564:	f7ff fdb0 	bl	80020c8 <memset>
 8002568:	4620      	mov	r0, r4
 800256a:	bd70      	pop	{r4, r5, r6, pc}

0800256c <__sfp_lock_acquire>:
 800256c:	4801      	ldr	r0, [pc, #4]	; (8002574 <__sfp_lock_acquire+0x8>)
 800256e:	f000 b8b3 	b.w	80026d8 <__retarget_lock_acquire_recursive>
 8002572:	bf00      	nop
 8002574:	200012d1 	.word	0x200012d1

08002578 <__sfp_lock_release>:
 8002578:	4801      	ldr	r0, [pc, #4]	; (8002580 <__sfp_lock_release+0x8>)
 800257a:	f000 b8ae 	b.w	80026da <__retarget_lock_release_recursive>
 800257e:	bf00      	nop
 8002580:	200012d1 	.word	0x200012d1

08002584 <__sinit_lock_acquire>:
 8002584:	4801      	ldr	r0, [pc, #4]	; (800258c <__sinit_lock_acquire+0x8>)
 8002586:	f000 b8a7 	b.w	80026d8 <__retarget_lock_acquire_recursive>
 800258a:	bf00      	nop
 800258c:	200012d2 	.word	0x200012d2

08002590 <__sinit_lock_release>:
 8002590:	4801      	ldr	r0, [pc, #4]	; (8002598 <__sinit_lock_release+0x8>)
 8002592:	f000 b8a2 	b.w	80026da <__retarget_lock_release_recursive>
 8002596:	bf00      	nop
 8002598:	200012d2 	.word	0x200012d2

0800259c <__sinit>:
 800259c:	b510      	push	{r4, lr}
 800259e:	4604      	mov	r4, r0
 80025a0:	f7ff fff0 	bl	8002584 <__sinit_lock_acquire>
 80025a4:	69a3      	ldr	r3, [r4, #24]
 80025a6:	b11b      	cbz	r3, 80025b0 <__sinit+0x14>
 80025a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025ac:	f7ff bff0 	b.w	8002590 <__sinit_lock_release>
 80025b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80025b4:	6523      	str	r3, [r4, #80]	; 0x50
 80025b6:	4b13      	ldr	r3, [pc, #76]	; (8002604 <__sinit+0x68>)
 80025b8:	4a13      	ldr	r2, [pc, #76]	; (8002608 <__sinit+0x6c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80025be:	42a3      	cmp	r3, r4
 80025c0:	bf08      	it	eq
 80025c2:	2301      	moveq	r3, #1
 80025c4:	4620      	mov	r0, r4
 80025c6:	bf08      	it	eq
 80025c8:	61a3      	streq	r3, [r4, #24]
 80025ca:	f000 f81f 	bl	800260c <__sfp>
 80025ce:	6060      	str	r0, [r4, #4]
 80025d0:	4620      	mov	r0, r4
 80025d2:	f000 f81b 	bl	800260c <__sfp>
 80025d6:	60a0      	str	r0, [r4, #8]
 80025d8:	4620      	mov	r0, r4
 80025da:	f000 f817 	bl	800260c <__sfp>
 80025de:	2200      	movs	r2, #0
 80025e0:	2104      	movs	r1, #4
 80025e2:	60e0      	str	r0, [r4, #12]
 80025e4:	6860      	ldr	r0, [r4, #4]
 80025e6:	f7ff ff81 	bl	80024ec <std>
 80025ea:	2201      	movs	r2, #1
 80025ec:	2109      	movs	r1, #9
 80025ee:	68a0      	ldr	r0, [r4, #8]
 80025f0:	f7ff ff7c 	bl	80024ec <std>
 80025f4:	2202      	movs	r2, #2
 80025f6:	2112      	movs	r1, #18
 80025f8:	68e0      	ldr	r0, [r4, #12]
 80025fa:	f7ff ff77 	bl	80024ec <std>
 80025fe:	2301      	movs	r3, #1
 8002600:	61a3      	str	r3, [r4, #24]
 8002602:	e7d1      	b.n	80025a8 <__sinit+0xc>
 8002604:	080031a4 	.word	0x080031a4
 8002608:	08002535 	.word	0x08002535

0800260c <__sfp>:
 800260c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260e:	4607      	mov	r7, r0
 8002610:	f7ff ffac 	bl	800256c <__sfp_lock_acquire>
 8002614:	4b1e      	ldr	r3, [pc, #120]	; (8002690 <__sfp+0x84>)
 8002616:	681e      	ldr	r6, [r3, #0]
 8002618:	69b3      	ldr	r3, [r6, #24]
 800261a:	b913      	cbnz	r3, 8002622 <__sfp+0x16>
 800261c:	4630      	mov	r0, r6
 800261e:	f7ff ffbd 	bl	800259c <__sinit>
 8002622:	3648      	adds	r6, #72	; 0x48
 8002624:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002628:	3b01      	subs	r3, #1
 800262a:	d503      	bpl.n	8002634 <__sfp+0x28>
 800262c:	6833      	ldr	r3, [r6, #0]
 800262e:	b30b      	cbz	r3, 8002674 <__sfp+0x68>
 8002630:	6836      	ldr	r6, [r6, #0]
 8002632:	e7f7      	b.n	8002624 <__sfp+0x18>
 8002634:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002638:	b9d5      	cbnz	r5, 8002670 <__sfp+0x64>
 800263a:	4b16      	ldr	r3, [pc, #88]	; (8002694 <__sfp+0x88>)
 800263c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002640:	60e3      	str	r3, [r4, #12]
 8002642:	6665      	str	r5, [r4, #100]	; 0x64
 8002644:	f000 f847 	bl	80026d6 <__retarget_lock_init_recursive>
 8002648:	f7ff ff96 	bl	8002578 <__sfp_lock_release>
 800264c:	2208      	movs	r2, #8
 800264e:	4629      	mov	r1, r5
 8002650:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002654:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002658:	6025      	str	r5, [r4, #0]
 800265a:	61a5      	str	r5, [r4, #24]
 800265c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002660:	f7ff fd32 	bl	80020c8 <memset>
 8002664:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002668:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800266c:	4620      	mov	r0, r4
 800266e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002670:	3468      	adds	r4, #104	; 0x68
 8002672:	e7d9      	b.n	8002628 <__sfp+0x1c>
 8002674:	2104      	movs	r1, #4
 8002676:	4638      	mov	r0, r7
 8002678:	f7ff ff62 	bl	8002540 <__sfmoreglue>
 800267c:	4604      	mov	r4, r0
 800267e:	6030      	str	r0, [r6, #0]
 8002680:	2800      	cmp	r0, #0
 8002682:	d1d5      	bne.n	8002630 <__sfp+0x24>
 8002684:	f7ff ff78 	bl	8002578 <__sfp_lock_release>
 8002688:	230c      	movs	r3, #12
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	e7ee      	b.n	800266c <__sfp+0x60>
 800268e:	bf00      	nop
 8002690:	080031a4 	.word	0x080031a4
 8002694:	ffff0001 	.word	0xffff0001

08002698 <_fwalk_reent>:
 8002698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800269c:	4606      	mov	r6, r0
 800269e:	4688      	mov	r8, r1
 80026a0:	2700      	movs	r7, #0
 80026a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80026a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80026aa:	f1b9 0901 	subs.w	r9, r9, #1
 80026ae:	d505      	bpl.n	80026bc <_fwalk_reent+0x24>
 80026b0:	6824      	ldr	r4, [r4, #0]
 80026b2:	2c00      	cmp	r4, #0
 80026b4:	d1f7      	bne.n	80026a6 <_fwalk_reent+0xe>
 80026b6:	4638      	mov	r0, r7
 80026b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026bc:	89ab      	ldrh	r3, [r5, #12]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d907      	bls.n	80026d2 <_fwalk_reent+0x3a>
 80026c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80026c6:	3301      	adds	r3, #1
 80026c8:	d003      	beq.n	80026d2 <_fwalk_reent+0x3a>
 80026ca:	4629      	mov	r1, r5
 80026cc:	4630      	mov	r0, r6
 80026ce:	47c0      	blx	r8
 80026d0:	4307      	orrs	r7, r0
 80026d2:	3568      	adds	r5, #104	; 0x68
 80026d4:	e7e9      	b.n	80026aa <_fwalk_reent+0x12>

080026d6 <__retarget_lock_init_recursive>:
 80026d6:	4770      	bx	lr

080026d8 <__retarget_lock_acquire_recursive>:
 80026d8:	4770      	bx	lr

080026da <__retarget_lock_release_recursive>:
 80026da:	4770      	bx	lr

080026dc <__swhatbuf_r>:
 80026dc:	b570      	push	{r4, r5, r6, lr}
 80026de:	460e      	mov	r6, r1
 80026e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026e4:	4614      	mov	r4, r2
 80026e6:	2900      	cmp	r1, #0
 80026e8:	461d      	mov	r5, r3
 80026ea:	b096      	sub	sp, #88	; 0x58
 80026ec:	da08      	bge.n	8002700 <__swhatbuf_r+0x24>
 80026ee:	2200      	movs	r2, #0
 80026f0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80026f4:	602a      	str	r2, [r5, #0]
 80026f6:	061a      	lsls	r2, r3, #24
 80026f8:	d410      	bmi.n	800271c <__swhatbuf_r+0x40>
 80026fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026fe:	e00e      	b.n	800271e <__swhatbuf_r+0x42>
 8002700:	466a      	mov	r2, sp
 8002702:	f000 fc91 	bl	8003028 <_fstat_r>
 8002706:	2800      	cmp	r0, #0
 8002708:	dbf1      	blt.n	80026ee <__swhatbuf_r+0x12>
 800270a:	9a01      	ldr	r2, [sp, #4]
 800270c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002710:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002714:	425a      	negs	r2, r3
 8002716:	415a      	adcs	r2, r3
 8002718:	602a      	str	r2, [r5, #0]
 800271a:	e7ee      	b.n	80026fa <__swhatbuf_r+0x1e>
 800271c:	2340      	movs	r3, #64	; 0x40
 800271e:	2000      	movs	r0, #0
 8002720:	6023      	str	r3, [r4, #0]
 8002722:	b016      	add	sp, #88	; 0x58
 8002724:	bd70      	pop	{r4, r5, r6, pc}
	...

08002728 <__smakebuf_r>:
 8002728:	898b      	ldrh	r3, [r1, #12]
 800272a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800272c:	079d      	lsls	r5, r3, #30
 800272e:	4606      	mov	r6, r0
 8002730:	460c      	mov	r4, r1
 8002732:	d507      	bpl.n	8002744 <__smakebuf_r+0x1c>
 8002734:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002738:	6023      	str	r3, [r4, #0]
 800273a:	6123      	str	r3, [r4, #16]
 800273c:	2301      	movs	r3, #1
 800273e:	6163      	str	r3, [r4, #20]
 8002740:	b002      	add	sp, #8
 8002742:	bd70      	pop	{r4, r5, r6, pc}
 8002744:	466a      	mov	r2, sp
 8002746:	ab01      	add	r3, sp, #4
 8002748:	f7ff ffc8 	bl	80026dc <__swhatbuf_r>
 800274c:	9900      	ldr	r1, [sp, #0]
 800274e:	4605      	mov	r5, r0
 8002750:	4630      	mov	r0, r6
 8002752:	f000 f891 	bl	8002878 <_malloc_r>
 8002756:	b948      	cbnz	r0, 800276c <__smakebuf_r+0x44>
 8002758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800275c:	059a      	lsls	r2, r3, #22
 800275e:	d4ef      	bmi.n	8002740 <__smakebuf_r+0x18>
 8002760:	f023 0303 	bic.w	r3, r3, #3
 8002764:	f043 0302 	orr.w	r3, r3, #2
 8002768:	81a3      	strh	r3, [r4, #12]
 800276a:	e7e3      	b.n	8002734 <__smakebuf_r+0xc>
 800276c:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <__smakebuf_r+0x7c>)
 800276e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002770:	89a3      	ldrh	r3, [r4, #12]
 8002772:	6020      	str	r0, [r4, #0]
 8002774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002778:	81a3      	strh	r3, [r4, #12]
 800277a:	9b00      	ldr	r3, [sp, #0]
 800277c:	6120      	str	r0, [r4, #16]
 800277e:	6163      	str	r3, [r4, #20]
 8002780:	9b01      	ldr	r3, [sp, #4]
 8002782:	b15b      	cbz	r3, 800279c <__smakebuf_r+0x74>
 8002784:	4630      	mov	r0, r6
 8002786:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800278a:	f000 fc5f 	bl	800304c <_isatty_r>
 800278e:	b128      	cbz	r0, 800279c <__smakebuf_r+0x74>
 8002790:	89a3      	ldrh	r3, [r4, #12]
 8002792:	f023 0303 	bic.w	r3, r3, #3
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	81a3      	strh	r3, [r4, #12]
 800279c:	89a0      	ldrh	r0, [r4, #12]
 800279e:	4305      	orrs	r5, r0
 80027a0:	81a5      	strh	r5, [r4, #12]
 80027a2:	e7cd      	b.n	8002740 <__smakebuf_r+0x18>
 80027a4:	08002535 	.word	0x08002535

080027a8 <_free_r>:
 80027a8:	b538      	push	{r3, r4, r5, lr}
 80027aa:	4605      	mov	r5, r0
 80027ac:	2900      	cmp	r1, #0
 80027ae:	d040      	beq.n	8002832 <_free_r+0x8a>
 80027b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027b4:	1f0c      	subs	r4, r1, #4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	bfb8      	it	lt
 80027ba:	18e4      	addlt	r4, r4, r3
 80027bc:	f000 fc76 	bl	80030ac <__malloc_lock>
 80027c0:	4a1c      	ldr	r2, [pc, #112]	; (8002834 <_free_r+0x8c>)
 80027c2:	6813      	ldr	r3, [r2, #0]
 80027c4:	b933      	cbnz	r3, 80027d4 <_free_r+0x2c>
 80027c6:	6063      	str	r3, [r4, #4]
 80027c8:	6014      	str	r4, [r2, #0]
 80027ca:	4628      	mov	r0, r5
 80027cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027d0:	f000 bc72 	b.w	80030b8 <__malloc_unlock>
 80027d4:	42a3      	cmp	r3, r4
 80027d6:	d908      	bls.n	80027ea <_free_r+0x42>
 80027d8:	6820      	ldr	r0, [r4, #0]
 80027da:	1821      	adds	r1, r4, r0
 80027dc:	428b      	cmp	r3, r1
 80027de:	bf01      	itttt	eq
 80027e0:	6819      	ldreq	r1, [r3, #0]
 80027e2:	685b      	ldreq	r3, [r3, #4]
 80027e4:	1809      	addeq	r1, r1, r0
 80027e6:	6021      	streq	r1, [r4, #0]
 80027e8:	e7ed      	b.n	80027c6 <_free_r+0x1e>
 80027ea:	461a      	mov	r2, r3
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	b10b      	cbz	r3, 80027f4 <_free_r+0x4c>
 80027f0:	42a3      	cmp	r3, r4
 80027f2:	d9fa      	bls.n	80027ea <_free_r+0x42>
 80027f4:	6811      	ldr	r1, [r2, #0]
 80027f6:	1850      	adds	r0, r2, r1
 80027f8:	42a0      	cmp	r0, r4
 80027fa:	d10b      	bne.n	8002814 <_free_r+0x6c>
 80027fc:	6820      	ldr	r0, [r4, #0]
 80027fe:	4401      	add	r1, r0
 8002800:	1850      	adds	r0, r2, r1
 8002802:	4283      	cmp	r3, r0
 8002804:	6011      	str	r1, [r2, #0]
 8002806:	d1e0      	bne.n	80027ca <_free_r+0x22>
 8002808:	6818      	ldr	r0, [r3, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	4401      	add	r1, r0
 800280e:	6011      	str	r1, [r2, #0]
 8002810:	6053      	str	r3, [r2, #4]
 8002812:	e7da      	b.n	80027ca <_free_r+0x22>
 8002814:	d902      	bls.n	800281c <_free_r+0x74>
 8002816:	230c      	movs	r3, #12
 8002818:	602b      	str	r3, [r5, #0]
 800281a:	e7d6      	b.n	80027ca <_free_r+0x22>
 800281c:	6820      	ldr	r0, [r4, #0]
 800281e:	1821      	adds	r1, r4, r0
 8002820:	428b      	cmp	r3, r1
 8002822:	bf01      	itttt	eq
 8002824:	6819      	ldreq	r1, [r3, #0]
 8002826:	685b      	ldreq	r3, [r3, #4]
 8002828:	1809      	addeq	r1, r1, r0
 800282a:	6021      	streq	r1, [r4, #0]
 800282c:	6063      	str	r3, [r4, #4]
 800282e:	6054      	str	r4, [r2, #4]
 8002830:	e7cb      	b.n	80027ca <_free_r+0x22>
 8002832:	bd38      	pop	{r3, r4, r5, pc}
 8002834:	200012d4 	.word	0x200012d4

08002838 <sbrk_aligned>:
 8002838:	b570      	push	{r4, r5, r6, lr}
 800283a:	4e0e      	ldr	r6, [pc, #56]	; (8002874 <sbrk_aligned+0x3c>)
 800283c:	460c      	mov	r4, r1
 800283e:	6831      	ldr	r1, [r6, #0]
 8002840:	4605      	mov	r5, r0
 8002842:	b911      	cbnz	r1, 800284a <sbrk_aligned+0x12>
 8002844:	f000 fb7a 	bl	8002f3c <_sbrk_r>
 8002848:	6030      	str	r0, [r6, #0]
 800284a:	4621      	mov	r1, r4
 800284c:	4628      	mov	r0, r5
 800284e:	f000 fb75 	bl	8002f3c <_sbrk_r>
 8002852:	1c43      	adds	r3, r0, #1
 8002854:	d00a      	beq.n	800286c <sbrk_aligned+0x34>
 8002856:	1cc4      	adds	r4, r0, #3
 8002858:	f024 0403 	bic.w	r4, r4, #3
 800285c:	42a0      	cmp	r0, r4
 800285e:	d007      	beq.n	8002870 <sbrk_aligned+0x38>
 8002860:	1a21      	subs	r1, r4, r0
 8002862:	4628      	mov	r0, r5
 8002864:	f000 fb6a 	bl	8002f3c <_sbrk_r>
 8002868:	3001      	adds	r0, #1
 800286a:	d101      	bne.n	8002870 <sbrk_aligned+0x38>
 800286c:	f04f 34ff 	mov.w	r4, #4294967295
 8002870:	4620      	mov	r0, r4
 8002872:	bd70      	pop	{r4, r5, r6, pc}
 8002874:	200012d8 	.word	0x200012d8

08002878 <_malloc_r>:
 8002878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800287c:	1ccd      	adds	r5, r1, #3
 800287e:	f025 0503 	bic.w	r5, r5, #3
 8002882:	3508      	adds	r5, #8
 8002884:	2d0c      	cmp	r5, #12
 8002886:	bf38      	it	cc
 8002888:	250c      	movcc	r5, #12
 800288a:	2d00      	cmp	r5, #0
 800288c:	4607      	mov	r7, r0
 800288e:	db01      	blt.n	8002894 <_malloc_r+0x1c>
 8002890:	42a9      	cmp	r1, r5
 8002892:	d905      	bls.n	80028a0 <_malloc_r+0x28>
 8002894:	230c      	movs	r3, #12
 8002896:	2600      	movs	r6, #0
 8002898:	603b      	str	r3, [r7, #0]
 800289a:	4630      	mov	r0, r6
 800289c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028a0:	4e2e      	ldr	r6, [pc, #184]	; (800295c <_malloc_r+0xe4>)
 80028a2:	f000 fc03 	bl	80030ac <__malloc_lock>
 80028a6:	6833      	ldr	r3, [r6, #0]
 80028a8:	461c      	mov	r4, r3
 80028aa:	bb34      	cbnz	r4, 80028fa <_malloc_r+0x82>
 80028ac:	4629      	mov	r1, r5
 80028ae:	4638      	mov	r0, r7
 80028b0:	f7ff ffc2 	bl	8002838 <sbrk_aligned>
 80028b4:	1c43      	adds	r3, r0, #1
 80028b6:	4604      	mov	r4, r0
 80028b8:	d14d      	bne.n	8002956 <_malloc_r+0xde>
 80028ba:	6834      	ldr	r4, [r6, #0]
 80028bc:	4626      	mov	r6, r4
 80028be:	2e00      	cmp	r6, #0
 80028c0:	d140      	bne.n	8002944 <_malloc_r+0xcc>
 80028c2:	6823      	ldr	r3, [r4, #0]
 80028c4:	4631      	mov	r1, r6
 80028c6:	4638      	mov	r0, r7
 80028c8:	eb04 0803 	add.w	r8, r4, r3
 80028cc:	f000 fb36 	bl	8002f3c <_sbrk_r>
 80028d0:	4580      	cmp	r8, r0
 80028d2:	d13a      	bne.n	800294a <_malloc_r+0xd2>
 80028d4:	6821      	ldr	r1, [r4, #0]
 80028d6:	3503      	adds	r5, #3
 80028d8:	1a6d      	subs	r5, r5, r1
 80028da:	f025 0503 	bic.w	r5, r5, #3
 80028de:	3508      	adds	r5, #8
 80028e0:	2d0c      	cmp	r5, #12
 80028e2:	bf38      	it	cc
 80028e4:	250c      	movcc	r5, #12
 80028e6:	4638      	mov	r0, r7
 80028e8:	4629      	mov	r1, r5
 80028ea:	f7ff ffa5 	bl	8002838 <sbrk_aligned>
 80028ee:	3001      	adds	r0, #1
 80028f0:	d02b      	beq.n	800294a <_malloc_r+0xd2>
 80028f2:	6823      	ldr	r3, [r4, #0]
 80028f4:	442b      	add	r3, r5
 80028f6:	6023      	str	r3, [r4, #0]
 80028f8:	e00e      	b.n	8002918 <_malloc_r+0xa0>
 80028fa:	6822      	ldr	r2, [r4, #0]
 80028fc:	1b52      	subs	r2, r2, r5
 80028fe:	d41e      	bmi.n	800293e <_malloc_r+0xc6>
 8002900:	2a0b      	cmp	r2, #11
 8002902:	d916      	bls.n	8002932 <_malloc_r+0xba>
 8002904:	1961      	adds	r1, r4, r5
 8002906:	42a3      	cmp	r3, r4
 8002908:	6025      	str	r5, [r4, #0]
 800290a:	bf18      	it	ne
 800290c:	6059      	strne	r1, [r3, #4]
 800290e:	6863      	ldr	r3, [r4, #4]
 8002910:	bf08      	it	eq
 8002912:	6031      	streq	r1, [r6, #0]
 8002914:	5162      	str	r2, [r4, r5]
 8002916:	604b      	str	r3, [r1, #4]
 8002918:	4638      	mov	r0, r7
 800291a:	f104 060b 	add.w	r6, r4, #11
 800291e:	f000 fbcb 	bl	80030b8 <__malloc_unlock>
 8002922:	f026 0607 	bic.w	r6, r6, #7
 8002926:	1d23      	adds	r3, r4, #4
 8002928:	1af2      	subs	r2, r6, r3
 800292a:	d0b6      	beq.n	800289a <_malloc_r+0x22>
 800292c:	1b9b      	subs	r3, r3, r6
 800292e:	50a3      	str	r3, [r4, r2]
 8002930:	e7b3      	b.n	800289a <_malloc_r+0x22>
 8002932:	6862      	ldr	r2, [r4, #4]
 8002934:	42a3      	cmp	r3, r4
 8002936:	bf0c      	ite	eq
 8002938:	6032      	streq	r2, [r6, #0]
 800293a:	605a      	strne	r2, [r3, #4]
 800293c:	e7ec      	b.n	8002918 <_malloc_r+0xa0>
 800293e:	4623      	mov	r3, r4
 8002940:	6864      	ldr	r4, [r4, #4]
 8002942:	e7b2      	b.n	80028aa <_malloc_r+0x32>
 8002944:	4634      	mov	r4, r6
 8002946:	6876      	ldr	r6, [r6, #4]
 8002948:	e7b9      	b.n	80028be <_malloc_r+0x46>
 800294a:	230c      	movs	r3, #12
 800294c:	4638      	mov	r0, r7
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	f000 fbb2 	bl	80030b8 <__malloc_unlock>
 8002954:	e7a1      	b.n	800289a <_malloc_r+0x22>
 8002956:	6025      	str	r5, [r4, #0]
 8002958:	e7de      	b.n	8002918 <_malloc_r+0xa0>
 800295a:	bf00      	nop
 800295c:	200012d4 	.word	0x200012d4

08002960 <__sfputc_r>:
 8002960:	6893      	ldr	r3, [r2, #8]
 8002962:	b410      	push	{r4}
 8002964:	3b01      	subs	r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	6093      	str	r3, [r2, #8]
 800296a:	da07      	bge.n	800297c <__sfputc_r+0x1c>
 800296c:	6994      	ldr	r4, [r2, #24]
 800296e:	42a3      	cmp	r3, r4
 8002970:	db01      	blt.n	8002976 <__sfputc_r+0x16>
 8002972:	290a      	cmp	r1, #10
 8002974:	d102      	bne.n	800297c <__sfputc_r+0x1c>
 8002976:	bc10      	pop	{r4}
 8002978:	f7ff bc3a 	b.w	80021f0 <__swbuf_r>
 800297c:	6813      	ldr	r3, [r2, #0]
 800297e:	1c58      	adds	r0, r3, #1
 8002980:	6010      	str	r0, [r2, #0]
 8002982:	7019      	strb	r1, [r3, #0]
 8002984:	4608      	mov	r0, r1
 8002986:	bc10      	pop	{r4}
 8002988:	4770      	bx	lr

0800298a <__sfputs_r>:
 800298a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800298c:	4606      	mov	r6, r0
 800298e:	460f      	mov	r7, r1
 8002990:	4614      	mov	r4, r2
 8002992:	18d5      	adds	r5, r2, r3
 8002994:	42ac      	cmp	r4, r5
 8002996:	d101      	bne.n	800299c <__sfputs_r+0x12>
 8002998:	2000      	movs	r0, #0
 800299a:	e007      	b.n	80029ac <__sfputs_r+0x22>
 800299c:	463a      	mov	r2, r7
 800299e:	4630      	mov	r0, r6
 80029a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029a4:	f7ff ffdc 	bl	8002960 <__sfputc_r>
 80029a8:	1c43      	adds	r3, r0, #1
 80029aa:	d1f3      	bne.n	8002994 <__sfputs_r+0xa>
 80029ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080029b0 <_vfiprintf_r>:
 80029b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029b4:	460d      	mov	r5, r1
 80029b6:	4614      	mov	r4, r2
 80029b8:	4698      	mov	r8, r3
 80029ba:	4606      	mov	r6, r0
 80029bc:	b09d      	sub	sp, #116	; 0x74
 80029be:	b118      	cbz	r0, 80029c8 <_vfiprintf_r+0x18>
 80029c0:	6983      	ldr	r3, [r0, #24]
 80029c2:	b90b      	cbnz	r3, 80029c8 <_vfiprintf_r+0x18>
 80029c4:	f7ff fdea 	bl	800259c <__sinit>
 80029c8:	4b89      	ldr	r3, [pc, #548]	; (8002bf0 <_vfiprintf_r+0x240>)
 80029ca:	429d      	cmp	r5, r3
 80029cc:	d11b      	bne.n	8002a06 <_vfiprintf_r+0x56>
 80029ce:	6875      	ldr	r5, [r6, #4]
 80029d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80029d2:	07d9      	lsls	r1, r3, #31
 80029d4:	d405      	bmi.n	80029e2 <_vfiprintf_r+0x32>
 80029d6:	89ab      	ldrh	r3, [r5, #12]
 80029d8:	059a      	lsls	r2, r3, #22
 80029da:	d402      	bmi.n	80029e2 <_vfiprintf_r+0x32>
 80029dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80029de:	f7ff fe7b 	bl	80026d8 <__retarget_lock_acquire_recursive>
 80029e2:	89ab      	ldrh	r3, [r5, #12]
 80029e4:	071b      	lsls	r3, r3, #28
 80029e6:	d501      	bpl.n	80029ec <_vfiprintf_r+0x3c>
 80029e8:	692b      	ldr	r3, [r5, #16]
 80029ea:	b9eb      	cbnz	r3, 8002a28 <_vfiprintf_r+0x78>
 80029ec:	4629      	mov	r1, r5
 80029ee:	4630      	mov	r0, r6
 80029f0:	f7ff fc50 	bl	8002294 <__swsetup_r>
 80029f4:	b1c0      	cbz	r0, 8002a28 <_vfiprintf_r+0x78>
 80029f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80029f8:	07dc      	lsls	r4, r3, #31
 80029fa:	d50e      	bpl.n	8002a1a <_vfiprintf_r+0x6a>
 80029fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002a00:	b01d      	add	sp, #116	; 0x74
 8002a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a06:	4b7b      	ldr	r3, [pc, #492]	; (8002bf4 <_vfiprintf_r+0x244>)
 8002a08:	429d      	cmp	r5, r3
 8002a0a:	d101      	bne.n	8002a10 <_vfiprintf_r+0x60>
 8002a0c:	68b5      	ldr	r5, [r6, #8]
 8002a0e:	e7df      	b.n	80029d0 <_vfiprintf_r+0x20>
 8002a10:	4b79      	ldr	r3, [pc, #484]	; (8002bf8 <_vfiprintf_r+0x248>)
 8002a12:	429d      	cmp	r5, r3
 8002a14:	bf08      	it	eq
 8002a16:	68f5      	ldreq	r5, [r6, #12]
 8002a18:	e7da      	b.n	80029d0 <_vfiprintf_r+0x20>
 8002a1a:	89ab      	ldrh	r3, [r5, #12]
 8002a1c:	0598      	lsls	r0, r3, #22
 8002a1e:	d4ed      	bmi.n	80029fc <_vfiprintf_r+0x4c>
 8002a20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a22:	f7ff fe5a 	bl	80026da <__retarget_lock_release_recursive>
 8002a26:	e7e9      	b.n	80029fc <_vfiprintf_r+0x4c>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8002a2c:	2320      	movs	r3, #32
 8002a2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a32:	2330      	movs	r3, #48	; 0x30
 8002a34:	f04f 0901 	mov.w	r9, #1
 8002a38:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a3c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002bfc <_vfiprintf_r+0x24c>
 8002a40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a44:	4623      	mov	r3, r4
 8002a46:	469a      	mov	sl, r3
 8002a48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a4c:	b10a      	cbz	r2, 8002a52 <_vfiprintf_r+0xa2>
 8002a4e:	2a25      	cmp	r2, #37	; 0x25
 8002a50:	d1f9      	bne.n	8002a46 <_vfiprintf_r+0x96>
 8002a52:	ebba 0b04 	subs.w	fp, sl, r4
 8002a56:	d00b      	beq.n	8002a70 <_vfiprintf_r+0xc0>
 8002a58:	465b      	mov	r3, fp
 8002a5a:	4622      	mov	r2, r4
 8002a5c:	4629      	mov	r1, r5
 8002a5e:	4630      	mov	r0, r6
 8002a60:	f7ff ff93 	bl	800298a <__sfputs_r>
 8002a64:	3001      	adds	r0, #1
 8002a66:	f000 80aa 	beq.w	8002bbe <_vfiprintf_r+0x20e>
 8002a6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a6c:	445a      	add	r2, fp
 8002a6e:	9209      	str	r2, [sp, #36]	; 0x24
 8002a70:	f89a 3000 	ldrb.w	r3, [sl]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 80a2 	beq.w	8002bbe <_vfiprintf_r+0x20e>
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a84:	f10a 0a01 	add.w	sl, sl, #1
 8002a88:	9304      	str	r3, [sp, #16]
 8002a8a:	9307      	str	r3, [sp, #28]
 8002a8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a90:	931a      	str	r3, [sp, #104]	; 0x68
 8002a92:	4654      	mov	r4, sl
 8002a94:	2205      	movs	r2, #5
 8002a96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a9a:	4858      	ldr	r0, [pc, #352]	; (8002bfc <_vfiprintf_r+0x24c>)
 8002a9c:	f000 faf8 	bl	8003090 <memchr>
 8002aa0:	9a04      	ldr	r2, [sp, #16]
 8002aa2:	b9d8      	cbnz	r0, 8002adc <_vfiprintf_r+0x12c>
 8002aa4:	06d1      	lsls	r1, r2, #27
 8002aa6:	bf44      	itt	mi
 8002aa8:	2320      	movmi	r3, #32
 8002aaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002aae:	0713      	lsls	r3, r2, #28
 8002ab0:	bf44      	itt	mi
 8002ab2:	232b      	movmi	r3, #43	; 0x2b
 8002ab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ab8:	f89a 3000 	ldrb.w	r3, [sl]
 8002abc:	2b2a      	cmp	r3, #42	; 0x2a
 8002abe:	d015      	beq.n	8002aec <_vfiprintf_r+0x13c>
 8002ac0:	4654      	mov	r4, sl
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	f04f 0c0a 	mov.w	ip, #10
 8002ac8:	9a07      	ldr	r2, [sp, #28]
 8002aca:	4621      	mov	r1, r4
 8002acc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ad0:	3b30      	subs	r3, #48	; 0x30
 8002ad2:	2b09      	cmp	r3, #9
 8002ad4:	d94e      	bls.n	8002b74 <_vfiprintf_r+0x1c4>
 8002ad6:	b1b0      	cbz	r0, 8002b06 <_vfiprintf_r+0x156>
 8002ad8:	9207      	str	r2, [sp, #28]
 8002ada:	e014      	b.n	8002b06 <_vfiprintf_r+0x156>
 8002adc:	eba0 0308 	sub.w	r3, r0, r8
 8002ae0:	fa09 f303 	lsl.w	r3, r9, r3
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	46a2      	mov	sl, r4
 8002ae8:	9304      	str	r3, [sp, #16]
 8002aea:	e7d2      	b.n	8002a92 <_vfiprintf_r+0xe2>
 8002aec:	9b03      	ldr	r3, [sp, #12]
 8002aee:	1d19      	adds	r1, r3, #4
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	9103      	str	r1, [sp, #12]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	bfbb      	ittet	lt
 8002af8:	425b      	neglt	r3, r3
 8002afa:	f042 0202 	orrlt.w	r2, r2, #2
 8002afe:	9307      	strge	r3, [sp, #28]
 8002b00:	9307      	strlt	r3, [sp, #28]
 8002b02:	bfb8      	it	lt
 8002b04:	9204      	strlt	r2, [sp, #16]
 8002b06:	7823      	ldrb	r3, [r4, #0]
 8002b08:	2b2e      	cmp	r3, #46	; 0x2e
 8002b0a:	d10c      	bne.n	8002b26 <_vfiprintf_r+0x176>
 8002b0c:	7863      	ldrb	r3, [r4, #1]
 8002b0e:	2b2a      	cmp	r3, #42	; 0x2a
 8002b10:	d135      	bne.n	8002b7e <_vfiprintf_r+0x1ce>
 8002b12:	9b03      	ldr	r3, [sp, #12]
 8002b14:	3402      	adds	r4, #2
 8002b16:	1d1a      	adds	r2, r3, #4
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	9203      	str	r2, [sp, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	bfb8      	it	lt
 8002b20:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b24:	9305      	str	r3, [sp, #20]
 8002b26:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002c00 <_vfiprintf_r+0x250>
 8002b2a:	2203      	movs	r2, #3
 8002b2c:	4650      	mov	r0, sl
 8002b2e:	7821      	ldrb	r1, [r4, #0]
 8002b30:	f000 faae 	bl	8003090 <memchr>
 8002b34:	b140      	cbz	r0, 8002b48 <_vfiprintf_r+0x198>
 8002b36:	2340      	movs	r3, #64	; 0x40
 8002b38:	eba0 000a 	sub.w	r0, r0, sl
 8002b3c:	fa03 f000 	lsl.w	r0, r3, r0
 8002b40:	9b04      	ldr	r3, [sp, #16]
 8002b42:	3401      	adds	r4, #1
 8002b44:	4303      	orrs	r3, r0
 8002b46:	9304      	str	r3, [sp, #16]
 8002b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b4c:	2206      	movs	r2, #6
 8002b4e:	482d      	ldr	r0, [pc, #180]	; (8002c04 <_vfiprintf_r+0x254>)
 8002b50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b54:	f000 fa9c 	bl	8003090 <memchr>
 8002b58:	2800      	cmp	r0, #0
 8002b5a:	d03f      	beq.n	8002bdc <_vfiprintf_r+0x22c>
 8002b5c:	4b2a      	ldr	r3, [pc, #168]	; (8002c08 <_vfiprintf_r+0x258>)
 8002b5e:	bb1b      	cbnz	r3, 8002ba8 <_vfiprintf_r+0x1f8>
 8002b60:	9b03      	ldr	r3, [sp, #12]
 8002b62:	3307      	adds	r3, #7
 8002b64:	f023 0307 	bic.w	r3, r3, #7
 8002b68:	3308      	adds	r3, #8
 8002b6a:	9303      	str	r3, [sp, #12]
 8002b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b6e:	443b      	add	r3, r7
 8002b70:	9309      	str	r3, [sp, #36]	; 0x24
 8002b72:	e767      	b.n	8002a44 <_vfiprintf_r+0x94>
 8002b74:	460c      	mov	r4, r1
 8002b76:	2001      	movs	r0, #1
 8002b78:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b7c:	e7a5      	b.n	8002aca <_vfiprintf_r+0x11a>
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f04f 0c0a 	mov.w	ip, #10
 8002b84:	4619      	mov	r1, r3
 8002b86:	3401      	adds	r4, #1
 8002b88:	9305      	str	r3, [sp, #20]
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b90:	3a30      	subs	r2, #48	; 0x30
 8002b92:	2a09      	cmp	r2, #9
 8002b94:	d903      	bls.n	8002b9e <_vfiprintf_r+0x1ee>
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0c5      	beq.n	8002b26 <_vfiprintf_r+0x176>
 8002b9a:	9105      	str	r1, [sp, #20]
 8002b9c:	e7c3      	b.n	8002b26 <_vfiprintf_r+0x176>
 8002b9e:	4604      	mov	r4, r0
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ba6:	e7f0      	b.n	8002b8a <_vfiprintf_r+0x1da>
 8002ba8:	ab03      	add	r3, sp, #12
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	462a      	mov	r2, r5
 8002bae:	4630      	mov	r0, r6
 8002bb0:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <_vfiprintf_r+0x25c>)
 8002bb2:	a904      	add	r1, sp, #16
 8002bb4:	f3af 8000 	nop.w
 8002bb8:	4607      	mov	r7, r0
 8002bba:	1c78      	adds	r0, r7, #1
 8002bbc:	d1d6      	bne.n	8002b6c <_vfiprintf_r+0x1bc>
 8002bbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002bc0:	07d9      	lsls	r1, r3, #31
 8002bc2:	d405      	bmi.n	8002bd0 <_vfiprintf_r+0x220>
 8002bc4:	89ab      	ldrh	r3, [r5, #12]
 8002bc6:	059a      	lsls	r2, r3, #22
 8002bc8:	d402      	bmi.n	8002bd0 <_vfiprintf_r+0x220>
 8002bca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002bcc:	f7ff fd85 	bl	80026da <__retarget_lock_release_recursive>
 8002bd0:	89ab      	ldrh	r3, [r5, #12]
 8002bd2:	065b      	lsls	r3, r3, #25
 8002bd4:	f53f af12 	bmi.w	80029fc <_vfiprintf_r+0x4c>
 8002bd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002bda:	e711      	b.n	8002a00 <_vfiprintf_r+0x50>
 8002bdc:	ab03      	add	r3, sp, #12
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	462a      	mov	r2, r5
 8002be2:	4630      	mov	r0, r6
 8002be4:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <_vfiprintf_r+0x25c>)
 8002be6:	a904      	add	r1, sp, #16
 8002be8:	f000 f882 	bl	8002cf0 <_printf_i>
 8002bec:	e7e4      	b.n	8002bb8 <_vfiprintf_r+0x208>
 8002bee:	bf00      	nop
 8002bf0:	080031c8 	.word	0x080031c8
 8002bf4:	080031e8 	.word	0x080031e8
 8002bf8:	080031a8 	.word	0x080031a8
 8002bfc:	08003208 	.word	0x08003208
 8002c00:	0800320e 	.word	0x0800320e
 8002c04:	08003212 	.word	0x08003212
 8002c08:	00000000 	.word	0x00000000
 8002c0c:	0800298b 	.word	0x0800298b

08002c10 <_printf_common>:
 8002c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c14:	4616      	mov	r6, r2
 8002c16:	4699      	mov	r9, r3
 8002c18:	688a      	ldr	r2, [r1, #8]
 8002c1a:	690b      	ldr	r3, [r1, #16]
 8002c1c:	4607      	mov	r7, r0
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	bfb8      	it	lt
 8002c22:	4613      	movlt	r3, r2
 8002c24:	6033      	str	r3, [r6, #0]
 8002c26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c2a:	460c      	mov	r4, r1
 8002c2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c30:	b10a      	cbz	r2, 8002c36 <_printf_common+0x26>
 8002c32:	3301      	adds	r3, #1
 8002c34:	6033      	str	r3, [r6, #0]
 8002c36:	6823      	ldr	r3, [r4, #0]
 8002c38:	0699      	lsls	r1, r3, #26
 8002c3a:	bf42      	ittt	mi
 8002c3c:	6833      	ldrmi	r3, [r6, #0]
 8002c3e:	3302      	addmi	r3, #2
 8002c40:	6033      	strmi	r3, [r6, #0]
 8002c42:	6825      	ldr	r5, [r4, #0]
 8002c44:	f015 0506 	ands.w	r5, r5, #6
 8002c48:	d106      	bne.n	8002c58 <_printf_common+0x48>
 8002c4a:	f104 0a19 	add.w	sl, r4, #25
 8002c4e:	68e3      	ldr	r3, [r4, #12]
 8002c50:	6832      	ldr	r2, [r6, #0]
 8002c52:	1a9b      	subs	r3, r3, r2
 8002c54:	42ab      	cmp	r3, r5
 8002c56:	dc28      	bgt.n	8002caa <_printf_common+0x9a>
 8002c58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c5c:	1e13      	subs	r3, r2, #0
 8002c5e:	6822      	ldr	r2, [r4, #0]
 8002c60:	bf18      	it	ne
 8002c62:	2301      	movne	r3, #1
 8002c64:	0692      	lsls	r2, r2, #26
 8002c66:	d42d      	bmi.n	8002cc4 <_printf_common+0xb4>
 8002c68:	4649      	mov	r1, r9
 8002c6a:	4638      	mov	r0, r7
 8002c6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c70:	47c0      	blx	r8
 8002c72:	3001      	adds	r0, #1
 8002c74:	d020      	beq.n	8002cb8 <_printf_common+0xa8>
 8002c76:	6823      	ldr	r3, [r4, #0]
 8002c78:	68e5      	ldr	r5, [r4, #12]
 8002c7a:	f003 0306 	and.w	r3, r3, #6
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	bf18      	it	ne
 8002c82:	2500      	movne	r5, #0
 8002c84:	6832      	ldr	r2, [r6, #0]
 8002c86:	f04f 0600 	mov.w	r6, #0
 8002c8a:	68a3      	ldr	r3, [r4, #8]
 8002c8c:	bf08      	it	eq
 8002c8e:	1aad      	subeq	r5, r5, r2
 8002c90:	6922      	ldr	r2, [r4, #16]
 8002c92:	bf08      	it	eq
 8002c94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	bfc4      	itt	gt
 8002c9c:	1a9b      	subgt	r3, r3, r2
 8002c9e:	18ed      	addgt	r5, r5, r3
 8002ca0:	341a      	adds	r4, #26
 8002ca2:	42b5      	cmp	r5, r6
 8002ca4:	d11a      	bne.n	8002cdc <_printf_common+0xcc>
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	e008      	b.n	8002cbc <_printf_common+0xac>
 8002caa:	2301      	movs	r3, #1
 8002cac:	4652      	mov	r2, sl
 8002cae:	4649      	mov	r1, r9
 8002cb0:	4638      	mov	r0, r7
 8002cb2:	47c0      	blx	r8
 8002cb4:	3001      	adds	r0, #1
 8002cb6:	d103      	bne.n	8002cc0 <_printf_common+0xb0>
 8002cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cc0:	3501      	adds	r5, #1
 8002cc2:	e7c4      	b.n	8002c4e <_printf_common+0x3e>
 8002cc4:	2030      	movs	r0, #48	; 0x30
 8002cc6:	18e1      	adds	r1, r4, r3
 8002cc8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ccc:	1c5a      	adds	r2, r3, #1
 8002cce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002cd2:	4422      	add	r2, r4
 8002cd4:	3302      	adds	r3, #2
 8002cd6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002cda:	e7c5      	b.n	8002c68 <_printf_common+0x58>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	4622      	mov	r2, r4
 8002ce0:	4649      	mov	r1, r9
 8002ce2:	4638      	mov	r0, r7
 8002ce4:	47c0      	blx	r8
 8002ce6:	3001      	adds	r0, #1
 8002ce8:	d0e6      	beq.n	8002cb8 <_printf_common+0xa8>
 8002cea:	3601      	adds	r6, #1
 8002cec:	e7d9      	b.n	8002ca2 <_printf_common+0x92>
	...

08002cf0 <_printf_i>:
 8002cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cf4:	7e0f      	ldrb	r7, [r1, #24]
 8002cf6:	4691      	mov	r9, r2
 8002cf8:	2f78      	cmp	r7, #120	; 0x78
 8002cfa:	4680      	mov	r8, r0
 8002cfc:	460c      	mov	r4, r1
 8002cfe:	469a      	mov	sl, r3
 8002d00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002d06:	d807      	bhi.n	8002d18 <_printf_i+0x28>
 8002d08:	2f62      	cmp	r7, #98	; 0x62
 8002d0a:	d80a      	bhi.n	8002d22 <_printf_i+0x32>
 8002d0c:	2f00      	cmp	r7, #0
 8002d0e:	f000 80d9 	beq.w	8002ec4 <_printf_i+0x1d4>
 8002d12:	2f58      	cmp	r7, #88	; 0x58
 8002d14:	f000 80a4 	beq.w	8002e60 <_printf_i+0x170>
 8002d18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d20:	e03a      	b.n	8002d98 <_printf_i+0xa8>
 8002d22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d26:	2b15      	cmp	r3, #21
 8002d28:	d8f6      	bhi.n	8002d18 <_printf_i+0x28>
 8002d2a:	a101      	add	r1, pc, #4	; (adr r1, 8002d30 <_printf_i+0x40>)
 8002d2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d30:	08002d89 	.word	0x08002d89
 8002d34:	08002d9d 	.word	0x08002d9d
 8002d38:	08002d19 	.word	0x08002d19
 8002d3c:	08002d19 	.word	0x08002d19
 8002d40:	08002d19 	.word	0x08002d19
 8002d44:	08002d19 	.word	0x08002d19
 8002d48:	08002d9d 	.word	0x08002d9d
 8002d4c:	08002d19 	.word	0x08002d19
 8002d50:	08002d19 	.word	0x08002d19
 8002d54:	08002d19 	.word	0x08002d19
 8002d58:	08002d19 	.word	0x08002d19
 8002d5c:	08002eab 	.word	0x08002eab
 8002d60:	08002dcd 	.word	0x08002dcd
 8002d64:	08002e8d 	.word	0x08002e8d
 8002d68:	08002d19 	.word	0x08002d19
 8002d6c:	08002d19 	.word	0x08002d19
 8002d70:	08002ecd 	.word	0x08002ecd
 8002d74:	08002d19 	.word	0x08002d19
 8002d78:	08002dcd 	.word	0x08002dcd
 8002d7c:	08002d19 	.word	0x08002d19
 8002d80:	08002d19 	.word	0x08002d19
 8002d84:	08002e95 	.word	0x08002e95
 8002d88:	682b      	ldr	r3, [r5, #0]
 8002d8a:	1d1a      	adds	r2, r3, #4
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	602a      	str	r2, [r5, #0]
 8002d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0a4      	b.n	8002ee6 <_printf_i+0x1f6>
 8002d9c:	6820      	ldr	r0, [r4, #0]
 8002d9e:	6829      	ldr	r1, [r5, #0]
 8002da0:	0606      	lsls	r6, r0, #24
 8002da2:	f101 0304 	add.w	r3, r1, #4
 8002da6:	d50a      	bpl.n	8002dbe <_printf_i+0xce>
 8002da8:	680e      	ldr	r6, [r1, #0]
 8002daa:	602b      	str	r3, [r5, #0]
 8002dac:	2e00      	cmp	r6, #0
 8002dae:	da03      	bge.n	8002db8 <_printf_i+0xc8>
 8002db0:	232d      	movs	r3, #45	; 0x2d
 8002db2:	4276      	negs	r6, r6
 8002db4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002db8:	230a      	movs	r3, #10
 8002dba:	485e      	ldr	r0, [pc, #376]	; (8002f34 <_printf_i+0x244>)
 8002dbc:	e019      	b.n	8002df2 <_printf_i+0x102>
 8002dbe:	680e      	ldr	r6, [r1, #0]
 8002dc0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002dc4:	602b      	str	r3, [r5, #0]
 8002dc6:	bf18      	it	ne
 8002dc8:	b236      	sxthne	r6, r6
 8002dca:	e7ef      	b.n	8002dac <_printf_i+0xbc>
 8002dcc:	682b      	ldr	r3, [r5, #0]
 8002dce:	6820      	ldr	r0, [r4, #0]
 8002dd0:	1d19      	adds	r1, r3, #4
 8002dd2:	6029      	str	r1, [r5, #0]
 8002dd4:	0601      	lsls	r1, r0, #24
 8002dd6:	d501      	bpl.n	8002ddc <_printf_i+0xec>
 8002dd8:	681e      	ldr	r6, [r3, #0]
 8002dda:	e002      	b.n	8002de2 <_printf_i+0xf2>
 8002ddc:	0646      	lsls	r6, r0, #25
 8002dde:	d5fb      	bpl.n	8002dd8 <_printf_i+0xe8>
 8002de0:	881e      	ldrh	r6, [r3, #0]
 8002de2:	2f6f      	cmp	r7, #111	; 0x6f
 8002de4:	bf0c      	ite	eq
 8002de6:	2308      	moveq	r3, #8
 8002de8:	230a      	movne	r3, #10
 8002dea:	4852      	ldr	r0, [pc, #328]	; (8002f34 <_printf_i+0x244>)
 8002dec:	2100      	movs	r1, #0
 8002dee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002df2:	6865      	ldr	r5, [r4, #4]
 8002df4:	2d00      	cmp	r5, #0
 8002df6:	bfa8      	it	ge
 8002df8:	6821      	ldrge	r1, [r4, #0]
 8002dfa:	60a5      	str	r5, [r4, #8]
 8002dfc:	bfa4      	itt	ge
 8002dfe:	f021 0104 	bicge.w	r1, r1, #4
 8002e02:	6021      	strge	r1, [r4, #0]
 8002e04:	b90e      	cbnz	r6, 8002e0a <_printf_i+0x11a>
 8002e06:	2d00      	cmp	r5, #0
 8002e08:	d04d      	beq.n	8002ea6 <_printf_i+0x1b6>
 8002e0a:	4615      	mov	r5, r2
 8002e0c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002e10:	fb03 6711 	mls	r7, r3, r1, r6
 8002e14:	5dc7      	ldrb	r7, [r0, r7]
 8002e16:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002e1a:	4637      	mov	r7, r6
 8002e1c:	42bb      	cmp	r3, r7
 8002e1e:	460e      	mov	r6, r1
 8002e20:	d9f4      	bls.n	8002e0c <_printf_i+0x11c>
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d10b      	bne.n	8002e3e <_printf_i+0x14e>
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	07de      	lsls	r6, r3, #31
 8002e2a:	d508      	bpl.n	8002e3e <_printf_i+0x14e>
 8002e2c:	6923      	ldr	r3, [r4, #16]
 8002e2e:	6861      	ldr	r1, [r4, #4]
 8002e30:	4299      	cmp	r1, r3
 8002e32:	bfde      	ittt	le
 8002e34:	2330      	movle	r3, #48	; 0x30
 8002e36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e3e:	1b52      	subs	r2, r2, r5
 8002e40:	6122      	str	r2, [r4, #16]
 8002e42:	464b      	mov	r3, r9
 8002e44:	4621      	mov	r1, r4
 8002e46:	4640      	mov	r0, r8
 8002e48:	f8cd a000 	str.w	sl, [sp]
 8002e4c:	aa03      	add	r2, sp, #12
 8002e4e:	f7ff fedf 	bl	8002c10 <_printf_common>
 8002e52:	3001      	adds	r0, #1
 8002e54:	d14c      	bne.n	8002ef0 <_printf_i+0x200>
 8002e56:	f04f 30ff 	mov.w	r0, #4294967295
 8002e5a:	b004      	add	sp, #16
 8002e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e60:	4834      	ldr	r0, [pc, #208]	; (8002f34 <_printf_i+0x244>)
 8002e62:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002e66:	6829      	ldr	r1, [r5, #0]
 8002e68:	6823      	ldr	r3, [r4, #0]
 8002e6a:	f851 6b04 	ldr.w	r6, [r1], #4
 8002e6e:	6029      	str	r1, [r5, #0]
 8002e70:	061d      	lsls	r5, r3, #24
 8002e72:	d514      	bpl.n	8002e9e <_printf_i+0x1ae>
 8002e74:	07df      	lsls	r7, r3, #31
 8002e76:	bf44      	itt	mi
 8002e78:	f043 0320 	orrmi.w	r3, r3, #32
 8002e7c:	6023      	strmi	r3, [r4, #0]
 8002e7e:	b91e      	cbnz	r6, 8002e88 <_printf_i+0x198>
 8002e80:	6823      	ldr	r3, [r4, #0]
 8002e82:	f023 0320 	bic.w	r3, r3, #32
 8002e86:	6023      	str	r3, [r4, #0]
 8002e88:	2310      	movs	r3, #16
 8002e8a:	e7af      	b.n	8002dec <_printf_i+0xfc>
 8002e8c:	6823      	ldr	r3, [r4, #0]
 8002e8e:	f043 0320 	orr.w	r3, r3, #32
 8002e92:	6023      	str	r3, [r4, #0]
 8002e94:	2378      	movs	r3, #120	; 0x78
 8002e96:	4828      	ldr	r0, [pc, #160]	; (8002f38 <_printf_i+0x248>)
 8002e98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e9c:	e7e3      	b.n	8002e66 <_printf_i+0x176>
 8002e9e:	0659      	lsls	r1, r3, #25
 8002ea0:	bf48      	it	mi
 8002ea2:	b2b6      	uxthmi	r6, r6
 8002ea4:	e7e6      	b.n	8002e74 <_printf_i+0x184>
 8002ea6:	4615      	mov	r5, r2
 8002ea8:	e7bb      	b.n	8002e22 <_printf_i+0x132>
 8002eaa:	682b      	ldr	r3, [r5, #0]
 8002eac:	6826      	ldr	r6, [r4, #0]
 8002eae:	1d18      	adds	r0, r3, #4
 8002eb0:	6961      	ldr	r1, [r4, #20]
 8002eb2:	6028      	str	r0, [r5, #0]
 8002eb4:	0635      	lsls	r5, r6, #24
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	d501      	bpl.n	8002ebe <_printf_i+0x1ce>
 8002eba:	6019      	str	r1, [r3, #0]
 8002ebc:	e002      	b.n	8002ec4 <_printf_i+0x1d4>
 8002ebe:	0670      	lsls	r0, r6, #25
 8002ec0:	d5fb      	bpl.n	8002eba <_printf_i+0x1ca>
 8002ec2:	8019      	strh	r1, [r3, #0]
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	4615      	mov	r5, r2
 8002ec8:	6123      	str	r3, [r4, #16]
 8002eca:	e7ba      	b.n	8002e42 <_printf_i+0x152>
 8002ecc:	682b      	ldr	r3, [r5, #0]
 8002ece:	2100      	movs	r1, #0
 8002ed0:	1d1a      	adds	r2, r3, #4
 8002ed2:	602a      	str	r2, [r5, #0]
 8002ed4:	681d      	ldr	r5, [r3, #0]
 8002ed6:	6862      	ldr	r2, [r4, #4]
 8002ed8:	4628      	mov	r0, r5
 8002eda:	f000 f8d9 	bl	8003090 <memchr>
 8002ede:	b108      	cbz	r0, 8002ee4 <_printf_i+0x1f4>
 8002ee0:	1b40      	subs	r0, r0, r5
 8002ee2:	6060      	str	r0, [r4, #4]
 8002ee4:	6863      	ldr	r3, [r4, #4]
 8002ee6:	6123      	str	r3, [r4, #16]
 8002ee8:	2300      	movs	r3, #0
 8002eea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002eee:	e7a8      	b.n	8002e42 <_printf_i+0x152>
 8002ef0:	462a      	mov	r2, r5
 8002ef2:	4649      	mov	r1, r9
 8002ef4:	4640      	mov	r0, r8
 8002ef6:	6923      	ldr	r3, [r4, #16]
 8002ef8:	47d0      	blx	sl
 8002efa:	3001      	adds	r0, #1
 8002efc:	d0ab      	beq.n	8002e56 <_printf_i+0x166>
 8002efe:	6823      	ldr	r3, [r4, #0]
 8002f00:	079b      	lsls	r3, r3, #30
 8002f02:	d413      	bmi.n	8002f2c <_printf_i+0x23c>
 8002f04:	68e0      	ldr	r0, [r4, #12]
 8002f06:	9b03      	ldr	r3, [sp, #12]
 8002f08:	4298      	cmp	r0, r3
 8002f0a:	bfb8      	it	lt
 8002f0c:	4618      	movlt	r0, r3
 8002f0e:	e7a4      	b.n	8002e5a <_printf_i+0x16a>
 8002f10:	2301      	movs	r3, #1
 8002f12:	4632      	mov	r2, r6
 8002f14:	4649      	mov	r1, r9
 8002f16:	4640      	mov	r0, r8
 8002f18:	47d0      	blx	sl
 8002f1a:	3001      	adds	r0, #1
 8002f1c:	d09b      	beq.n	8002e56 <_printf_i+0x166>
 8002f1e:	3501      	adds	r5, #1
 8002f20:	68e3      	ldr	r3, [r4, #12]
 8002f22:	9903      	ldr	r1, [sp, #12]
 8002f24:	1a5b      	subs	r3, r3, r1
 8002f26:	42ab      	cmp	r3, r5
 8002f28:	dcf2      	bgt.n	8002f10 <_printf_i+0x220>
 8002f2a:	e7eb      	b.n	8002f04 <_printf_i+0x214>
 8002f2c:	2500      	movs	r5, #0
 8002f2e:	f104 0619 	add.w	r6, r4, #25
 8002f32:	e7f5      	b.n	8002f20 <_printf_i+0x230>
 8002f34:	08003219 	.word	0x08003219
 8002f38:	0800322a 	.word	0x0800322a

08002f3c <_sbrk_r>:
 8002f3c:	b538      	push	{r3, r4, r5, lr}
 8002f3e:	2300      	movs	r3, #0
 8002f40:	4d05      	ldr	r5, [pc, #20]	; (8002f58 <_sbrk_r+0x1c>)
 8002f42:	4604      	mov	r4, r0
 8002f44:	4608      	mov	r0, r1
 8002f46:	602b      	str	r3, [r5, #0]
 8002f48:	f7fd fa66 	bl	8000418 <_sbrk>
 8002f4c:	1c43      	adds	r3, r0, #1
 8002f4e:	d102      	bne.n	8002f56 <_sbrk_r+0x1a>
 8002f50:	682b      	ldr	r3, [r5, #0]
 8002f52:	b103      	cbz	r3, 8002f56 <_sbrk_r+0x1a>
 8002f54:	6023      	str	r3, [r4, #0]
 8002f56:	bd38      	pop	{r3, r4, r5, pc}
 8002f58:	200012dc 	.word	0x200012dc

08002f5c <__sread>:
 8002f5c:	b510      	push	{r4, lr}
 8002f5e:	460c      	mov	r4, r1
 8002f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f64:	f000 f8ae 	bl	80030c4 <_read_r>
 8002f68:	2800      	cmp	r0, #0
 8002f6a:	bfab      	itete	ge
 8002f6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002f6e:	89a3      	ldrhlt	r3, [r4, #12]
 8002f70:	181b      	addge	r3, r3, r0
 8002f72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002f76:	bfac      	ite	ge
 8002f78:	6563      	strge	r3, [r4, #84]	; 0x54
 8002f7a:	81a3      	strhlt	r3, [r4, #12]
 8002f7c:	bd10      	pop	{r4, pc}

08002f7e <__swrite>:
 8002f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f82:	461f      	mov	r7, r3
 8002f84:	898b      	ldrh	r3, [r1, #12]
 8002f86:	4605      	mov	r5, r0
 8002f88:	05db      	lsls	r3, r3, #23
 8002f8a:	460c      	mov	r4, r1
 8002f8c:	4616      	mov	r6, r2
 8002f8e:	d505      	bpl.n	8002f9c <__swrite+0x1e>
 8002f90:	2302      	movs	r3, #2
 8002f92:	2200      	movs	r2, #0
 8002f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f98:	f000 f868 	bl	800306c <_lseek_r>
 8002f9c:	89a3      	ldrh	r3, [r4, #12]
 8002f9e:	4632      	mov	r2, r6
 8002fa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fa4:	81a3      	strh	r3, [r4, #12]
 8002fa6:	4628      	mov	r0, r5
 8002fa8:	463b      	mov	r3, r7
 8002faa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002fb2:	f000 b817 	b.w	8002fe4 <_write_r>

08002fb6 <__sseek>:
 8002fb6:	b510      	push	{r4, lr}
 8002fb8:	460c      	mov	r4, r1
 8002fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fbe:	f000 f855 	bl	800306c <_lseek_r>
 8002fc2:	1c43      	adds	r3, r0, #1
 8002fc4:	89a3      	ldrh	r3, [r4, #12]
 8002fc6:	bf15      	itete	ne
 8002fc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8002fca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002fce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002fd2:	81a3      	strheq	r3, [r4, #12]
 8002fd4:	bf18      	it	ne
 8002fd6:	81a3      	strhne	r3, [r4, #12]
 8002fd8:	bd10      	pop	{r4, pc}

08002fda <__sclose>:
 8002fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fde:	f000 b813 	b.w	8003008 <_close_r>
	...

08002fe4 <_write_r>:
 8002fe4:	b538      	push	{r3, r4, r5, lr}
 8002fe6:	4604      	mov	r4, r0
 8002fe8:	4608      	mov	r0, r1
 8002fea:	4611      	mov	r1, r2
 8002fec:	2200      	movs	r2, #0
 8002fee:	4d05      	ldr	r5, [pc, #20]	; (8003004 <_write_r+0x20>)
 8002ff0:	602a      	str	r2, [r5, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	f7fe ff26 	bl	8001e44 <_write>
 8002ff8:	1c43      	adds	r3, r0, #1
 8002ffa:	d102      	bne.n	8003002 <_write_r+0x1e>
 8002ffc:	682b      	ldr	r3, [r5, #0]
 8002ffe:	b103      	cbz	r3, 8003002 <_write_r+0x1e>
 8003000:	6023      	str	r3, [r4, #0]
 8003002:	bd38      	pop	{r3, r4, r5, pc}
 8003004:	200012dc 	.word	0x200012dc

08003008 <_close_r>:
 8003008:	b538      	push	{r3, r4, r5, lr}
 800300a:	2300      	movs	r3, #0
 800300c:	4d05      	ldr	r5, [pc, #20]	; (8003024 <_close_r+0x1c>)
 800300e:	4604      	mov	r4, r0
 8003010:	4608      	mov	r0, r1
 8003012:	602b      	str	r3, [r5, #0]
 8003014:	f7fd f9cf 	bl	80003b6 <_close>
 8003018:	1c43      	adds	r3, r0, #1
 800301a:	d102      	bne.n	8003022 <_close_r+0x1a>
 800301c:	682b      	ldr	r3, [r5, #0]
 800301e:	b103      	cbz	r3, 8003022 <_close_r+0x1a>
 8003020:	6023      	str	r3, [r4, #0]
 8003022:	bd38      	pop	{r3, r4, r5, pc}
 8003024:	200012dc 	.word	0x200012dc

08003028 <_fstat_r>:
 8003028:	b538      	push	{r3, r4, r5, lr}
 800302a:	2300      	movs	r3, #0
 800302c:	4d06      	ldr	r5, [pc, #24]	; (8003048 <_fstat_r+0x20>)
 800302e:	4604      	mov	r4, r0
 8003030:	4608      	mov	r0, r1
 8003032:	4611      	mov	r1, r2
 8003034:	602b      	str	r3, [r5, #0]
 8003036:	f7fd f9c9 	bl	80003cc <_fstat>
 800303a:	1c43      	adds	r3, r0, #1
 800303c:	d102      	bne.n	8003044 <_fstat_r+0x1c>
 800303e:	682b      	ldr	r3, [r5, #0]
 8003040:	b103      	cbz	r3, 8003044 <_fstat_r+0x1c>
 8003042:	6023      	str	r3, [r4, #0]
 8003044:	bd38      	pop	{r3, r4, r5, pc}
 8003046:	bf00      	nop
 8003048:	200012dc 	.word	0x200012dc

0800304c <_isatty_r>:
 800304c:	b538      	push	{r3, r4, r5, lr}
 800304e:	2300      	movs	r3, #0
 8003050:	4d05      	ldr	r5, [pc, #20]	; (8003068 <_isatty_r+0x1c>)
 8003052:	4604      	mov	r4, r0
 8003054:	4608      	mov	r0, r1
 8003056:	602b      	str	r3, [r5, #0]
 8003058:	f7fd f9c7 	bl	80003ea <_isatty>
 800305c:	1c43      	adds	r3, r0, #1
 800305e:	d102      	bne.n	8003066 <_isatty_r+0x1a>
 8003060:	682b      	ldr	r3, [r5, #0]
 8003062:	b103      	cbz	r3, 8003066 <_isatty_r+0x1a>
 8003064:	6023      	str	r3, [r4, #0]
 8003066:	bd38      	pop	{r3, r4, r5, pc}
 8003068:	200012dc 	.word	0x200012dc

0800306c <_lseek_r>:
 800306c:	b538      	push	{r3, r4, r5, lr}
 800306e:	4604      	mov	r4, r0
 8003070:	4608      	mov	r0, r1
 8003072:	4611      	mov	r1, r2
 8003074:	2200      	movs	r2, #0
 8003076:	4d05      	ldr	r5, [pc, #20]	; (800308c <_lseek_r+0x20>)
 8003078:	602a      	str	r2, [r5, #0]
 800307a:	461a      	mov	r2, r3
 800307c:	f7fd f9bf 	bl	80003fe <_lseek>
 8003080:	1c43      	adds	r3, r0, #1
 8003082:	d102      	bne.n	800308a <_lseek_r+0x1e>
 8003084:	682b      	ldr	r3, [r5, #0]
 8003086:	b103      	cbz	r3, 800308a <_lseek_r+0x1e>
 8003088:	6023      	str	r3, [r4, #0]
 800308a:	bd38      	pop	{r3, r4, r5, pc}
 800308c:	200012dc 	.word	0x200012dc

08003090 <memchr>:
 8003090:	4603      	mov	r3, r0
 8003092:	b510      	push	{r4, lr}
 8003094:	b2c9      	uxtb	r1, r1
 8003096:	4402      	add	r2, r0
 8003098:	4293      	cmp	r3, r2
 800309a:	4618      	mov	r0, r3
 800309c:	d101      	bne.n	80030a2 <memchr+0x12>
 800309e:	2000      	movs	r0, #0
 80030a0:	e003      	b.n	80030aa <memchr+0x1a>
 80030a2:	7804      	ldrb	r4, [r0, #0]
 80030a4:	3301      	adds	r3, #1
 80030a6:	428c      	cmp	r4, r1
 80030a8:	d1f6      	bne.n	8003098 <memchr+0x8>
 80030aa:	bd10      	pop	{r4, pc}

080030ac <__malloc_lock>:
 80030ac:	4801      	ldr	r0, [pc, #4]	; (80030b4 <__malloc_lock+0x8>)
 80030ae:	f7ff bb13 	b.w	80026d8 <__retarget_lock_acquire_recursive>
 80030b2:	bf00      	nop
 80030b4:	200012d0 	.word	0x200012d0

080030b8 <__malloc_unlock>:
 80030b8:	4801      	ldr	r0, [pc, #4]	; (80030c0 <__malloc_unlock+0x8>)
 80030ba:	f7ff bb0e 	b.w	80026da <__retarget_lock_release_recursive>
 80030be:	bf00      	nop
 80030c0:	200012d0 	.word	0x200012d0

080030c4 <_read_r>:
 80030c4:	b538      	push	{r3, r4, r5, lr}
 80030c6:	4604      	mov	r4, r0
 80030c8:	4608      	mov	r0, r1
 80030ca:	4611      	mov	r1, r2
 80030cc:	2200      	movs	r2, #0
 80030ce:	4d05      	ldr	r5, [pc, #20]	; (80030e4 <_read_r+0x20>)
 80030d0:	602a      	str	r2, [r5, #0]
 80030d2:	461a      	mov	r2, r3
 80030d4:	f7fd f952 	bl	800037c <_read>
 80030d8:	1c43      	adds	r3, r0, #1
 80030da:	d102      	bne.n	80030e2 <_read_r+0x1e>
 80030dc:	682b      	ldr	r3, [r5, #0]
 80030de:	b103      	cbz	r3, 80030e2 <_read_r+0x1e>
 80030e0:	6023      	str	r3, [r4, #0]
 80030e2:	bd38      	pop	{r3, r4, r5, pc}
 80030e4:	200012dc 	.word	0x200012dc

080030e8 <_init>:
 80030e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ea:	bf00      	nop
 80030ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ee:	bc08      	pop	{r3}
 80030f0:	469e      	mov	lr, r3
 80030f2:	4770      	bx	lr

080030f4 <_fini>:
 80030f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f6:	bf00      	nop
 80030f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030fa:	bc08      	pop	{r3}
 80030fc:	469e      	mov	lr, r3
 80030fe:	4770      	bx	lr
