
stm32_threadOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003990  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08003a9c  08003a9c  00004a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bd8  08003bd8  000050cc  2**0
                  CONTENTS
  4 .ARM          00000000  08003bd8  08003bd8  000050cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bd8  08003bd8  000050cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bd8  08003bd8  00004bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003bdc  08003bdc  00004bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  08003be0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000109c  200000cc  08003cac  000050cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001168  08003cac  00005168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000050cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000081fa  00000000  00000000  000050f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001afe  00000000  00000000  0000d2ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  0000edf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005f0  00000000  00000000  0000f5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c98  00000000  00000000  0000fbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b3c  00000000  00000000  00027858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083f88  00000000  00000000  00031394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b531c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026f4  00000000  00000000  000b5360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000b7a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000cc 	.word	0x200000cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a84 	.word	0x08003a84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d0 	.word	0x200000d0
 8000148:	08003a84 	.word	0x08003a84

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000658:	f001 f99c 	bl	8001994 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800065c:	f000 f808 	bl	8000670 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000660:	f000 f876 	bl	8000750 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000664:	f000 f84a 	bl	80006fc <MX_USART1_UART_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	extern void run();
	run();
 8000668:	f001 f946 	bl	80018f8 <run>
	while (1) {
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <main+0x18>

08000670 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b090      	sub	sp, #64	@ 0x40
 8000674:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000676:	f107 0318 	add.w	r3, r7, #24
 800067a:	2228      	movs	r2, #40	@ 0x28
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f002 fc72 	bl	8002f68 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000692:	2301      	movs	r3, #1
 8000694:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000696:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800069a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a4:	2302      	movs	r3, #2
 80006a6:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006ac:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006ae:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80006b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006b4:	f107 0318 	add.w	r3, r7, #24
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 fc59 	bl	8001f70 <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x58>
		Error_Handler();
 80006c4:	f000 f866 	bl	8000794 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80006c8:	230f      	movs	r3, #15
 80006ca:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2302      	movs	r3, #2
 80006ce:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006d8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2102      	movs	r1, #2
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 fec6 	bl	8002474 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x82>
		Error_Handler();
 80006ee:	f000 f851 	bl	8000794 <Error_Handler>
	}
}
 80006f2:	bf00      	nop
 80006f4:	3740      	adds	r7, #64	@ 0x40
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000700:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <MX_USART1_UART_Init+0x4c>)
 8000702:	4a12      	ldr	r2, [pc, #72]	@ (800074c <MX_USART1_UART_Init+0x50>)
 8000704:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000706:	4b10      	ldr	r3, [pc, #64]	@ (8000748 <MX_USART1_UART_Init+0x4c>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <MX_USART1_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <MX_USART1_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <MX_USART1_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <MX_USART1_UART_Init+0x4c>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <MX_USART1_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <MX_USART1_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&huart1) != HAL_OK) {
 8000732:	4805      	ldr	r0, [pc, #20]	@ (8000748 <MX_USART1_UART_Init+0x4c>)
 8000734:	f002 f82c 	bl	8002790 <HAL_HalfDuplex_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800073e:	f000 f829 	bl	8000794 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200000e8 	.word	0x200000e8
 800074c:	40013800 	.word	0x40013800

08000750 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000756:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <MX_GPIO_Init+0x40>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	4a0d      	ldr	r2, [pc, #52]	@ (8000790 <MX_GPIO_Init+0x40>)
 800075c:	f043 0320 	orr.w	r3, r3, #32
 8000760:	6193      	str	r3, [r2, #24]
 8000762:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <MX_GPIO_Init+0x40>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	f003 0320 	and.w	r3, r3, #32
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <MX_GPIO_Init+0x40>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	4a07      	ldr	r2, [pc, #28]	@ (8000790 <MX_GPIO_Init+0x40>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	6193      	str	r3, [r2, #24]
 800077a:	4b05      	ldr	r3, [pc, #20]	@ (8000790 <MX_GPIO_Init+0x40>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	40021000 	.word	0x40021000

08000794 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000798:	b672      	cpsid	i
}
 800079a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <Error_Handler+0x8>

080007a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007a6:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <HAL_MspInit+0x40>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <HAL_MspInit+0x40>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6193      	str	r3, [r2, #24]
 80007b2:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <HAL_MspInit+0x40>)
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007be:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <HAL_MspInit+0x40>)
 80007c0:	69db      	ldr	r3, [r3, #28]
 80007c2:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <HAL_MspInit+0x40>)
 80007c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007c8:	61d3      	str	r3, [r2, #28]
 80007ca:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <HAL_MspInit+0x40>)
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	40021000 	.word	0x40021000

080007e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a16      	ldr	r2, [pc, #88]	@ (8000858 <HAL_UART_MspInit+0x74>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d124      	bne.n	800084e <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000804:	4b15      	ldr	r3, [pc, #84]	@ (800085c <HAL_UART_MspInit+0x78>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a14      	ldr	r2, [pc, #80]	@ (800085c <HAL_UART_MspInit+0x78>)
 800080a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b12      	ldr	r3, [pc, #72]	@ (800085c <HAL_UART_MspInit+0x78>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081c:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <HAL_UART_MspInit+0x78>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a0e      	ldr	r2, [pc, #56]	@ (800085c <HAL_UART_MspInit+0x78>)
 8000822:	f043 0304 	orr.w	r3, r3, #4
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <HAL_UART_MspInit+0x78>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f003 0304 	and.w	r3, r3, #4
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000834:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000838:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800083a:	2312      	movs	r3, #18
 800083c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800083e:	2303      	movs	r3, #3
 8000840:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000842:	f107 0310 	add.w	r3, r7, #16
 8000846:	4619      	mov	r1, r3
 8000848:	4805      	ldr	r0, [pc, #20]	@ (8000860 <HAL_UART_MspInit+0x7c>)
 800084a:	f001 fa0d 	bl	8001c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800084e:	bf00      	nop
 8000850:	3720      	adds	r7, #32
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40013800 	.word	0x40013800
 800085c:	40021000 	.word	0x40021000
 8000860:	40010800 	.word	0x40010800

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <NMI_Handler+0x4>

0800086c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <MemManage_Handler+0x4>

08000874 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <BusFault_Handler+0x4>

0800087c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <UsageFault_Handler+0x4>

08000884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	e00a      	b.n	80008b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008a2:	f3af 8000 	nop.w
 80008a6:	4601      	mov	r1, r0
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	1c5a      	adds	r2, r3, #1
 80008ac:	60ba      	str	r2, [r7, #8]
 80008ae:	b2ca      	uxtb	r2, r1
 80008b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	3301      	adds	r3, #1
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	697a      	ldr	r2, [r7, #20]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	429a      	cmp	r2, r3
 80008be:	dbf0      	blt.n	80008a2 <_read+0x12>
  }

  return len;
 80008c0:	687b      	ldr	r3, [r7, #4]
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3718      	adds	r7, #24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <_close>:
  }
  return len;
}

int _close(int file)
{
 80008ca:	b480      	push	{r7}
 80008cc:	b083      	sub	sp, #12
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr

080008e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008f0:	605a      	str	r2, [r3, #4]
  return 0;
 80008f2:	2300      	movs	r3, #0
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr

080008fe <_isatty>:

int _isatty(int file)
{
 80008fe:	b480      	push	{r7}
 8000900:	b083      	sub	sp, #12
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000906:	2301      	movs	r3, #1
}
 8000908:	4618      	mov	r0, r3
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr

08000912 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000912:	b480      	push	{r7}
 8000914:	b085      	sub	sp, #20
 8000916:	af00      	add	r7, sp, #0
 8000918:	60f8      	str	r0, [r7, #12]
 800091a:	60b9      	str	r1, [r7, #8]
 800091c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800091e:	2300      	movs	r3, #0
}
 8000920:	4618      	mov	r0, r3
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
	...

0800092c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000934:	4a14      	ldr	r2, [pc, #80]	@ (8000988 <_sbrk+0x5c>)
 8000936:	4b15      	ldr	r3, [pc, #84]	@ (800098c <_sbrk+0x60>)
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000940:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <_sbrk+0x64>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d102      	bne.n	800094e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000948:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <_sbrk+0x64>)
 800094a:	4a12      	ldr	r2, [pc, #72]	@ (8000994 <_sbrk+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094e:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <_sbrk+0x64>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	429a      	cmp	r2, r3
 800095a:	d207      	bcs.n	800096c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800095c:	f002 fb52 	bl	8003004 <__errno>
 8000960:	4603      	mov	r3, r0
 8000962:	220c      	movs	r2, #12
 8000964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	e009      	b.n	8000980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800096c:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <_sbrk+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000972:	4b07      	ldr	r3, [pc, #28]	@ (8000990 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	4a05      	ldr	r2, [pc, #20]	@ (8000990 <_sbrk+0x64>)
 800097c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800097e:	68fb      	ldr	r3, [r7, #12]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20005000 	.word	0x20005000
 800098c:	00000400 	.word	0x00000400
 8000990:	20000130 	.word	0x20000130
 8000994:	20001168 	.word	0x20001168

08000998 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr

080009a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009a4:	f7ff fff8 	bl	8000998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a8:	480b      	ldr	r0, [pc, #44]	@ (80009d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009aa:	490c      	ldr	r1, [pc, #48]	@ (80009dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009ac:	4a0c      	ldr	r2, [pc, #48]	@ (80009e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b0:	e002      	b.n	80009b8 <LoopCopyDataInit>

080009b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b6:	3304      	adds	r3, #4

080009b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009bc:	d3f9      	bcc.n	80009b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009be:	4a09      	ldr	r2, [pc, #36]	@ (80009e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009c0:	4c09      	ldr	r4, [pc, #36]	@ (80009e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c4:	e001      	b.n	80009ca <LoopFillZerobss>

080009c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c8:	3204      	adds	r2, #4

080009ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009cc:	d3fb      	bcc.n	80009c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ce:	f002 fb1f 	bl	8003010 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009d2:	f7ff fe3f 	bl	8000654 <main>
  bx lr
 80009d6:	4770      	bx	lr
  ldr r0, =_sdata
 80009d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009dc:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 80009e0:	08003be0 	.word	0x08003be0
  ldr r2, =_sbss
 80009e4:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 80009e8:	20001168 	.word	0x20001168

080009ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009ec:	e7fe      	b.n	80009ec <ADC1_2_IRQHandler>
	...

080009f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	6039      	str	r1, [r7, #0]
 80009fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	db0a      	blt.n	8000a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	490c      	ldr	r1, [pc, #48]	@ (8000a3c <__NVIC_SetPriority+0x4c>)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	0112      	lsls	r2, r2, #4
 8000a10:	b2d2      	uxtb	r2, r2
 8000a12:	440b      	add	r3, r1
 8000a14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a18:	e00a      	b.n	8000a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4908      	ldr	r1, [pc, #32]	@ (8000a40 <__NVIC_SetPriority+0x50>)
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	f003 030f 	and.w	r3, r3, #15
 8000a26:	3b04      	subs	r3, #4
 8000a28:	0112      	lsls	r2, r2, #4
 8000a2a:	b2d2      	uxtb	r2, r2
 8000a2c:	440b      	add	r3, r1
 8000a2e:	761a      	strb	r2, [r3, #24]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000e100 	.word	0xe000e100
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <idleThread>:
static volatile uint32_t taskTime = 0;


static uint32_t idleThreadStack[64];
uint32_t stm32_thread_idle_count;
static void idleThread() {
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
	stm32_thread_idle_count = 0;
 8000a48:	4b04      	ldr	r3, [pc, #16]	@ (8000a5c <idleThread+0x18>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
	while (1) {
		stm32_thread_idle_count++;
 8000a4e:	4b03      	ldr	r3, [pc, #12]	@ (8000a5c <idleThread+0x18>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	3301      	adds	r3, #1
 8000a54:	4a01      	ldr	r2, [pc, #4]	@ (8000a5c <idleThread+0x18>)
 8000a56:	6013      	str	r3, [r2, #0]
 8000a58:	e7f9      	b.n	8000a4e <idleThread+0xa>
 8000a5a:	bf00      	nop
 8000a5c:	200003f8 	.word	0x200003f8

08000a60 <addThread>:
	}
}

static void addThread(int freeIndex, void (*threadTask)(), uint32_t *stack,
		uint32_t stackLen,int argLen,void**args) {
 8000a60:	b480      	push	{r7}
 8000a62:	b087      	sub	sp, #28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
 8000a6c:	603b      	str	r3, [r7, #0]
	int i = freeIndex;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	617b      	str	r3, [r7, #20]
	//Empty thread found
	thread[i].ID = freeIndex;
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	b2d8      	uxtb	r0, r3
 8000a76:	4968      	ldr	r1, [pc, #416]	@ (8000c18 <addThread+0x1b8>)
 8000a78:	697a      	ldr	r2, [r7, #20]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	4413      	add	r3, r2
 8000a80:	00db      	lsls	r3, r3, #3
 8000a82:	440b      	add	r3, r1
 8000a84:	4602      	mov	r2, r0
 8000a86:	701a      	strb	r2, [r3, #0]
	thread[i].stack = stack;
 8000a88:	4963      	ldr	r1, [pc, #396]	@ (8000c18 <addThread+0x1b8>)
 8000a8a:	697a      	ldr	r2, [r7, #20]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	4413      	add	r3, r2
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	440b      	add	r3, r1
 8000a96:	3304      	adds	r3, #4
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	601a      	str	r2, [r3, #0]
	thread[i].stackLen = stackLen;
 8000a9c:	495e      	ldr	r1, [pc, #376]	@ (8000c18 <addThread+0x1b8>)
 8000a9e:	697a      	ldr	r2, [r7, #20]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	4413      	add	r3, r2
 8000aa6:	00db      	lsls	r3, r3, #3
 8000aa8:	440b      	add	r3, r1
 8000aaa:	3308      	adds	r3, #8
 8000aac:	683a      	ldr	r2, [r7, #0]
 8000aae:	601a      	str	r2, [r3, #0]
	thread[i].threadFunc = threadTask;
 8000ab0:	4959      	ldr	r1, [pc, #356]	@ (8000c18 <addThread+0x1b8>)
 8000ab2:	697a      	ldr	r2, [r7, #20]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	4413      	add	r3, r2
 8000aba:	00db      	lsls	r3, r3, #3
 8000abc:	440b      	add	r3, r1
 8000abe:	3314      	adds	r3, #20
 8000ac0:	68ba      	ldr	r2, [r7, #8]
 8000ac2:	601a      	str	r2, [r3, #0]
	thread[i].action = STM32_THREAD_ACTION_RUNNING;
 8000ac4:	4954      	ldr	r1, [pc, #336]	@ (8000c18 <addThread+0x1b8>)
 8000ac6:	697a      	ldr	r2, [r7, #20]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	4413      	add	r3, r2
 8000ace:	00db      	lsls	r3, r3, #3
 8000ad0:	440b      	add	r3, r1
 8000ad2:	3310      	adds	r3, #16
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	701a      	strb	r2, [r3, #0]
	thread[i].argLen = argLen;
 8000ad8:	494f      	ldr	r1, [pc, #316]	@ (8000c18 <addThread+0x1b8>)
 8000ada:	697a      	ldr	r2, [r7, #20]
 8000adc:	4613      	mov	r3, r2
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	4413      	add	r3, r2
 8000ae2:	00db      	lsls	r3, r3, #3
 8000ae4:	440b      	add	r3, r1
 8000ae6:	331c      	adds	r3, #28
 8000ae8:	6a3a      	ldr	r2, [r7, #32]
 8000aea:	601a      	str	r2, [r3, #0]
	thread[i].args = args;
 8000aec:	494a      	ldr	r1, [pc, #296]	@ (8000c18 <addThread+0x1b8>)
 8000aee:	697a      	ldr	r2, [r7, #20]
 8000af0:	4613      	mov	r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	4413      	add	r3, r2
 8000af6:	00db      	lsls	r3, r3, #3
 8000af8:	440b      	add	r3, r1
 8000afa:	3320      	adds	r3, #32
 8000afc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000afe:	601a      	str	r2, [r3, #0]
	thread[i].timeTillNow = 0;
 8000b00:	4945      	ldr	r1, [pc, #276]	@ (8000c18 <addThread+0x1b8>)
 8000b02:	697a      	ldr	r2, [r7, #20]
 8000b04:	4613      	mov	r3, r2
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	4413      	add	r3, r2
 8000b0a:	00db      	lsls	r3, r3, #3
 8000b0c:	440b      	add	r3, r1
 8000b0e:	3324      	adds	r3, #36	@ 0x24
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]


	uint32_t *psp = (uint32_t*) &stack[stackLen];
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]

	// fill dummy stack frame
	*(--psp) = 0x01000000u; // Dummy xPSR, just enable Thumb State bit;
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	3b04      	subs	r3, #4
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000b2a:	601a      	str	r2, [r3, #0]
	*(--psp) = (uint32_t) threadTask; // PC
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	3b04      	subs	r3, #4
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	601a      	str	r2, [r3, #0]
	*(--psp) = 0xFFFFFFFDu; // LR with EXC_RETURN to return to Thread using PSP
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	3b04      	subs	r3, #4
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	f06f 0202 	mvn.w	r2, #2
 8000b44:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x12121212u; // Dummy R12
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	3b04      	subs	r3, #4
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 8000b52:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x03030303u; // Dummy R3
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	3b04      	subs	r3, #4
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 8000b60:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x02020202u; // Dummy R2
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	3b04      	subs	r3, #4
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 8000b6e:	601a      	str	r2, [r3, #0]
	*(--psp) = (uint32_t)args; // Dummy R1
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	3b04      	subs	r3, #4
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	601a      	str	r2, [r3, #0]
	*(--psp) = (uint32_t)argLen; // Dummy R0
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	3b04      	subs	r3, #4
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	6a3a      	ldr	r2, [r7, #32]
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	601a      	str	r2, [r3, #0]

	*(--psp) = 0x11111111u; // Dummy R11
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	3b04      	subs	r3, #4
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8000b94:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x10101010u; // Dummy R10
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	3b04      	subs	r3, #4
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 8000ba2:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x09090909u; // Dummy R9
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	3b04      	subs	r3, #4
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 8000bb0:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x08080808u; // Dummy R8
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	3b04      	subs	r3, #4
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 8000bbe:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x07070707u; // Dummy R7
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	3b04      	subs	r3, #4
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 8000bcc:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x06060606u; // Dummy R6
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	3b04      	subs	r3, #4
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 8000bda:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x05050505u; // Dummy R5
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	3b04      	subs	r3, #4
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 8000be8:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x04040404u; // Dummy R4
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	3b04      	subs	r3, #4
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 8000bf6:	601a      	str	r2, [r3, #0]
	thread[i].SP = (uint32_t) psp;
 8000bf8:	6939      	ldr	r1, [r7, #16]
 8000bfa:	4807      	ldr	r0, [pc, #28]	@ (8000c18 <addThread+0x1b8>)
 8000bfc:	697a      	ldr	r2, [r7, #20]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	4413      	add	r3, r2
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	4403      	add	r3, r0
 8000c08:	330c      	adds	r3, #12
 8000c0a:	6019      	str	r1, [r3, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	371c      	adds	r7, #28
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000134 	.word	0x20000134

08000c1c <new>:
 * @param argLen		: Length of arguments
 * @param args			: Pointer to arguments
 * @return				: ID of created thread (This ID is required for restart or delete of thread)
 * 						: -1 if MAX_THREAD limit exceeds
 */
static int new(void (*threadTask)(int argLen,void**args), uint32_t *stack, uint32_t stackLen,int argLen,void**args) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af02      	add	r7, sp, #8
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
 8000c28:	603b      	str	r3, [r7, #0]
	mutexLock = 1;
 8000c2a:	4b18      	ldr	r3, [pc, #96]	@ (8000c8c <new+0x70>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	701a      	strb	r2, [r3, #0]
	int freeIndex = 1;
 8000c30:	2301      	movs	r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
	for (; freeIndex < MAX_THREAD; freeIndex++)
 8000c34:	e00d      	b.n	8000c52 <new+0x36>
		if (thread[freeIndex].ID == 0)
 8000c36:	4916      	ldr	r1, [pc, #88]	@ (8000c90 <new+0x74>)
 8000c38:	697a      	ldr	r2, [r7, #20]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	4413      	add	r3, r2
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	440b      	add	r3, r1
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d006      	beq.n	8000c5a <new+0x3e>
	for (; freeIndex < MAX_THREAD; freeIndex++)
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	2b0a      	cmp	r3, #10
 8000c56:	ddee      	ble.n	8000c36 <new+0x1a>
 8000c58:	e000      	b.n	8000c5c <new+0x40>
			break; //empty thread found
 8000c5a:	bf00      	nop
	if (freeIndex >= MAX_THREAD)
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	2b0a      	cmp	r3, #10
 8000c60:	dd02      	ble.n	8000c68 <new+0x4c>
		return -1;
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
 8000c66:	e00d      	b.n	8000c84 <new+0x68>
	addThread(freeIndex, threadTask, stack, stackLen,argLen,args);
 8000c68:	6a3b      	ldr	r3, [r7, #32]
 8000c6a:	9301      	str	r3, [sp, #4]
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	9300      	str	r3, [sp, #0]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	68f9      	ldr	r1, [r7, #12]
 8000c76:	6978      	ldr	r0, [r7, #20]
 8000c78:	f7ff fef2 	bl	8000a60 <addThread>
	mutexLock = 0;
 8000c7c:	4b03      	ldr	r3, [pc, #12]	@ (8000c8c <new+0x70>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
	return freeIndex;
 8000c82:	697b      	ldr	r3, [r7, #20]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200002f0 	.word	0x200002f0
 8000c90:	20000134 	.word	0x20000134

08000c94 <startScheduler>:

/**
 * This starts threading
 */
static void startScheduler() {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af02      	add	r7, sp, #8
	// Adding idle thread
	addThread(0, idleThread, idleThreadStack,
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	9301      	str	r3, [sp, #4]
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	2340      	movs	r3, #64	@ 0x40
 8000ca4:	4a2f      	ldr	r2, [pc, #188]	@ (8000d64 <startScheduler+0xd0>)
 8000ca6:	4930      	ldr	r1, [pc, #192]	@ (8000d68 <startScheduler+0xd4>)
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f7ff fed9 	bl	8000a60 <addThread>
			sizeof(idleThreadStack) / sizeof(uint32_t),0,NULL);
	NVIC_SetPriority(PendSV_IRQn, 0xFF);
 8000cae:	21ff      	movs	r1, #255	@ 0xff
 8000cb0:	f06f 0001 	mvn.w	r0, #1
 8000cb4:	f7ff fe9c 	bl	80009f0 <__NVIC_SetPriority>

	currentThread = 0;
 8000cb8:	4b2c      	ldr	r3, [pc, #176]	@ (8000d6c <startScheduler+0xd8>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
	for(int i=1;i<MAX_THREAD;i++){
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	e011      	b.n	8000ce8 <startScheduler+0x54>
		if(thread[i].ID!=0){
 8000cc4:	492a      	ldr	r1, [pc, #168]	@ (8000d70 <startScheduler+0xdc>)
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	440b      	add	r3, r1
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d003      	beq.n	8000ce2 <startScheduler+0x4e>
			currentThread=i;
 8000cda:	4a24      	ldr	r2, [pc, #144]	@ (8000d6c <startScheduler+0xd8>)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	6013      	str	r3, [r2, #0]
			break;// Non empty thread found
 8000ce0:	e005      	b.n	8000cee <startScheduler+0x5a>
	for(int i=1;i<MAX_THREAD;i++){
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2b0a      	cmp	r3, #10
 8000cec:	ddea      	ble.n	8000cc4 <startScheduler+0x30>
		}
	}

	uint32_t SP = thread[currentThread].SP;
 8000cee:	4b1f      	ldr	r3, [pc, #124]	@ (8000d6c <startScheduler+0xd8>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	491f      	ldr	r1, [pc, #124]	@ (8000d70 <startScheduler+0xdc>)
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	440b      	add	r3, r1
 8000cfe:	330c      	adds	r3, #12
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	60bb      	str	r3, [r7, #8]

	__asm volatile("MOV R0, %0"::"r"(SP));
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	4618      	mov	r0, r3
	__asm volatile("MSR PSP, R0");
 8000d08:	f380 8809 	msr	PSP, r0

	//Stack to PSP
	__asm volatile(
 8000d0c:	f3ef 8014 	mrs	r0, CONTROL
 8000d10:	f040 0002 	orr.w	r0, r0, #2
 8000d14:	f380 8814 	msr	CONTROL, r0
			"ORR R0, R0, #2\n\t"
			"MSR CONTROL, r0"
	);

	//Unprivileged Mode
	__asm volatile(
 8000d18:	f3ef 8014 	mrs	r0, CONTROL
 8000d1c:	f040 0001 	orr.w	r0, r0, #1
 8000d20:	f380 8814 	msr	CONTROL, r0
			"MRS R0, CONTROL\n\t"
			"ORR R0, R0, #1\n\t"
			"MSR CONTROL, r0"
	);

	void (*task)(int argLen,void**args) = (void (*)(int argLen,void**args))((uint32_t*)SP)[14];
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	3338      	adds	r3, #56	@ 0x38
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	607b      	str	r3, [r7, #4]
	task(thread[currentThread].argLen,thread[currentThread].args);
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d6c <startScheduler+0xd8>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	490f      	ldr	r1, [pc, #60]	@ (8000d70 <startScheduler+0xdc>)
 8000d32:	4613      	mov	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	00db      	lsls	r3, r3, #3
 8000d3a:	440b      	add	r3, r1
 8000d3c:	331c      	adds	r3, #28
 8000d3e:	6818      	ldr	r0, [r3, #0]
 8000d40:	4b0a      	ldr	r3, [pc, #40]	@ (8000d6c <startScheduler+0xd8>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	490a      	ldr	r1, [pc, #40]	@ (8000d70 <startScheduler+0xdc>)
 8000d46:	4613      	mov	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	440b      	add	r3, r1
 8000d50:	3320      	adds	r3, #32
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4611      	mov	r1, r2
 8000d58:	4798      	blx	r3
}
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200002f8 	.word	0x200002f8
 8000d68:	08000a45 	.word	0x08000a45
 8000d6c:	20000004 	.word	0x20000004
 8000d70:	20000134 	.word	0x20000134

08000d74 <threadSwitching>:

static void threadSwitching() {
 8000d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af02      	add	r7, sp, #8
	//Round Robin Heuristics
	if (mutexLock || userMutexLock)
 8000d7a:	4b77      	ldr	r3, [pc, #476]	@ (8000f58 <threadSwitching+0x1e4>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	f040 80e4 	bne.w	8000f4e <threadSwitching+0x1da>
 8000d86:	4b75      	ldr	r3, [pc, #468]	@ (8000f5c <threadSwitching+0x1e8>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f040 80de 	bne.w	8000f4e <threadSwitching+0x1da>
		return;

	taskTime = HAL_GetTick()-taskTime;
 8000d92:	f000 fe57 	bl	8001a44 <HAL_GetTick>
 8000d96:	4602      	mov	r2, r0
 8000d98:	4b71      	ldr	r3, [pc, #452]	@ (8000f60 <threadSwitching+0x1ec>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	4a70      	ldr	r2, [pc, #448]	@ (8000f60 <threadSwitching+0x1ec>)
 8000da0:	6013      	str	r3, [r2, #0]
	thread[currentThread].timeTillNow+=taskTime;
 8000da2:	4b6f      	ldr	r3, [pc, #444]	@ (8000f60 <threadSwitching+0x1ec>)
 8000da4:	6819      	ldr	r1, [r3, #0]
 8000da6:	4b6f      	ldr	r3, [pc, #444]	@ (8000f64 <threadSwitching+0x1f0>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	486f      	ldr	r0, [pc, #444]	@ (8000f68 <threadSwitching+0x1f4>)
 8000dac:	4613      	mov	r3, r2
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	4413      	add	r3, r2
 8000db2:	00db      	lsls	r3, r3, #3
 8000db4:	4403      	add	r3, r0
 8000db6:	3324      	adds	r3, #36	@ 0x24
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4419      	add	r1, r3
 8000dbc:	486a      	ldr	r0, [pc, #424]	@ (8000f68 <threadSwitching+0x1f4>)
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4413      	add	r3, r2
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	4403      	add	r3, r0
 8000dc8:	3324      	adds	r3, #36	@ 0x24
 8000dca:	6019      	str	r1, [r3, #0]

	for (countThread = 0; countThread <= MAX_THREAD; countThread++) {
 8000dcc:	4b67      	ldr	r3, [pc, #412]	@ (8000f6c <threadSwitching+0x1f8>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	e0aa      	b.n	8000f2a <threadSwitching+0x1b6>
		currentThread = (currentThread + 1) % MAX_THREAD;
 8000dd4:	4b63      	ldr	r3, [pc, #396]	@ (8000f64 <threadSwitching+0x1f0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	1c59      	adds	r1, r3, #1
 8000dda:	4b65      	ldr	r3, [pc, #404]	@ (8000f70 <threadSwitching+0x1fc>)
 8000ddc:	fb83 2301 	smull	r2, r3, r3, r1
 8000de0:	105a      	asrs	r2, r3, #1
 8000de2:	17cb      	asrs	r3, r1, #31
 8000de4:	1ad2      	subs	r2, r2, r3
 8000de6:	4613      	mov	r3, r2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	4413      	add	r3, r2
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4413      	add	r3, r2
 8000df0:	1aca      	subs	r2, r1, r3
 8000df2:	4b5c      	ldr	r3, [pc, #368]	@ (8000f64 <threadSwitching+0x1f0>)
 8000df4:	601a      	str	r2, [r3, #0]
		if (thread[currentThread].ID == 0)
 8000df6:	4b5b      	ldr	r3, [pc, #364]	@ (8000f64 <threadSwitching+0x1f0>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	495b      	ldr	r1, [pc, #364]	@ (8000f68 <threadSwitching+0x1f4>)
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	4413      	add	r3, r2
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	440b      	add	r3, r1
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f000 8083 	beq.w	8000f16 <threadSwitching+0x1a2>
			continue; //Empty or idle thread

		if (HAL_GetTick() <= thread[currentThread].waitTill)
 8000e10:	f000 fe18 	bl	8001a44 <HAL_GetTick>
 8000e14:	4601      	mov	r1, r0
 8000e16:	4b53      	ldr	r3, [pc, #332]	@ (8000f64 <threadSwitching+0x1f0>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	4853      	ldr	r0, [pc, #332]	@ (8000f68 <threadSwitching+0x1f4>)
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	4413      	add	r3, r2
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	4403      	add	r3, r0
 8000e26:	3318      	adds	r3, #24
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	d975      	bls.n	8000f1a <threadSwitching+0x1a6>
			continue; //Delay has been executing

		if (thread[currentThread].action == STM32_THREAD_ACTION_DELETE) {
 8000e2e:	4b4d      	ldr	r3, [pc, #308]	@ (8000f64 <threadSwitching+0x1f0>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	494d      	ldr	r1, [pc, #308]	@ (8000f68 <threadSwitching+0x1f4>)
 8000e34:	4613      	mov	r3, r2
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	4413      	add	r3, r2
 8000e3a:	00db      	lsls	r3, r3, #3
 8000e3c:	440b      	add	r3, r1
 8000e3e:	3310      	adds	r3, #16
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d10a      	bne.n	8000e5e <threadSwitching+0xea>
			thread[currentThread].ID = 0;
 8000e48:	4b46      	ldr	r3, [pc, #280]	@ (8000f64 <threadSwitching+0x1f0>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4946      	ldr	r1, [pc, #280]	@ (8000f68 <threadSwitching+0x1f4>)
 8000e4e:	4613      	mov	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	00db      	lsls	r3, r3, #3
 8000e56:	440b      	add	r3, r1
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
			continue;
 8000e5c:	e060      	b.n	8000f20 <threadSwitching+0x1ac>
		} else if (thread[currentThread].action
 8000e5e:	4b41      	ldr	r3, [pc, #260]	@ (8000f64 <threadSwitching+0x1f0>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	4941      	ldr	r1, [pc, #260]	@ (8000f68 <threadSwitching+0x1f4>)
 8000e64:	4613      	mov	r3, r2
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	4413      	add	r3, r2
 8000e6a:	00db      	lsls	r3, r3, #3
 8000e6c:	440b      	add	r3, r1
 8000e6e:	3310      	adds	r3, #16
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	d13d      	bne.n	8000ef4 <threadSwitching+0x180>
				== STM32_THREAD_ACTION_RESTART) {
			addThread(currentThread, thread[currentThread].threadFunc,
 8000e78:	4b3a      	ldr	r3, [pc, #232]	@ (8000f64 <threadSwitching+0x1f0>)
 8000e7a:	6818      	ldr	r0, [r3, #0]
 8000e7c:	4b39      	ldr	r3, [pc, #228]	@ (8000f64 <threadSwitching+0x1f0>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4939      	ldr	r1, [pc, #228]	@ (8000f68 <threadSwitching+0x1f4>)
 8000e82:	4613      	mov	r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	4413      	add	r3, r2
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	440b      	add	r3, r1
 8000e8c:	3314      	adds	r3, #20
 8000e8e:	681c      	ldr	r4, [r3, #0]
 8000e90:	4b34      	ldr	r3, [pc, #208]	@ (8000f64 <threadSwitching+0x1f0>)
 8000e92:	681a      	ldr	r2, [r3, #0]
					thread[currentThread].stack,
 8000e94:	4934      	ldr	r1, [pc, #208]	@ (8000f68 <threadSwitching+0x1f4>)
 8000e96:	4613      	mov	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	440b      	add	r3, r1
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	681d      	ldr	r5, [r3, #0]
			addThread(currentThread, thread[currentThread].threadFunc,
 8000ea4:	4b2f      	ldr	r3, [pc, #188]	@ (8000f64 <threadSwitching+0x1f0>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
					thread[currentThread].stackLen,thread[currentThread].argLen,thread[currentThread].args);
 8000ea8:	492f      	ldr	r1, [pc, #188]	@ (8000f68 <threadSwitching+0x1f4>)
 8000eaa:	4613      	mov	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	4413      	add	r3, r2
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	440b      	add	r3, r1
 8000eb4:	3308      	adds	r3, #8
 8000eb6:	681e      	ldr	r6, [r3, #0]
			addThread(currentThread, thread[currentThread].threadFunc,
 8000eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8000f64 <threadSwitching+0x1f0>)
 8000eba:	681a      	ldr	r2, [r3, #0]
					thread[currentThread].stackLen,thread[currentThread].argLen,thread[currentThread].args);
 8000ebc:	492a      	ldr	r1, [pc, #168]	@ (8000f68 <threadSwitching+0x1f4>)
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	440b      	add	r3, r1
 8000ec8:	331c      	adds	r3, #28
 8000eca:	6819      	ldr	r1, [r3, #0]
			addThread(currentThread, thread[currentThread].threadFunc,
 8000ecc:	4b25      	ldr	r3, [pc, #148]	@ (8000f64 <threadSwitching+0x1f0>)
 8000ece:	681a      	ldr	r2, [r3, #0]
					thread[currentThread].stackLen,thread[currentThread].argLen,thread[currentThread].args);
 8000ed0:	4b25      	ldr	r3, [pc, #148]	@ (8000f68 <threadSwitching+0x1f4>)
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	4413      	add	r3, r2
 8000ee0:	3320      	adds	r3, #32
 8000ee2:	681b      	ldr	r3, [r3, #0]
			addThread(currentThread, thread[currentThread].threadFunc,
 8000ee4:	9301      	str	r3, [sp, #4]
 8000ee6:	9100      	str	r1, [sp, #0]
 8000ee8:	4633      	mov	r3, r6
 8000eea:	462a      	mov	r2, r5
 8000eec:	4621      	mov	r1, r4
 8000eee:	f7ff fdb7 	bl	8000a60 <addThread>
 8000ef2:	e00c      	b.n	8000f0e <threadSwitching+0x19a>
		} else if (thread[currentThread].action == STM32_THREAD_ACTION_BLOCK) {
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f64 <threadSwitching+0x1f0>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	491b      	ldr	r1, [pc, #108]	@ (8000f68 <threadSwitching+0x1f4>)
 8000efa:	4613      	mov	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	440b      	add	r3, r1
 8000f04:	3310      	adds	r3, #16
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d007      	beq.n	8000f1e <threadSwitching+0x1aa>
			continue;
		}

		countThread = 0;
 8000f0e:	4b17      	ldr	r3, [pc, #92]	@ (8000f6c <threadSwitching+0x1f8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
		break;
 8000f14:	e00e      	b.n	8000f34 <threadSwitching+0x1c0>
			continue; //Empty or idle thread
 8000f16:	bf00      	nop
 8000f18:	e002      	b.n	8000f20 <threadSwitching+0x1ac>
			continue; //Delay has been executing
 8000f1a:	bf00      	nop
 8000f1c:	e000      	b.n	8000f20 <threadSwitching+0x1ac>
			continue;
 8000f1e:	bf00      	nop
	for (countThread = 0; countThread <= MAX_THREAD; countThread++) {
 8000f20:	4b12      	ldr	r3, [pc, #72]	@ (8000f6c <threadSwitching+0x1f8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	3301      	adds	r3, #1
 8000f26:	4a11      	ldr	r2, [pc, #68]	@ (8000f6c <threadSwitching+0x1f8>)
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	4b10      	ldr	r3, [pc, #64]	@ (8000f6c <threadSwitching+0x1f8>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b0b      	cmp	r3, #11
 8000f30:	f77f af50 	ble.w	8000dd4 <threadSwitching+0x60>
	}

	if (countThread > 0) {
 8000f34:	4b0d      	ldr	r3, [pc, #52]	@ (8000f6c <threadSwitching+0x1f8>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	dd02      	ble.n	8000f42 <threadSwitching+0x1ce>
		//No thread remaining so assign idle
		currentThread = 0;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	@ (8000f64 <threadSwitching+0x1f0>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
	}
	taskTime = HAL_GetTick();
 8000f42:	f000 fd7f 	bl	8001a44 <HAL_GetTick>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4a05      	ldr	r2, [pc, #20]	@ (8000f60 <threadSwitching+0x1ec>)
 8000f4a:	6013      	str	r3, [r2, #0]
 8000f4c:	e000      	b.n	8000f50 <threadSwitching+0x1dc>
		return;
 8000f4e:	bf00      	nop
}
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200002f0 	.word	0x200002f0
 8000f5c:	200002f1 	.word	0x200002f1
 8000f60:	200002f4 	.word	0x200002f4
 8000f64:	20000004 	.word	0x20000004
 8000f68:	20000134 	.word	0x20000134
 8000f6c:	200002ec 	.word	0x200002ec
 8000f70:	2e8ba2e9 	.word	0x2e8ba2e9

08000f74 <threadSysTickHandler>:

/**
 * This should be called in SysTick_Handler
 */
void threadSysTickHandler() {
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
	if (currentThread >= 0)
 8000f78:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <threadSysTickHandler+0x20>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	db05      	blt.n	8000f8c <threadSysTickHandler+0x18>
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000f80:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <threadSysTickHandler+0x24>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	4a04      	ldr	r2, [pc, #16]	@ (8000f98 <threadSysTickHandler+0x24>)
 8000f86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f8a:	6053      	str	r3, [r2, #4]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	20000004 	.word	0x20000004
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <threadPendSVHandler>:

/**
 * This should be called in PendSV_Handler
 */
__attribute__((naked)) void threadPendSVHandler() {
	__asm volatile("POP {R7,LR}");
 8000f9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}

	//Making this function as if __attribute__((naked))
	__asm volatile("PUSH {LR}");
 8000fa0:	b500      	push	{lr}

	/* Save the context of current task */

	// get current PSP
	__asm volatile("MRS R0, PSP");
 8000fa2:	f3ef 8009 	mrs	r0, PSP
	// save R4 to R11 to PSP Frame Stack
	__asm volatile("STMDB R0!, {R4-R11}");
 8000fa6:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	// save current value of PSP
	__asm volatile("MOV %0, R0":"=r"(thread[currentThread].SP));
 8000faa:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <threadPendSVHandler+0x50>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	4601      	mov	r1, r0
 8000fb0:	480f      	ldr	r0, [pc, #60]	@ (8000ff0 <threadPendSVHandler+0x54>)
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	4403      	add	r3, r0
 8000fbc:	330c      	adds	r3, #12
 8000fbe:	6019      	str	r1, [r3, #0]

	/* Scheduling */
	threadSwitching();
 8000fc0:	f7ff fed8 	bl	8000d74 <threadSwitching>

	/* Retrieve the context of next task */

	// get its past PSP value
	__asm volatile("MOV R0, %0"::"r"(thread[currentThread].SP));
 8000fc4:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <threadPendSVHandler+0x50>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4909      	ldr	r1, [pc, #36]	@ (8000ff0 <threadPendSVHandler+0x54>)
 8000fca:	4613      	mov	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	440b      	add	r3, r1
 8000fd4:	330c      	adds	r3, #12
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
	// retrieve R4-R11 from PSP Fram Stack
	__asm volatile("LDMIA R0!, {R4-R11}");
 8000fda:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	// update PSP
	__asm volatile("MSR PSP, R0");
 8000fde:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}");
 8000fe2:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("NOP");
 8000fe6:	bf00      	nop
	__asm volatile("BX LR");
 8000fe8:	4770      	bx	lr
}
 8000fea:	bf00      	nop
 8000fec:	20000004 	.word	0x20000004
 8000ff0:	20000134 	.word	0x20000134

08000ff4 <reschedule>:

static void reschedule(){
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
	__asm volatile("SVC #0");
 8000ff8:	df00      	svc	0
}
 8000ffa:	bf00      	nop
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
	...

08001004 <threadSVCHandler>:

/**
 * This should be called in SVC_Handler
 */
void threadSVCHandler(){
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
	if (currentThread >= 0)
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <threadSVCHandler+0x20>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	db05      	blt.n	800101c <threadSVCHandler+0x18>
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8001010:	4b05      	ldr	r3, [pc, #20]	@ (8001028 <threadSVCHandler+0x24>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	4a04      	ldr	r2, [pc, #16]	@ (8001028 <threadSVCHandler+0x24>)
 8001016:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800101a:	6053      	str	r3, [r2, #4]
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	20000004 	.word	0x20000004
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <threadDelete>:
/**
 * This deletes this thread
 * @param threadID 	: ID of thread to be deleted
 * 					: 0 for self delete
 */
static void threadDelete(int threadID) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	mutexLock = 1;
 8001034:	4b15      	ldr	r3, [pc, #84]	@ (800108c <threadDelete+0x60>)
 8001036:	2201      	movs	r2, #1
 8001038:	701a      	strb	r2, [r3, #0]

	if(threadID==0)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d102      	bne.n	8001046 <threadDelete+0x1a>
		threadID = currentThread;
 8001040:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <threadDelete+0x64>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	607b      	str	r3, [r7, #4]

	if (threadID > 0 && threadID<MAX_THREAD)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	dd0c      	ble.n	8001066 <threadDelete+0x3a>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b0a      	cmp	r3, #10
 8001050:	dc09      	bgt.n	8001066 <threadDelete+0x3a>
		thread[threadID].action = STM32_THREAD_ACTION_DELETE;
 8001052:	4910      	ldr	r1, [pc, #64]	@ (8001094 <threadDelete+0x68>)
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	4613      	mov	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4413      	add	r3, r2
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	440b      	add	r3, r1
 8001060:	3310      	adds	r3, #16
 8001062:	2202      	movs	r2, #2
 8001064:	701a      	strb	r2, [r3, #0]
	mutexLock = 0;
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <threadDelete+0x60>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
	if (threadID == 0 && threadID != currentThread)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d104      	bne.n	800107c <threadDelete+0x50>
 8001072:	4b07      	ldr	r3, [pc, #28]	@ (8001090 <threadDelete+0x64>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	429a      	cmp	r2, r3
 800107a:	d102      	bne.n	8001082 <threadDelete+0x56>
		return;
	reschedule();
 800107c:	f7ff ffba 	bl	8000ff4 <reschedule>
 8001080:	e000      	b.n	8001084 <threadDelete+0x58>
		return;
 8001082:	bf00      	nop
}
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200002f0 	.word	0x200002f0
 8001090:	20000004 	.word	0x20000004
 8001094:	20000134 	.word	0x20000134

08001098 <threadRestart>:
/**
 * This restarts this thread
 * @param threadID 	: ID of thread to be restarted
 * 					: 0 for self restart
 */
static void threadRestart(int threadID) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	mutexLock = 1;
 80010a0:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <threadRestart+0x60>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	701a      	strb	r2, [r3, #0]
	if(threadID==0)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <threadRestart+0x1a>
		threadID = currentThread;
 80010ac:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <threadRestart+0x64>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	607b      	str	r3, [r7, #4]
	if (threadID > 0 && threadID<MAX_THREAD)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	dd0c      	ble.n	80010d2 <threadRestart+0x3a>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b0a      	cmp	r3, #10
 80010bc:	dc09      	bgt.n	80010d2 <threadRestart+0x3a>
		thread[threadID].action = STM32_THREAD_ACTION_RESTART;
 80010be:	4910      	ldr	r1, [pc, #64]	@ (8001100 <threadRestart+0x68>)
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	4613      	mov	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	440b      	add	r3, r1
 80010cc:	3310      	adds	r3, #16
 80010ce:	2203      	movs	r2, #3
 80010d0:	701a      	strb	r2, [r3, #0]
	mutexLock = 0;
 80010d2:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <threadRestart+0x60>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
	if (threadID == 0 && threadID != currentThread)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d104      	bne.n	80010e8 <threadRestart+0x50>
 80010de:	4b07      	ldr	r3, [pc, #28]	@ (80010fc <threadRestart+0x64>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d102      	bne.n	80010ee <threadRestart+0x56>
		return;
	reschedule();
 80010e8:	f7ff ff84 	bl	8000ff4 <reschedule>
 80010ec:	e000      	b.n	80010f0 <threadRestart+0x58>
		return;
 80010ee:	bf00      	nop
}
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200002f0 	.word	0x200002f0
 80010fc:	20000004 	.word	0x20000004
 8001100:	20000134 	.word	0x20000134

08001104 <threadBlock>:
/**
 * This blocks this thread
 * @param threadID  : ID of thread to be blocked
 * 					: 0 for self block
 */
static void threadBlock(int threadID) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	mutexLock = 1;
 800110c:	4b15      	ldr	r3, [pc, #84]	@ (8001164 <threadBlock+0x60>)
 800110e:	2201      	movs	r2, #1
 8001110:	701a      	strb	r2, [r3, #0]
	if(threadID==0)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d102      	bne.n	800111e <threadBlock+0x1a>
		threadID = currentThread;
 8001118:	4b13      	ldr	r3, [pc, #76]	@ (8001168 <threadBlock+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	607b      	str	r3, [r7, #4]
	if (threadID > 0 && threadID<MAX_THREAD)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	dd0c      	ble.n	800113e <threadBlock+0x3a>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b0a      	cmp	r3, #10
 8001128:	dc09      	bgt.n	800113e <threadBlock+0x3a>
		thread[threadID].action = STM32_THREAD_ACTION_BLOCK;
 800112a:	4910      	ldr	r1, [pc, #64]	@ (800116c <threadBlock+0x68>)
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	4613      	mov	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	440b      	add	r3, r1
 8001138:	3310      	adds	r3, #16
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
	mutexLock = 0;
 800113e:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <threadBlock+0x60>)
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
	if (threadID == 0 && threadID != currentThread)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d104      	bne.n	8001154 <threadBlock+0x50>
 800114a:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <threadBlock+0x64>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	429a      	cmp	r2, r3
 8001152:	d102      	bne.n	800115a <threadBlock+0x56>
		return;
	reschedule();
 8001154:	f7ff ff4e 	bl	8000ff4 <reschedule>
 8001158:	e000      	b.n	800115c <threadBlock+0x58>
		return;
 800115a:	bf00      	nop
}
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200002f0 	.word	0x200002f0
 8001168:	20000004 	.word	0x20000004
 800116c:	20000134 	.word	0x20000134

08001170 <threadUnblock>:

/**
 * This unblocks this thread
 * @param threadID  : ID of thread to be unblocked
 */
static void threadUnblock(int threadID) {
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	mutexLock = 1;
 8001178:	4b0d      	ldr	r3, [pc, #52]	@ (80011b0 <threadUnblock+0x40>)
 800117a:	2201      	movs	r2, #1
 800117c:	701a      	strb	r2, [r3, #0]
	if (threadID > 0 && threadID<MAX_THREAD)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	dd0c      	ble.n	800119e <threadUnblock+0x2e>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b0a      	cmp	r3, #10
 8001188:	dc09      	bgt.n	800119e <threadUnblock+0x2e>
		thread[threadID].action = STM32_THREAD_ACTION_RUNNING;
 800118a:	490a      	ldr	r1, [pc, #40]	@ (80011b4 <threadUnblock+0x44>)
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	4613      	mov	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	440b      	add	r3, r1
 8001198:	3310      	adds	r3, #16
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
	mutexLock = 0;
 800119e:	4b04      	ldr	r3, [pc, #16]	@ (80011b0 <threadUnblock+0x40>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	200002f0 	.word	0x200002f0
 80011b4:	20000134 	.word	0x20000134

080011b8 <threadDelay>:

/**
 * This is delay for thread which do not comsume clock cycle
 * @param millis	 : duration for delay in millis
 */
static void threadDelay(uint32_t millis) {
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	mutexLock = 1;
 80011c0:	4b19      	ldr	r3, [pc, #100]	@ (8001228 <threadDelay+0x70>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	701a      	strb	r2, [r3, #0]
	if (currentThread > 0 && currentThread<MAX_THREAD)
 80011c6:	4b19      	ldr	r3, [pc, #100]	@ (800122c <threadDelay+0x74>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	dd12      	ble.n	80011f4 <threadDelay+0x3c>
 80011ce:	4b17      	ldr	r3, [pc, #92]	@ (800122c <threadDelay+0x74>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b0a      	cmp	r3, #10
 80011d4:	dc0e      	bgt.n	80011f4 <threadDelay+0x3c>
		thread[currentThread].waitTill = HAL_GetTick() + millis;
 80011d6:	f000 fc35 	bl	8001a44 <HAL_GetTick>
 80011da:	4601      	mov	r1, r0
 80011dc:	4b13      	ldr	r3, [pc, #76]	@ (800122c <threadDelay+0x74>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4419      	add	r1, r3
 80011e4:	4812      	ldr	r0, [pc, #72]	@ (8001230 <threadDelay+0x78>)
 80011e6:	4613      	mov	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	4403      	add	r3, r0
 80011f0:	3318      	adds	r3, #24
 80011f2:	6019      	str	r1, [r3, #0]
	mutexLock = 0;
 80011f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <threadDelay+0x70>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
	reschedule();
 80011fa:	f7ff fefb 	bl	8000ff4 <reschedule>
	while(thread[currentThread].waitTill>HAL_GetTick()){
 80011fe:	bf00      	nop
 8001200:	4b0a      	ldr	r3, [pc, #40]	@ (800122c <threadDelay+0x74>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	490a      	ldr	r1, [pc, #40]	@ (8001230 <threadDelay+0x78>)
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	440b      	add	r3, r1
 8001210:	3318      	adds	r3, #24
 8001212:	681c      	ldr	r4, [r3, #0]
 8001214:	f000 fc16 	bl	8001a44 <HAL_GetTick>
 8001218:	4603      	mov	r3, r0
 800121a:	429c      	cmp	r4, r3
 800121c:	d8f0      	bhi.n	8001200 <threadDelay+0x48>

	}
}
 800121e:	bf00      	nop
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	bd90      	pop	{r4, r7, pc}
 8001228:	200002f0 	.word	0x200002f0
 800122c:	20000004 	.word	0x20000004
 8001230:	20000134 	.word	0x20000134

08001234 <threadPrint>:

/**
 * This is printf for thread which prints completely this text
 */
static void threadPrint(const char *msg, ...) {
 8001234:	b40f      	push	{r0, r1, r2, r3}
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
	mutexLock = 1;
 800123c:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <threadPrint+0x30>)
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
	va_list args;
	va_start(args, msg);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	607b      	str	r3, [r7, #4]
	vprintf(msg, args);
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	6938      	ldr	r0, [r7, #16]
 800124c:	f001 fdee 	bl	8002e2c <viprintf>
	va_end(args);
	mutexLock = 0;
 8001250:	4b04      	ldr	r3, [pc, #16]	@ (8001264 <threadPrint+0x30>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001260:	b004      	add	sp, #16
 8001262:	4770      	bx	lr
 8001264:	200002f0 	.word	0x200002f0

08001268 <threadMutexLock>:

/**
 * This blocks all thread except current thread (this thread)
 */
static void threadMutexLock(){
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
	userMutexLock = 1;
 800126c:	4b03      	ldr	r3, [pc, #12]	@ (800127c <threadMutexLock+0x14>)
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	200002f1 	.word	0x200002f1

08001280 <threadMutexUnlock>:

/**
 * This unlocks mutex lock
 */
static void threadMutexUnlock(){
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
	userMutexLock = 0;
 8001284:	4b03      	ldr	r3, [pc, #12]	@ (8001294 <threadMutexUnlock+0x14>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	200002f1 	.word	0x200002f1

08001298 <threadTakeBinarySemaphore>:

/**
 * This blocks this thread unless other thread give binary semaphore for this thread
 * @param threadIDptr	: binary semaphore ID which is also thread ID of this thread
 */
static void threadTakeBinarySemaphore(int *threadIDptr){
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	mutexLock = 1;
 80012a0:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <threadTakeBinarySemaphore+0x54>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	701a      	strb	r2, [r3, #0]
	if(threadIDptr!=NULL && (currentThread>0 && currentThread<MAX_THREAD)){
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d016      	beq.n	80012da <threadTakeBinarySemaphore+0x42>
 80012ac:	4b10      	ldr	r3, [pc, #64]	@ (80012f0 <threadTakeBinarySemaphore+0x58>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	dd12      	ble.n	80012da <threadTakeBinarySemaphore+0x42>
 80012b4:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <threadTakeBinarySemaphore+0x58>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b0a      	cmp	r3, #10
 80012ba:	dc0e      	bgt.n	80012da <threadTakeBinarySemaphore+0x42>
		*threadIDptr = currentThread;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <threadTakeBinarySemaphore+0x58>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	601a      	str	r2, [r3, #0]
		thread[currentThread].action = STM32_THREAD_ACTION_BLOCK;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <threadTakeBinarySemaphore+0x58>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	490a      	ldr	r1, [pc, #40]	@ (80012f4 <threadTakeBinarySemaphore+0x5c>)
 80012ca:	4613      	mov	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	440b      	add	r3, r1
 80012d4:	3310      	adds	r3, #16
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
	}
	mutexLock = 0;
 80012da:	4b04      	ldr	r3, [pc, #16]	@ (80012ec <threadTakeBinarySemaphore+0x54>)
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
	reschedule();
 80012e0:	f7ff fe88 	bl	8000ff4 <reschedule>
}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200002f0 	.word	0x200002f0
 80012f0:	20000004 	.word	0x20000004
 80012f4:	20000134 	.word	0x20000134

080012f8 <threadGiveBinarySemaphore>:

/**
 * This blocks this thread corresponding to this threadID
 * @param threadID	: binary semaphore ID which is also thread ID of this thread to be unblocked
 */
static void threadGiveBinarySemaphore(int threadID){
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	mutexLock = 1;
 8001300:	4b0d      	ldr	r3, [pc, #52]	@ (8001338 <threadGiveBinarySemaphore+0x40>)
 8001302:	2201      	movs	r2, #1
 8001304:	701a      	strb	r2, [r3, #0]
	if(threadID>0 && threadID<MAX_THREAD)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	dd0c      	ble.n	8001326 <threadGiveBinarySemaphore+0x2e>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b0a      	cmp	r3, #10
 8001310:	dc09      	bgt.n	8001326 <threadGiveBinarySemaphore+0x2e>
		thread[threadID].action = STM32_THREAD_ACTION_RUNNING;
 8001312:	490a      	ldr	r1, [pc, #40]	@ (800133c <threadGiveBinarySemaphore+0x44>)
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	4613      	mov	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	440b      	add	r3, r1
 8001320:	3310      	adds	r3, #16
 8001322:	2201      	movs	r2, #1
 8001324:	701a      	strb	r2, [r3, #0]
	mutexLock = 0;
 8001326:	4b04      	ldr	r3, [pc, #16]	@ (8001338 <threadGiveBinarySemaphore+0x40>)
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	200002f0 	.word	0x200002f0
 800133c:	20000134 	.word	0x20000134

08001340 <cpuUtilization>:

/**
 * It gives the CPU utilization factor (0~1)
 */
static float cpuUtilization(){
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
	mutexLock = 1;
 8001346:	4b22      	ldr	r3, [pc, #136]	@ (80013d0 <cpuUtilization+0x90>)
 8001348:	2201      	movs	r2, #1
 800134a:	701a      	strb	r2, [r3, #0]
	uint32_t totalTime = thread[0].timeTillNow;
 800134c:	4b21      	ldr	r3, [pc, #132]	@ (80013d4 <cpuUtilization+0x94>)
 800134e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001350:	60fb      	str	r3, [r7, #12]
	for(int i=1;i<MAX_THREAD;i++){
 8001352:	2301      	movs	r3, #1
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	e019      	b.n	800138c <cpuUtilization+0x4c>
		if(thread[i].ID!=0){
 8001358:	491e      	ldr	r1, [pc, #120]	@ (80013d4 <cpuUtilization+0x94>)
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	4613      	mov	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	440b      	add	r3, r1
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00b      	beq.n	8001386 <cpuUtilization+0x46>
			totalTime+=thread[i].timeTillNow;
 800136e:	4919      	ldr	r1, [pc, #100]	@ (80013d4 <cpuUtilization+0x94>)
 8001370:	68ba      	ldr	r2, [r7, #8]
 8001372:	4613      	mov	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	440b      	add	r3, r1
 800137c:	3324      	adds	r3, #36	@ 0x24
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	4413      	add	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]
	for(int i=1;i<MAX_THREAD;i++){
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	3301      	adds	r3, #1
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	2b0a      	cmp	r3, #10
 8001390:	dde2      	ble.n	8001358 <cpuUtilization+0x18>
		}
	}
	float uf = 1- (float)thread[0].timeTillNow/(float)totalTime;
 8001392:	4b10      	ldr	r3, [pc, #64]	@ (80013d4 <cpuUtilization+0x94>)
 8001394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001396:	4618      	mov	r0, r3
 8001398:	f7fe ff8e 	bl	80002b8 <__aeabi_ui2f>
 800139c:	4604      	mov	r4, r0
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	f7fe ff8a 	bl	80002b8 <__aeabi_ui2f>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4619      	mov	r1, r3
 80013a8:	4620      	mov	r0, r4
 80013aa:	f7ff f891 	bl	80004d0 <__aeabi_fdiv>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4619      	mov	r1, r3
 80013b2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80013b6:	f7fe fecd 	bl	8000154 <__aeabi_fsub>
 80013ba:	4603      	mov	r3, r0
 80013bc:	607b      	str	r3, [r7, #4]
	mutexLock = 0;
 80013be:	4b04      	ldr	r3, [pc, #16]	@ (80013d0 <cpuUtilization+0x90>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
	return uf;
 80013c4:	687b      	ldr	r3, [r7, #4]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd90      	pop	{r4, r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200002f0 	.word	0x200002f0
 80013d4:	20000134 	.word	0x20000134

080013d8 <stackUtilization>:
 * @param threadID 	: ID of thread
 * 					: 0 for self stack utilization
 * return			: stack utilization factor (0~1)
 * 					: -1 if threadID doesn't exist
 */
static float stackUtilization(int threadID){
 80013d8:	b5b0      	push	{r4, r5, r7, lr}
 80013da:	b090      	sub	sp, #64	@ 0x40
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	mutexLock = 1;
 80013e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001494 <stackUtilization+0xbc>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	701a      	strb	r2, [r3, #0]
	if(threadID==0)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d102      	bne.n	80013f2 <stackUtilization+0x1a>
		threadID = currentThread;
 80013ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001498 <stackUtilization+0xc0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	607b      	str	r3, [r7, #4]
	if(threadID>=MAX_THREAD){
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b0a      	cmp	r3, #10
 80013f6:	dd04      	ble.n	8001402 <stackUtilization+0x2a>
		mutexLock = 0;
 80013f8:	4b26      	ldr	r3, [pc, #152]	@ (8001494 <stackUtilization+0xbc>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
		return -1.0;
 80013fe:	4b27      	ldr	r3, [pc, #156]	@ (800149c <stackUtilization+0xc4>)
 8001400:	e043      	b.n	800148a <stackUtilization+0xb2>
	}
	STM32Thread t = thread[threadID];
 8001402:	4927      	ldr	r1, [pc, #156]	@ (80014a0 <stackUtilization+0xc8>)
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	4613      	mov	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	440b      	add	r3, r1
 8001410:	f107 040c 	add.w	r4, r7, #12
 8001414:	461d      	mov	r5, r3
 8001416:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001418:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800141a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800141c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800141e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001422:	e884 0003 	stmia.w	r4, {r0, r1}
	if(t.ID==0){
 8001426:	7b3b      	ldrb	r3, [r7, #12]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d104      	bne.n	8001436 <stackUtilization+0x5e>
		mutexLock = 0;
 800142c:	4b19      	ldr	r3, [pc, #100]	@ (8001494 <stackUtilization+0xbc>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
		return -1.0;
 8001432:	4b1a      	ldr	r3, [pc, #104]	@ (800149c <stackUtilization+0xc4>)
 8001434:	e029      	b.n	800148a <stackUtilization+0xb2>
	}
	int peakLen;
	for(int i=0;i<t.stackLen;i++){
 8001436:	2300      	movs	r3, #0
 8001438:	63bb      	str	r3, [r7, #56]	@ 0x38
 800143a:	e00f      	b.n	800145c <stackUtilization+0x84>
		if(t.stack[i]==0)
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d004      	beq.n	8001454 <stackUtilization+0x7c>
			continue;
		peakLen = t.stackLen-i;
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	63fb      	str	r3, [r7, #60]	@ 0x3c
		break;
 8001452:	e007      	b.n	8001464 <stackUtilization+0x8c>
			continue;
 8001454:	bf00      	nop
	for(int i=0;i<t.stackLen;i++){
 8001456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001458:	3301      	adds	r3, #1
 800145a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800145c:	697a      	ldr	r2, [r7, #20]
 800145e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001460:	429a      	cmp	r2, r3
 8001462:	d8eb      	bhi.n	800143c <stackUtilization+0x64>
	}
	float uf = (float)peakLen/(float)t.stackLen;
 8001464:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001466:	f7fe ff2b 	bl	80002c0 <__aeabi_i2f>
 800146a:	4604      	mov	r4, r0
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	4618      	mov	r0, r3
 8001470:	f7fe ff22 	bl	80002b8 <__aeabi_ui2f>
 8001474:	4603      	mov	r3, r0
 8001476:	4619      	mov	r1, r3
 8001478:	4620      	mov	r0, r4
 800147a:	f7ff f829 	bl	80004d0 <__aeabi_fdiv>
 800147e:	4603      	mov	r3, r0
 8001480:	637b      	str	r3, [r7, #52]	@ 0x34
	mutexLock = 0;
 8001482:	4b04      	ldr	r3, [pc, #16]	@ (8001494 <stackUtilization+0xbc>)
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]
	return uf;
 8001488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800148a:	4618      	mov	r0, r3
 800148c:	3740      	adds	r7, #64	@ 0x40
 800148e:	46bd      	mov	sp, r7
 8001490:	bdb0      	pop	{r4, r5, r7, pc}
 8001492:	bf00      	nop
 8001494:	200002f0 	.word	0x200002f0
 8001498:	20000004 	.word	0x20000004
 800149c:	bf800000 	.word	0xbf800000
 80014a0:	20000134 	.word	0x20000134

080014a4 <spin>:

/**
 * It is should be called during waiting in while loop
 */
static void spin(){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	reschedule();
 80014a8:	f7ff fda4 	bl	8000ff4 <reschedule>
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <synchronise>:
 * 		StaticThread.synchronise(&flag);
 * 		// Do stuff
 * 		flag = 0;
 * 	}
 */
static void synchronise(int *flag){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	while((*flag)!=0) StaticThread.spin();
 80014b8:	e002      	b.n	80014c0 <synchronise+0x10>
 80014ba:	4b07      	ldr	r3, [pc, #28]	@ (80014d8 <synchronise+0x28>)
 80014bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014be:	4798      	blx	r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1f8      	bne.n	80014ba <synchronise+0xa>
	*flag = 1;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	601a      	str	r2, [r3, #0]
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000008 	.word	0x20000008

080014dc <printStack>:
 * 				   		: 0 for hardfault causing thread
 * 				   		: -1 for print all thread stack of nonempty task
 * @param isFromHandler : 1 for calling from handler
 * 						: 0 for calling from thread
 */
static void printStack(int threadID,int isFromHandler){
 80014dc:	b5b0      	push	{r4, r5, r7, lr}
 80014de:	b094      	sub	sp, #80	@ 0x50
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
	if(threadID>=MAX_THREAD || threadID<-1){
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b0a      	cmp	r3, #10
 80014ea:	dc03      	bgt.n	80014f4 <printStack+0x18>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f2:	da03      	bge.n	80014fc <printStack+0x20>
		printf("Thread ID doesn't exist\n");
 80014f4:	485f      	ldr	r0, [pc, #380]	@ (8001674 <printStack+0x198>)
 80014f6:	f001 fc4d 	bl	8002d94 <puts>
		return;
 80014fa:	e0b8      	b.n	800166e <printStack+0x192>
	}
	if(threadID!=0 && thread[threadID].ID==0){
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00e      	beq.n	8001520 <printStack+0x44>
 8001502:	495d      	ldr	r1, [pc, #372]	@ (8001678 <printStack+0x19c>)
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	4613      	mov	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	440b      	add	r3, r1
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d103      	bne.n	8001520 <printStack+0x44>
		printf("Empty thread\n");
 8001518:	4858      	ldr	r0, [pc, #352]	@ (800167c <printStack+0x1a0>)
 800151a:	f001 fc3b 	bl	8002d94 <puts>
		return;
 800151e:	e0a6      	b.n	800166e <printStack+0x192>
	}
	int ID = threadID;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if(threadID==0 || threadID==-1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <printStack+0x56>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001530:	d102      	bne.n	8001538 <printStack+0x5c>
		ID = currentThread;
 8001532:	4b53      	ldr	r3, [pc, #332]	@ (8001680 <printStack+0x1a4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	64fb      	str	r3, [r7, #76]	@ 0x4c

	uint32_t PSP = thread[threadID].SP;
 8001538:	494f      	ldr	r1, [pc, #316]	@ (8001678 <printStack+0x19c>)
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	4613      	mov	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	440b      	add	r3, r1
 8001546:	330c      	adds	r3, #12
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	64bb      	str	r3, [r7, #72]	@ 0x48
	if(isFromHandler){
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <printStack+0x7e>
		__asm volatile("MRS R0, PSP");
 8001552:	f3ef 8009 	mrs	r0, PSP
		__asm volatile("MOV %0,R0":"=r"(PSP));
 8001556:	4603      	mov	r3, r0
 8001558:	64bb      	str	r3, [r7, #72]	@ 0x48
	}

	STM32Thread t = thread[ID];
 800155a:	4947      	ldr	r1, [pc, #284]	@ (8001678 <printStack+0x19c>)
 800155c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	440b      	add	r3, r1
 8001568:	f107 040c 	add.w	r4, r7, #12
 800156c:	461d      	mov	r5, r3
 800156e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001572:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001576:	e895 0003 	ldmia.w	r5, {r0, r1}
 800157a:	e884 0003 	stmia.w	r4, {r0, r1}
	printf("ID : %d\tPSP : 0x%x\n",ID,(int)PSP);
 800157e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001580:	461a      	mov	r2, r3
 8001582:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001584:	483f      	ldr	r0, [pc, #252]	@ (8001684 <printStack+0x1a8>)
 8001586:	f001 fb9d 	bl	8002cc4 <iprintf>
	int ptr = (int)(PSP-((uint32_t)t.stack))/sizeof(uint32_t);
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	461a      	mov	r2, r3
 800158e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001590:	1a9b      	subs	r3, r3, r2
 8001592:	089b      	lsrs	r3, r3, #2
 8001594:	63bb      	str	r3, [r7, #56]	@ 0x38
	for(int i=ptr; i<t.stackLen; i++)
 8001596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001598:	647b      	str	r3, [r7, #68]	@ 0x44
 800159a:	e011      	b.n	80015c0 <printStack+0xe4>
		printf("%4d: 0x%x: 0x%x\n",i,(int)(&t.stack[i]),(int)t.stack[i]);
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	460a      	mov	r2, r1
 80015b2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80015b4:	4834      	ldr	r0, [pc, #208]	@ (8001688 <printStack+0x1ac>)
 80015b6:	f001 fb85 	bl	8002cc4 <iprintf>
	for(int i=ptr; i<t.stackLen; i++)
 80015ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015bc:	3301      	adds	r3, #1
 80015be:	647b      	str	r3, [r7, #68]	@ 0x44
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d8e9      	bhi.n	800159c <printStack+0xc0>


	if(threadID== -1){
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ce:	d14e      	bne.n	800166e <printStack+0x192>
		for(int n=1;n<MAX_THREAD;n++){
 80015d0:	2301      	movs	r3, #1
 80015d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80015d4:	e048      	b.n	8001668 <printStack+0x18c>
			if(n==currentThread)
 80015d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001680 <printStack+0x1a4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80015dc:	429a      	cmp	r2, r3
 80015de:	d03d      	beq.n	800165c <printStack+0x180>
				continue;//Above thread already printed
			t = thread[n];
 80015e0:	4925      	ldr	r1, [pc, #148]	@ (8001678 <printStack+0x19c>)
 80015e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	440b      	add	r3, r1
 80015ee:	f107 040c 	add.w	r4, r7, #12
 80015f2:	461d      	mov	r5, r3
 80015f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001600:	e884 0003 	stmia.w	r4, {r0, r1}
			if(t.ID==0)
 8001604:	7b3b      	ldrb	r3, [r7, #12]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d02a      	beq.n	8001660 <printStack+0x184>
				continue;//empty thread
			PSP = t.SP;
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	64bb      	str	r3, [r7, #72]	@ 0x48
			printf("ID : %d\tPSP : 0x%x\n",t.ID,(int)PSP);
 800160e:	7b3b      	ldrb	r3, [r7, #12]
 8001610:	4619      	mov	r1, r3
 8001612:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001614:	461a      	mov	r2, r3
 8001616:	481b      	ldr	r0, [pc, #108]	@ (8001684 <printStack+0x1a8>)
 8001618:	f001 fb54 	bl	8002cc4 <iprintf>
			int ptr = (int)(PSP-((uint32_t)t.stack))/sizeof(uint32_t);
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	461a      	mov	r2, r3
 8001620:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001622:	1a9b      	subs	r3, r3, r2
 8001624:	089b      	lsrs	r3, r3, #2
 8001626:	637b      	str	r3, [r7, #52]	@ 0x34
			for(int i=ptr; i<t.stackLen; i++)
 8001628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800162a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800162c:	e011      	b.n	8001652 <printStack+0x176>
				printf("%4d: 0x%x: 0x%x\n",i,(int)(&t.stack[i]),(int)t.stack[i]);
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	4619      	mov	r1, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	460a      	mov	r2, r1
 8001644:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001646:	4810      	ldr	r0, [pc, #64]	@ (8001688 <printStack+0x1ac>)
 8001648:	f001 fb3c 	bl	8002cc4 <iprintf>
			for(int i=ptr; i<t.stackLen; i++)
 800164c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800164e:	3301      	adds	r3, #1
 8001650:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001656:	429a      	cmp	r2, r3
 8001658:	d8e9      	bhi.n	800162e <printStack+0x152>
 800165a:	e002      	b.n	8001662 <printStack+0x186>
				continue;//Above thread already printed
 800165c:	bf00      	nop
 800165e:	e000      	b.n	8001662 <printStack+0x186>
				continue;//empty thread
 8001660:	bf00      	nop
		for(int n=1;n<MAX_THREAD;n++){
 8001662:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001664:	3301      	adds	r3, #1
 8001666:	643b      	str	r3, [r7, #64]	@ 0x40
 8001668:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800166a:	2b0a      	cmp	r3, #10
 800166c:	ddb3      	ble.n	80015d6 <printStack+0xfa>
		}
	}
}
 800166e:	3750      	adds	r7, #80	@ 0x50
 8001670:	46bd      	mov	sp, r7
 8001672:	bdb0      	pop	{r4, r5, r7, pc}
 8001674:	08003a9c 	.word	0x08003a9c
 8001678:	20000134 	.word	0x20000134
 800167c:	08003ab4 	.word	0x08003ab4
 8001680:	20000004 	.word	0x20000004
 8001684:	08003ac4 	.word	0x08003ac4
 8001688:	08003ad8 	.word	0x08003ad8

0800168c <_write>:
#include "stdio.h"
#include "string.h"

extern UART_HandleTypeDef huart1;

int _write(int file, char *data, int len) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) data, len, HAL_MAX_DELAY);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	b29a      	uxth	r2, r3
 800169c:	f04f 33ff 	mov.w	r3, #4294967295
 80016a0:	68b9      	ldr	r1, [r7, #8]
 80016a2:	4804      	ldr	r0, [pc, #16]	@ (80016b4 <_write+0x28>)
 80016a4:	f001 f8cc 	bl	8002840 <HAL_UART_Transmit>
	return len;
 80016a8:	687b      	ldr	r3, [r7, #4]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200000e8 	.word	0x200000e8

080016b8 <HardFault_Handler>:

///////////////////////////HANDLER///////////////////////
void HardFault_Handler(void) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	printf("Hard Fault\n");
 80016bc:	4802      	ldr	r0, [pc, #8]	@ (80016c8 <HardFault_Handler+0x10>)
 80016be:	f001 fb69 	bl	8002d94 <puts>
	while (1) {
 80016c2:	bf00      	nop
 80016c4:	e7fd      	b.n	80016c2 <HardFault_Handler+0xa>
 80016c6:	bf00      	nop
 80016c8:	08003aec 	.word	0x08003aec

080016cc <SVC_Handler>:
	}
}

void SVC_Handler(void) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	StaticThread.SVCHandler();
 80016d0:	4b02      	ldr	r3, [pc, #8]	@ (80016dc <SVC_Handler+0x10>)
 80016d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d4:	4798      	blx	r3
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000008 	.word	0x20000008

080016e0 <PendSV_Handler>:

void PendSV_Handler(void) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	StaticThread.PendSVHandler();
 80016e4:	4b02      	ldr	r3, [pc, #8]	@ (80016f0 <PendSV_Handler+0x10>)
 80016e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e8:	4798      	blx	r3
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000008 	.word	0x20000008

080016f4 <SysTick_Handler>:

void SysTick_Handler(void) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80016f8:	f000 f992 	bl	8001a20 <HAL_IncTick>
	StaticThread.SysTickHandler();
 80016fc:	4b02      	ldr	r3, [pc, #8]	@ (8001708 <SysTick_Handler+0x14>)
 80016fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001700:	4798      	blx	r3
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000008 	.word	0x20000008

0800170c <change>:

volatile Fruit fruit = { 0 };

char apple[] = "Apple";
char mango[] = "Mango";
static void change(int state) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
//	StaticThread.mutexLock();

	static int flag = 0;
	StaticThread.synchronise(&flag);
 8001714:	4b24      	ldr	r3, [pc, #144]	@ (80017a8 <change+0x9c>)
 8001716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001718:	4824      	ldr	r0, [pc, #144]	@ (80017ac <change+0xa0>)
 800171a:	4798      	blx	r3

	if (state) {
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d01e      	beq.n	8001760 <change+0x54>
		for (int i = 0; i < sizeof(apple); i++) {
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	e00f      	b.n	8001748 <change+0x3c>
			fruit.name[i] = apple[i];
 8001728:	4a21      	ldr	r2, [pc, #132]	@ (80017b0 <change+0xa4>)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4413      	add	r3, r2
 800172e:	7819      	ldrb	r1, [r3, #0]
 8001730:	4a20      	ldr	r2, [pc, #128]	@ (80017b4 <change+0xa8>)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4413      	add	r3, r2
 8001736:	460a      	mov	r2, r1
 8001738:	701a      	strb	r2, [r3, #0]
			StaticThread.delay(227);
 800173a:	4b1b      	ldr	r3, [pc, #108]	@ (80017a8 <change+0x9c>)
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	20e3      	movs	r0, #227	@ 0xe3
 8001740:	4798      	blx	r3
		for (int i = 0; i < sizeof(apple); i++) {
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	3301      	adds	r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2b05      	cmp	r3, #5
 800174c:	d9ec      	bls.n	8001728 <change+0x1c>
		}
		fruit.price = 10;
 800174e:	4b19      	ldr	r3, [pc, #100]	@ (80017b4 <change+0xa8>)
 8001750:	220a      	movs	r2, #10
 8001752:	609a      	str	r2, [r3, #8]
		StaticThread.delay(314);
 8001754:	4b14      	ldr	r3, [pc, #80]	@ (80017a8 <change+0x9c>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	f44f 709d 	mov.w	r0, #314	@ 0x13a
 800175c:	4798      	blx	r3
 800175e:	e01c      	b.n	800179a <change+0x8e>
	} else {
		for (int i = 0; i < sizeof(mango); i++) {
 8001760:	2300      	movs	r3, #0
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	e00f      	b.n	8001786 <change+0x7a>
			fruit.name[i] = mango[i];
 8001766:	4a14      	ldr	r2, [pc, #80]	@ (80017b8 <change+0xac>)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4413      	add	r3, r2
 800176c:	7819      	ldrb	r1, [r3, #0]
 800176e:	4a11      	ldr	r2, [pc, #68]	@ (80017b4 <change+0xa8>)
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	4413      	add	r3, r2
 8001774:	460a      	mov	r2, r1
 8001776:	701a      	strb	r2, [r3, #0]
			StaticThread.delay(167);
 8001778:	4b0b      	ldr	r3, [pc, #44]	@ (80017a8 <change+0x9c>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	20a7      	movs	r0, #167	@ 0xa7
 800177e:	4798      	blx	r3
		for (int i = 0; i < sizeof(mango); i++) {
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	3301      	adds	r3, #1
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2b05      	cmp	r3, #5
 800178a:	d9ec      	bls.n	8001766 <change+0x5a>
		}
		fruit.price = 20;
 800178c:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <change+0xa8>)
 800178e:	2214      	movs	r2, #20
 8001790:	609a      	str	r2, [r3, #8]
		StaticThread.delay(238);
 8001792:	4b05      	ldr	r3, [pc, #20]	@ (80017a8 <change+0x9c>)
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	20ee      	movs	r0, #238	@ 0xee
 8001798:	4798      	blx	r3
	}

	flag = 0;
 800179a:	4b04      	ldr	r3, [pc, #16]	@ (80017ac <change+0xa0>)
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]

//	StaticThread.mutexUnlock();
}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000008 	.word	0x20000008
 80017ac:	20001014 	.word	0x20001014
 80017b0:	20000058 	.word	0x20000058
 80017b4:	20001008 	.word	0x20001008
 80017b8:	20000060 	.word	0x20000060

080017bc <thread1>:

static void thread1(int argLen, void **args) {
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
	StaticThread.print("%s(INIT) : %d-%p\n", __func__, argLen, args);
 80017c6:	4b0c      	ldr	r3, [pc, #48]	@ (80017f8 <thread1+0x3c>)
 80017c8:	69dc      	ldr	r4, [r3, #28]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	490b      	ldr	r1, [pc, #44]	@ (80017fc <thread1+0x40>)
 80017d0:	480b      	ldr	r0, [pc, #44]	@ (8001800 <thread1+0x44>)
 80017d2:	47a0      	blx	r4
	while (1) {
		change(1);
 80017d4:	2001      	movs	r0, #1
 80017d6:	f7ff ff99 	bl	800170c <change>
		StaticThread.print("%s: Fruit: %s : %d\n", __func__, fruit.name, fruit.price);
 80017da:	4b07      	ldr	r3, [pc, #28]	@ (80017f8 <thread1+0x3c>)
 80017dc:	69dc      	ldr	r4, [r3, #28]
 80017de:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <thread1+0x48>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	4a08      	ldr	r2, [pc, #32]	@ (8001804 <thread1+0x48>)
 80017e4:	4905      	ldr	r1, [pc, #20]	@ (80017fc <thread1+0x40>)
 80017e6:	4808      	ldr	r0, [pc, #32]	@ (8001808 <thread1+0x4c>)
 80017e8:	47a0      	blx	r4
		StaticThread.delay(333);
 80017ea:	4b03      	ldr	r3, [pc, #12]	@ (80017f8 <thread1+0x3c>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	f240 104d 	movw	r0, #333	@ 0x14d
 80017f2:	4798      	blx	r3
		change(1);
 80017f4:	bf00      	nop
 80017f6:	e7ed      	b.n	80017d4 <thread1+0x18>
 80017f8:	20000008 	.word	0x20000008
 80017fc:	08003b6c 	.word	0x08003b6c
 8001800:	08003af8 	.word	0x08003af8
 8001804:	20001008 	.word	0x20001008
 8001808:	08003b0c 	.word	0x08003b0c

0800180c <thread2>:
	}
}

static void thread2(int argLen, void **args) {
 800180c:	b590      	push	{r4, r7, lr}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
	StaticThread.print("%s(INIT) : %d-%p\n", __func__, argLen, args);
 8001816:	4b0c      	ldr	r3, [pc, #48]	@ (8001848 <thread2+0x3c>)
 8001818:	69dc      	ldr	r4, [r3, #28]
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	490b      	ldr	r1, [pc, #44]	@ (800184c <thread2+0x40>)
 8001820:	480b      	ldr	r0, [pc, #44]	@ (8001850 <thread2+0x44>)
 8001822:	47a0      	blx	r4
	while (1) {
		change(0);
 8001824:	2000      	movs	r0, #0
 8001826:	f7ff ff71 	bl	800170c <change>
		StaticThread.print("%s: Fruit: %s : %d\n", __func__, fruit.name, fruit.price);
 800182a:	4b07      	ldr	r3, [pc, #28]	@ (8001848 <thread2+0x3c>)
 800182c:	69dc      	ldr	r4, [r3, #28]
 800182e:	4b09      	ldr	r3, [pc, #36]	@ (8001854 <thread2+0x48>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	4a08      	ldr	r2, [pc, #32]	@ (8001854 <thread2+0x48>)
 8001834:	4905      	ldr	r1, [pc, #20]	@ (800184c <thread2+0x40>)
 8001836:	4808      	ldr	r0, [pc, #32]	@ (8001858 <thread2+0x4c>)
 8001838:	47a0      	blx	r4
		StaticThread.delay(333);
 800183a:	4b03      	ldr	r3, [pc, #12]	@ (8001848 <thread2+0x3c>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	f240 104d 	movw	r0, #333	@ 0x14d
 8001842:	4798      	blx	r3
		change(0);
 8001844:	bf00      	nop
 8001846:	e7ed      	b.n	8001824 <thread2+0x18>
 8001848:	20000008 	.word	0x20000008
 800184c:	08003b74 	.word	0x08003b74
 8001850:	08003af8 	.word	0x08003af8
 8001854:	20001008 	.word	0x20001008
 8001858:	08003b0c 	.word	0x08003b0c

0800185c <monitoringthread>:
	}
}

static void monitoringthread(int argLen, void **args) {
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
	StaticThread.print("%s(INIT) : %d-%p\n", __func__, argLen, args);
 8001866:	4b1e      	ldr	r3, [pc, #120]	@ (80018e0 <monitoringthread+0x84>)
 8001868:	69dc      	ldr	r4, [r3, #28]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	491d      	ldr	r1, [pc, #116]	@ (80018e4 <monitoringthread+0x88>)
 8001870:	481d      	ldr	r0, [pc, #116]	@ (80018e8 <monitoringthread+0x8c>)
 8001872:	47a0      	blx	r4
	while (1) {
		StaticThread.delay(10000);
 8001874:	4b1a      	ldr	r3, [pc, #104]	@ (80018e0 <monitoringthread+0x84>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f242 7010 	movw	r0, #10000	@ 0x2710
 800187c:	4798      	blx	r3
		StaticThread.print("\nCPU UF : %d\n", (int) (100 * StaticThread.cpuUtilization()));
 800187e:	4b18      	ldr	r3, [pc, #96]	@ (80018e0 <monitoringthread+0x84>)
 8001880:	69dc      	ldr	r4, [r3, #28]
 8001882:	4b17      	ldr	r3, [pc, #92]	@ (80018e0 <monitoringthread+0x84>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	4798      	blx	r3
 8001888:	4603      	mov	r3, r0
 800188a:	4918      	ldr	r1, [pc, #96]	@ (80018ec <monitoringthread+0x90>)
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fd6b 	bl	8000368 <__aeabi_fmul>
 8001892:	4603      	mov	r3, r0
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe feb7 	bl	8000608 <__aeabi_f2iz>
 800189a:	4603      	mov	r3, r0
 800189c:	4619      	mov	r1, r3
 800189e:	4814      	ldr	r0, [pc, #80]	@ (80018f0 <monitoringthread+0x94>)
 80018a0:	47a0      	blx	r4
		for (int id = 1; id <= 3; id++)
 80018a2:	2301      	movs	r3, #1
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	e016      	b.n	80018d6 <monitoringthread+0x7a>
			StaticThread.print("%d: STACK UF: %d\n", id, (int) (100 * StaticThread.stackUtilization(id)));
 80018a8:	4b0d      	ldr	r3, [pc, #52]	@ (80018e0 <monitoringthread+0x84>)
 80018aa:	69dc      	ldr	r4, [r3, #28]
 80018ac:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <monitoringthread+0x84>)
 80018ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	4798      	blx	r3
 80018b4:	4603      	mov	r3, r0
 80018b6:	490d      	ldr	r1, [pc, #52]	@ (80018ec <monitoringthread+0x90>)
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fd55 	bl	8000368 <__aeabi_fmul>
 80018be:	4603      	mov	r3, r0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fea1 	bl	8000608 <__aeabi_f2iz>
 80018c6:	4603      	mov	r3, r0
 80018c8:	461a      	mov	r2, r3
 80018ca:	68f9      	ldr	r1, [r7, #12]
 80018cc:	4809      	ldr	r0, [pc, #36]	@ (80018f4 <monitoringthread+0x98>)
 80018ce:	47a0      	blx	r4
		for (int id = 1; id <= 3; id++)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	3301      	adds	r3, #1
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	dde5      	ble.n	80018a8 <monitoringthread+0x4c>
		StaticThread.delay(10000);
 80018dc:	e7ca      	b.n	8001874 <monitoringthread+0x18>
 80018de:	bf00      	nop
 80018e0:	20000008 	.word	0x20000008
 80018e4:	08003b7c 	.word	0x08003b7c
 80018e8:	08003af8 	.word	0x08003af8
 80018ec:	42c80000 	.word	0x42c80000
 80018f0:	08003b20 	.word	0x08003b20
 80018f4:	08003b30 	.word	0x08003b30

080018f8 <run>:
	}
}

void run() {
 80018f8:	b590      	push	{r4, r7, lr}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af02      	add	r7, sp, #8
	printf("Initiating...\n");
 80018fe:	481a      	ldr	r0, [pc, #104]	@ (8001968 <run+0x70>)
 8001900:	f001 fa48 	bl	8002d94 <puts>
	HAL_Delay(1000);
 8001904:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001908:	f000 f8a6 	bl	8001a58 <HAL_Delay>

	id1 = StaticThread.new(thread1, thread1Stack, sizeof(thread1Stack) / sizeof(uint32_t), 0, NULL);
 800190c:	4b17      	ldr	r3, [pc, #92]	@ (800196c <run+0x74>)
 800190e:	681c      	ldr	r4, [r3, #0]
 8001910:	2300      	movs	r3, #0
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	2300      	movs	r3, #0
 8001916:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800191a:	4915      	ldr	r1, [pc, #84]	@ (8001970 <run+0x78>)
 800191c:	4815      	ldr	r0, [pc, #84]	@ (8001974 <run+0x7c>)
 800191e:	47a0      	blx	r4
 8001920:	4603      	mov	r3, r0
 8001922:	4a15      	ldr	r2, [pc, #84]	@ (8001978 <run+0x80>)
 8001924:	6013      	str	r3, [r2, #0]
	id2 = StaticThread.new(thread2, thread2Stack, sizeof(thread2Stack) / sizeof(uint32_t), 0, NULL);
 8001926:	4b11      	ldr	r3, [pc, #68]	@ (800196c <run+0x74>)
 8001928:	681c      	ldr	r4, [r3, #0]
 800192a:	2300      	movs	r3, #0
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	2300      	movs	r3, #0
 8001930:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001934:	4911      	ldr	r1, [pc, #68]	@ (800197c <run+0x84>)
 8001936:	4812      	ldr	r0, [pc, #72]	@ (8001980 <run+0x88>)
 8001938:	47a0      	blx	r4
 800193a:	4603      	mov	r3, r0
 800193c:	4a11      	ldr	r2, [pc, #68]	@ (8001984 <run+0x8c>)
 800193e:	6013      	str	r3, [r2, #0]
	id3 = StaticThread.new(monitoringthread, monitoringThreadStack, sizeof(monitoringThreadStack) / sizeof(uint32_t), 0, NULL);
 8001940:	4b0a      	ldr	r3, [pc, #40]	@ (800196c <run+0x74>)
 8001942:	681c      	ldr	r4, [r3, #0]
 8001944:	2300      	movs	r3, #0
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	2300      	movs	r3, #0
 800194a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800194e:	490e      	ldr	r1, [pc, #56]	@ (8001988 <run+0x90>)
 8001950:	480e      	ldr	r0, [pc, #56]	@ (800198c <run+0x94>)
 8001952:	47a0      	blx	r4
 8001954:	4603      	mov	r3, r0
 8001956:	4a0e      	ldr	r2, [pc, #56]	@ (8001990 <run+0x98>)
 8001958:	6013      	str	r3, [r2, #0]
	StaticThread.startScheduler();
 800195a:	4b04      	ldr	r3, [pc, #16]	@ (800196c <run+0x74>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	4798      	blx	r3
}
 8001960:	bf00      	nop
 8001962:	3704      	adds	r7, #4
 8001964:	46bd      	mov	sp, r7
 8001966:	bd90      	pop	{r4, r7, pc}
 8001968:	08003b44 	.word	0x08003b44
 800196c:	20000008 	.word	0x20000008
 8001970:	20000408 	.word	0x20000408
 8001974:	080017bd 	.word	0x080017bd
 8001978:	200003fc 	.word	0x200003fc
 800197c:	20000808 	.word	0x20000808
 8001980:	0800180d 	.word	0x0800180d
 8001984:	20000400 	.word	0x20000400
 8001988:	20000c08 	.word	0x20000c08
 800198c:	0800185d 	.word	0x0800185d
 8001990:	20000404 	.word	0x20000404

08001994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001998:	4b08      	ldr	r3, [pc, #32]	@ (80019bc <HAL_Init+0x28>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a07      	ldr	r2, [pc, #28]	@ (80019bc <HAL_Init+0x28>)
 800199e:	f043 0310 	orr.w	r3, r3, #16
 80019a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a4:	2003      	movs	r0, #3
 80019a6:	f000 f92b 	bl	8001c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019aa:	200f      	movs	r0, #15
 80019ac:	f000 f808 	bl	80019c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b0:	f7fe fef6 	bl	80007a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40022000 	.word	0x40022000

080019c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c8:	4b12      	ldr	r3, [pc, #72]	@ (8001a14 <HAL_InitTick+0x54>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4b12      	ldr	r3, [pc, #72]	@ (8001a18 <HAL_InitTick+0x58>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	4619      	mov	r1, r3
 80019d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019da:	fbb2 f3f3 	udiv	r3, r2, r3
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 f935 	bl	8001c4e <HAL_SYSTICK_Config>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e00e      	b.n	8001a0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b0f      	cmp	r3, #15
 80019f2:	d80a      	bhi.n	8001a0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f4:	2200      	movs	r2, #0
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295
 80019fc:	f000 f90b 	bl	8001c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a00:	4a06      	ldr	r2, [pc, #24]	@ (8001a1c <HAL_InitTick+0x5c>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	e000      	b.n	8001a0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000000 	.word	0x20000000
 8001a18:	2000006c 	.word	0x2000006c
 8001a1c:	20000068 	.word	0x20000068

08001a20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a24:	4b05      	ldr	r3, [pc, #20]	@ (8001a3c <HAL_IncTick+0x1c>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4b05      	ldr	r3, [pc, #20]	@ (8001a40 <HAL_IncTick+0x20>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4413      	add	r3, r2
 8001a30:	4a03      	ldr	r2, [pc, #12]	@ (8001a40 <HAL_IncTick+0x20>)
 8001a32:	6013      	str	r3, [r2, #0]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	2000006c 	.word	0x2000006c
 8001a40:	20001018 	.word	0x20001018

08001a44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return uwTick;
 8001a48:	4b02      	ldr	r3, [pc, #8]	@ (8001a54 <HAL_GetTick+0x10>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr
 8001a54:	20001018 	.word	0x20001018

08001a58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a60:	f7ff fff0 	bl	8001a44 <HAL_GetTick>
 8001a64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a70:	d005      	beq.n	8001a7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a72:	4b0a      	ldr	r3, [pc, #40]	@ (8001a9c <HAL_Delay+0x44>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a7e:	bf00      	nop
 8001a80:	f7ff ffe0 	bl	8001a44 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d8f7      	bhi.n	8001a80 <HAL_Delay+0x28>
  {
  }
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	2000006c 	.word	0x2000006c

08001aa0 <__NVIC_SetPriorityGrouping>:
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001abc:	4013      	ands	r3, r2
 8001abe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001acc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ad2:	4a04      	ldr	r2, [pc, #16]	@ (8001ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	60d3      	str	r3, [r2, #12]
}
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <__NVIC_GetPriorityGrouping>:
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aec:	4b04      	ldr	r3, [pc, #16]	@ (8001b00 <__NVIC_GetPriorityGrouping+0x18>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	0a1b      	lsrs	r3, r3, #8
 8001af2:	f003 0307 	and.w	r3, r3, #7
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <__NVIC_SetPriority>:
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	6039      	str	r1, [r7, #0]
 8001b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	db0a      	blt.n	8001b2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	490c      	ldr	r1, [pc, #48]	@ (8001b50 <__NVIC_SetPriority+0x4c>)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	0112      	lsls	r2, r2, #4
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	440b      	add	r3, r1
 8001b28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001b2c:	e00a      	b.n	8001b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4908      	ldr	r1, [pc, #32]	@ (8001b54 <__NVIC_SetPriority+0x50>)
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	3b04      	subs	r3, #4
 8001b3c:	0112      	lsls	r2, r2, #4
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	440b      	add	r3, r1
 8001b42:	761a      	strb	r2, [r3, #24]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000e100 	.word	0xe000e100
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	@ 0x24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f1c3 0307 	rsb	r3, r3, #7
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	bf28      	it	cs
 8001b76:	2304      	movcs	r3, #4
 8001b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	2b06      	cmp	r3, #6
 8001b80:	d902      	bls.n	8001b88 <NVIC_EncodePriority+0x30>
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3b03      	subs	r3, #3
 8001b86:	e000      	b.n	8001b8a <NVIC_EncodePriority+0x32>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43da      	mvns	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	43d9      	mvns	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	4313      	orrs	r3, r2
         );
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3724      	adds	r7, #36	@ 0x24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bcc:	d301      	bcc.n	8001bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00f      	b.n	8001bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bfc <SysTick_Config+0x40>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bda:	210f      	movs	r1, #15
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001be0:	f7ff ff90 	bl	8001b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be4:	4b05      	ldr	r3, [pc, #20]	@ (8001bfc <SysTick_Config+0x40>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bea:	4b04      	ldr	r3, [pc, #16]	@ (8001bfc <SysTick_Config+0x40>)
 8001bec:	2207      	movs	r2, #7
 8001bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	e000e010 	.word	0xe000e010

08001c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ff49 	bl	8001aa0 <__NVIC_SetPriorityGrouping>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c28:	f7ff ff5e 	bl	8001ae8 <__NVIC_GetPriorityGrouping>
 8001c2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68b9      	ldr	r1, [r7, #8]
 8001c32:	6978      	ldr	r0, [r7, #20]
 8001c34:	f7ff ff90 	bl	8001b58 <NVIC_EncodePriority>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff5f 	bl	8001b04 <__NVIC_SetPriority>
}
 8001c46:	bf00      	nop
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff ffb0 	bl	8001bbc <SysTick_Config>
 8001c5c:	4603      	mov	r3, r0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b08b      	sub	sp, #44	@ 0x2c
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c72:	2300      	movs	r3, #0
 8001c74:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c76:	2300      	movs	r3, #0
 8001c78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c7a:	e169      	b.n	8001f50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	69fa      	ldr	r2, [r7, #28]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	f040 8158 	bne.w	8001f4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	4a9a      	ldr	r2, [pc, #616]	@ (8001f08 <HAL_GPIO_Init+0x2a0>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d05e      	beq.n	8001d62 <HAL_GPIO_Init+0xfa>
 8001ca4:	4a98      	ldr	r2, [pc, #608]	@ (8001f08 <HAL_GPIO_Init+0x2a0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d875      	bhi.n	8001d96 <HAL_GPIO_Init+0x12e>
 8001caa:	4a98      	ldr	r2, [pc, #608]	@ (8001f0c <HAL_GPIO_Init+0x2a4>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d058      	beq.n	8001d62 <HAL_GPIO_Init+0xfa>
 8001cb0:	4a96      	ldr	r2, [pc, #600]	@ (8001f0c <HAL_GPIO_Init+0x2a4>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d86f      	bhi.n	8001d96 <HAL_GPIO_Init+0x12e>
 8001cb6:	4a96      	ldr	r2, [pc, #600]	@ (8001f10 <HAL_GPIO_Init+0x2a8>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d052      	beq.n	8001d62 <HAL_GPIO_Init+0xfa>
 8001cbc:	4a94      	ldr	r2, [pc, #592]	@ (8001f10 <HAL_GPIO_Init+0x2a8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d869      	bhi.n	8001d96 <HAL_GPIO_Init+0x12e>
 8001cc2:	4a94      	ldr	r2, [pc, #592]	@ (8001f14 <HAL_GPIO_Init+0x2ac>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d04c      	beq.n	8001d62 <HAL_GPIO_Init+0xfa>
 8001cc8:	4a92      	ldr	r2, [pc, #584]	@ (8001f14 <HAL_GPIO_Init+0x2ac>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d863      	bhi.n	8001d96 <HAL_GPIO_Init+0x12e>
 8001cce:	4a92      	ldr	r2, [pc, #584]	@ (8001f18 <HAL_GPIO_Init+0x2b0>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d046      	beq.n	8001d62 <HAL_GPIO_Init+0xfa>
 8001cd4:	4a90      	ldr	r2, [pc, #576]	@ (8001f18 <HAL_GPIO_Init+0x2b0>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d85d      	bhi.n	8001d96 <HAL_GPIO_Init+0x12e>
 8001cda:	2b12      	cmp	r3, #18
 8001cdc:	d82a      	bhi.n	8001d34 <HAL_GPIO_Init+0xcc>
 8001cde:	2b12      	cmp	r3, #18
 8001ce0:	d859      	bhi.n	8001d96 <HAL_GPIO_Init+0x12e>
 8001ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ce8 <HAL_GPIO_Init+0x80>)
 8001ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce8:	08001d63 	.word	0x08001d63
 8001cec:	08001d3d 	.word	0x08001d3d
 8001cf0:	08001d4f 	.word	0x08001d4f
 8001cf4:	08001d91 	.word	0x08001d91
 8001cf8:	08001d97 	.word	0x08001d97
 8001cfc:	08001d97 	.word	0x08001d97
 8001d00:	08001d97 	.word	0x08001d97
 8001d04:	08001d97 	.word	0x08001d97
 8001d08:	08001d97 	.word	0x08001d97
 8001d0c:	08001d97 	.word	0x08001d97
 8001d10:	08001d97 	.word	0x08001d97
 8001d14:	08001d97 	.word	0x08001d97
 8001d18:	08001d97 	.word	0x08001d97
 8001d1c:	08001d97 	.word	0x08001d97
 8001d20:	08001d97 	.word	0x08001d97
 8001d24:	08001d97 	.word	0x08001d97
 8001d28:	08001d97 	.word	0x08001d97
 8001d2c:	08001d45 	.word	0x08001d45
 8001d30:	08001d59 	.word	0x08001d59
 8001d34:	4a79      	ldr	r2, [pc, #484]	@ (8001f1c <HAL_GPIO_Init+0x2b4>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d013      	beq.n	8001d62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d3a:	e02c      	b.n	8001d96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	623b      	str	r3, [r7, #32]
          break;
 8001d42:	e029      	b.n	8001d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	623b      	str	r3, [r7, #32]
          break;
 8001d4c:	e024      	b.n	8001d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	3308      	adds	r3, #8
 8001d54:	623b      	str	r3, [r7, #32]
          break;
 8001d56:	e01f      	b.n	8001d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	330c      	adds	r3, #12
 8001d5e:	623b      	str	r3, [r7, #32]
          break;
 8001d60:	e01a      	b.n	8001d98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d102      	bne.n	8001d70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d6a:	2304      	movs	r3, #4
 8001d6c:	623b      	str	r3, [r7, #32]
          break;
 8001d6e:	e013      	b.n	8001d98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d105      	bne.n	8001d84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d78:	2308      	movs	r3, #8
 8001d7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69fa      	ldr	r2, [r7, #28]
 8001d80:	611a      	str	r2, [r3, #16]
          break;
 8001d82:	e009      	b.n	8001d98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d84:	2308      	movs	r3, #8
 8001d86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69fa      	ldr	r2, [r7, #28]
 8001d8c:	615a      	str	r2, [r3, #20]
          break;
 8001d8e:	e003      	b.n	8001d98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d90:	2300      	movs	r3, #0
 8001d92:	623b      	str	r3, [r7, #32]
          break;
 8001d94:	e000      	b.n	8001d98 <HAL_GPIO_Init+0x130>
          break;
 8001d96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	2bff      	cmp	r3, #255	@ 0xff
 8001d9c:	d801      	bhi.n	8001da2 <HAL_GPIO_Init+0x13a>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	e001      	b.n	8001da6 <HAL_GPIO_Init+0x13e>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3304      	adds	r3, #4
 8001da6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	2bff      	cmp	r3, #255	@ 0xff
 8001dac:	d802      	bhi.n	8001db4 <HAL_GPIO_Init+0x14c>
 8001dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	e002      	b.n	8001dba <HAL_GPIO_Init+0x152>
 8001db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db6:	3b08      	subs	r3, #8
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	210f      	movs	r1, #15
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	401a      	ands	r2, r3
 8001dcc:	6a39      	ldr	r1, [r7, #32]
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 80b1 	beq.w	8001f4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001de8:	4b4d      	ldr	r3, [pc, #308]	@ (8001f20 <HAL_GPIO_Init+0x2b8>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	4a4c      	ldr	r2, [pc, #304]	@ (8001f20 <HAL_GPIO_Init+0x2b8>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	6193      	str	r3, [r2, #24]
 8001df4:	4b4a      	ldr	r3, [pc, #296]	@ (8001f20 <HAL_GPIO_Init+0x2b8>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e00:	4a48      	ldr	r2, [pc, #288]	@ (8001f24 <HAL_GPIO_Init+0x2bc>)
 8001e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e04:	089b      	lsrs	r3, r3, #2
 8001e06:	3302      	adds	r3, #2
 8001e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	220f      	movs	r2, #15
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	4013      	ands	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a40      	ldr	r2, [pc, #256]	@ (8001f28 <HAL_GPIO_Init+0x2c0>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d013      	beq.n	8001e54 <HAL_GPIO_Init+0x1ec>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a3f      	ldr	r2, [pc, #252]	@ (8001f2c <HAL_GPIO_Init+0x2c4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d00d      	beq.n	8001e50 <HAL_GPIO_Init+0x1e8>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a3e      	ldr	r2, [pc, #248]	@ (8001f30 <HAL_GPIO_Init+0x2c8>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d007      	beq.n	8001e4c <HAL_GPIO_Init+0x1e4>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a3d      	ldr	r2, [pc, #244]	@ (8001f34 <HAL_GPIO_Init+0x2cc>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d101      	bne.n	8001e48 <HAL_GPIO_Init+0x1e0>
 8001e44:	2303      	movs	r3, #3
 8001e46:	e006      	b.n	8001e56 <HAL_GPIO_Init+0x1ee>
 8001e48:	2304      	movs	r3, #4
 8001e4a:	e004      	b.n	8001e56 <HAL_GPIO_Init+0x1ee>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e002      	b.n	8001e56 <HAL_GPIO_Init+0x1ee>
 8001e50:	2301      	movs	r3, #1
 8001e52:	e000      	b.n	8001e56 <HAL_GPIO_Init+0x1ee>
 8001e54:	2300      	movs	r3, #0
 8001e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e58:	f002 0203 	and.w	r2, r2, #3
 8001e5c:	0092      	lsls	r2, r2, #2
 8001e5e:	4093      	lsls	r3, r2
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e66:	492f      	ldr	r1, [pc, #188]	@ (8001f24 <HAL_GPIO_Init+0x2bc>)
 8001e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6a:	089b      	lsrs	r3, r3, #2
 8001e6c:	3302      	adds	r3, #2
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d006      	beq.n	8001e8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e80:	4b2d      	ldr	r3, [pc, #180]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	492c      	ldr	r1, [pc, #176]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	608b      	str	r3, [r1, #8]
 8001e8c:	e006      	b.n	8001e9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	4928      	ldr	r1, [pc, #160]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d006      	beq.n	8001eb6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ea8:	4b23      	ldr	r3, [pc, #140]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	4922      	ldr	r1, [pc, #136]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	60cb      	str	r3, [r1, #12]
 8001eb4:	e006      	b.n	8001ec4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001eb6:	4b20      	ldr	r3, [pc, #128]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	491e      	ldr	r1, [pc, #120]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d006      	beq.n	8001ede <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ed0:	4b19      	ldr	r3, [pc, #100]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	4918      	ldr	r1, [pc, #96]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]
 8001edc:	e006      	b.n	8001eec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ede:	4b16      	ldr	r3, [pc, #88]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	4914      	ldr	r1, [pc, #80]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d021      	beq.n	8001f3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	490e      	ldr	r1, [pc, #56]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	600b      	str	r3, [r1, #0]
 8001f04:	e021      	b.n	8001f4a <HAL_GPIO_Init+0x2e2>
 8001f06:	bf00      	nop
 8001f08:	10320000 	.word	0x10320000
 8001f0c:	10310000 	.word	0x10310000
 8001f10:	10220000 	.word	0x10220000
 8001f14:	10210000 	.word	0x10210000
 8001f18:	10120000 	.word	0x10120000
 8001f1c:	10110000 	.word	0x10110000
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40010000 	.word	0x40010000
 8001f28:	40010800 	.word	0x40010800
 8001f2c:	40010c00 	.word	0x40010c00
 8001f30:	40011000 	.word	0x40011000
 8001f34:	40011400 	.word	0x40011400
 8001f38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f6c <HAL_GPIO_Init+0x304>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	4909      	ldr	r1, [pc, #36]	@ (8001f6c <HAL_GPIO_Init+0x304>)
 8001f46:	4013      	ands	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f56:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f47f ae8e 	bne.w	8001c7c <HAL_GPIO_Init+0x14>
  }
}
 8001f60:	bf00      	nop
 8001f62:	bf00      	nop
 8001f64:	372c      	adds	r7, #44	@ 0x2c
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr
 8001f6c:	40010400 	.word	0x40010400

08001f70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e272      	b.n	8002468 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 8087 	beq.w	800209e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f90:	4b92      	ldr	r3, [pc, #584]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 030c 	and.w	r3, r3, #12
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d00c      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f9c:	4b8f      	ldr	r3, [pc, #572]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 030c 	and.w	r3, r3, #12
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d112      	bne.n	8001fce <HAL_RCC_OscConfig+0x5e>
 8001fa8:	4b8c      	ldr	r3, [pc, #560]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fb4:	d10b      	bne.n	8001fce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb6:	4b89      	ldr	r3, [pc, #548]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d06c      	beq.n	800209c <HAL_RCC_OscConfig+0x12c>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d168      	bne.n	800209c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e24c      	b.n	8002468 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fd6:	d106      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x76>
 8001fd8:	4b80      	ldr	r3, [pc, #512]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a7f      	ldr	r2, [pc, #508]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 8001fde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	e02e      	b.n	8002044 <HAL_RCC_OscConfig+0xd4>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10c      	bne.n	8002008 <HAL_RCC_OscConfig+0x98>
 8001fee:	4b7b      	ldr	r3, [pc, #492]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a7a      	ldr	r2, [pc, #488]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	4b78      	ldr	r3, [pc, #480]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a77      	ldr	r2, [pc, #476]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 8002000:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	e01d      	b.n	8002044 <HAL_RCC_OscConfig+0xd4>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002010:	d10c      	bne.n	800202c <HAL_RCC_OscConfig+0xbc>
 8002012:	4b72      	ldr	r3, [pc, #456]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a71      	ldr	r2, [pc, #452]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 8002018:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	4b6f      	ldr	r3, [pc, #444]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a6e      	ldr	r2, [pc, #440]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 8002024:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	e00b      	b.n	8002044 <HAL_RCC_OscConfig+0xd4>
 800202c:	4b6b      	ldr	r3, [pc, #428]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a6a      	ldr	r2, [pc, #424]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 8002032:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	4b68      	ldr	r3, [pc, #416]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a67      	ldr	r2, [pc, #412]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 800203e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002042:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d013      	beq.n	8002074 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7ff fcfa 	bl	8001a44 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002054:	f7ff fcf6 	bl	8001a44 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b64      	cmp	r3, #100	@ 0x64
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e200      	b.n	8002468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002066:	4b5d      	ldr	r3, [pc, #372]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0xe4>
 8002072:	e014      	b.n	800209e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7ff fce6 	bl	8001a44 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800207c:	f7ff fce2 	bl	8001a44 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b64      	cmp	r3, #100	@ 0x64
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e1ec      	b.n	8002468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800208e:	4b53      	ldr	r3, [pc, #332]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f0      	bne.n	800207c <HAL_RCC_OscConfig+0x10c>
 800209a:	e000      	b.n	800209e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d063      	beq.n	8002172 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020aa:	4b4c      	ldr	r3, [pc, #304]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00b      	beq.n	80020ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020b6:	4b49      	ldr	r3, [pc, #292]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d11c      	bne.n	80020fc <HAL_RCC_OscConfig+0x18c>
 80020c2:	4b46      	ldr	r3, [pc, #280]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d116      	bne.n	80020fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ce:	4b43      	ldr	r3, [pc, #268]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <HAL_RCC_OscConfig+0x176>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d001      	beq.n	80020e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e1c0      	b.n	8002468 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e6:	4b3d      	ldr	r3, [pc, #244]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4939      	ldr	r1, [pc, #228]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fa:	e03a      	b.n	8002172 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d020      	beq.n	8002146 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002104:	4b36      	ldr	r3, [pc, #216]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002106:	2201      	movs	r2, #1
 8002108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210a:	f7ff fc9b 	bl	8001a44 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002112:	f7ff fc97 	bl	8001a44 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e1a1      	b.n	8002468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002124:	4b2d      	ldr	r3, [pc, #180]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f0      	beq.n	8002112 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002130:	4b2a      	ldr	r3, [pc, #168]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4927      	ldr	r1, [pc, #156]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 8002140:	4313      	orrs	r3, r2
 8002142:	600b      	str	r3, [r1, #0]
 8002144:	e015      	b.n	8002172 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002146:	4b26      	ldr	r3, [pc, #152]	@ (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214c:	f7ff fc7a 	bl	8001a44 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002154:	f7ff fc76 	bl	8001a44 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e180      	b.n	8002468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002166:	4b1d      	ldr	r3, [pc, #116]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d03a      	beq.n	80021f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d019      	beq.n	80021ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002186:	4b17      	ldr	r3, [pc, #92]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002188:	2201      	movs	r2, #1
 800218a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218c:	f7ff fc5a 	bl	8001a44 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002194:	f7ff fc56 	bl	8001a44 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e160      	b.n	8002468 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a6:	4b0d      	ldr	r3, [pc, #52]	@ (80021dc <HAL_RCC_OscConfig+0x26c>)
 80021a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021b2:	2001      	movs	r0, #1
 80021b4:	f000 face 	bl	8002754 <RCC_Delay>
 80021b8:	e01c      	b.n	80021f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ba:	4b0a      	ldr	r3, [pc, #40]	@ (80021e4 <HAL_RCC_OscConfig+0x274>)
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c0:	f7ff fc40 	bl	8001a44 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c6:	e00f      	b.n	80021e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c8:	f7ff fc3c 	bl	8001a44 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d908      	bls.n	80021e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e146      	b.n	8002468 <HAL_RCC_OscConfig+0x4f8>
 80021da:	bf00      	nop
 80021dc:	40021000 	.word	0x40021000
 80021e0:	42420000 	.word	0x42420000
 80021e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e8:	4b92      	ldr	r3, [pc, #584]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 80021ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1e9      	bne.n	80021c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 80a6 	beq.w	800234e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002202:	2300      	movs	r3, #0
 8002204:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002206:	4b8b      	ldr	r3, [pc, #556]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10d      	bne.n	800222e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002212:	4b88      	ldr	r3, [pc, #544]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	4a87      	ldr	r2, [pc, #540]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 8002218:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800221c:	61d3      	str	r3, [r2, #28]
 800221e:	4b85      	ldr	r3, [pc, #532]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800222a:	2301      	movs	r3, #1
 800222c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222e:	4b82      	ldr	r3, [pc, #520]	@ (8002438 <HAL_RCC_OscConfig+0x4c8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002236:	2b00      	cmp	r3, #0
 8002238:	d118      	bne.n	800226c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800223a:	4b7f      	ldr	r3, [pc, #508]	@ (8002438 <HAL_RCC_OscConfig+0x4c8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a7e      	ldr	r2, [pc, #504]	@ (8002438 <HAL_RCC_OscConfig+0x4c8>)
 8002240:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002246:	f7ff fbfd 	bl	8001a44 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800224e:	f7ff fbf9 	bl	8001a44 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b64      	cmp	r3, #100	@ 0x64
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e103      	b.n	8002468 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002260:	4b75      	ldr	r3, [pc, #468]	@ (8002438 <HAL_RCC_OscConfig+0x4c8>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0f0      	beq.n	800224e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d106      	bne.n	8002282 <HAL_RCC_OscConfig+0x312>
 8002274:	4b6f      	ldr	r3, [pc, #444]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	4a6e      	ldr	r2, [pc, #440]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	6213      	str	r3, [r2, #32]
 8002280:	e02d      	b.n	80022de <HAL_RCC_OscConfig+0x36e>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10c      	bne.n	80022a4 <HAL_RCC_OscConfig+0x334>
 800228a:	4b6a      	ldr	r3, [pc, #424]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	4a69      	ldr	r2, [pc, #420]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 8002290:	f023 0301 	bic.w	r3, r3, #1
 8002294:	6213      	str	r3, [r2, #32]
 8002296:	4b67      	ldr	r3, [pc, #412]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	4a66      	ldr	r2, [pc, #408]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 800229c:	f023 0304 	bic.w	r3, r3, #4
 80022a0:	6213      	str	r3, [r2, #32]
 80022a2:	e01c      	b.n	80022de <HAL_RCC_OscConfig+0x36e>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	2b05      	cmp	r3, #5
 80022aa:	d10c      	bne.n	80022c6 <HAL_RCC_OscConfig+0x356>
 80022ac:	4b61      	ldr	r3, [pc, #388]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	4a60      	ldr	r2, [pc, #384]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 80022b2:	f043 0304 	orr.w	r3, r3, #4
 80022b6:	6213      	str	r3, [r2, #32]
 80022b8:	4b5e      	ldr	r3, [pc, #376]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	4a5d      	ldr	r2, [pc, #372]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	6213      	str	r3, [r2, #32]
 80022c4:	e00b      	b.n	80022de <HAL_RCC_OscConfig+0x36e>
 80022c6:	4b5b      	ldr	r3, [pc, #364]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	4a5a      	ldr	r2, [pc, #360]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	f023 0301 	bic.w	r3, r3, #1
 80022d0:	6213      	str	r3, [r2, #32]
 80022d2:	4b58      	ldr	r3, [pc, #352]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	4a57      	ldr	r2, [pc, #348]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	f023 0304 	bic.w	r3, r3, #4
 80022dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d015      	beq.n	8002312 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e6:	f7ff fbad 	bl	8001a44 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ec:	e00a      	b.n	8002304 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ee:	f7ff fba9 	bl	8001a44 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e0b1      	b.n	8002468 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002304:	4b4b      	ldr	r3, [pc, #300]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0ee      	beq.n	80022ee <HAL_RCC_OscConfig+0x37e>
 8002310:	e014      	b.n	800233c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002312:	f7ff fb97 	bl	8001a44 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002318:	e00a      	b.n	8002330 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231a:	f7ff fb93 	bl	8001a44 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002328:	4293      	cmp	r3, r2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e09b      	b.n	8002468 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002330:	4b40      	ldr	r3, [pc, #256]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1ee      	bne.n	800231a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800233c:	7dfb      	ldrb	r3, [r7, #23]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d105      	bne.n	800234e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002342:	4b3c      	ldr	r3, [pc, #240]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	4a3b      	ldr	r2, [pc, #236]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800234c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 8087 	beq.w	8002466 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002358:	4b36      	ldr	r3, [pc, #216]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 030c 	and.w	r3, r3, #12
 8002360:	2b08      	cmp	r3, #8
 8002362:	d061      	beq.n	8002428 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	2b02      	cmp	r3, #2
 800236a:	d146      	bne.n	80023fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800236c:	4b33      	ldr	r3, [pc, #204]	@ (800243c <HAL_RCC_OscConfig+0x4cc>)
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002372:	f7ff fb67 	bl	8001a44 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237a:	f7ff fb63 	bl	8001a44 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e06d      	b.n	8002468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238c:	4b29      	ldr	r3, [pc, #164]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1f0      	bne.n	800237a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023a0:	d108      	bne.n	80023b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023a2:	4b24      	ldr	r3, [pc, #144]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	4921      	ldr	r1, [pc, #132]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a19      	ldr	r1, [r3, #32]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c4:	430b      	orrs	r3, r1
 80023c6:	491b      	ldr	r1, [pc, #108]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023cc:	4b1b      	ldr	r3, [pc, #108]	@ (800243c <HAL_RCC_OscConfig+0x4cc>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d2:	f7ff fb37 	bl	8001a44 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023da:	f7ff fb33 	bl	8001a44 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e03d      	b.n	8002468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023ec:	4b11      	ldr	r3, [pc, #68]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0f0      	beq.n	80023da <HAL_RCC_OscConfig+0x46a>
 80023f8:	e035      	b.n	8002466 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fa:	4b10      	ldr	r3, [pc, #64]	@ (800243c <HAL_RCC_OscConfig+0x4cc>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002400:	f7ff fb20 	bl	8001a44 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002408:	f7ff fb1c 	bl	8001a44 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e026      	b.n	8002468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800241a:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <HAL_RCC_OscConfig+0x4c4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0x498>
 8002426:	e01e      	b.n	8002466 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69db      	ldr	r3, [r3, #28]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d107      	bne.n	8002440 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e019      	b.n	8002468 <HAL_RCC_OscConfig+0x4f8>
 8002434:	40021000 	.word	0x40021000
 8002438:	40007000 	.word	0x40007000
 800243c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002440:	4b0b      	ldr	r3, [pc, #44]	@ (8002470 <HAL_RCC_OscConfig+0x500>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	429a      	cmp	r2, r3
 8002452:	d106      	bne.n	8002462 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245e:	429a      	cmp	r2, r3
 8002460:	d001      	beq.n	8002466 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40021000 	.word	0x40021000

08002474 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0d0      	b.n	800262a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002488:	4b6a      	ldr	r3, [pc, #424]	@ (8002634 <HAL_RCC_ClockConfig+0x1c0>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d910      	bls.n	80024b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b67      	ldr	r3, [pc, #412]	@ (8002634 <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 0207 	bic.w	r2, r3, #7
 800249e:	4965      	ldr	r1, [pc, #404]	@ (8002634 <HAL_RCC_ClockConfig+0x1c0>)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	4b63      	ldr	r3, [pc, #396]	@ (8002634 <HAL_RCC_ClockConfig+0x1c0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e0b8      	b.n	800262a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d020      	beq.n	8002506 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024d0:	4b59      	ldr	r3, [pc, #356]	@ (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	4a58      	ldr	r2, [pc, #352]	@ (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0308 	and.w	r3, r3, #8
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e8:	4b53      	ldr	r3, [pc, #332]	@ (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	4a52      	ldr	r2, [pc, #328]	@ (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80024f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f4:	4b50      	ldr	r3, [pc, #320]	@ (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	494d      	ldr	r1, [pc, #308]	@ (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 8002502:	4313      	orrs	r3, r2
 8002504:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d040      	beq.n	8002594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d107      	bne.n	800252a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251a:	4b47      	ldr	r3, [pc, #284]	@ (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d115      	bne.n	8002552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e07f      	b.n	800262a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b02      	cmp	r3, #2
 8002530:	d107      	bne.n	8002542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002532:	4b41      	ldr	r3, [pc, #260]	@ (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d109      	bne.n	8002552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e073      	b.n	800262a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002542:	4b3d      	ldr	r3, [pc, #244]	@ (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e06b      	b.n	800262a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002552:	4b39      	ldr	r3, [pc, #228]	@ (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f023 0203 	bic.w	r2, r3, #3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	4936      	ldr	r1, [pc, #216]	@ (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 8002560:	4313      	orrs	r3, r2
 8002562:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002564:	f7ff fa6e 	bl	8001a44 <HAL_GetTick>
 8002568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256a:	e00a      	b.n	8002582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800256c:	f7ff fa6a 	bl	8001a44 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800257a:	4293      	cmp	r3, r2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e053      	b.n	800262a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002582:	4b2d      	ldr	r3, [pc, #180]	@ (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f003 020c 	and.w	r2, r3, #12
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	429a      	cmp	r2, r3
 8002592:	d1eb      	bne.n	800256c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002594:	4b27      	ldr	r3, [pc, #156]	@ (8002634 <HAL_RCC_ClockConfig+0x1c0>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d210      	bcs.n	80025c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a2:	4b24      	ldr	r3, [pc, #144]	@ (8002634 <HAL_RCC_ClockConfig+0x1c0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f023 0207 	bic.w	r2, r3, #7
 80025aa:	4922      	ldr	r1, [pc, #136]	@ (8002634 <HAL_RCC_ClockConfig+0x1c0>)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b2:	4b20      	ldr	r3, [pc, #128]	@ (8002634 <HAL_RCC_ClockConfig+0x1c0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d001      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e032      	b.n	800262a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d008      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d0:	4b19      	ldr	r3, [pc, #100]	@ (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	4916      	ldr	r1, [pc, #88]	@ (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d009      	beq.n	8002602 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025ee:	4b12      	ldr	r3, [pc, #72]	@ (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	490e      	ldr	r1, [pc, #56]	@ (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002602:	f000 f821 	bl	8002648 <HAL_RCC_GetSysClockFreq>
 8002606:	4602      	mov	r2, r0
 8002608:	4b0b      	ldr	r3, [pc, #44]	@ (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	490a      	ldr	r1, [pc, #40]	@ (800263c <HAL_RCC_ClockConfig+0x1c8>)
 8002614:	5ccb      	ldrb	r3, [r1, r3]
 8002616:	fa22 f303 	lsr.w	r3, r2, r3
 800261a:	4a09      	ldr	r2, [pc, #36]	@ (8002640 <HAL_RCC_ClockConfig+0x1cc>)
 800261c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800261e:	4b09      	ldr	r3, [pc, #36]	@ (8002644 <HAL_RCC_ClockConfig+0x1d0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff f9cc 	bl	80019c0 <HAL_InitTick>

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40022000 	.word	0x40022000
 8002638:	40021000 	.word	0x40021000
 800263c:	08003b54 	.word	0x08003b54
 8002640:	20000000 	.word	0x20000000
 8002644:	20000068 	.word	0x20000068

08002648 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002648:	b480      	push	{r7}
 800264a:	b087      	sub	sp, #28
 800264c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	2300      	movs	r3, #0
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	2300      	movs	r3, #0
 800265c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002662:	4b1e      	ldr	r3, [pc, #120]	@ (80026dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	2b04      	cmp	r3, #4
 8002670:	d002      	beq.n	8002678 <HAL_RCC_GetSysClockFreq+0x30>
 8002672:	2b08      	cmp	r3, #8
 8002674:	d003      	beq.n	800267e <HAL_RCC_GetSysClockFreq+0x36>
 8002676:	e027      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002678:	4b19      	ldr	r3, [pc, #100]	@ (80026e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800267a:	613b      	str	r3, [r7, #16]
      break;
 800267c:	e027      	b.n	80026ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	0c9b      	lsrs	r3, r3, #18
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	4a17      	ldr	r2, [pc, #92]	@ (80026e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002688:	5cd3      	ldrb	r3, [r2, r3]
 800268a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d010      	beq.n	80026b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002696:	4b11      	ldr	r3, [pc, #68]	@ (80026dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	0c5b      	lsrs	r3, r3, #17
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	4a11      	ldr	r2, [pc, #68]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80026a2:	5cd3      	ldrb	r3, [r2, r3]
 80026a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a0d      	ldr	r2, [pc, #52]	@ (80026e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80026aa:	fb03 f202 	mul.w	r2, r3, r2
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	e004      	b.n	80026c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a0c      	ldr	r2, [pc, #48]	@ (80026ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80026bc:	fb02 f303 	mul.w	r3, r2, r3
 80026c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	613b      	str	r3, [r7, #16]
      break;
 80026c6:	e002      	b.n	80026ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026c8:	4b05      	ldr	r3, [pc, #20]	@ (80026e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80026ca:	613b      	str	r3, [r7, #16]
      break;
 80026cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ce:	693b      	ldr	r3, [r7, #16]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	371c      	adds	r7, #28
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40021000 	.word	0x40021000
 80026e0:	007a1200 	.word	0x007a1200
 80026e4:	08003b90 	.word	0x08003b90
 80026e8:	08003ba0 	.word	0x08003ba0
 80026ec:	003d0900 	.word	0x003d0900

080026f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026f4:	4b02      	ldr	r3, [pc, #8]	@ (8002700 <HAL_RCC_GetHCLKFreq+0x10>)
 80026f6:	681b      	ldr	r3, [r3, #0]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr
 8002700:	20000000 	.word	0x20000000

08002704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002708:	f7ff fff2 	bl	80026f0 <HAL_RCC_GetHCLKFreq>
 800270c:	4602      	mov	r2, r0
 800270e:	4b05      	ldr	r3, [pc, #20]	@ (8002724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	0a1b      	lsrs	r3, r3, #8
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	4903      	ldr	r1, [pc, #12]	@ (8002728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800271a:	5ccb      	ldrb	r3, [r1, r3]
 800271c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002720:	4618      	mov	r0, r3
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40021000 	.word	0x40021000
 8002728:	08003b64 	.word	0x08003b64

0800272c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002730:	f7ff ffde 	bl	80026f0 <HAL_RCC_GetHCLKFreq>
 8002734:	4602      	mov	r2, r0
 8002736:	4b05      	ldr	r3, [pc, #20]	@ (800274c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	0adb      	lsrs	r3, r3, #11
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	4903      	ldr	r1, [pc, #12]	@ (8002750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002742:	5ccb      	ldrb	r3, [r1, r3]
 8002744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002748:	4618      	mov	r0, r3
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40021000 	.word	0x40021000
 8002750:	08003b64 	.word	0x08003b64

08002754 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800275c:	4b0a      	ldr	r3, [pc, #40]	@ (8002788 <RCC_Delay+0x34>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a0a      	ldr	r2, [pc, #40]	@ (800278c <RCC_Delay+0x38>)
 8002762:	fba2 2303 	umull	r2, r3, r2, r3
 8002766:	0a5b      	lsrs	r3, r3, #9
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	fb02 f303 	mul.w	r3, r2, r3
 800276e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002770:	bf00      	nop
  }
  while (Delay --);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1e5a      	subs	r2, r3, #1
 8002776:	60fa      	str	r2, [r7, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f9      	bne.n	8002770 <RCC_Delay+0x1c>
}
 800277c:	bf00      	nop
 800277e:	bf00      	nop
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr
 8002788:	20000000 	.word	0x20000000
 800278c:	10624dd3 	.word	0x10624dd3

08002790 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e04a      	b.n	8002838 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7fe f814 	bl	80007e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2224      	movs	r2, #36	@ 0x24
 80027c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f925 	bl	8002a24 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695a      	ldr	r2, [r3, #20]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80027f8:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695a      	ldr	r2, [r3, #20]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 0208 	orr.w	r2, r2, #8
 8002808:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002818:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08a      	sub	sp, #40	@ 0x28
 8002844:	af02      	add	r7, sp, #8
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	603b      	str	r3, [r7, #0]
 800284c:	4613      	mov	r3, r2
 800284e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b20      	cmp	r3, #32
 800285e:	d16d      	bne.n	800293c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <HAL_UART_Transmit+0x2c>
 8002866:	88fb      	ldrh	r3, [r7, #6]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e066      	b.n	800293e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2221      	movs	r2, #33	@ 0x21
 800287a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800287e:	f7ff f8e1 	bl	8001a44 <HAL_GetTick>
 8002882:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	88fa      	ldrh	r2, [r7, #6]
 8002888:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	88fa      	ldrh	r2, [r7, #6]
 800288e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002898:	d108      	bne.n	80028ac <HAL_UART_Transmit+0x6c>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d104      	bne.n	80028ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	61bb      	str	r3, [r7, #24]
 80028aa:	e003      	b.n	80028b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028b4:	e02a      	b.n	800290c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2200      	movs	r2, #0
 80028be:	2180      	movs	r1, #128	@ 0x80
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 f840 	bl	8002946 <UART_WaitOnFlagUntilTimeout>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e036      	b.n	800293e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10b      	bne.n	80028ee <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	3302      	adds	r3, #2
 80028ea:	61bb      	str	r3, [r7, #24]
 80028ec:	e007      	b.n	80028fe <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	781a      	ldrb	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	3301      	adds	r3, #1
 80028fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002902:	b29b      	uxth	r3, r3
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002910:	b29b      	uxth	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1cf      	bne.n	80028b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2200      	movs	r2, #0
 800291e:	2140      	movs	r1, #64	@ 0x40
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 f810 	bl	8002946 <UART_WaitOnFlagUntilTimeout>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e006      	b.n	800293e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002938:	2300      	movs	r3, #0
 800293a:	e000      	b.n	800293e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800293c:	2302      	movs	r3, #2
  }
}
 800293e:	4618      	mov	r0, r3
 8002940:	3720      	adds	r7, #32
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b090      	sub	sp, #64	@ 0x40
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	603b      	str	r3, [r7, #0]
 8002952:	4613      	mov	r3, r2
 8002954:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002956:	e050      	b.n	80029fa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002958:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800295a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295e:	d04c      	beq.n	80029fa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002960:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002962:	2b00      	cmp	r3, #0
 8002964:	d007      	beq.n	8002976 <UART_WaitOnFlagUntilTimeout+0x30>
 8002966:	f7ff f86d 	bl	8001a44 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002972:	429a      	cmp	r2, r3
 8002974:	d241      	bcs.n	80029fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	330c      	adds	r3, #12
 800297c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800297e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002980:	e853 3f00 	ldrex	r3, [r3]
 8002984:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002988:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800298c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	330c      	adds	r3, #12
 8002994:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002996:	637a      	str	r2, [r7, #52]	@ 0x34
 8002998:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800299a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800299c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800299e:	e841 2300 	strex	r3, r2, [r1]
 80029a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80029a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1e5      	bne.n	8002976 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	3314      	adds	r3, #20
 80029b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	e853 3f00 	ldrex	r3, [r3]
 80029b8:	613b      	str	r3, [r7, #16]
   return(result);
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	f023 0301 	bic.w	r3, r3, #1
 80029c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	3314      	adds	r3, #20
 80029c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80029ca:	623a      	str	r2, [r7, #32]
 80029cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ce:	69f9      	ldr	r1, [r7, #28]
 80029d0:	6a3a      	ldr	r2, [r7, #32]
 80029d2:	e841 2300 	strex	r3, r2, [r1]
 80029d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1e5      	bne.n	80029aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2220      	movs	r2, #32
 80029e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2220      	movs	r2, #32
 80029ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e00f      	b.n	8002a1a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	4013      	ands	r3, r2
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	bf0c      	ite	eq
 8002a0a:	2301      	moveq	r3, #1
 8002a0c:	2300      	movne	r3, #0
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	461a      	mov	r2, r3
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d09f      	beq.n	8002958 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3740      	adds	r7, #64	@ 0x40
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689a      	ldr	r2, [r3, #8]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002a5e:	f023 030c 	bic.w	r3, r3, #12
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6812      	ldr	r2, [r2, #0]
 8002a66:	68b9      	ldr	r1, [r7, #8]
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699a      	ldr	r2, [r3, #24]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a2c      	ldr	r2, [pc, #176]	@ (8002b38 <UART_SetConfig+0x114>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d103      	bne.n	8002a94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a8c:	f7ff fe4e 	bl	800272c <HAL_RCC_GetPCLK2Freq>
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	e002      	b.n	8002a9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a94:	f7ff fe36 	bl	8002704 <HAL_RCC_GetPCLK1Freq>
 8002a98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	009a      	lsls	r2, r3, #2
 8002aa4:	441a      	add	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab0:	4a22      	ldr	r2, [pc, #136]	@ (8002b3c <UART_SetConfig+0x118>)
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	0119      	lsls	r1, r3, #4
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009a      	lsls	r2, r3, #2
 8002ac4:	441a      	add	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b3c <UART_SetConfig+0x118>)
 8002ad2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	2064      	movs	r0, #100	@ 0x64
 8002ada:	fb00 f303 	mul.w	r3, r0, r3
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	3332      	adds	r3, #50	@ 0x32
 8002ae4:	4a15      	ldr	r2, [pc, #84]	@ (8002b3c <UART_SetConfig+0x118>)
 8002ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002af0:	4419      	add	r1, r3
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	009a      	lsls	r2, r3, #2
 8002afc:	441a      	add	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b08:	4b0c      	ldr	r3, [pc, #48]	@ (8002b3c <UART_SetConfig+0x118>)
 8002b0a:	fba3 0302 	umull	r0, r3, r3, r2
 8002b0e:	095b      	lsrs	r3, r3, #5
 8002b10:	2064      	movs	r0, #100	@ 0x64
 8002b12:	fb00 f303 	mul.w	r3, r0, r3
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	3332      	adds	r3, #50	@ 0x32
 8002b1c:	4a07      	ldr	r2, [pc, #28]	@ (8002b3c <UART_SetConfig+0x118>)
 8002b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	f003 020f 	and.w	r2, r3, #15
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	440a      	add	r2, r1
 8002b2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b30:	bf00      	nop
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40013800 	.word	0x40013800
 8002b3c:	51eb851f 	.word	0x51eb851f

08002b40 <std>:
 8002b40:	2300      	movs	r3, #0
 8002b42:	b510      	push	{r4, lr}
 8002b44:	4604      	mov	r4, r0
 8002b46:	e9c0 3300 	strd	r3, r3, [r0]
 8002b4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b4e:	6083      	str	r3, [r0, #8]
 8002b50:	8181      	strh	r1, [r0, #12]
 8002b52:	6643      	str	r3, [r0, #100]	@ 0x64
 8002b54:	81c2      	strh	r2, [r0, #14]
 8002b56:	6183      	str	r3, [r0, #24]
 8002b58:	4619      	mov	r1, r3
 8002b5a:	2208      	movs	r2, #8
 8002b5c:	305c      	adds	r0, #92	@ 0x5c
 8002b5e:	f000 fa03 	bl	8002f68 <memset>
 8002b62:	4b0d      	ldr	r3, [pc, #52]	@ (8002b98 <std+0x58>)
 8002b64:	6224      	str	r4, [r4, #32]
 8002b66:	6263      	str	r3, [r4, #36]	@ 0x24
 8002b68:	4b0c      	ldr	r3, [pc, #48]	@ (8002b9c <std+0x5c>)
 8002b6a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba0 <std+0x60>)
 8002b6e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002b70:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba4 <std+0x64>)
 8002b72:	6323      	str	r3, [r4, #48]	@ 0x30
 8002b74:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba8 <std+0x68>)
 8002b76:	429c      	cmp	r4, r3
 8002b78:	d006      	beq.n	8002b88 <std+0x48>
 8002b7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002b7e:	4294      	cmp	r4, r2
 8002b80:	d002      	beq.n	8002b88 <std+0x48>
 8002b82:	33d0      	adds	r3, #208	@ 0xd0
 8002b84:	429c      	cmp	r4, r3
 8002b86:	d105      	bne.n	8002b94 <std+0x54>
 8002b88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b90:	f000 ba62 	b.w	8003058 <__retarget_lock_init_recursive>
 8002b94:	bd10      	pop	{r4, pc}
 8002b96:	bf00      	nop
 8002b98:	08002da5 	.word	0x08002da5
 8002b9c:	08002dc7 	.word	0x08002dc7
 8002ba0:	08002dff 	.word	0x08002dff
 8002ba4:	08002e23 	.word	0x08002e23
 8002ba8:	2000101c 	.word	0x2000101c

08002bac <stdio_exit_handler>:
 8002bac:	4a02      	ldr	r2, [pc, #8]	@ (8002bb8 <stdio_exit_handler+0xc>)
 8002bae:	4903      	ldr	r1, [pc, #12]	@ (8002bbc <stdio_exit_handler+0x10>)
 8002bb0:	4803      	ldr	r0, [pc, #12]	@ (8002bc0 <stdio_exit_handler+0x14>)
 8002bb2:	f000 b869 	b.w	8002c88 <_fwalk_sglue>
 8002bb6:	bf00      	nop
 8002bb8:	20000070 	.word	0x20000070
 8002bbc:	080038f1 	.word	0x080038f1
 8002bc0:	20000080 	.word	0x20000080

08002bc4 <cleanup_stdio>:
 8002bc4:	6841      	ldr	r1, [r0, #4]
 8002bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf8 <cleanup_stdio+0x34>)
 8002bc8:	b510      	push	{r4, lr}
 8002bca:	4299      	cmp	r1, r3
 8002bcc:	4604      	mov	r4, r0
 8002bce:	d001      	beq.n	8002bd4 <cleanup_stdio+0x10>
 8002bd0:	f000 fe8e 	bl	80038f0 <_fflush_r>
 8002bd4:	68a1      	ldr	r1, [r4, #8]
 8002bd6:	4b09      	ldr	r3, [pc, #36]	@ (8002bfc <cleanup_stdio+0x38>)
 8002bd8:	4299      	cmp	r1, r3
 8002bda:	d002      	beq.n	8002be2 <cleanup_stdio+0x1e>
 8002bdc:	4620      	mov	r0, r4
 8002bde:	f000 fe87 	bl	80038f0 <_fflush_r>
 8002be2:	68e1      	ldr	r1, [r4, #12]
 8002be4:	4b06      	ldr	r3, [pc, #24]	@ (8002c00 <cleanup_stdio+0x3c>)
 8002be6:	4299      	cmp	r1, r3
 8002be8:	d004      	beq.n	8002bf4 <cleanup_stdio+0x30>
 8002bea:	4620      	mov	r0, r4
 8002bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bf0:	f000 be7e 	b.w	80038f0 <_fflush_r>
 8002bf4:	bd10      	pop	{r4, pc}
 8002bf6:	bf00      	nop
 8002bf8:	2000101c 	.word	0x2000101c
 8002bfc:	20001084 	.word	0x20001084
 8002c00:	200010ec 	.word	0x200010ec

08002c04 <global_stdio_init.part.0>:
 8002c04:	b510      	push	{r4, lr}
 8002c06:	4b0b      	ldr	r3, [pc, #44]	@ (8002c34 <global_stdio_init.part.0+0x30>)
 8002c08:	4c0b      	ldr	r4, [pc, #44]	@ (8002c38 <global_stdio_init.part.0+0x34>)
 8002c0a:	4a0c      	ldr	r2, [pc, #48]	@ (8002c3c <global_stdio_init.part.0+0x38>)
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	2104      	movs	r1, #4
 8002c12:	2200      	movs	r2, #0
 8002c14:	f7ff ff94 	bl	8002b40 <std>
 8002c18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	2109      	movs	r1, #9
 8002c20:	f7ff ff8e 	bl	8002b40 <std>
 8002c24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002c28:	2202      	movs	r2, #2
 8002c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c2e:	2112      	movs	r1, #18
 8002c30:	f7ff bf86 	b.w	8002b40 <std>
 8002c34:	20001154 	.word	0x20001154
 8002c38:	2000101c 	.word	0x2000101c
 8002c3c:	08002bad 	.word	0x08002bad

08002c40 <__sfp_lock_acquire>:
 8002c40:	4801      	ldr	r0, [pc, #4]	@ (8002c48 <__sfp_lock_acquire+0x8>)
 8002c42:	f000 ba0a 	b.w	800305a <__retarget_lock_acquire_recursive>
 8002c46:	bf00      	nop
 8002c48:	2000115d 	.word	0x2000115d

08002c4c <__sfp_lock_release>:
 8002c4c:	4801      	ldr	r0, [pc, #4]	@ (8002c54 <__sfp_lock_release+0x8>)
 8002c4e:	f000 ba05 	b.w	800305c <__retarget_lock_release_recursive>
 8002c52:	bf00      	nop
 8002c54:	2000115d 	.word	0x2000115d

08002c58 <__sinit>:
 8002c58:	b510      	push	{r4, lr}
 8002c5a:	4604      	mov	r4, r0
 8002c5c:	f7ff fff0 	bl	8002c40 <__sfp_lock_acquire>
 8002c60:	6a23      	ldr	r3, [r4, #32]
 8002c62:	b11b      	cbz	r3, 8002c6c <__sinit+0x14>
 8002c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c68:	f7ff bff0 	b.w	8002c4c <__sfp_lock_release>
 8002c6c:	4b04      	ldr	r3, [pc, #16]	@ (8002c80 <__sinit+0x28>)
 8002c6e:	6223      	str	r3, [r4, #32]
 8002c70:	4b04      	ldr	r3, [pc, #16]	@ (8002c84 <__sinit+0x2c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1f5      	bne.n	8002c64 <__sinit+0xc>
 8002c78:	f7ff ffc4 	bl	8002c04 <global_stdio_init.part.0>
 8002c7c:	e7f2      	b.n	8002c64 <__sinit+0xc>
 8002c7e:	bf00      	nop
 8002c80:	08002bc5 	.word	0x08002bc5
 8002c84:	20001154 	.word	0x20001154

08002c88 <_fwalk_sglue>:
 8002c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c8c:	4607      	mov	r7, r0
 8002c8e:	4688      	mov	r8, r1
 8002c90:	4614      	mov	r4, r2
 8002c92:	2600      	movs	r6, #0
 8002c94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c98:	f1b9 0901 	subs.w	r9, r9, #1
 8002c9c:	d505      	bpl.n	8002caa <_fwalk_sglue+0x22>
 8002c9e:	6824      	ldr	r4, [r4, #0]
 8002ca0:	2c00      	cmp	r4, #0
 8002ca2:	d1f7      	bne.n	8002c94 <_fwalk_sglue+0xc>
 8002ca4:	4630      	mov	r0, r6
 8002ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002caa:	89ab      	ldrh	r3, [r5, #12]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d907      	bls.n	8002cc0 <_fwalk_sglue+0x38>
 8002cb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	d003      	beq.n	8002cc0 <_fwalk_sglue+0x38>
 8002cb8:	4629      	mov	r1, r5
 8002cba:	4638      	mov	r0, r7
 8002cbc:	47c0      	blx	r8
 8002cbe:	4306      	orrs	r6, r0
 8002cc0:	3568      	adds	r5, #104	@ 0x68
 8002cc2:	e7e9      	b.n	8002c98 <_fwalk_sglue+0x10>

08002cc4 <iprintf>:
 8002cc4:	b40f      	push	{r0, r1, r2, r3}
 8002cc6:	b507      	push	{r0, r1, r2, lr}
 8002cc8:	4906      	ldr	r1, [pc, #24]	@ (8002ce4 <iprintf+0x20>)
 8002cca:	ab04      	add	r3, sp, #16
 8002ccc:	6808      	ldr	r0, [r1, #0]
 8002cce:	f853 2b04 	ldr.w	r2, [r3], #4
 8002cd2:	6881      	ldr	r1, [r0, #8]
 8002cd4:	9301      	str	r3, [sp, #4]
 8002cd6:	f000 fae1 	bl	800329c <_vfiprintf_r>
 8002cda:	b003      	add	sp, #12
 8002cdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ce0:	b004      	add	sp, #16
 8002ce2:	4770      	bx	lr
 8002ce4:	2000007c 	.word	0x2000007c

08002ce8 <_puts_r>:
 8002ce8:	6a03      	ldr	r3, [r0, #32]
 8002cea:	b570      	push	{r4, r5, r6, lr}
 8002cec:	4605      	mov	r5, r0
 8002cee:	460e      	mov	r6, r1
 8002cf0:	6884      	ldr	r4, [r0, #8]
 8002cf2:	b90b      	cbnz	r3, 8002cf8 <_puts_r+0x10>
 8002cf4:	f7ff ffb0 	bl	8002c58 <__sinit>
 8002cf8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002cfa:	07db      	lsls	r3, r3, #31
 8002cfc:	d405      	bmi.n	8002d0a <_puts_r+0x22>
 8002cfe:	89a3      	ldrh	r3, [r4, #12]
 8002d00:	0598      	lsls	r0, r3, #22
 8002d02:	d402      	bmi.n	8002d0a <_puts_r+0x22>
 8002d04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d06:	f000 f9a8 	bl	800305a <__retarget_lock_acquire_recursive>
 8002d0a:	89a3      	ldrh	r3, [r4, #12]
 8002d0c:	0719      	lsls	r1, r3, #28
 8002d0e:	d502      	bpl.n	8002d16 <_puts_r+0x2e>
 8002d10:	6923      	ldr	r3, [r4, #16]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d135      	bne.n	8002d82 <_puts_r+0x9a>
 8002d16:	4621      	mov	r1, r4
 8002d18:	4628      	mov	r0, r5
 8002d1a:	f000 f8cf 	bl	8002ebc <__swsetup_r>
 8002d1e:	b380      	cbz	r0, 8002d82 <_puts_r+0x9a>
 8002d20:	f04f 35ff 	mov.w	r5, #4294967295
 8002d24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d26:	07da      	lsls	r2, r3, #31
 8002d28:	d405      	bmi.n	8002d36 <_puts_r+0x4e>
 8002d2a:	89a3      	ldrh	r3, [r4, #12]
 8002d2c:	059b      	lsls	r3, r3, #22
 8002d2e:	d402      	bmi.n	8002d36 <_puts_r+0x4e>
 8002d30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d32:	f000 f993 	bl	800305c <__retarget_lock_release_recursive>
 8002d36:	4628      	mov	r0, r5
 8002d38:	bd70      	pop	{r4, r5, r6, pc}
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	da04      	bge.n	8002d48 <_puts_r+0x60>
 8002d3e:	69a2      	ldr	r2, [r4, #24]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	dc17      	bgt.n	8002d74 <_puts_r+0x8c>
 8002d44:	290a      	cmp	r1, #10
 8002d46:	d015      	beq.n	8002d74 <_puts_r+0x8c>
 8002d48:	6823      	ldr	r3, [r4, #0]
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	6022      	str	r2, [r4, #0]
 8002d4e:	7019      	strb	r1, [r3, #0]
 8002d50:	68a3      	ldr	r3, [r4, #8]
 8002d52:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d56:	3b01      	subs	r3, #1
 8002d58:	60a3      	str	r3, [r4, #8]
 8002d5a:	2900      	cmp	r1, #0
 8002d5c:	d1ed      	bne.n	8002d3a <_puts_r+0x52>
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	da11      	bge.n	8002d86 <_puts_r+0x9e>
 8002d62:	4622      	mov	r2, r4
 8002d64:	210a      	movs	r1, #10
 8002d66:	4628      	mov	r0, r5
 8002d68:	f000 f86a 	bl	8002e40 <__swbuf_r>
 8002d6c:	3001      	adds	r0, #1
 8002d6e:	d0d7      	beq.n	8002d20 <_puts_r+0x38>
 8002d70:	250a      	movs	r5, #10
 8002d72:	e7d7      	b.n	8002d24 <_puts_r+0x3c>
 8002d74:	4622      	mov	r2, r4
 8002d76:	4628      	mov	r0, r5
 8002d78:	f000 f862 	bl	8002e40 <__swbuf_r>
 8002d7c:	3001      	adds	r0, #1
 8002d7e:	d1e7      	bne.n	8002d50 <_puts_r+0x68>
 8002d80:	e7ce      	b.n	8002d20 <_puts_r+0x38>
 8002d82:	3e01      	subs	r6, #1
 8002d84:	e7e4      	b.n	8002d50 <_puts_r+0x68>
 8002d86:	6823      	ldr	r3, [r4, #0]
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	6022      	str	r2, [r4, #0]
 8002d8c:	220a      	movs	r2, #10
 8002d8e:	701a      	strb	r2, [r3, #0]
 8002d90:	e7ee      	b.n	8002d70 <_puts_r+0x88>
	...

08002d94 <puts>:
 8002d94:	4b02      	ldr	r3, [pc, #8]	@ (8002da0 <puts+0xc>)
 8002d96:	4601      	mov	r1, r0
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	f7ff bfa5 	b.w	8002ce8 <_puts_r>
 8002d9e:	bf00      	nop
 8002da0:	2000007c 	.word	0x2000007c

08002da4 <__sread>:
 8002da4:	b510      	push	{r4, lr}
 8002da6:	460c      	mov	r4, r1
 8002da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dac:	f000 f906 	bl	8002fbc <_read_r>
 8002db0:	2800      	cmp	r0, #0
 8002db2:	bfab      	itete	ge
 8002db4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002db6:	89a3      	ldrhlt	r3, [r4, #12]
 8002db8:	181b      	addge	r3, r3, r0
 8002dba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002dbe:	bfac      	ite	ge
 8002dc0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002dc2:	81a3      	strhlt	r3, [r4, #12]
 8002dc4:	bd10      	pop	{r4, pc}

08002dc6 <__swrite>:
 8002dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dca:	461f      	mov	r7, r3
 8002dcc:	898b      	ldrh	r3, [r1, #12]
 8002dce:	4605      	mov	r5, r0
 8002dd0:	05db      	lsls	r3, r3, #23
 8002dd2:	460c      	mov	r4, r1
 8002dd4:	4616      	mov	r6, r2
 8002dd6:	d505      	bpl.n	8002de4 <__swrite+0x1e>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002de0:	f000 f8da 	bl	8002f98 <_lseek_r>
 8002de4:	89a3      	ldrh	r3, [r4, #12]
 8002de6:	4632      	mov	r2, r6
 8002de8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002dec:	81a3      	strh	r3, [r4, #12]
 8002dee:	4628      	mov	r0, r5
 8002df0:	463b      	mov	r3, r7
 8002df2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002dfa:	f000 b8f1 	b.w	8002fe0 <_write_r>

08002dfe <__sseek>:
 8002dfe:	b510      	push	{r4, lr}
 8002e00:	460c      	mov	r4, r1
 8002e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e06:	f000 f8c7 	bl	8002f98 <_lseek_r>
 8002e0a:	1c43      	adds	r3, r0, #1
 8002e0c:	89a3      	ldrh	r3, [r4, #12]
 8002e0e:	bf15      	itete	ne
 8002e10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002e12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002e16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002e1a:	81a3      	strheq	r3, [r4, #12]
 8002e1c:	bf18      	it	ne
 8002e1e:	81a3      	strhne	r3, [r4, #12]
 8002e20:	bd10      	pop	{r4, pc}

08002e22 <__sclose>:
 8002e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e26:	f000 b8a7 	b.w	8002f78 <_close_r>
	...

08002e2c <viprintf>:
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4903      	ldr	r1, [pc, #12]	@ (8002e3c <viprintf+0x10>)
 8002e30:	4602      	mov	r2, r0
 8002e32:	6808      	ldr	r0, [r1, #0]
 8002e34:	6881      	ldr	r1, [r0, #8]
 8002e36:	f000 ba31 	b.w	800329c <_vfiprintf_r>
 8002e3a:	bf00      	nop
 8002e3c:	2000007c 	.word	0x2000007c

08002e40 <__swbuf_r>:
 8002e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e42:	460e      	mov	r6, r1
 8002e44:	4614      	mov	r4, r2
 8002e46:	4605      	mov	r5, r0
 8002e48:	b118      	cbz	r0, 8002e52 <__swbuf_r+0x12>
 8002e4a:	6a03      	ldr	r3, [r0, #32]
 8002e4c:	b90b      	cbnz	r3, 8002e52 <__swbuf_r+0x12>
 8002e4e:	f7ff ff03 	bl	8002c58 <__sinit>
 8002e52:	69a3      	ldr	r3, [r4, #24]
 8002e54:	60a3      	str	r3, [r4, #8]
 8002e56:	89a3      	ldrh	r3, [r4, #12]
 8002e58:	071a      	lsls	r2, r3, #28
 8002e5a:	d501      	bpl.n	8002e60 <__swbuf_r+0x20>
 8002e5c:	6923      	ldr	r3, [r4, #16]
 8002e5e:	b943      	cbnz	r3, 8002e72 <__swbuf_r+0x32>
 8002e60:	4621      	mov	r1, r4
 8002e62:	4628      	mov	r0, r5
 8002e64:	f000 f82a 	bl	8002ebc <__swsetup_r>
 8002e68:	b118      	cbz	r0, 8002e72 <__swbuf_r+0x32>
 8002e6a:	f04f 37ff 	mov.w	r7, #4294967295
 8002e6e:	4638      	mov	r0, r7
 8002e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e72:	6823      	ldr	r3, [r4, #0]
 8002e74:	6922      	ldr	r2, [r4, #16]
 8002e76:	b2f6      	uxtb	r6, r6
 8002e78:	1a98      	subs	r0, r3, r2
 8002e7a:	6963      	ldr	r3, [r4, #20]
 8002e7c:	4637      	mov	r7, r6
 8002e7e:	4283      	cmp	r3, r0
 8002e80:	dc05      	bgt.n	8002e8e <__swbuf_r+0x4e>
 8002e82:	4621      	mov	r1, r4
 8002e84:	4628      	mov	r0, r5
 8002e86:	f000 fd33 	bl	80038f0 <_fflush_r>
 8002e8a:	2800      	cmp	r0, #0
 8002e8c:	d1ed      	bne.n	8002e6a <__swbuf_r+0x2a>
 8002e8e:	68a3      	ldr	r3, [r4, #8]
 8002e90:	3b01      	subs	r3, #1
 8002e92:	60a3      	str	r3, [r4, #8]
 8002e94:	6823      	ldr	r3, [r4, #0]
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	6022      	str	r2, [r4, #0]
 8002e9a:	701e      	strb	r6, [r3, #0]
 8002e9c:	6962      	ldr	r2, [r4, #20]
 8002e9e:	1c43      	adds	r3, r0, #1
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d004      	beq.n	8002eae <__swbuf_r+0x6e>
 8002ea4:	89a3      	ldrh	r3, [r4, #12]
 8002ea6:	07db      	lsls	r3, r3, #31
 8002ea8:	d5e1      	bpl.n	8002e6e <__swbuf_r+0x2e>
 8002eaa:	2e0a      	cmp	r6, #10
 8002eac:	d1df      	bne.n	8002e6e <__swbuf_r+0x2e>
 8002eae:	4621      	mov	r1, r4
 8002eb0:	4628      	mov	r0, r5
 8002eb2:	f000 fd1d 	bl	80038f0 <_fflush_r>
 8002eb6:	2800      	cmp	r0, #0
 8002eb8:	d0d9      	beq.n	8002e6e <__swbuf_r+0x2e>
 8002eba:	e7d6      	b.n	8002e6a <__swbuf_r+0x2a>

08002ebc <__swsetup_r>:
 8002ebc:	b538      	push	{r3, r4, r5, lr}
 8002ebe:	4b29      	ldr	r3, [pc, #164]	@ (8002f64 <__swsetup_r+0xa8>)
 8002ec0:	4605      	mov	r5, r0
 8002ec2:	6818      	ldr	r0, [r3, #0]
 8002ec4:	460c      	mov	r4, r1
 8002ec6:	b118      	cbz	r0, 8002ed0 <__swsetup_r+0x14>
 8002ec8:	6a03      	ldr	r3, [r0, #32]
 8002eca:	b90b      	cbnz	r3, 8002ed0 <__swsetup_r+0x14>
 8002ecc:	f7ff fec4 	bl	8002c58 <__sinit>
 8002ed0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ed4:	0719      	lsls	r1, r3, #28
 8002ed6:	d422      	bmi.n	8002f1e <__swsetup_r+0x62>
 8002ed8:	06da      	lsls	r2, r3, #27
 8002eda:	d407      	bmi.n	8002eec <__swsetup_r+0x30>
 8002edc:	2209      	movs	r2, #9
 8002ede:	602a      	str	r2, [r5, #0]
 8002ee0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee8:	81a3      	strh	r3, [r4, #12]
 8002eea:	e033      	b.n	8002f54 <__swsetup_r+0x98>
 8002eec:	0758      	lsls	r0, r3, #29
 8002eee:	d512      	bpl.n	8002f16 <__swsetup_r+0x5a>
 8002ef0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002ef2:	b141      	cbz	r1, 8002f06 <__swsetup_r+0x4a>
 8002ef4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002ef8:	4299      	cmp	r1, r3
 8002efa:	d002      	beq.n	8002f02 <__swsetup_r+0x46>
 8002efc:	4628      	mov	r0, r5
 8002efe:	f000 f8af 	bl	8003060 <_free_r>
 8002f02:	2300      	movs	r3, #0
 8002f04:	6363      	str	r3, [r4, #52]	@ 0x34
 8002f06:	89a3      	ldrh	r3, [r4, #12]
 8002f08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002f0c:	81a3      	strh	r3, [r4, #12]
 8002f0e:	2300      	movs	r3, #0
 8002f10:	6063      	str	r3, [r4, #4]
 8002f12:	6923      	ldr	r3, [r4, #16]
 8002f14:	6023      	str	r3, [r4, #0]
 8002f16:	89a3      	ldrh	r3, [r4, #12]
 8002f18:	f043 0308 	orr.w	r3, r3, #8
 8002f1c:	81a3      	strh	r3, [r4, #12]
 8002f1e:	6923      	ldr	r3, [r4, #16]
 8002f20:	b94b      	cbnz	r3, 8002f36 <__swsetup_r+0x7a>
 8002f22:	89a3      	ldrh	r3, [r4, #12]
 8002f24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002f28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f2c:	d003      	beq.n	8002f36 <__swsetup_r+0x7a>
 8002f2e:	4621      	mov	r1, r4
 8002f30:	4628      	mov	r0, r5
 8002f32:	f000 fd2a 	bl	800398a <__smakebuf_r>
 8002f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f3a:	f013 0201 	ands.w	r2, r3, #1
 8002f3e:	d00a      	beq.n	8002f56 <__swsetup_r+0x9a>
 8002f40:	2200      	movs	r2, #0
 8002f42:	60a2      	str	r2, [r4, #8]
 8002f44:	6962      	ldr	r2, [r4, #20]
 8002f46:	4252      	negs	r2, r2
 8002f48:	61a2      	str	r2, [r4, #24]
 8002f4a:	6922      	ldr	r2, [r4, #16]
 8002f4c:	b942      	cbnz	r2, 8002f60 <__swsetup_r+0xa4>
 8002f4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002f52:	d1c5      	bne.n	8002ee0 <__swsetup_r+0x24>
 8002f54:	bd38      	pop	{r3, r4, r5, pc}
 8002f56:	0799      	lsls	r1, r3, #30
 8002f58:	bf58      	it	pl
 8002f5a:	6962      	ldrpl	r2, [r4, #20]
 8002f5c:	60a2      	str	r2, [r4, #8]
 8002f5e:	e7f4      	b.n	8002f4a <__swsetup_r+0x8e>
 8002f60:	2000      	movs	r0, #0
 8002f62:	e7f7      	b.n	8002f54 <__swsetup_r+0x98>
 8002f64:	2000007c 	.word	0x2000007c

08002f68 <memset>:
 8002f68:	4603      	mov	r3, r0
 8002f6a:	4402      	add	r2, r0
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d100      	bne.n	8002f72 <memset+0xa>
 8002f70:	4770      	bx	lr
 8002f72:	f803 1b01 	strb.w	r1, [r3], #1
 8002f76:	e7f9      	b.n	8002f6c <memset+0x4>

08002f78 <_close_r>:
 8002f78:	b538      	push	{r3, r4, r5, lr}
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	4d05      	ldr	r5, [pc, #20]	@ (8002f94 <_close_r+0x1c>)
 8002f7e:	4604      	mov	r4, r0
 8002f80:	4608      	mov	r0, r1
 8002f82:	602b      	str	r3, [r5, #0]
 8002f84:	f7fd fca1 	bl	80008ca <_close>
 8002f88:	1c43      	adds	r3, r0, #1
 8002f8a:	d102      	bne.n	8002f92 <_close_r+0x1a>
 8002f8c:	682b      	ldr	r3, [r5, #0]
 8002f8e:	b103      	cbz	r3, 8002f92 <_close_r+0x1a>
 8002f90:	6023      	str	r3, [r4, #0]
 8002f92:	bd38      	pop	{r3, r4, r5, pc}
 8002f94:	20001158 	.word	0x20001158

08002f98 <_lseek_r>:
 8002f98:	b538      	push	{r3, r4, r5, lr}
 8002f9a:	4604      	mov	r4, r0
 8002f9c:	4608      	mov	r0, r1
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	4d05      	ldr	r5, [pc, #20]	@ (8002fb8 <_lseek_r+0x20>)
 8002fa4:	602a      	str	r2, [r5, #0]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f7fd fcb3 	bl	8000912 <_lseek>
 8002fac:	1c43      	adds	r3, r0, #1
 8002fae:	d102      	bne.n	8002fb6 <_lseek_r+0x1e>
 8002fb0:	682b      	ldr	r3, [r5, #0]
 8002fb2:	b103      	cbz	r3, 8002fb6 <_lseek_r+0x1e>
 8002fb4:	6023      	str	r3, [r4, #0]
 8002fb6:	bd38      	pop	{r3, r4, r5, pc}
 8002fb8:	20001158 	.word	0x20001158

08002fbc <_read_r>:
 8002fbc:	b538      	push	{r3, r4, r5, lr}
 8002fbe:	4604      	mov	r4, r0
 8002fc0:	4608      	mov	r0, r1
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	4d05      	ldr	r5, [pc, #20]	@ (8002fdc <_read_r+0x20>)
 8002fc8:	602a      	str	r2, [r5, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	f7fd fc60 	bl	8000890 <_read>
 8002fd0:	1c43      	adds	r3, r0, #1
 8002fd2:	d102      	bne.n	8002fda <_read_r+0x1e>
 8002fd4:	682b      	ldr	r3, [r5, #0]
 8002fd6:	b103      	cbz	r3, 8002fda <_read_r+0x1e>
 8002fd8:	6023      	str	r3, [r4, #0]
 8002fda:	bd38      	pop	{r3, r4, r5, pc}
 8002fdc:	20001158 	.word	0x20001158

08002fe0 <_write_r>:
 8002fe0:	b538      	push	{r3, r4, r5, lr}
 8002fe2:	4604      	mov	r4, r0
 8002fe4:	4608      	mov	r0, r1
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	2200      	movs	r2, #0
 8002fea:	4d05      	ldr	r5, [pc, #20]	@ (8003000 <_write_r+0x20>)
 8002fec:	602a      	str	r2, [r5, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	f7fe fb4c 	bl	800168c <_write>
 8002ff4:	1c43      	adds	r3, r0, #1
 8002ff6:	d102      	bne.n	8002ffe <_write_r+0x1e>
 8002ff8:	682b      	ldr	r3, [r5, #0]
 8002ffa:	b103      	cbz	r3, 8002ffe <_write_r+0x1e>
 8002ffc:	6023      	str	r3, [r4, #0]
 8002ffe:	bd38      	pop	{r3, r4, r5, pc}
 8003000:	20001158 	.word	0x20001158

08003004 <__errno>:
 8003004:	4b01      	ldr	r3, [pc, #4]	@ (800300c <__errno+0x8>)
 8003006:	6818      	ldr	r0, [r3, #0]
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	2000007c 	.word	0x2000007c

08003010 <__libc_init_array>:
 8003010:	b570      	push	{r4, r5, r6, lr}
 8003012:	2600      	movs	r6, #0
 8003014:	4d0c      	ldr	r5, [pc, #48]	@ (8003048 <__libc_init_array+0x38>)
 8003016:	4c0d      	ldr	r4, [pc, #52]	@ (800304c <__libc_init_array+0x3c>)
 8003018:	1b64      	subs	r4, r4, r5
 800301a:	10a4      	asrs	r4, r4, #2
 800301c:	42a6      	cmp	r6, r4
 800301e:	d109      	bne.n	8003034 <__libc_init_array+0x24>
 8003020:	f000 fd30 	bl	8003a84 <_init>
 8003024:	2600      	movs	r6, #0
 8003026:	4d0a      	ldr	r5, [pc, #40]	@ (8003050 <__libc_init_array+0x40>)
 8003028:	4c0a      	ldr	r4, [pc, #40]	@ (8003054 <__libc_init_array+0x44>)
 800302a:	1b64      	subs	r4, r4, r5
 800302c:	10a4      	asrs	r4, r4, #2
 800302e:	42a6      	cmp	r6, r4
 8003030:	d105      	bne.n	800303e <__libc_init_array+0x2e>
 8003032:	bd70      	pop	{r4, r5, r6, pc}
 8003034:	f855 3b04 	ldr.w	r3, [r5], #4
 8003038:	4798      	blx	r3
 800303a:	3601      	adds	r6, #1
 800303c:	e7ee      	b.n	800301c <__libc_init_array+0xc>
 800303e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003042:	4798      	blx	r3
 8003044:	3601      	adds	r6, #1
 8003046:	e7f2      	b.n	800302e <__libc_init_array+0x1e>
 8003048:	08003bd8 	.word	0x08003bd8
 800304c:	08003bd8 	.word	0x08003bd8
 8003050:	08003bd8 	.word	0x08003bd8
 8003054:	08003bdc 	.word	0x08003bdc

08003058 <__retarget_lock_init_recursive>:
 8003058:	4770      	bx	lr

0800305a <__retarget_lock_acquire_recursive>:
 800305a:	4770      	bx	lr

0800305c <__retarget_lock_release_recursive>:
 800305c:	4770      	bx	lr
	...

08003060 <_free_r>:
 8003060:	b538      	push	{r3, r4, r5, lr}
 8003062:	4605      	mov	r5, r0
 8003064:	2900      	cmp	r1, #0
 8003066:	d040      	beq.n	80030ea <_free_r+0x8a>
 8003068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800306c:	1f0c      	subs	r4, r1, #4
 800306e:	2b00      	cmp	r3, #0
 8003070:	bfb8      	it	lt
 8003072:	18e4      	addlt	r4, r4, r3
 8003074:	f000 f8de 	bl	8003234 <__malloc_lock>
 8003078:	4a1c      	ldr	r2, [pc, #112]	@ (80030ec <_free_r+0x8c>)
 800307a:	6813      	ldr	r3, [r2, #0]
 800307c:	b933      	cbnz	r3, 800308c <_free_r+0x2c>
 800307e:	6063      	str	r3, [r4, #4]
 8003080:	6014      	str	r4, [r2, #0]
 8003082:	4628      	mov	r0, r5
 8003084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003088:	f000 b8da 	b.w	8003240 <__malloc_unlock>
 800308c:	42a3      	cmp	r3, r4
 800308e:	d908      	bls.n	80030a2 <_free_r+0x42>
 8003090:	6820      	ldr	r0, [r4, #0]
 8003092:	1821      	adds	r1, r4, r0
 8003094:	428b      	cmp	r3, r1
 8003096:	bf01      	itttt	eq
 8003098:	6819      	ldreq	r1, [r3, #0]
 800309a:	685b      	ldreq	r3, [r3, #4]
 800309c:	1809      	addeq	r1, r1, r0
 800309e:	6021      	streq	r1, [r4, #0]
 80030a0:	e7ed      	b.n	800307e <_free_r+0x1e>
 80030a2:	461a      	mov	r2, r3
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	b10b      	cbz	r3, 80030ac <_free_r+0x4c>
 80030a8:	42a3      	cmp	r3, r4
 80030aa:	d9fa      	bls.n	80030a2 <_free_r+0x42>
 80030ac:	6811      	ldr	r1, [r2, #0]
 80030ae:	1850      	adds	r0, r2, r1
 80030b0:	42a0      	cmp	r0, r4
 80030b2:	d10b      	bne.n	80030cc <_free_r+0x6c>
 80030b4:	6820      	ldr	r0, [r4, #0]
 80030b6:	4401      	add	r1, r0
 80030b8:	1850      	adds	r0, r2, r1
 80030ba:	4283      	cmp	r3, r0
 80030bc:	6011      	str	r1, [r2, #0]
 80030be:	d1e0      	bne.n	8003082 <_free_r+0x22>
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	4408      	add	r0, r1
 80030c6:	6010      	str	r0, [r2, #0]
 80030c8:	6053      	str	r3, [r2, #4]
 80030ca:	e7da      	b.n	8003082 <_free_r+0x22>
 80030cc:	d902      	bls.n	80030d4 <_free_r+0x74>
 80030ce:	230c      	movs	r3, #12
 80030d0:	602b      	str	r3, [r5, #0]
 80030d2:	e7d6      	b.n	8003082 <_free_r+0x22>
 80030d4:	6820      	ldr	r0, [r4, #0]
 80030d6:	1821      	adds	r1, r4, r0
 80030d8:	428b      	cmp	r3, r1
 80030da:	bf01      	itttt	eq
 80030dc:	6819      	ldreq	r1, [r3, #0]
 80030de:	685b      	ldreq	r3, [r3, #4]
 80030e0:	1809      	addeq	r1, r1, r0
 80030e2:	6021      	streq	r1, [r4, #0]
 80030e4:	6063      	str	r3, [r4, #4]
 80030e6:	6054      	str	r4, [r2, #4]
 80030e8:	e7cb      	b.n	8003082 <_free_r+0x22>
 80030ea:	bd38      	pop	{r3, r4, r5, pc}
 80030ec:	20001164 	.word	0x20001164

080030f0 <sbrk_aligned>:
 80030f0:	b570      	push	{r4, r5, r6, lr}
 80030f2:	4e0f      	ldr	r6, [pc, #60]	@ (8003130 <sbrk_aligned+0x40>)
 80030f4:	460c      	mov	r4, r1
 80030f6:	6831      	ldr	r1, [r6, #0]
 80030f8:	4605      	mov	r5, r0
 80030fa:	b911      	cbnz	r1, 8003102 <sbrk_aligned+0x12>
 80030fc:	f000 fca4 	bl	8003a48 <_sbrk_r>
 8003100:	6030      	str	r0, [r6, #0]
 8003102:	4621      	mov	r1, r4
 8003104:	4628      	mov	r0, r5
 8003106:	f000 fc9f 	bl	8003a48 <_sbrk_r>
 800310a:	1c43      	adds	r3, r0, #1
 800310c:	d103      	bne.n	8003116 <sbrk_aligned+0x26>
 800310e:	f04f 34ff 	mov.w	r4, #4294967295
 8003112:	4620      	mov	r0, r4
 8003114:	bd70      	pop	{r4, r5, r6, pc}
 8003116:	1cc4      	adds	r4, r0, #3
 8003118:	f024 0403 	bic.w	r4, r4, #3
 800311c:	42a0      	cmp	r0, r4
 800311e:	d0f8      	beq.n	8003112 <sbrk_aligned+0x22>
 8003120:	1a21      	subs	r1, r4, r0
 8003122:	4628      	mov	r0, r5
 8003124:	f000 fc90 	bl	8003a48 <_sbrk_r>
 8003128:	3001      	adds	r0, #1
 800312a:	d1f2      	bne.n	8003112 <sbrk_aligned+0x22>
 800312c:	e7ef      	b.n	800310e <sbrk_aligned+0x1e>
 800312e:	bf00      	nop
 8003130:	20001160 	.word	0x20001160

08003134 <_malloc_r>:
 8003134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003138:	1ccd      	adds	r5, r1, #3
 800313a:	f025 0503 	bic.w	r5, r5, #3
 800313e:	3508      	adds	r5, #8
 8003140:	2d0c      	cmp	r5, #12
 8003142:	bf38      	it	cc
 8003144:	250c      	movcc	r5, #12
 8003146:	2d00      	cmp	r5, #0
 8003148:	4606      	mov	r6, r0
 800314a:	db01      	blt.n	8003150 <_malloc_r+0x1c>
 800314c:	42a9      	cmp	r1, r5
 800314e:	d904      	bls.n	800315a <_malloc_r+0x26>
 8003150:	230c      	movs	r3, #12
 8003152:	6033      	str	r3, [r6, #0]
 8003154:	2000      	movs	r0, #0
 8003156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800315a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003230 <_malloc_r+0xfc>
 800315e:	f000 f869 	bl	8003234 <__malloc_lock>
 8003162:	f8d8 3000 	ldr.w	r3, [r8]
 8003166:	461c      	mov	r4, r3
 8003168:	bb44      	cbnz	r4, 80031bc <_malloc_r+0x88>
 800316a:	4629      	mov	r1, r5
 800316c:	4630      	mov	r0, r6
 800316e:	f7ff ffbf 	bl	80030f0 <sbrk_aligned>
 8003172:	1c43      	adds	r3, r0, #1
 8003174:	4604      	mov	r4, r0
 8003176:	d158      	bne.n	800322a <_malloc_r+0xf6>
 8003178:	f8d8 4000 	ldr.w	r4, [r8]
 800317c:	4627      	mov	r7, r4
 800317e:	2f00      	cmp	r7, #0
 8003180:	d143      	bne.n	800320a <_malloc_r+0xd6>
 8003182:	2c00      	cmp	r4, #0
 8003184:	d04b      	beq.n	800321e <_malloc_r+0xea>
 8003186:	6823      	ldr	r3, [r4, #0]
 8003188:	4639      	mov	r1, r7
 800318a:	4630      	mov	r0, r6
 800318c:	eb04 0903 	add.w	r9, r4, r3
 8003190:	f000 fc5a 	bl	8003a48 <_sbrk_r>
 8003194:	4581      	cmp	r9, r0
 8003196:	d142      	bne.n	800321e <_malloc_r+0xea>
 8003198:	6821      	ldr	r1, [r4, #0]
 800319a:	4630      	mov	r0, r6
 800319c:	1a6d      	subs	r5, r5, r1
 800319e:	4629      	mov	r1, r5
 80031a0:	f7ff ffa6 	bl	80030f0 <sbrk_aligned>
 80031a4:	3001      	adds	r0, #1
 80031a6:	d03a      	beq.n	800321e <_malloc_r+0xea>
 80031a8:	6823      	ldr	r3, [r4, #0]
 80031aa:	442b      	add	r3, r5
 80031ac:	6023      	str	r3, [r4, #0]
 80031ae:	f8d8 3000 	ldr.w	r3, [r8]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	bb62      	cbnz	r2, 8003210 <_malloc_r+0xdc>
 80031b6:	f8c8 7000 	str.w	r7, [r8]
 80031ba:	e00f      	b.n	80031dc <_malloc_r+0xa8>
 80031bc:	6822      	ldr	r2, [r4, #0]
 80031be:	1b52      	subs	r2, r2, r5
 80031c0:	d420      	bmi.n	8003204 <_malloc_r+0xd0>
 80031c2:	2a0b      	cmp	r2, #11
 80031c4:	d917      	bls.n	80031f6 <_malloc_r+0xc2>
 80031c6:	1961      	adds	r1, r4, r5
 80031c8:	42a3      	cmp	r3, r4
 80031ca:	6025      	str	r5, [r4, #0]
 80031cc:	bf18      	it	ne
 80031ce:	6059      	strne	r1, [r3, #4]
 80031d0:	6863      	ldr	r3, [r4, #4]
 80031d2:	bf08      	it	eq
 80031d4:	f8c8 1000 	streq.w	r1, [r8]
 80031d8:	5162      	str	r2, [r4, r5]
 80031da:	604b      	str	r3, [r1, #4]
 80031dc:	4630      	mov	r0, r6
 80031de:	f000 f82f 	bl	8003240 <__malloc_unlock>
 80031e2:	f104 000b 	add.w	r0, r4, #11
 80031e6:	1d23      	adds	r3, r4, #4
 80031e8:	f020 0007 	bic.w	r0, r0, #7
 80031ec:	1ac2      	subs	r2, r0, r3
 80031ee:	bf1c      	itt	ne
 80031f0:	1a1b      	subne	r3, r3, r0
 80031f2:	50a3      	strne	r3, [r4, r2]
 80031f4:	e7af      	b.n	8003156 <_malloc_r+0x22>
 80031f6:	6862      	ldr	r2, [r4, #4]
 80031f8:	42a3      	cmp	r3, r4
 80031fa:	bf0c      	ite	eq
 80031fc:	f8c8 2000 	streq.w	r2, [r8]
 8003200:	605a      	strne	r2, [r3, #4]
 8003202:	e7eb      	b.n	80031dc <_malloc_r+0xa8>
 8003204:	4623      	mov	r3, r4
 8003206:	6864      	ldr	r4, [r4, #4]
 8003208:	e7ae      	b.n	8003168 <_malloc_r+0x34>
 800320a:	463c      	mov	r4, r7
 800320c:	687f      	ldr	r7, [r7, #4]
 800320e:	e7b6      	b.n	800317e <_malloc_r+0x4a>
 8003210:	461a      	mov	r2, r3
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	42a3      	cmp	r3, r4
 8003216:	d1fb      	bne.n	8003210 <_malloc_r+0xdc>
 8003218:	2300      	movs	r3, #0
 800321a:	6053      	str	r3, [r2, #4]
 800321c:	e7de      	b.n	80031dc <_malloc_r+0xa8>
 800321e:	230c      	movs	r3, #12
 8003220:	4630      	mov	r0, r6
 8003222:	6033      	str	r3, [r6, #0]
 8003224:	f000 f80c 	bl	8003240 <__malloc_unlock>
 8003228:	e794      	b.n	8003154 <_malloc_r+0x20>
 800322a:	6005      	str	r5, [r0, #0]
 800322c:	e7d6      	b.n	80031dc <_malloc_r+0xa8>
 800322e:	bf00      	nop
 8003230:	20001164 	.word	0x20001164

08003234 <__malloc_lock>:
 8003234:	4801      	ldr	r0, [pc, #4]	@ (800323c <__malloc_lock+0x8>)
 8003236:	f7ff bf10 	b.w	800305a <__retarget_lock_acquire_recursive>
 800323a:	bf00      	nop
 800323c:	2000115c 	.word	0x2000115c

08003240 <__malloc_unlock>:
 8003240:	4801      	ldr	r0, [pc, #4]	@ (8003248 <__malloc_unlock+0x8>)
 8003242:	f7ff bf0b 	b.w	800305c <__retarget_lock_release_recursive>
 8003246:	bf00      	nop
 8003248:	2000115c 	.word	0x2000115c

0800324c <__sfputc_r>:
 800324c:	6893      	ldr	r3, [r2, #8]
 800324e:	b410      	push	{r4}
 8003250:	3b01      	subs	r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	6093      	str	r3, [r2, #8]
 8003256:	da07      	bge.n	8003268 <__sfputc_r+0x1c>
 8003258:	6994      	ldr	r4, [r2, #24]
 800325a:	42a3      	cmp	r3, r4
 800325c:	db01      	blt.n	8003262 <__sfputc_r+0x16>
 800325e:	290a      	cmp	r1, #10
 8003260:	d102      	bne.n	8003268 <__sfputc_r+0x1c>
 8003262:	bc10      	pop	{r4}
 8003264:	f7ff bdec 	b.w	8002e40 <__swbuf_r>
 8003268:	6813      	ldr	r3, [r2, #0]
 800326a:	1c58      	adds	r0, r3, #1
 800326c:	6010      	str	r0, [r2, #0]
 800326e:	7019      	strb	r1, [r3, #0]
 8003270:	4608      	mov	r0, r1
 8003272:	bc10      	pop	{r4}
 8003274:	4770      	bx	lr

08003276 <__sfputs_r>:
 8003276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003278:	4606      	mov	r6, r0
 800327a:	460f      	mov	r7, r1
 800327c:	4614      	mov	r4, r2
 800327e:	18d5      	adds	r5, r2, r3
 8003280:	42ac      	cmp	r4, r5
 8003282:	d101      	bne.n	8003288 <__sfputs_r+0x12>
 8003284:	2000      	movs	r0, #0
 8003286:	e007      	b.n	8003298 <__sfputs_r+0x22>
 8003288:	463a      	mov	r2, r7
 800328a:	4630      	mov	r0, r6
 800328c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003290:	f7ff ffdc 	bl	800324c <__sfputc_r>
 8003294:	1c43      	adds	r3, r0, #1
 8003296:	d1f3      	bne.n	8003280 <__sfputs_r+0xa>
 8003298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800329c <_vfiprintf_r>:
 800329c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032a0:	460d      	mov	r5, r1
 80032a2:	4614      	mov	r4, r2
 80032a4:	4698      	mov	r8, r3
 80032a6:	4606      	mov	r6, r0
 80032a8:	b09d      	sub	sp, #116	@ 0x74
 80032aa:	b118      	cbz	r0, 80032b4 <_vfiprintf_r+0x18>
 80032ac:	6a03      	ldr	r3, [r0, #32]
 80032ae:	b90b      	cbnz	r3, 80032b4 <_vfiprintf_r+0x18>
 80032b0:	f7ff fcd2 	bl	8002c58 <__sinit>
 80032b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80032b6:	07d9      	lsls	r1, r3, #31
 80032b8:	d405      	bmi.n	80032c6 <_vfiprintf_r+0x2a>
 80032ba:	89ab      	ldrh	r3, [r5, #12]
 80032bc:	059a      	lsls	r2, r3, #22
 80032be:	d402      	bmi.n	80032c6 <_vfiprintf_r+0x2a>
 80032c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80032c2:	f7ff feca 	bl	800305a <__retarget_lock_acquire_recursive>
 80032c6:	89ab      	ldrh	r3, [r5, #12]
 80032c8:	071b      	lsls	r3, r3, #28
 80032ca:	d501      	bpl.n	80032d0 <_vfiprintf_r+0x34>
 80032cc:	692b      	ldr	r3, [r5, #16]
 80032ce:	b99b      	cbnz	r3, 80032f8 <_vfiprintf_r+0x5c>
 80032d0:	4629      	mov	r1, r5
 80032d2:	4630      	mov	r0, r6
 80032d4:	f7ff fdf2 	bl	8002ebc <__swsetup_r>
 80032d8:	b170      	cbz	r0, 80032f8 <_vfiprintf_r+0x5c>
 80032da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80032dc:	07dc      	lsls	r4, r3, #31
 80032de:	d504      	bpl.n	80032ea <_vfiprintf_r+0x4e>
 80032e0:	f04f 30ff 	mov.w	r0, #4294967295
 80032e4:	b01d      	add	sp, #116	@ 0x74
 80032e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032ea:	89ab      	ldrh	r3, [r5, #12]
 80032ec:	0598      	lsls	r0, r3, #22
 80032ee:	d4f7      	bmi.n	80032e0 <_vfiprintf_r+0x44>
 80032f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80032f2:	f7ff feb3 	bl	800305c <__retarget_lock_release_recursive>
 80032f6:	e7f3      	b.n	80032e0 <_vfiprintf_r+0x44>
 80032f8:	2300      	movs	r3, #0
 80032fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80032fc:	2320      	movs	r3, #32
 80032fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003302:	2330      	movs	r3, #48	@ 0x30
 8003304:	f04f 0901 	mov.w	r9, #1
 8003308:	f8cd 800c 	str.w	r8, [sp, #12]
 800330c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80034b8 <_vfiprintf_r+0x21c>
 8003310:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003314:	4623      	mov	r3, r4
 8003316:	469a      	mov	sl, r3
 8003318:	f813 2b01 	ldrb.w	r2, [r3], #1
 800331c:	b10a      	cbz	r2, 8003322 <_vfiprintf_r+0x86>
 800331e:	2a25      	cmp	r2, #37	@ 0x25
 8003320:	d1f9      	bne.n	8003316 <_vfiprintf_r+0x7a>
 8003322:	ebba 0b04 	subs.w	fp, sl, r4
 8003326:	d00b      	beq.n	8003340 <_vfiprintf_r+0xa4>
 8003328:	465b      	mov	r3, fp
 800332a:	4622      	mov	r2, r4
 800332c:	4629      	mov	r1, r5
 800332e:	4630      	mov	r0, r6
 8003330:	f7ff ffa1 	bl	8003276 <__sfputs_r>
 8003334:	3001      	adds	r0, #1
 8003336:	f000 80a7 	beq.w	8003488 <_vfiprintf_r+0x1ec>
 800333a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800333c:	445a      	add	r2, fp
 800333e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003340:	f89a 3000 	ldrb.w	r3, [sl]
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 809f 	beq.w	8003488 <_vfiprintf_r+0x1ec>
 800334a:	2300      	movs	r3, #0
 800334c:	f04f 32ff 	mov.w	r2, #4294967295
 8003350:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003354:	f10a 0a01 	add.w	sl, sl, #1
 8003358:	9304      	str	r3, [sp, #16]
 800335a:	9307      	str	r3, [sp, #28]
 800335c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003360:	931a      	str	r3, [sp, #104]	@ 0x68
 8003362:	4654      	mov	r4, sl
 8003364:	2205      	movs	r2, #5
 8003366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800336a:	4853      	ldr	r0, [pc, #332]	@ (80034b8 <_vfiprintf_r+0x21c>)
 800336c:	f000 fb7c 	bl	8003a68 <memchr>
 8003370:	9a04      	ldr	r2, [sp, #16]
 8003372:	b9d8      	cbnz	r0, 80033ac <_vfiprintf_r+0x110>
 8003374:	06d1      	lsls	r1, r2, #27
 8003376:	bf44      	itt	mi
 8003378:	2320      	movmi	r3, #32
 800337a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800337e:	0713      	lsls	r3, r2, #28
 8003380:	bf44      	itt	mi
 8003382:	232b      	movmi	r3, #43	@ 0x2b
 8003384:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003388:	f89a 3000 	ldrb.w	r3, [sl]
 800338c:	2b2a      	cmp	r3, #42	@ 0x2a
 800338e:	d015      	beq.n	80033bc <_vfiprintf_r+0x120>
 8003390:	4654      	mov	r4, sl
 8003392:	2000      	movs	r0, #0
 8003394:	f04f 0c0a 	mov.w	ip, #10
 8003398:	9a07      	ldr	r2, [sp, #28]
 800339a:	4621      	mov	r1, r4
 800339c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033a0:	3b30      	subs	r3, #48	@ 0x30
 80033a2:	2b09      	cmp	r3, #9
 80033a4:	d94b      	bls.n	800343e <_vfiprintf_r+0x1a2>
 80033a6:	b1b0      	cbz	r0, 80033d6 <_vfiprintf_r+0x13a>
 80033a8:	9207      	str	r2, [sp, #28]
 80033aa:	e014      	b.n	80033d6 <_vfiprintf_r+0x13a>
 80033ac:	eba0 0308 	sub.w	r3, r0, r8
 80033b0:	fa09 f303 	lsl.w	r3, r9, r3
 80033b4:	4313      	orrs	r3, r2
 80033b6:	46a2      	mov	sl, r4
 80033b8:	9304      	str	r3, [sp, #16]
 80033ba:	e7d2      	b.n	8003362 <_vfiprintf_r+0xc6>
 80033bc:	9b03      	ldr	r3, [sp, #12]
 80033be:	1d19      	adds	r1, r3, #4
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	9103      	str	r1, [sp, #12]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	bfbb      	ittet	lt
 80033c8:	425b      	neglt	r3, r3
 80033ca:	f042 0202 	orrlt.w	r2, r2, #2
 80033ce:	9307      	strge	r3, [sp, #28]
 80033d0:	9307      	strlt	r3, [sp, #28]
 80033d2:	bfb8      	it	lt
 80033d4:	9204      	strlt	r2, [sp, #16]
 80033d6:	7823      	ldrb	r3, [r4, #0]
 80033d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80033da:	d10a      	bne.n	80033f2 <_vfiprintf_r+0x156>
 80033dc:	7863      	ldrb	r3, [r4, #1]
 80033de:	2b2a      	cmp	r3, #42	@ 0x2a
 80033e0:	d132      	bne.n	8003448 <_vfiprintf_r+0x1ac>
 80033e2:	9b03      	ldr	r3, [sp, #12]
 80033e4:	3402      	adds	r4, #2
 80033e6:	1d1a      	adds	r2, r3, #4
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	9203      	str	r2, [sp, #12]
 80033ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80033f0:	9305      	str	r3, [sp, #20]
 80033f2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80034bc <_vfiprintf_r+0x220>
 80033f6:	2203      	movs	r2, #3
 80033f8:	4650      	mov	r0, sl
 80033fa:	7821      	ldrb	r1, [r4, #0]
 80033fc:	f000 fb34 	bl	8003a68 <memchr>
 8003400:	b138      	cbz	r0, 8003412 <_vfiprintf_r+0x176>
 8003402:	2240      	movs	r2, #64	@ 0x40
 8003404:	9b04      	ldr	r3, [sp, #16]
 8003406:	eba0 000a 	sub.w	r0, r0, sl
 800340a:	4082      	lsls	r2, r0
 800340c:	4313      	orrs	r3, r2
 800340e:	3401      	adds	r4, #1
 8003410:	9304      	str	r3, [sp, #16]
 8003412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003416:	2206      	movs	r2, #6
 8003418:	4829      	ldr	r0, [pc, #164]	@ (80034c0 <_vfiprintf_r+0x224>)
 800341a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800341e:	f000 fb23 	bl	8003a68 <memchr>
 8003422:	2800      	cmp	r0, #0
 8003424:	d03f      	beq.n	80034a6 <_vfiprintf_r+0x20a>
 8003426:	4b27      	ldr	r3, [pc, #156]	@ (80034c4 <_vfiprintf_r+0x228>)
 8003428:	bb1b      	cbnz	r3, 8003472 <_vfiprintf_r+0x1d6>
 800342a:	9b03      	ldr	r3, [sp, #12]
 800342c:	3307      	adds	r3, #7
 800342e:	f023 0307 	bic.w	r3, r3, #7
 8003432:	3308      	adds	r3, #8
 8003434:	9303      	str	r3, [sp, #12]
 8003436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003438:	443b      	add	r3, r7
 800343a:	9309      	str	r3, [sp, #36]	@ 0x24
 800343c:	e76a      	b.n	8003314 <_vfiprintf_r+0x78>
 800343e:	460c      	mov	r4, r1
 8003440:	2001      	movs	r0, #1
 8003442:	fb0c 3202 	mla	r2, ip, r2, r3
 8003446:	e7a8      	b.n	800339a <_vfiprintf_r+0xfe>
 8003448:	2300      	movs	r3, #0
 800344a:	f04f 0c0a 	mov.w	ip, #10
 800344e:	4619      	mov	r1, r3
 8003450:	3401      	adds	r4, #1
 8003452:	9305      	str	r3, [sp, #20]
 8003454:	4620      	mov	r0, r4
 8003456:	f810 2b01 	ldrb.w	r2, [r0], #1
 800345a:	3a30      	subs	r2, #48	@ 0x30
 800345c:	2a09      	cmp	r2, #9
 800345e:	d903      	bls.n	8003468 <_vfiprintf_r+0x1cc>
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0c6      	beq.n	80033f2 <_vfiprintf_r+0x156>
 8003464:	9105      	str	r1, [sp, #20]
 8003466:	e7c4      	b.n	80033f2 <_vfiprintf_r+0x156>
 8003468:	4604      	mov	r4, r0
 800346a:	2301      	movs	r3, #1
 800346c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003470:	e7f0      	b.n	8003454 <_vfiprintf_r+0x1b8>
 8003472:	ab03      	add	r3, sp, #12
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	462a      	mov	r2, r5
 8003478:	4630      	mov	r0, r6
 800347a:	4b13      	ldr	r3, [pc, #76]	@ (80034c8 <_vfiprintf_r+0x22c>)
 800347c:	a904      	add	r1, sp, #16
 800347e:	f3af 8000 	nop.w
 8003482:	4607      	mov	r7, r0
 8003484:	1c78      	adds	r0, r7, #1
 8003486:	d1d6      	bne.n	8003436 <_vfiprintf_r+0x19a>
 8003488:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800348a:	07d9      	lsls	r1, r3, #31
 800348c:	d405      	bmi.n	800349a <_vfiprintf_r+0x1fe>
 800348e:	89ab      	ldrh	r3, [r5, #12]
 8003490:	059a      	lsls	r2, r3, #22
 8003492:	d402      	bmi.n	800349a <_vfiprintf_r+0x1fe>
 8003494:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003496:	f7ff fde1 	bl	800305c <__retarget_lock_release_recursive>
 800349a:	89ab      	ldrh	r3, [r5, #12]
 800349c:	065b      	lsls	r3, r3, #25
 800349e:	f53f af1f 	bmi.w	80032e0 <_vfiprintf_r+0x44>
 80034a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80034a4:	e71e      	b.n	80032e4 <_vfiprintf_r+0x48>
 80034a6:	ab03      	add	r3, sp, #12
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	462a      	mov	r2, r5
 80034ac:	4630      	mov	r0, r6
 80034ae:	4b06      	ldr	r3, [pc, #24]	@ (80034c8 <_vfiprintf_r+0x22c>)
 80034b0:	a904      	add	r1, sp, #16
 80034b2:	f000 f87d 	bl	80035b0 <_printf_i>
 80034b6:	e7e4      	b.n	8003482 <_vfiprintf_r+0x1e6>
 80034b8:	08003ba2 	.word	0x08003ba2
 80034bc:	08003ba8 	.word	0x08003ba8
 80034c0:	08003bac 	.word	0x08003bac
 80034c4:	00000000 	.word	0x00000000
 80034c8:	08003277 	.word	0x08003277

080034cc <_printf_common>:
 80034cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034d0:	4616      	mov	r6, r2
 80034d2:	4698      	mov	r8, r3
 80034d4:	688a      	ldr	r2, [r1, #8]
 80034d6:	690b      	ldr	r3, [r1, #16]
 80034d8:	4607      	mov	r7, r0
 80034da:	4293      	cmp	r3, r2
 80034dc:	bfb8      	it	lt
 80034de:	4613      	movlt	r3, r2
 80034e0:	6033      	str	r3, [r6, #0]
 80034e2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80034e6:	460c      	mov	r4, r1
 80034e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80034ec:	b10a      	cbz	r2, 80034f2 <_printf_common+0x26>
 80034ee:	3301      	adds	r3, #1
 80034f0:	6033      	str	r3, [r6, #0]
 80034f2:	6823      	ldr	r3, [r4, #0]
 80034f4:	0699      	lsls	r1, r3, #26
 80034f6:	bf42      	ittt	mi
 80034f8:	6833      	ldrmi	r3, [r6, #0]
 80034fa:	3302      	addmi	r3, #2
 80034fc:	6033      	strmi	r3, [r6, #0]
 80034fe:	6825      	ldr	r5, [r4, #0]
 8003500:	f015 0506 	ands.w	r5, r5, #6
 8003504:	d106      	bne.n	8003514 <_printf_common+0x48>
 8003506:	f104 0a19 	add.w	sl, r4, #25
 800350a:	68e3      	ldr	r3, [r4, #12]
 800350c:	6832      	ldr	r2, [r6, #0]
 800350e:	1a9b      	subs	r3, r3, r2
 8003510:	42ab      	cmp	r3, r5
 8003512:	dc2b      	bgt.n	800356c <_printf_common+0xa0>
 8003514:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003518:	6822      	ldr	r2, [r4, #0]
 800351a:	3b00      	subs	r3, #0
 800351c:	bf18      	it	ne
 800351e:	2301      	movne	r3, #1
 8003520:	0692      	lsls	r2, r2, #26
 8003522:	d430      	bmi.n	8003586 <_printf_common+0xba>
 8003524:	4641      	mov	r1, r8
 8003526:	4638      	mov	r0, r7
 8003528:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800352c:	47c8      	blx	r9
 800352e:	3001      	adds	r0, #1
 8003530:	d023      	beq.n	800357a <_printf_common+0xae>
 8003532:	6823      	ldr	r3, [r4, #0]
 8003534:	6922      	ldr	r2, [r4, #16]
 8003536:	f003 0306 	and.w	r3, r3, #6
 800353a:	2b04      	cmp	r3, #4
 800353c:	bf14      	ite	ne
 800353e:	2500      	movne	r5, #0
 8003540:	6833      	ldreq	r3, [r6, #0]
 8003542:	f04f 0600 	mov.w	r6, #0
 8003546:	bf08      	it	eq
 8003548:	68e5      	ldreq	r5, [r4, #12]
 800354a:	f104 041a 	add.w	r4, r4, #26
 800354e:	bf08      	it	eq
 8003550:	1aed      	subeq	r5, r5, r3
 8003552:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003556:	bf08      	it	eq
 8003558:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800355c:	4293      	cmp	r3, r2
 800355e:	bfc4      	itt	gt
 8003560:	1a9b      	subgt	r3, r3, r2
 8003562:	18ed      	addgt	r5, r5, r3
 8003564:	42b5      	cmp	r5, r6
 8003566:	d11a      	bne.n	800359e <_printf_common+0xd2>
 8003568:	2000      	movs	r0, #0
 800356a:	e008      	b.n	800357e <_printf_common+0xb2>
 800356c:	2301      	movs	r3, #1
 800356e:	4652      	mov	r2, sl
 8003570:	4641      	mov	r1, r8
 8003572:	4638      	mov	r0, r7
 8003574:	47c8      	blx	r9
 8003576:	3001      	adds	r0, #1
 8003578:	d103      	bne.n	8003582 <_printf_common+0xb6>
 800357a:	f04f 30ff 	mov.w	r0, #4294967295
 800357e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003582:	3501      	adds	r5, #1
 8003584:	e7c1      	b.n	800350a <_printf_common+0x3e>
 8003586:	2030      	movs	r0, #48	@ 0x30
 8003588:	18e1      	adds	r1, r4, r3
 800358a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003594:	4422      	add	r2, r4
 8003596:	3302      	adds	r3, #2
 8003598:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800359c:	e7c2      	b.n	8003524 <_printf_common+0x58>
 800359e:	2301      	movs	r3, #1
 80035a0:	4622      	mov	r2, r4
 80035a2:	4641      	mov	r1, r8
 80035a4:	4638      	mov	r0, r7
 80035a6:	47c8      	blx	r9
 80035a8:	3001      	adds	r0, #1
 80035aa:	d0e6      	beq.n	800357a <_printf_common+0xae>
 80035ac:	3601      	adds	r6, #1
 80035ae:	e7d9      	b.n	8003564 <_printf_common+0x98>

080035b0 <_printf_i>:
 80035b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035b4:	7e0f      	ldrb	r7, [r1, #24]
 80035b6:	4691      	mov	r9, r2
 80035b8:	2f78      	cmp	r7, #120	@ 0x78
 80035ba:	4680      	mov	r8, r0
 80035bc:	460c      	mov	r4, r1
 80035be:	469a      	mov	sl, r3
 80035c0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80035c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80035c6:	d807      	bhi.n	80035d8 <_printf_i+0x28>
 80035c8:	2f62      	cmp	r7, #98	@ 0x62
 80035ca:	d80a      	bhi.n	80035e2 <_printf_i+0x32>
 80035cc:	2f00      	cmp	r7, #0
 80035ce:	f000 80d3 	beq.w	8003778 <_printf_i+0x1c8>
 80035d2:	2f58      	cmp	r7, #88	@ 0x58
 80035d4:	f000 80ba 	beq.w	800374c <_printf_i+0x19c>
 80035d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80035e0:	e03a      	b.n	8003658 <_printf_i+0xa8>
 80035e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80035e6:	2b15      	cmp	r3, #21
 80035e8:	d8f6      	bhi.n	80035d8 <_printf_i+0x28>
 80035ea:	a101      	add	r1, pc, #4	@ (adr r1, 80035f0 <_printf_i+0x40>)
 80035ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035f0:	08003649 	.word	0x08003649
 80035f4:	0800365d 	.word	0x0800365d
 80035f8:	080035d9 	.word	0x080035d9
 80035fc:	080035d9 	.word	0x080035d9
 8003600:	080035d9 	.word	0x080035d9
 8003604:	080035d9 	.word	0x080035d9
 8003608:	0800365d 	.word	0x0800365d
 800360c:	080035d9 	.word	0x080035d9
 8003610:	080035d9 	.word	0x080035d9
 8003614:	080035d9 	.word	0x080035d9
 8003618:	080035d9 	.word	0x080035d9
 800361c:	0800375f 	.word	0x0800375f
 8003620:	08003687 	.word	0x08003687
 8003624:	08003719 	.word	0x08003719
 8003628:	080035d9 	.word	0x080035d9
 800362c:	080035d9 	.word	0x080035d9
 8003630:	08003781 	.word	0x08003781
 8003634:	080035d9 	.word	0x080035d9
 8003638:	08003687 	.word	0x08003687
 800363c:	080035d9 	.word	0x080035d9
 8003640:	080035d9 	.word	0x080035d9
 8003644:	08003721 	.word	0x08003721
 8003648:	6833      	ldr	r3, [r6, #0]
 800364a:	1d1a      	adds	r2, r3, #4
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6032      	str	r2, [r6, #0]
 8003650:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003654:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003658:	2301      	movs	r3, #1
 800365a:	e09e      	b.n	800379a <_printf_i+0x1ea>
 800365c:	6833      	ldr	r3, [r6, #0]
 800365e:	6820      	ldr	r0, [r4, #0]
 8003660:	1d19      	adds	r1, r3, #4
 8003662:	6031      	str	r1, [r6, #0]
 8003664:	0606      	lsls	r6, r0, #24
 8003666:	d501      	bpl.n	800366c <_printf_i+0xbc>
 8003668:	681d      	ldr	r5, [r3, #0]
 800366a:	e003      	b.n	8003674 <_printf_i+0xc4>
 800366c:	0645      	lsls	r5, r0, #25
 800366e:	d5fb      	bpl.n	8003668 <_printf_i+0xb8>
 8003670:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003674:	2d00      	cmp	r5, #0
 8003676:	da03      	bge.n	8003680 <_printf_i+0xd0>
 8003678:	232d      	movs	r3, #45	@ 0x2d
 800367a:	426d      	negs	r5, r5
 800367c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003680:	230a      	movs	r3, #10
 8003682:	4859      	ldr	r0, [pc, #356]	@ (80037e8 <_printf_i+0x238>)
 8003684:	e011      	b.n	80036aa <_printf_i+0xfa>
 8003686:	6821      	ldr	r1, [r4, #0]
 8003688:	6833      	ldr	r3, [r6, #0]
 800368a:	0608      	lsls	r0, r1, #24
 800368c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003690:	d402      	bmi.n	8003698 <_printf_i+0xe8>
 8003692:	0649      	lsls	r1, r1, #25
 8003694:	bf48      	it	mi
 8003696:	b2ad      	uxthmi	r5, r5
 8003698:	2f6f      	cmp	r7, #111	@ 0x6f
 800369a:	6033      	str	r3, [r6, #0]
 800369c:	bf14      	ite	ne
 800369e:	230a      	movne	r3, #10
 80036a0:	2308      	moveq	r3, #8
 80036a2:	4851      	ldr	r0, [pc, #324]	@ (80037e8 <_printf_i+0x238>)
 80036a4:	2100      	movs	r1, #0
 80036a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80036aa:	6866      	ldr	r6, [r4, #4]
 80036ac:	2e00      	cmp	r6, #0
 80036ae:	bfa8      	it	ge
 80036b0:	6821      	ldrge	r1, [r4, #0]
 80036b2:	60a6      	str	r6, [r4, #8]
 80036b4:	bfa4      	itt	ge
 80036b6:	f021 0104 	bicge.w	r1, r1, #4
 80036ba:	6021      	strge	r1, [r4, #0]
 80036bc:	b90d      	cbnz	r5, 80036c2 <_printf_i+0x112>
 80036be:	2e00      	cmp	r6, #0
 80036c0:	d04b      	beq.n	800375a <_printf_i+0x1aa>
 80036c2:	4616      	mov	r6, r2
 80036c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80036c8:	fb03 5711 	mls	r7, r3, r1, r5
 80036cc:	5dc7      	ldrb	r7, [r0, r7]
 80036ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80036d2:	462f      	mov	r7, r5
 80036d4:	42bb      	cmp	r3, r7
 80036d6:	460d      	mov	r5, r1
 80036d8:	d9f4      	bls.n	80036c4 <_printf_i+0x114>
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d10b      	bne.n	80036f6 <_printf_i+0x146>
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	07df      	lsls	r7, r3, #31
 80036e2:	d508      	bpl.n	80036f6 <_printf_i+0x146>
 80036e4:	6923      	ldr	r3, [r4, #16]
 80036e6:	6861      	ldr	r1, [r4, #4]
 80036e8:	4299      	cmp	r1, r3
 80036ea:	bfde      	ittt	le
 80036ec:	2330      	movle	r3, #48	@ 0x30
 80036ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80036f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80036f6:	1b92      	subs	r2, r2, r6
 80036f8:	6122      	str	r2, [r4, #16]
 80036fa:	464b      	mov	r3, r9
 80036fc:	4621      	mov	r1, r4
 80036fe:	4640      	mov	r0, r8
 8003700:	f8cd a000 	str.w	sl, [sp]
 8003704:	aa03      	add	r2, sp, #12
 8003706:	f7ff fee1 	bl	80034cc <_printf_common>
 800370a:	3001      	adds	r0, #1
 800370c:	d14a      	bne.n	80037a4 <_printf_i+0x1f4>
 800370e:	f04f 30ff 	mov.w	r0, #4294967295
 8003712:	b004      	add	sp, #16
 8003714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003718:	6823      	ldr	r3, [r4, #0]
 800371a:	f043 0320 	orr.w	r3, r3, #32
 800371e:	6023      	str	r3, [r4, #0]
 8003720:	2778      	movs	r7, #120	@ 0x78
 8003722:	4832      	ldr	r0, [pc, #200]	@ (80037ec <_printf_i+0x23c>)
 8003724:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003728:	6823      	ldr	r3, [r4, #0]
 800372a:	6831      	ldr	r1, [r6, #0]
 800372c:	061f      	lsls	r7, r3, #24
 800372e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003732:	d402      	bmi.n	800373a <_printf_i+0x18a>
 8003734:	065f      	lsls	r7, r3, #25
 8003736:	bf48      	it	mi
 8003738:	b2ad      	uxthmi	r5, r5
 800373a:	6031      	str	r1, [r6, #0]
 800373c:	07d9      	lsls	r1, r3, #31
 800373e:	bf44      	itt	mi
 8003740:	f043 0320 	orrmi.w	r3, r3, #32
 8003744:	6023      	strmi	r3, [r4, #0]
 8003746:	b11d      	cbz	r5, 8003750 <_printf_i+0x1a0>
 8003748:	2310      	movs	r3, #16
 800374a:	e7ab      	b.n	80036a4 <_printf_i+0xf4>
 800374c:	4826      	ldr	r0, [pc, #152]	@ (80037e8 <_printf_i+0x238>)
 800374e:	e7e9      	b.n	8003724 <_printf_i+0x174>
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	f023 0320 	bic.w	r3, r3, #32
 8003756:	6023      	str	r3, [r4, #0]
 8003758:	e7f6      	b.n	8003748 <_printf_i+0x198>
 800375a:	4616      	mov	r6, r2
 800375c:	e7bd      	b.n	80036da <_printf_i+0x12a>
 800375e:	6833      	ldr	r3, [r6, #0]
 8003760:	6825      	ldr	r5, [r4, #0]
 8003762:	1d18      	adds	r0, r3, #4
 8003764:	6961      	ldr	r1, [r4, #20]
 8003766:	6030      	str	r0, [r6, #0]
 8003768:	062e      	lsls	r6, r5, #24
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	d501      	bpl.n	8003772 <_printf_i+0x1c2>
 800376e:	6019      	str	r1, [r3, #0]
 8003770:	e002      	b.n	8003778 <_printf_i+0x1c8>
 8003772:	0668      	lsls	r0, r5, #25
 8003774:	d5fb      	bpl.n	800376e <_printf_i+0x1be>
 8003776:	8019      	strh	r1, [r3, #0]
 8003778:	2300      	movs	r3, #0
 800377a:	4616      	mov	r6, r2
 800377c:	6123      	str	r3, [r4, #16]
 800377e:	e7bc      	b.n	80036fa <_printf_i+0x14a>
 8003780:	6833      	ldr	r3, [r6, #0]
 8003782:	2100      	movs	r1, #0
 8003784:	1d1a      	adds	r2, r3, #4
 8003786:	6032      	str	r2, [r6, #0]
 8003788:	681e      	ldr	r6, [r3, #0]
 800378a:	6862      	ldr	r2, [r4, #4]
 800378c:	4630      	mov	r0, r6
 800378e:	f000 f96b 	bl	8003a68 <memchr>
 8003792:	b108      	cbz	r0, 8003798 <_printf_i+0x1e8>
 8003794:	1b80      	subs	r0, r0, r6
 8003796:	6060      	str	r0, [r4, #4]
 8003798:	6863      	ldr	r3, [r4, #4]
 800379a:	6123      	str	r3, [r4, #16]
 800379c:	2300      	movs	r3, #0
 800379e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037a2:	e7aa      	b.n	80036fa <_printf_i+0x14a>
 80037a4:	4632      	mov	r2, r6
 80037a6:	4649      	mov	r1, r9
 80037a8:	4640      	mov	r0, r8
 80037aa:	6923      	ldr	r3, [r4, #16]
 80037ac:	47d0      	blx	sl
 80037ae:	3001      	adds	r0, #1
 80037b0:	d0ad      	beq.n	800370e <_printf_i+0x15e>
 80037b2:	6823      	ldr	r3, [r4, #0]
 80037b4:	079b      	lsls	r3, r3, #30
 80037b6:	d413      	bmi.n	80037e0 <_printf_i+0x230>
 80037b8:	68e0      	ldr	r0, [r4, #12]
 80037ba:	9b03      	ldr	r3, [sp, #12]
 80037bc:	4298      	cmp	r0, r3
 80037be:	bfb8      	it	lt
 80037c0:	4618      	movlt	r0, r3
 80037c2:	e7a6      	b.n	8003712 <_printf_i+0x162>
 80037c4:	2301      	movs	r3, #1
 80037c6:	4632      	mov	r2, r6
 80037c8:	4649      	mov	r1, r9
 80037ca:	4640      	mov	r0, r8
 80037cc:	47d0      	blx	sl
 80037ce:	3001      	adds	r0, #1
 80037d0:	d09d      	beq.n	800370e <_printf_i+0x15e>
 80037d2:	3501      	adds	r5, #1
 80037d4:	68e3      	ldr	r3, [r4, #12]
 80037d6:	9903      	ldr	r1, [sp, #12]
 80037d8:	1a5b      	subs	r3, r3, r1
 80037da:	42ab      	cmp	r3, r5
 80037dc:	dcf2      	bgt.n	80037c4 <_printf_i+0x214>
 80037de:	e7eb      	b.n	80037b8 <_printf_i+0x208>
 80037e0:	2500      	movs	r5, #0
 80037e2:	f104 0619 	add.w	r6, r4, #25
 80037e6:	e7f5      	b.n	80037d4 <_printf_i+0x224>
 80037e8:	08003bb3 	.word	0x08003bb3
 80037ec:	08003bc4 	.word	0x08003bc4

080037f0 <__sflush_r>:
 80037f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80037f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f6:	0716      	lsls	r6, r2, #28
 80037f8:	4605      	mov	r5, r0
 80037fa:	460c      	mov	r4, r1
 80037fc:	d454      	bmi.n	80038a8 <__sflush_r+0xb8>
 80037fe:	684b      	ldr	r3, [r1, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	dc02      	bgt.n	800380a <__sflush_r+0x1a>
 8003804:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003806:	2b00      	cmp	r3, #0
 8003808:	dd48      	ble.n	800389c <__sflush_r+0xac>
 800380a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800380c:	2e00      	cmp	r6, #0
 800380e:	d045      	beq.n	800389c <__sflush_r+0xac>
 8003810:	2300      	movs	r3, #0
 8003812:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003816:	682f      	ldr	r7, [r5, #0]
 8003818:	6a21      	ldr	r1, [r4, #32]
 800381a:	602b      	str	r3, [r5, #0]
 800381c:	d030      	beq.n	8003880 <__sflush_r+0x90>
 800381e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003820:	89a3      	ldrh	r3, [r4, #12]
 8003822:	0759      	lsls	r1, r3, #29
 8003824:	d505      	bpl.n	8003832 <__sflush_r+0x42>
 8003826:	6863      	ldr	r3, [r4, #4]
 8003828:	1ad2      	subs	r2, r2, r3
 800382a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800382c:	b10b      	cbz	r3, 8003832 <__sflush_r+0x42>
 800382e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003830:	1ad2      	subs	r2, r2, r3
 8003832:	2300      	movs	r3, #0
 8003834:	4628      	mov	r0, r5
 8003836:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003838:	6a21      	ldr	r1, [r4, #32]
 800383a:	47b0      	blx	r6
 800383c:	1c43      	adds	r3, r0, #1
 800383e:	89a3      	ldrh	r3, [r4, #12]
 8003840:	d106      	bne.n	8003850 <__sflush_r+0x60>
 8003842:	6829      	ldr	r1, [r5, #0]
 8003844:	291d      	cmp	r1, #29
 8003846:	d82b      	bhi.n	80038a0 <__sflush_r+0xb0>
 8003848:	4a28      	ldr	r2, [pc, #160]	@ (80038ec <__sflush_r+0xfc>)
 800384a:	410a      	asrs	r2, r1
 800384c:	07d6      	lsls	r6, r2, #31
 800384e:	d427      	bmi.n	80038a0 <__sflush_r+0xb0>
 8003850:	2200      	movs	r2, #0
 8003852:	6062      	str	r2, [r4, #4]
 8003854:	6922      	ldr	r2, [r4, #16]
 8003856:	04d9      	lsls	r1, r3, #19
 8003858:	6022      	str	r2, [r4, #0]
 800385a:	d504      	bpl.n	8003866 <__sflush_r+0x76>
 800385c:	1c42      	adds	r2, r0, #1
 800385e:	d101      	bne.n	8003864 <__sflush_r+0x74>
 8003860:	682b      	ldr	r3, [r5, #0]
 8003862:	b903      	cbnz	r3, 8003866 <__sflush_r+0x76>
 8003864:	6560      	str	r0, [r4, #84]	@ 0x54
 8003866:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003868:	602f      	str	r7, [r5, #0]
 800386a:	b1b9      	cbz	r1, 800389c <__sflush_r+0xac>
 800386c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003870:	4299      	cmp	r1, r3
 8003872:	d002      	beq.n	800387a <__sflush_r+0x8a>
 8003874:	4628      	mov	r0, r5
 8003876:	f7ff fbf3 	bl	8003060 <_free_r>
 800387a:	2300      	movs	r3, #0
 800387c:	6363      	str	r3, [r4, #52]	@ 0x34
 800387e:	e00d      	b.n	800389c <__sflush_r+0xac>
 8003880:	2301      	movs	r3, #1
 8003882:	4628      	mov	r0, r5
 8003884:	47b0      	blx	r6
 8003886:	4602      	mov	r2, r0
 8003888:	1c50      	adds	r0, r2, #1
 800388a:	d1c9      	bne.n	8003820 <__sflush_r+0x30>
 800388c:	682b      	ldr	r3, [r5, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0c6      	beq.n	8003820 <__sflush_r+0x30>
 8003892:	2b1d      	cmp	r3, #29
 8003894:	d001      	beq.n	800389a <__sflush_r+0xaa>
 8003896:	2b16      	cmp	r3, #22
 8003898:	d11d      	bne.n	80038d6 <__sflush_r+0xe6>
 800389a:	602f      	str	r7, [r5, #0]
 800389c:	2000      	movs	r0, #0
 800389e:	e021      	b.n	80038e4 <__sflush_r+0xf4>
 80038a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038a4:	b21b      	sxth	r3, r3
 80038a6:	e01a      	b.n	80038de <__sflush_r+0xee>
 80038a8:	690f      	ldr	r7, [r1, #16]
 80038aa:	2f00      	cmp	r7, #0
 80038ac:	d0f6      	beq.n	800389c <__sflush_r+0xac>
 80038ae:	0793      	lsls	r3, r2, #30
 80038b0:	bf18      	it	ne
 80038b2:	2300      	movne	r3, #0
 80038b4:	680e      	ldr	r6, [r1, #0]
 80038b6:	bf08      	it	eq
 80038b8:	694b      	ldreq	r3, [r1, #20]
 80038ba:	1bf6      	subs	r6, r6, r7
 80038bc:	600f      	str	r7, [r1, #0]
 80038be:	608b      	str	r3, [r1, #8]
 80038c0:	2e00      	cmp	r6, #0
 80038c2:	ddeb      	ble.n	800389c <__sflush_r+0xac>
 80038c4:	4633      	mov	r3, r6
 80038c6:	463a      	mov	r2, r7
 80038c8:	4628      	mov	r0, r5
 80038ca:	6a21      	ldr	r1, [r4, #32]
 80038cc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80038d0:	47e0      	blx	ip
 80038d2:	2800      	cmp	r0, #0
 80038d4:	dc07      	bgt.n	80038e6 <__sflush_r+0xf6>
 80038d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038de:	f04f 30ff 	mov.w	r0, #4294967295
 80038e2:	81a3      	strh	r3, [r4, #12]
 80038e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038e6:	4407      	add	r7, r0
 80038e8:	1a36      	subs	r6, r6, r0
 80038ea:	e7e9      	b.n	80038c0 <__sflush_r+0xd0>
 80038ec:	dfbffffe 	.word	0xdfbffffe

080038f0 <_fflush_r>:
 80038f0:	b538      	push	{r3, r4, r5, lr}
 80038f2:	690b      	ldr	r3, [r1, #16]
 80038f4:	4605      	mov	r5, r0
 80038f6:	460c      	mov	r4, r1
 80038f8:	b913      	cbnz	r3, 8003900 <_fflush_r+0x10>
 80038fa:	2500      	movs	r5, #0
 80038fc:	4628      	mov	r0, r5
 80038fe:	bd38      	pop	{r3, r4, r5, pc}
 8003900:	b118      	cbz	r0, 800390a <_fflush_r+0x1a>
 8003902:	6a03      	ldr	r3, [r0, #32]
 8003904:	b90b      	cbnz	r3, 800390a <_fflush_r+0x1a>
 8003906:	f7ff f9a7 	bl	8002c58 <__sinit>
 800390a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f3      	beq.n	80038fa <_fflush_r+0xa>
 8003912:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003914:	07d0      	lsls	r0, r2, #31
 8003916:	d404      	bmi.n	8003922 <_fflush_r+0x32>
 8003918:	0599      	lsls	r1, r3, #22
 800391a:	d402      	bmi.n	8003922 <_fflush_r+0x32>
 800391c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800391e:	f7ff fb9c 	bl	800305a <__retarget_lock_acquire_recursive>
 8003922:	4628      	mov	r0, r5
 8003924:	4621      	mov	r1, r4
 8003926:	f7ff ff63 	bl	80037f0 <__sflush_r>
 800392a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800392c:	4605      	mov	r5, r0
 800392e:	07da      	lsls	r2, r3, #31
 8003930:	d4e4      	bmi.n	80038fc <_fflush_r+0xc>
 8003932:	89a3      	ldrh	r3, [r4, #12]
 8003934:	059b      	lsls	r3, r3, #22
 8003936:	d4e1      	bmi.n	80038fc <_fflush_r+0xc>
 8003938:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800393a:	f7ff fb8f 	bl	800305c <__retarget_lock_release_recursive>
 800393e:	e7dd      	b.n	80038fc <_fflush_r+0xc>

08003940 <__swhatbuf_r>:
 8003940:	b570      	push	{r4, r5, r6, lr}
 8003942:	460c      	mov	r4, r1
 8003944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003948:	4615      	mov	r5, r2
 800394a:	2900      	cmp	r1, #0
 800394c:	461e      	mov	r6, r3
 800394e:	b096      	sub	sp, #88	@ 0x58
 8003950:	da0c      	bge.n	800396c <__swhatbuf_r+0x2c>
 8003952:	89a3      	ldrh	r3, [r4, #12]
 8003954:	2100      	movs	r1, #0
 8003956:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800395a:	bf14      	ite	ne
 800395c:	2340      	movne	r3, #64	@ 0x40
 800395e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003962:	2000      	movs	r0, #0
 8003964:	6031      	str	r1, [r6, #0]
 8003966:	602b      	str	r3, [r5, #0]
 8003968:	b016      	add	sp, #88	@ 0x58
 800396a:	bd70      	pop	{r4, r5, r6, pc}
 800396c:	466a      	mov	r2, sp
 800396e:	f000 f849 	bl	8003a04 <_fstat_r>
 8003972:	2800      	cmp	r0, #0
 8003974:	dbed      	blt.n	8003952 <__swhatbuf_r+0x12>
 8003976:	9901      	ldr	r1, [sp, #4]
 8003978:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800397c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003980:	4259      	negs	r1, r3
 8003982:	4159      	adcs	r1, r3
 8003984:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003988:	e7eb      	b.n	8003962 <__swhatbuf_r+0x22>

0800398a <__smakebuf_r>:
 800398a:	898b      	ldrh	r3, [r1, #12]
 800398c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800398e:	079d      	lsls	r5, r3, #30
 8003990:	4606      	mov	r6, r0
 8003992:	460c      	mov	r4, r1
 8003994:	d507      	bpl.n	80039a6 <__smakebuf_r+0x1c>
 8003996:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800399a:	6023      	str	r3, [r4, #0]
 800399c:	6123      	str	r3, [r4, #16]
 800399e:	2301      	movs	r3, #1
 80039a0:	6163      	str	r3, [r4, #20]
 80039a2:	b003      	add	sp, #12
 80039a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039a6:	466a      	mov	r2, sp
 80039a8:	ab01      	add	r3, sp, #4
 80039aa:	f7ff ffc9 	bl	8003940 <__swhatbuf_r>
 80039ae:	9f00      	ldr	r7, [sp, #0]
 80039b0:	4605      	mov	r5, r0
 80039b2:	4639      	mov	r1, r7
 80039b4:	4630      	mov	r0, r6
 80039b6:	f7ff fbbd 	bl	8003134 <_malloc_r>
 80039ba:	b948      	cbnz	r0, 80039d0 <__smakebuf_r+0x46>
 80039bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039c0:	059a      	lsls	r2, r3, #22
 80039c2:	d4ee      	bmi.n	80039a2 <__smakebuf_r+0x18>
 80039c4:	f023 0303 	bic.w	r3, r3, #3
 80039c8:	f043 0302 	orr.w	r3, r3, #2
 80039cc:	81a3      	strh	r3, [r4, #12]
 80039ce:	e7e2      	b.n	8003996 <__smakebuf_r+0xc>
 80039d0:	89a3      	ldrh	r3, [r4, #12]
 80039d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80039d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039da:	81a3      	strh	r3, [r4, #12]
 80039dc:	9b01      	ldr	r3, [sp, #4]
 80039de:	6020      	str	r0, [r4, #0]
 80039e0:	b15b      	cbz	r3, 80039fa <__smakebuf_r+0x70>
 80039e2:	4630      	mov	r0, r6
 80039e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039e8:	f000 f81e 	bl	8003a28 <_isatty_r>
 80039ec:	b128      	cbz	r0, 80039fa <__smakebuf_r+0x70>
 80039ee:	89a3      	ldrh	r3, [r4, #12]
 80039f0:	f023 0303 	bic.w	r3, r3, #3
 80039f4:	f043 0301 	orr.w	r3, r3, #1
 80039f8:	81a3      	strh	r3, [r4, #12]
 80039fa:	89a3      	ldrh	r3, [r4, #12]
 80039fc:	431d      	orrs	r5, r3
 80039fe:	81a5      	strh	r5, [r4, #12]
 8003a00:	e7cf      	b.n	80039a2 <__smakebuf_r+0x18>
	...

08003a04 <_fstat_r>:
 8003a04:	b538      	push	{r3, r4, r5, lr}
 8003a06:	2300      	movs	r3, #0
 8003a08:	4d06      	ldr	r5, [pc, #24]	@ (8003a24 <_fstat_r+0x20>)
 8003a0a:	4604      	mov	r4, r0
 8003a0c:	4608      	mov	r0, r1
 8003a0e:	4611      	mov	r1, r2
 8003a10:	602b      	str	r3, [r5, #0]
 8003a12:	f7fc ff65 	bl	80008e0 <_fstat>
 8003a16:	1c43      	adds	r3, r0, #1
 8003a18:	d102      	bne.n	8003a20 <_fstat_r+0x1c>
 8003a1a:	682b      	ldr	r3, [r5, #0]
 8003a1c:	b103      	cbz	r3, 8003a20 <_fstat_r+0x1c>
 8003a1e:	6023      	str	r3, [r4, #0]
 8003a20:	bd38      	pop	{r3, r4, r5, pc}
 8003a22:	bf00      	nop
 8003a24:	20001158 	.word	0x20001158

08003a28 <_isatty_r>:
 8003a28:	b538      	push	{r3, r4, r5, lr}
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	4d05      	ldr	r5, [pc, #20]	@ (8003a44 <_isatty_r+0x1c>)
 8003a2e:	4604      	mov	r4, r0
 8003a30:	4608      	mov	r0, r1
 8003a32:	602b      	str	r3, [r5, #0]
 8003a34:	f7fc ff63 	bl	80008fe <_isatty>
 8003a38:	1c43      	adds	r3, r0, #1
 8003a3a:	d102      	bne.n	8003a42 <_isatty_r+0x1a>
 8003a3c:	682b      	ldr	r3, [r5, #0]
 8003a3e:	b103      	cbz	r3, 8003a42 <_isatty_r+0x1a>
 8003a40:	6023      	str	r3, [r4, #0]
 8003a42:	bd38      	pop	{r3, r4, r5, pc}
 8003a44:	20001158 	.word	0x20001158

08003a48 <_sbrk_r>:
 8003a48:	b538      	push	{r3, r4, r5, lr}
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	4d05      	ldr	r5, [pc, #20]	@ (8003a64 <_sbrk_r+0x1c>)
 8003a4e:	4604      	mov	r4, r0
 8003a50:	4608      	mov	r0, r1
 8003a52:	602b      	str	r3, [r5, #0]
 8003a54:	f7fc ff6a 	bl	800092c <_sbrk>
 8003a58:	1c43      	adds	r3, r0, #1
 8003a5a:	d102      	bne.n	8003a62 <_sbrk_r+0x1a>
 8003a5c:	682b      	ldr	r3, [r5, #0]
 8003a5e:	b103      	cbz	r3, 8003a62 <_sbrk_r+0x1a>
 8003a60:	6023      	str	r3, [r4, #0]
 8003a62:	bd38      	pop	{r3, r4, r5, pc}
 8003a64:	20001158 	.word	0x20001158

08003a68 <memchr>:
 8003a68:	4603      	mov	r3, r0
 8003a6a:	b510      	push	{r4, lr}
 8003a6c:	b2c9      	uxtb	r1, r1
 8003a6e:	4402      	add	r2, r0
 8003a70:	4293      	cmp	r3, r2
 8003a72:	4618      	mov	r0, r3
 8003a74:	d101      	bne.n	8003a7a <memchr+0x12>
 8003a76:	2000      	movs	r0, #0
 8003a78:	e003      	b.n	8003a82 <memchr+0x1a>
 8003a7a:	7804      	ldrb	r4, [r0, #0]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	428c      	cmp	r4, r1
 8003a80:	d1f6      	bne.n	8003a70 <memchr+0x8>
 8003a82:	bd10      	pop	{r4, pc}

08003a84 <_init>:
 8003a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a86:	bf00      	nop
 8003a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a8a:	bc08      	pop	{r3}
 8003a8c:	469e      	mov	lr, r3
 8003a8e:	4770      	bx	lr

08003a90 <_fini>:
 8003a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a92:	bf00      	nop
 8003a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a96:	bc08      	pop	{r3}
 8003a98:	469e      	mov	lr, r3
 8003a9a:	4770      	bx	lr
