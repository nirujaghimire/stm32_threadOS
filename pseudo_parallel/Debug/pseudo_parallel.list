
pseudo_parallel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003074  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  08003180  08003180  00013180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037a8  080037a8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080037a8  080037a8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037a8  080037a8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037a8  080037a8  000137a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037ac  080037ac  000137ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080037b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000074  08003824  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08003824  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005e1f  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001811  00000000  00000000  00025ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  000276d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000718  00000000  00000000  00027e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018008  00000000  00000000  000285a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008b0c  00000000  00000000  000405b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083831  00000000  00000000  000490bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc8ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025d4  00000000  00000000  000cc940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003168 	.word	0x08003168

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003168 	.word	0x08003168

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa24 	bl	800059c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f809 	bl	800016a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f876 	bl	8000248 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015c:	f000 f84a 	bl	80001f4 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	init();
 8000160:	f001 ff7e 	bl	8002060 <init>
	while (1) {
		loop();
 8000164:	f001 ffa8 	bl	80020b8 <loop>
 8000168:	e7fc      	b.n	8000164 <main+0x18>

0800016a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800016a:	b580      	push	{r7, lr}
 800016c:	b090      	sub	sp, #64	; 0x40
 800016e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000170:	f107 0318 	add.w	r3, r7, #24
 8000174:	2228      	movs	r2, #40	; 0x28
 8000176:	2100      	movs	r1, #0
 8000178:	4618      	mov	r0, r3
 800017a:	f001 ffcd 	bl	8002118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800017e:	1d3b      	adds	r3, r7, #4
 8000180:	2200      	movs	r2, #0
 8000182:	601a      	str	r2, [r3, #0]
 8000184:	605a      	str	r2, [r3, #4]
 8000186:	609a      	str	r2, [r3, #8]
 8000188:	60da      	str	r2, [r3, #12]
 800018a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800018c:	2301      	movs	r3, #1
 800018e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000190:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000194:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000196:	2300      	movs	r3, #0
 8000198:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800019a:	2301      	movs	r3, #1
 800019c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800019e:	2302      	movs	r3, #2
 80001a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ae:	f107 0318 	add.w	r3, r7, #24
 80001b2:	4618      	mov	r0, r3
 80001b4:	f000 fcd4 	bl	8000b60 <HAL_RCC_OscConfig>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d001      	beq.n	80001c2 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001be:	f000 f8a5 	bl	800030c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c2:	230f      	movs	r3, #15
 80001c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001c6:	2302      	movs	r3, #2
 80001c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ca:	2300      	movs	r3, #0
 80001cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	2102      	movs	r1, #2
 80001dc:	4618      	mov	r0, r3
 80001de:	f000 ff41 	bl	8001064 <HAL_RCC_ClockConfig>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d001      	beq.n	80001ec <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001e8:	f000 f890 	bl	800030c <Error_Handler>
  }
}
 80001ec:	bf00      	nop
 80001ee:	3740      	adds	r7, #64	; 0x40
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}

080001f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80001f8:	4b11      	ldr	r3, [pc, #68]	; (8000240 <MX_USART1_UART_Init+0x4c>)
 80001fa:	4a12      	ldr	r2, [pc, #72]	; (8000244 <MX_USART1_UART_Init+0x50>)
 80001fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80001fe:	4b10      	ldr	r3, [pc, #64]	; (8000240 <MX_USART1_UART_Init+0x4c>)
 8000200:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000204:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000206:	4b0e      	ldr	r3, [pc, #56]	; (8000240 <MX_USART1_UART_Init+0x4c>)
 8000208:	2200      	movs	r2, #0
 800020a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800020c:	4b0c      	ldr	r3, [pc, #48]	; (8000240 <MX_USART1_UART_Init+0x4c>)
 800020e:	2200      	movs	r2, #0
 8000210:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000212:	4b0b      	ldr	r3, [pc, #44]	; (8000240 <MX_USART1_UART_Init+0x4c>)
 8000214:	2200      	movs	r2, #0
 8000216:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000218:	4b09      	ldr	r3, [pc, #36]	; (8000240 <MX_USART1_UART_Init+0x4c>)
 800021a:	220c      	movs	r2, #12
 800021c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800021e:	4b08      	ldr	r3, [pc, #32]	; (8000240 <MX_USART1_UART_Init+0x4c>)
 8000220:	2200      	movs	r2, #0
 8000222:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000224:	4b06      	ldr	r3, [pc, #24]	; (8000240 <MX_USART1_UART_Init+0x4c>)
 8000226:	2200      	movs	r2, #0
 8000228:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800022a:	4805      	ldr	r0, [pc, #20]	; (8000240 <MX_USART1_UART_Init+0x4c>)
 800022c:	f001 f8b2 	bl	8001394 <HAL_HalfDuplex_Init>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000236:	f000 f869 	bl	800030c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800023a:	bf00      	nop
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	20000090 	.word	0x20000090
 8000244:	40013800 	.word	0x40013800

08000248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b088      	sub	sp, #32
 800024c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024e:	f107 0310 	add.w	r3, r7, #16
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800025c:	4b1e      	ldr	r3, [pc, #120]	; (80002d8 <MX_GPIO_Init+0x90>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	4a1d      	ldr	r2, [pc, #116]	; (80002d8 <MX_GPIO_Init+0x90>)
 8000262:	f043 0310 	orr.w	r3, r3, #16
 8000266:	6193      	str	r3, [r2, #24]
 8000268:	4b1b      	ldr	r3, [pc, #108]	; (80002d8 <MX_GPIO_Init+0x90>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	f003 0310 	and.w	r3, r3, #16
 8000270:	60fb      	str	r3, [r7, #12]
 8000272:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000274:	4b18      	ldr	r3, [pc, #96]	; (80002d8 <MX_GPIO_Init+0x90>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	4a17      	ldr	r2, [pc, #92]	; (80002d8 <MX_GPIO_Init+0x90>)
 800027a:	f043 0320 	orr.w	r3, r3, #32
 800027e:	6193      	str	r3, [r2, #24]
 8000280:	4b15      	ldr	r3, [pc, #84]	; (80002d8 <MX_GPIO_Init+0x90>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	f003 0320 	and.w	r3, r3, #32
 8000288:	60bb      	str	r3, [r7, #8]
 800028a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800028c:	4b12      	ldr	r3, [pc, #72]	; (80002d8 <MX_GPIO_Init+0x90>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	4a11      	ldr	r2, [pc, #68]	; (80002d8 <MX_GPIO_Init+0x90>)
 8000292:	f043 0304 	orr.w	r3, r3, #4
 8000296:	6193      	str	r3, [r2, #24]
 8000298:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <MX_GPIO_Init+0x90>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	f003 0304 	and.w	r3, r3, #4
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80002a4:	2200      	movs	r2, #0
 80002a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002aa:	480c      	ldr	r0, [pc, #48]	; (80002dc <MX_GPIO_Init+0x94>)
 80002ac:	f000 fc40 	bl	8000b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80002b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b6:	2301      	movs	r3, #1
 80002b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ba:	2300      	movs	r3, #0
 80002bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002be:	2302      	movs	r3, #2
 80002c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002c2:	f107 0310 	add.w	r3, r7, #16
 80002c6:	4619      	mov	r1, r3
 80002c8:	4804      	ldr	r0, [pc, #16]	; (80002dc <MX_GPIO_Init+0x94>)
 80002ca:	f000 faad 	bl	8000828 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002ce:	bf00      	nop
 80002d0:	3720      	adds	r7, #32
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40021000 	.word	0x40021000
 80002dc:	40011000 	.word	0x40011000

080002e0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int fd, char *data, int len) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	60f8      	str	r0, [r7, #12]
 80002e8:	60b9      	str	r1, [r7, #8]
 80002ea:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) data, len, HAL_MAX_DELAY);
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	b29a      	uxth	r2, r3
 80002f0:	f04f 33ff 	mov.w	r3, #4294967295
 80002f4:	68b9      	ldr	r1, [r7, #8]
 80002f6:	4804      	ldr	r0, [pc, #16]	; (8000308 <_write+0x28>)
 80002f8:	f001 f8a1 	bl	800143e <HAL_UART_Transmit>
	return len;
 80002fc:	687b      	ldr	r3, [r7, #4]
}
 80002fe:	4618      	mov	r0, r3
 8000300:	3710      	adds	r7, #16
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	20000090 	.word	0x20000090

0800030c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000310:	b672      	cpsid	i
}
 8000312:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000314:	e7fe      	b.n	8000314 <Error_Handler+0x8>
	...

08000318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800031e:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <HAL_MspInit+0x40>)
 8000320:	699b      	ldr	r3, [r3, #24]
 8000322:	4a0d      	ldr	r2, [pc, #52]	; (8000358 <HAL_MspInit+0x40>)
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	6193      	str	r3, [r2, #24]
 800032a:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <HAL_MspInit+0x40>)
 800032c:	699b      	ldr	r3, [r3, #24]
 800032e:	f003 0301 	and.w	r3, r3, #1
 8000332:	607b      	str	r3, [r7, #4]
 8000334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000336:	4b08      	ldr	r3, [pc, #32]	; (8000358 <HAL_MspInit+0x40>)
 8000338:	69db      	ldr	r3, [r3, #28]
 800033a:	4a07      	ldr	r2, [pc, #28]	; (8000358 <HAL_MspInit+0x40>)
 800033c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000340:	61d3      	str	r3, [r2, #28]
 8000342:	4b05      	ldr	r3, [pc, #20]	; (8000358 <HAL_MspInit+0x40>)
 8000344:	69db      	ldr	r3, [r3, #28]
 8000346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800034a:	603b      	str	r3, [r7, #0]
 800034c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	40021000 	.word	0x40021000

0800035c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b088      	sub	sp, #32
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000364:	f107 0310 	add.w	r3, r7, #16
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	605a      	str	r2, [r3, #4]
 800036e:	609a      	str	r2, [r3, #8]
 8000370:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4a16      	ldr	r2, [pc, #88]	; (80003d0 <HAL_UART_MspInit+0x74>)
 8000378:	4293      	cmp	r3, r2
 800037a:	d124      	bne.n	80003c6 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800037c:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <HAL_UART_MspInit+0x78>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a14      	ldr	r2, [pc, #80]	; (80003d4 <HAL_UART_MspInit+0x78>)
 8000382:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <HAL_UART_MspInit+0x78>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000390:	60fb      	str	r3, [r7, #12]
 8000392:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000394:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <HAL_UART_MspInit+0x78>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a0e      	ldr	r2, [pc, #56]	; (80003d4 <HAL_UART_MspInit+0x78>)
 800039a:	f043 0304 	orr.w	r3, r3, #4
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <HAL_UART_MspInit+0x78>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f003 0304 	and.w	r3, r3, #4
 80003a8:	60bb      	str	r3, [r7, #8]
 80003aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80003ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003b2:	2312      	movs	r3, #18
 80003b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003b6:	2303      	movs	r3, #3
 80003b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ba:	f107 0310 	add.w	r3, r7, #16
 80003be:	4619      	mov	r1, r3
 80003c0:	4805      	ldr	r0, [pc, #20]	; (80003d8 <HAL_UART_MspInit+0x7c>)
 80003c2:	f000 fa31 	bl	8000828 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80003c6:	bf00      	nop
 80003c8:	3720      	adds	r7, #32
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40013800 	.word	0x40013800
 80003d4:	40021000 	.word	0x40021000
 80003d8:	40010800 	.word	0x40010800

080003dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80003e0:	e7fe      	b.n	80003e0 <NMI_Handler+0x4>
	...

080003e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	printf("Hard Fault\n");
 80003e8:	4801      	ldr	r0, [pc, #4]	; (80003f0 <HardFault_Handler+0xc>)
 80003ea:	f001 ff23 	bl	8002234 <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003ee:	e7fe      	b.n	80003ee <HardFault_Handler+0xa>
 80003f0:	08003180 	.word	0x08003180

080003f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <MemManage_Handler+0x4>

080003fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003fe:	e7fe      	b.n	80003fe <BusFault_Handler+0x4>

08000400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000404:	e7fe      	b.n	8000404 <UsageFault_Handler+0x4>

08000406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
	task_SVCHandler();
 800040a:	f001 fa89 	bl	8001920 <task_SVCHandler>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}

08000412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000416:	bf00      	nop
 8000418:	46bd      	mov	sp, r7
 800041a:	bc80      	pop	{r7}
 800041c:	4770      	bx	lr

0800041e <PendSV_Handler>:
__attribute__((naked)) void PendSV_Handler(void)
{
  /* USER CODE BEGIN PendSV_IRQn 0 */

	/*save LR back to main, must do this firstly*/
	__asm volatile("PUSH {LR}");
 800041e:	b500      	push	{lr}

	task_PendSVHandler();
 8000420:	f001 fad2 	bl	80019c8 <task_PendSVHandler>

	/* exit */
	__asm volatile("POP {LR}");
 8000424:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 8000428:	4770      	bx	lr
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800042a:	bf00      	nop

0800042c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	task_SysTickHandler();
 8000430:	f001 fa9e 	bl	8001970 <task_SysTickHandler>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000434:	f000 f8f8 	bl	8000628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000438:	bf00      	nop
 800043a:	bd80      	pop	{r7, pc}

0800043c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b086      	sub	sp, #24
 8000440:	af00      	add	r7, sp, #0
 8000442:	60f8      	str	r0, [r7, #12]
 8000444:	60b9      	str	r1, [r7, #8]
 8000446:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000448:	2300      	movs	r3, #0
 800044a:	617b      	str	r3, [r7, #20]
 800044c:	e00a      	b.n	8000464 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800044e:	f3af 8000 	nop.w
 8000452:	4601      	mov	r1, r0
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	1c5a      	adds	r2, r3, #1
 8000458:	60ba      	str	r2, [r7, #8]
 800045a:	b2ca      	uxtb	r2, r1
 800045c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800045e:	697b      	ldr	r3, [r7, #20]
 8000460:	3301      	adds	r3, #1
 8000462:	617b      	str	r3, [r7, #20]
 8000464:	697a      	ldr	r2, [r7, #20]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	429a      	cmp	r2, r3
 800046a:	dbf0      	blt.n	800044e <_read+0x12>
  }

  return len;
 800046c:	687b      	ldr	r3, [r7, #4]
}
 800046e:	4618      	mov	r0, r3
 8000470:	3718      	adds	r7, #24
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}

08000476 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000476:	b480      	push	{r7}
 8000478:	b083      	sub	sp, #12
 800047a:	af00      	add	r7, sp, #0
 800047c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800047e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000482:	4618      	mov	r0, r3
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr

0800048c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
 8000494:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800049c:	605a      	str	r2, [r3, #4]
  return 0;
 800049e:	2300      	movs	r3, #0
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr

080004aa <_isatty>:

int _isatty(int file)
{
 80004aa:	b480      	push	{r7}
 80004ac:	b083      	sub	sp, #12
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004b2:	2301      	movs	r3, #1
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr

080004be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004be:	b480      	push	{r7}
 80004c0:	b085      	sub	sp, #20
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	60f8      	str	r0, [r7, #12]
 80004c6:	60b9      	str	r1, [r7, #8]
 80004c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004ca:	2300      	movs	r3, #0
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	3714      	adds	r7, #20
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr
	...

080004d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004e0:	4a14      	ldr	r2, [pc, #80]	; (8000534 <_sbrk+0x5c>)
 80004e2:	4b15      	ldr	r3, [pc, #84]	; (8000538 <_sbrk+0x60>)
 80004e4:	1ad3      	subs	r3, r2, r3
 80004e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004ec:	4b13      	ldr	r3, [pc, #76]	; (800053c <_sbrk+0x64>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d102      	bne.n	80004fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004f4:	4b11      	ldr	r3, [pc, #68]	; (800053c <_sbrk+0x64>)
 80004f6:	4a12      	ldr	r2, [pc, #72]	; (8000540 <_sbrk+0x68>)
 80004f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004fa:	4b10      	ldr	r3, [pc, #64]	; (800053c <_sbrk+0x64>)
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4413      	add	r3, r2
 8000502:	693a      	ldr	r2, [r7, #16]
 8000504:	429a      	cmp	r2, r3
 8000506:	d207      	bcs.n	8000518 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000508:	f001 fddc 	bl	80020c4 <__errno>
 800050c:	4603      	mov	r3, r0
 800050e:	220c      	movs	r2, #12
 8000510:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000512:	f04f 33ff 	mov.w	r3, #4294967295
 8000516:	e009      	b.n	800052c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <_sbrk+0x64>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800051e:	4b07      	ldr	r3, [pc, #28]	; (800053c <_sbrk+0x64>)
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4413      	add	r3, r2
 8000526:	4a05      	ldr	r2, [pc, #20]	; (800053c <_sbrk+0x64>)
 8000528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800052a:	68fb      	ldr	r3, [r7, #12]
}
 800052c:	4618      	mov	r0, r3
 800052e:	3718      	adds	r7, #24
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20005000 	.word	0x20005000
 8000538:	00000400 	.word	0x00000400
 800053c:	200000d4 	.word	0x200000d4
 8000540:	20000228 	.word	0x20000228

08000544 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000550:	480c      	ldr	r0, [pc, #48]	; (8000584 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000552:	490d      	ldr	r1, [pc, #52]	; (8000588 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000554:	4a0d      	ldr	r2, [pc, #52]	; (800058c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000558:	e002      	b.n	8000560 <LoopCopyDataInit>

0800055a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800055a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800055c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800055e:	3304      	adds	r3, #4

08000560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000564:	d3f9      	bcc.n	800055a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000566:	4a0a      	ldr	r2, [pc, #40]	; (8000590 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000568:	4c0a      	ldr	r4, [pc, #40]	; (8000594 <LoopFillZerobss+0x22>)
  movs r3, #0
 800056a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800056c:	e001      	b.n	8000572 <LoopFillZerobss>

0800056e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800056e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000570:	3204      	adds	r2, #4

08000572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000574:	d3fb      	bcc.n	800056e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000576:	f7ff ffe5 	bl	8000544 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800057a:	f001 fda9 	bl	80020d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800057e:	f7ff fde5 	bl	800014c <main>
  bx lr
 8000582:	4770      	bx	lr
  ldr r0, =_sdata
 8000584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000588:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800058c:	080037b0 	.word	0x080037b0
  ldr r2, =_sbss
 8000590:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000594:	20000224 	.word	0x20000224

08000598 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000598:	e7fe      	b.n	8000598 <ADC1_2_IRQHandler>
	...

0800059c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a0:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <HAL_Init+0x28>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a07      	ldr	r2, [pc, #28]	; (80005c4 <HAL_Init+0x28>)
 80005a6:	f043 0310 	orr.w	r3, r3, #16
 80005aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ac:	2003      	movs	r0, #3
 80005ae:	f000 f907 	bl	80007c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005b2:	2000      	movs	r0, #0
 80005b4:	f000 f808 	bl	80005c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b8:	f7ff feae 	bl	8000318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005bc:	2300      	movs	r3, #0
}
 80005be:	4618      	mov	r0, r3
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40022000 	.word	0x40022000

080005c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x54>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <HAL_InitTick+0x58>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	4619      	mov	r1, r3
 80005da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005de:	fbb3 f3f1 	udiv	r3, r3, r1
 80005e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f911 	bl	800080e <HAL_SYSTICK_Config>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005f2:	2301      	movs	r3, #1
 80005f4:	e00e      	b.n	8000614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2b0f      	cmp	r3, #15
 80005fa:	d80a      	bhi.n	8000612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005fc:	2200      	movs	r2, #0
 80005fe:	6879      	ldr	r1, [r7, #4]
 8000600:	f04f 30ff 	mov.w	r0, #4294967295
 8000604:	f000 f8e7 	bl	80007d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000608:	4a06      	ldr	r2, [pc, #24]	; (8000624 <HAL_InitTick+0x5c>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060e:	2300      	movs	r3, #0
 8000610:	e000      	b.n	8000614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000612:	2301      	movs	r3, #1
}
 8000614:	4618      	mov	r0, r3
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000000 	.word	0x20000000
 8000620:	20000008 	.word	0x20000008
 8000624:	20000004 	.word	0x20000004

08000628 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <HAL_IncTick+0x1c>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	461a      	mov	r2, r3
 8000632:	4b05      	ldr	r3, [pc, #20]	; (8000648 <HAL_IncTick+0x20>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4413      	add	r3, r2
 8000638:	4a03      	ldr	r2, [pc, #12]	; (8000648 <HAL_IncTick+0x20>)
 800063a:	6013      	str	r3, [r2, #0]
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr
 8000644:	20000008 	.word	0x20000008
 8000648:	200000d8 	.word	0x200000d8

0800064c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b02      	ldr	r3, [pc, #8]	; (800065c <HAL_GetTick+0x10>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr
 800065c:	200000d8 	.word	0x200000d8

08000660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f003 0307 	and.w	r3, r3, #7
 800066e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000676:	68ba      	ldr	r2, [r7, #8]
 8000678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800067c:	4013      	ands	r3, r2
 800067e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800068c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000692:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	60d3      	str	r3, [r2, #12]
}
 8000698:	bf00      	nop
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <__NVIC_GetPriorityGrouping+0x18>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	0a1b      	lsrs	r3, r3, #8
 80006b2:	f003 0307 	and.w	r3, r3, #7
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	6039      	str	r1, [r7, #0]
 80006ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	db0a      	blt.n	80006ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	490c      	ldr	r1, [pc, #48]	; (8000710 <__NVIC_SetPriority+0x4c>)
 80006de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e2:	0112      	lsls	r2, r2, #4
 80006e4:	b2d2      	uxtb	r2, r2
 80006e6:	440b      	add	r3, r1
 80006e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006ec:	e00a      	b.n	8000704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4908      	ldr	r1, [pc, #32]	; (8000714 <__NVIC_SetPriority+0x50>)
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	f003 030f 	and.w	r3, r3, #15
 80006fa:	3b04      	subs	r3, #4
 80006fc:	0112      	lsls	r2, r2, #4
 80006fe:	b2d2      	uxtb	r2, r2
 8000700:	440b      	add	r3, r1
 8000702:	761a      	strb	r2, [r3, #24]
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000e100 	.word	0xe000e100
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000718:	b480      	push	{r7}
 800071a:	b089      	sub	sp, #36	; 0x24
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	f1c3 0307 	rsb	r3, r3, #7
 8000732:	2b04      	cmp	r3, #4
 8000734:	bf28      	it	cs
 8000736:	2304      	movcs	r3, #4
 8000738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	3304      	adds	r3, #4
 800073e:	2b06      	cmp	r3, #6
 8000740:	d902      	bls.n	8000748 <NVIC_EncodePriority+0x30>
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	3b03      	subs	r3, #3
 8000746:	e000      	b.n	800074a <NVIC_EncodePriority+0x32>
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800074c:	f04f 32ff 	mov.w	r2, #4294967295
 8000750:	69bb      	ldr	r3, [r7, #24]
 8000752:	fa02 f303 	lsl.w	r3, r2, r3
 8000756:	43da      	mvns	r2, r3
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	401a      	ands	r2, r3
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000760:	f04f 31ff 	mov.w	r1, #4294967295
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	fa01 f303 	lsl.w	r3, r1, r3
 800076a:	43d9      	mvns	r1, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	4313      	orrs	r3, r2
         );
}
 8000772:	4618      	mov	r0, r3
 8000774:	3724      	adds	r7, #36	; 0x24
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr

0800077c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3b01      	subs	r3, #1
 8000788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800078c:	d301      	bcc.n	8000792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800078e:	2301      	movs	r3, #1
 8000790:	e00f      	b.n	80007b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000792:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <SysTick_Config+0x40>)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	3b01      	subs	r3, #1
 8000798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800079a:	210f      	movs	r1, #15
 800079c:	f04f 30ff 	mov.w	r0, #4294967295
 80007a0:	f7ff ff90 	bl	80006c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <SysTick_Config+0x40>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007aa:	4b04      	ldr	r3, [pc, #16]	; (80007bc <SysTick_Config+0x40>)
 80007ac:	2207      	movs	r2, #7
 80007ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	e000e010 	.word	0xe000e010

080007c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f7ff ff49 	bl	8000660 <__NVIC_SetPriorityGrouping>
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b086      	sub	sp, #24
 80007da:	af00      	add	r7, sp, #0
 80007dc:	4603      	mov	r3, r0
 80007de:	60b9      	str	r1, [r7, #8]
 80007e0:	607a      	str	r2, [r7, #4]
 80007e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007e8:	f7ff ff5e 	bl	80006a8 <__NVIC_GetPriorityGrouping>
 80007ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	68b9      	ldr	r1, [r7, #8]
 80007f2:	6978      	ldr	r0, [r7, #20]
 80007f4:	f7ff ff90 	bl	8000718 <NVIC_EncodePriority>
 80007f8:	4602      	mov	r2, r0
 80007fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007fe:	4611      	mov	r1, r2
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff ff5f 	bl	80006c4 <__NVIC_SetPriority>
}
 8000806:	bf00      	nop
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b082      	sub	sp, #8
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f7ff ffb0 	bl	800077c <SysTick_Config>
 800081c:	4603      	mov	r3, r0
}
 800081e:	4618      	mov	r0, r3
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000828:	b480      	push	{r7}
 800082a:	b08b      	sub	sp, #44	; 0x2c
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800083a:	e169      	b.n	8000b10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800083c:	2201      	movs	r2, #1
 800083e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000840:	fa02 f303 	lsl.w	r3, r2, r3
 8000844:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	69fa      	ldr	r2, [r7, #28]
 800084c:	4013      	ands	r3, r2
 800084e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000850:	69ba      	ldr	r2, [r7, #24]
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	429a      	cmp	r2, r3
 8000856:	f040 8158 	bne.w	8000b0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	4a9a      	ldr	r2, [pc, #616]	; (8000ac8 <HAL_GPIO_Init+0x2a0>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d05e      	beq.n	8000922 <HAL_GPIO_Init+0xfa>
 8000864:	4a98      	ldr	r2, [pc, #608]	; (8000ac8 <HAL_GPIO_Init+0x2a0>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d875      	bhi.n	8000956 <HAL_GPIO_Init+0x12e>
 800086a:	4a98      	ldr	r2, [pc, #608]	; (8000acc <HAL_GPIO_Init+0x2a4>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d058      	beq.n	8000922 <HAL_GPIO_Init+0xfa>
 8000870:	4a96      	ldr	r2, [pc, #600]	; (8000acc <HAL_GPIO_Init+0x2a4>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d86f      	bhi.n	8000956 <HAL_GPIO_Init+0x12e>
 8000876:	4a96      	ldr	r2, [pc, #600]	; (8000ad0 <HAL_GPIO_Init+0x2a8>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d052      	beq.n	8000922 <HAL_GPIO_Init+0xfa>
 800087c:	4a94      	ldr	r2, [pc, #592]	; (8000ad0 <HAL_GPIO_Init+0x2a8>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d869      	bhi.n	8000956 <HAL_GPIO_Init+0x12e>
 8000882:	4a94      	ldr	r2, [pc, #592]	; (8000ad4 <HAL_GPIO_Init+0x2ac>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d04c      	beq.n	8000922 <HAL_GPIO_Init+0xfa>
 8000888:	4a92      	ldr	r2, [pc, #584]	; (8000ad4 <HAL_GPIO_Init+0x2ac>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d863      	bhi.n	8000956 <HAL_GPIO_Init+0x12e>
 800088e:	4a92      	ldr	r2, [pc, #584]	; (8000ad8 <HAL_GPIO_Init+0x2b0>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d046      	beq.n	8000922 <HAL_GPIO_Init+0xfa>
 8000894:	4a90      	ldr	r2, [pc, #576]	; (8000ad8 <HAL_GPIO_Init+0x2b0>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d85d      	bhi.n	8000956 <HAL_GPIO_Init+0x12e>
 800089a:	2b12      	cmp	r3, #18
 800089c:	d82a      	bhi.n	80008f4 <HAL_GPIO_Init+0xcc>
 800089e:	2b12      	cmp	r3, #18
 80008a0:	d859      	bhi.n	8000956 <HAL_GPIO_Init+0x12e>
 80008a2:	a201      	add	r2, pc, #4	; (adr r2, 80008a8 <HAL_GPIO_Init+0x80>)
 80008a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a8:	08000923 	.word	0x08000923
 80008ac:	080008fd 	.word	0x080008fd
 80008b0:	0800090f 	.word	0x0800090f
 80008b4:	08000951 	.word	0x08000951
 80008b8:	08000957 	.word	0x08000957
 80008bc:	08000957 	.word	0x08000957
 80008c0:	08000957 	.word	0x08000957
 80008c4:	08000957 	.word	0x08000957
 80008c8:	08000957 	.word	0x08000957
 80008cc:	08000957 	.word	0x08000957
 80008d0:	08000957 	.word	0x08000957
 80008d4:	08000957 	.word	0x08000957
 80008d8:	08000957 	.word	0x08000957
 80008dc:	08000957 	.word	0x08000957
 80008e0:	08000957 	.word	0x08000957
 80008e4:	08000957 	.word	0x08000957
 80008e8:	08000957 	.word	0x08000957
 80008ec:	08000905 	.word	0x08000905
 80008f0:	08000919 	.word	0x08000919
 80008f4:	4a79      	ldr	r2, [pc, #484]	; (8000adc <HAL_GPIO_Init+0x2b4>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d013      	beq.n	8000922 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008fa:	e02c      	b.n	8000956 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	623b      	str	r3, [r7, #32]
          break;
 8000902:	e029      	b.n	8000958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	3304      	adds	r3, #4
 800090a:	623b      	str	r3, [r7, #32]
          break;
 800090c:	e024      	b.n	8000958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	68db      	ldr	r3, [r3, #12]
 8000912:	3308      	adds	r3, #8
 8000914:	623b      	str	r3, [r7, #32]
          break;
 8000916:	e01f      	b.n	8000958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	330c      	adds	r3, #12
 800091e:	623b      	str	r3, [r7, #32]
          break;
 8000920:	e01a      	b.n	8000958 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d102      	bne.n	8000930 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800092a:	2304      	movs	r3, #4
 800092c:	623b      	str	r3, [r7, #32]
          break;
 800092e:	e013      	b.n	8000958 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d105      	bne.n	8000944 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000938:	2308      	movs	r3, #8
 800093a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	69fa      	ldr	r2, [r7, #28]
 8000940:	611a      	str	r2, [r3, #16]
          break;
 8000942:	e009      	b.n	8000958 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000944:	2308      	movs	r3, #8
 8000946:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	69fa      	ldr	r2, [r7, #28]
 800094c:	615a      	str	r2, [r3, #20]
          break;
 800094e:	e003      	b.n	8000958 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
          break;
 8000954:	e000      	b.n	8000958 <HAL_GPIO_Init+0x130>
          break;
 8000956:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	2bff      	cmp	r3, #255	; 0xff
 800095c:	d801      	bhi.n	8000962 <HAL_GPIO_Init+0x13a>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	e001      	b.n	8000966 <HAL_GPIO_Init+0x13e>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3304      	adds	r3, #4
 8000966:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	2bff      	cmp	r3, #255	; 0xff
 800096c:	d802      	bhi.n	8000974 <HAL_GPIO_Init+0x14c>
 800096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	e002      	b.n	800097a <HAL_GPIO_Init+0x152>
 8000974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000976:	3b08      	subs	r3, #8
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	210f      	movs	r1, #15
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	fa01 f303 	lsl.w	r3, r1, r3
 8000988:	43db      	mvns	r3, r3
 800098a:	401a      	ands	r2, r3
 800098c:	6a39      	ldr	r1, [r7, #32]
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	fa01 f303 	lsl.w	r3, r1, r3
 8000994:	431a      	orrs	r2, r3
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	f000 80b1 	beq.w	8000b0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009a8:	4b4d      	ldr	r3, [pc, #308]	; (8000ae0 <HAL_GPIO_Init+0x2b8>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	4a4c      	ldr	r2, [pc, #304]	; (8000ae0 <HAL_GPIO_Init+0x2b8>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	6193      	str	r3, [r2, #24]
 80009b4:	4b4a      	ldr	r3, [pc, #296]	; (8000ae0 <HAL_GPIO_Init+0x2b8>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009c0:	4a48      	ldr	r2, [pc, #288]	; (8000ae4 <HAL_GPIO_Init+0x2bc>)
 80009c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c4:	089b      	lsrs	r3, r3, #2
 80009c6:	3302      	adds	r3, #2
 80009c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d0:	f003 0303 	and.w	r3, r3, #3
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	220f      	movs	r2, #15
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	43db      	mvns	r3, r3
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	4013      	ands	r3, r2
 80009e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a40      	ldr	r2, [pc, #256]	; (8000ae8 <HAL_GPIO_Init+0x2c0>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d013      	beq.n	8000a14 <HAL_GPIO_Init+0x1ec>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a3f      	ldr	r2, [pc, #252]	; (8000aec <HAL_GPIO_Init+0x2c4>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d00d      	beq.n	8000a10 <HAL_GPIO_Init+0x1e8>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a3e      	ldr	r2, [pc, #248]	; (8000af0 <HAL_GPIO_Init+0x2c8>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d007      	beq.n	8000a0c <HAL_GPIO_Init+0x1e4>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a3d      	ldr	r2, [pc, #244]	; (8000af4 <HAL_GPIO_Init+0x2cc>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d101      	bne.n	8000a08 <HAL_GPIO_Init+0x1e0>
 8000a04:	2303      	movs	r3, #3
 8000a06:	e006      	b.n	8000a16 <HAL_GPIO_Init+0x1ee>
 8000a08:	2304      	movs	r3, #4
 8000a0a:	e004      	b.n	8000a16 <HAL_GPIO_Init+0x1ee>
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	e002      	b.n	8000a16 <HAL_GPIO_Init+0x1ee>
 8000a10:	2301      	movs	r3, #1
 8000a12:	e000      	b.n	8000a16 <HAL_GPIO_Init+0x1ee>
 8000a14:	2300      	movs	r3, #0
 8000a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a18:	f002 0203 	and.w	r2, r2, #3
 8000a1c:	0092      	lsls	r2, r2, #2
 8000a1e:	4093      	lsls	r3, r2
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a26:	492f      	ldr	r1, [pc, #188]	; (8000ae4 <HAL_GPIO_Init+0x2bc>)
 8000a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2a:	089b      	lsrs	r3, r3, #2
 8000a2c:	3302      	adds	r3, #2
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d006      	beq.n	8000a4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a40:	4b2d      	ldr	r3, [pc, #180]	; (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	492c      	ldr	r1, [pc, #176]	; (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	600b      	str	r3, [r1, #0]
 8000a4c:	e006      	b.n	8000a5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a4e:	4b2a      	ldr	r3, [pc, #168]	; (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	43db      	mvns	r3, r3
 8000a56:	4928      	ldr	r1, [pc, #160]	; (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000a58:	4013      	ands	r3, r2
 8000a5a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d006      	beq.n	8000a76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a68:	4b23      	ldr	r3, [pc, #140]	; (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000a6a:	685a      	ldr	r2, [r3, #4]
 8000a6c:	4922      	ldr	r1, [pc, #136]	; (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	604b      	str	r3, [r1, #4]
 8000a74:	e006      	b.n	8000a84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a76:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000a78:	685a      	ldr	r2, [r3, #4]
 8000a7a:	69bb      	ldr	r3, [r7, #24]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	491e      	ldr	r1, [pc, #120]	; (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000a80:	4013      	ands	r3, r2
 8000a82:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d006      	beq.n	8000a9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a90:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000a92:	689a      	ldr	r2, [r3, #8]
 8000a94:	4918      	ldr	r1, [pc, #96]	; (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	608b      	str	r3, [r1, #8]
 8000a9c:	e006      	b.n	8000aac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000aa0:	689a      	ldr	r2, [r3, #8]
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	4914      	ldr	r1, [pc, #80]	; (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d021      	beq.n	8000afc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000aba:	68da      	ldr	r2, [r3, #12]
 8000abc:	490e      	ldr	r1, [pc, #56]	; (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	60cb      	str	r3, [r1, #12]
 8000ac4:	e021      	b.n	8000b0a <HAL_GPIO_Init+0x2e2>
 8000ac6:	bf00      	nop
 8000ac8:	10320000 	.word	0x10320000
 8000acc:	10310000 	.word	0x10310000
 8000ad0:	10220000 	.word	0x10220000
 8000ad4:	10210000 	.word	0x10210000
 8000ad8:	10120000 	.word	0x10120000
 8000adc:	10110000 	.word	0x10110000
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	40010000 	.word	0x40010000
 8000ae8:	40010800 	.word	0x40010800
 8000aec:	40010c00 	.word	0x40010c00
 8000af0:	40011000 	.word	0x40011000
 8000af4:	40011400 	.word	0x40011400
 8000af8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <HAL_GPIO_Init+0x304>)
 8000afe:	68da      	ldr	r2, [r3, #12]
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	43db      	mvns	r3, r3
 8000b04:	4909      	ldr	r1, [pc, #36]	; (8000b2c <HAL_GPIO_Init+0x304>)
 8000b06:	4013      	ands	r3, r2
 8000b08:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b16:	fa22 f303 	lsr.w	r3, r2, r3
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f47f ae8e 	bne.w	800083c <HAL_GPIO_Init+0x14>
  }
}
 8000b20:	bf00      	nop
 8000b22:	bf00      	nop
 8000b24:	372c      	adds	r7, #44	; 0x2c
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	40010400 	.word	0x40010400

08000b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	807b      	strh	r3, [r7, #2]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b40:	787b      	ldrb	r3, [r7, #1]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d003      	beq.n	8000b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b46:	887a      	ldrh	r2, [r7, #2]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b4c:	e003      	b.n	8000b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b4e:	887b      	ldrh	r3, [r7, #2]
 8000b50:	041a      	lsls	r2, r3, #16
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	611a      	str	r2, [r3, #16]
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr

08000b60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d101      	bne.n	8000b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e272      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f000 8087 	beq.w	8000c8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b80:	4b92      	ldr	r3, [pc, #584]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f003 030c 	and.w	r3, r3, #12
 8000b88:	2b04      	cmp	r3, #4
 8000b8a:	d00c      	beq.n	8000ba6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b8c:	4b8f      	ldr	r3, [pc, #572]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f003 030c 	and.w	r3, r3, #12
 8000b94:	2b08      	cmp	r3, #8
 8000b96:	d112      	bne.n	8000bbe <HAL_RCC_OscConfig+0x5e>
 8000b98:	4b8c      	ldr	r3, [pc, #560]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ba4:	d10b      	bne.n	8000bbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ba6:	4b89      	ldr	r3, [pc, #548]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d06c      	beq.n	8000c8c <HAL_RCC_OscConfig+0x12c>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d168      	bne.n	8000c8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e24c      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bc6:	d106      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x76>
 8000bc8:	4b80      	ldr	r3, [pc, #512]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a7f      	ldr	r2, [pc, #508]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bd2:	6013      	str	r3, [r2, #0]
 8000bd4:	e02e      	b.n	8000c34 <HAL_RCC_OscConfig+0xd4>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d10c      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x98>
 8000bde:	4b7b      	ldr	r3, [pc, #492]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a7a      	ldr	r2, [pc, #488]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000be8:	6013      	str	r3, [r2, #0]
 8000bea:	4b78      	ldr	r3, [pc, #480]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a77      	ldr	r2, [pc, #476]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000bf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bf4:	6013      	str	r3, [r2, #0]
 8000bf6:	e01d      	b.n	8000c34 <HAL_RCC_OscConfig+0xd4>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c00:	d10c      	bne.n	8000c1c <HAL_RCC_OscConfig+0xbc>
 8000c02:	4b72      	ldr	r3, [pc, #456]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a71      	ldr	r2, [pc, #452]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	4b6f      	ldr	r3, [pc, #444]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a6e      	ldr	r2, [pc, #440]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c18:	6013      	str	r3, [r2, #0]
 8000c1a:	e00b      	b.n	8000c34 <HAL_RCC_OscConfig+0xd4>
 8000c1c:	4b6b      	ldr	r3, [pc, #428]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a6a      	ldr	r2, [pc, #424]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c26:	6013      	str	r3, [r2, #0]
 8000c28:	4b68      	ldr	r3, [pc, #416]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a67      	ldr	r2, [pc, #412]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d013      	beq.n	8000c64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c3c:	f7ff fd06 	bl	800064c <HAL_GetTick>
 8000c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c42:	e008      	b.n	8000c56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c44:	f7ff fd02 	bl	800064c <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	2b64      	cmp	r3, #100	; 0x64
 8000c50:	d901      	bls.n	8000c56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c52:	2303      	movs	r3, #3
 8000c54:	e200      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c56:	4b5d      	ldr	r3, [pc, #372]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d0f0      	beq.n	8000c44 <HAL_RCC_OscConfig+0xe4>
 8000c62:	e014      	b.n	8000c8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c64:	f7ff fcf2 	bl	800064c <HAL_GetTick>
 8000c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c6a:	e008      	b.n	8000c7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c6c:	f7ff fcee 	bl	800064c <HAL_GetTick>
 8000c70:	4602      	mov	r2, r0
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	2b64      	cmp	r3, #100	; 0x64
 8000c78:	d901      	bls.n	8000c7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	e1ec      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c7e:	4b53      	ldr	r3, [pc, #332]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d1f0      	bne.n	8000c6c <HAL_RCC_OscConfig+0x10c>
 8000c8a:	e000      	b.n	8000c8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d063      	beq.n	8000d62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c9a:	4b4c      	ldr	r3, [pc, #304]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f003 030c 	and.w	r3, r3, #12
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d00b      	beq.n	8000cbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ca6:	4b49      	ldr	r3, [pc, #292]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f003 030c 	and.w	r3, r3, #12
 8000cae:	2b08      	cmp	r3, #8
 8000cb0:	d11c      	bne.n	8000cec <HAL_RCC_OscConfig+0x18c>
 8000cb2:	4b46      	ldr	r3, [pc, #280]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d116      	bne.n	8000cec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cbe:	4b43      	ldr	r3, [pc, #268]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d005      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x176>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	691b      	ldr	r3, [r3, #16]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d001      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e1c0      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cd6:	4b3d      	ldr	r3, [pc, #244]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	4939      	ldr	r1, [pc, #228]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cea:	e03a      	b.n	8000d62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	691b      	ldr	r3, [r3, #16]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d020      	beq.n	8000d36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cf4:	4b36      	ldr	r3, [pc, #216]	; (8000dd0 <HAL_RCC_OscConfig+0x270>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cfa:	f7ff fca7 	bl	800064c <HAL_GetTick>
 8000cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d00:	e008      	b.n	8000d14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d02:	f7ff fca3 	bl	800064c <HAL_GetTick>
 8000d06:	4602      	mov	r2, r0
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d901      	bls.n	8000d14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d10:	2303      	movs	r3, #3
 8000d12:	e1a1      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d14:	4b2d      	ldr	r3, [pc, #180]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d0f0      	beq.n	8000d02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d20:	4b2a      	ldr	r3, [pc, #168]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	695b      	ldr	r3, [r3, #20]
 8000d2c:	00db      	lsls	r3, r3, #3
 8000d2e:	4927      	ldr	r1, [pc, #156]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000d30:	4313      	orrs	r3, r2
 8000d32:	600b      	str	r3, [r1, #0]
 8000d34:	e015      	b.n	8000d62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d36:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <HAL_RCC_OscConfig+0x270>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d3c:	f7ff fc86 	bl	800064c <HAL_GetTick>
 8000d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d42:	e008      	b.n	8000d56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d44:	f7ff fc82 	bl	800064c <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d901      	bls.n	8000d56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d52:	2303      	movs	r3, #3
 8000d54:	e180      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d56:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d1f0      	bne.n	8000d44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 0308 	and.w	r3, r3, #8
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d03a      	beq.n	8000de4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d019      	beq.n	8000daa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d76:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <HAL_RCC_OscConfig+0x274>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d7c:	f7ff fc66 	bl	800064c <HAL_GetTick>
 8000d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d82:	e008      	b.n	8000d96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d84:	f7ff fc62 	bl	800064c <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d901      	bls.n	8000d96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d92:	2303      	movs	r3, #3
 8000d94:	e160      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d96:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <HAL_RCC_OscConfig+0x26c>)
 8000d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d0f0      	beq.n	8000d84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000da2:	2001      	movs	r0, #1
 8000da4:	f000 fad8 	bl	8001358 <RCC_Delay>
 8000da8:	e01c      	b.n	8000de4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <HAL_RCC_OscConfig+0x274>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000db0:	f7ff fc4c 	bl	800064c <HAL_GetTick>
 8000db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000db6:	e00f      	b.n	8000dd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000db8:	f7ff fc48 	bl	800064c <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d908      	bls.n	8000dd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e146      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	42420000 	.word	0x42420000
 8000dd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dd8:	4b92      	ldr	r3, [pc, #584]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1e9      	bne.n	8000db8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f003 0304 	and.w	r3, r3, #4
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	f000 80a6 	beq.w	8000f3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000df6:	4b8b      	ldr	r3, [pc, #556]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d10d      	bne.n	8000e1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e02:	4b88      	ldr	r3, [pc, #544]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	4a87      	ldr	r2, [pc, #540]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0c:	61d3      	str	r3, [r2, #28]
 8000e0e:	4b85      	ldr	r3, [pc, #532]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e1e:	4b82      	ldr	r3, [pc, #520]	; (8001028 <HAL_RCC_OscConfig+0x4c8>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d118      	bne.n	8000e5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e2a:	4b7f      	ldr	r3, [pc, #508]	; (8001028 <HAL_RCC_OscConfig+0x4c8>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a7e      	ldr	r2, [pc, #504]	; (8001028 <HAL_RCC_OscConfig+0x4c8>)
 8000e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e36:	f7ff fc09 	bl	800064c <HAL_GetTick>
 8000e3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e3c:	e008      	b.n	8000e50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e3e:	f7ff fc05 	bl	800064c <HAL_GetTick>
 8000e42:	4602      	mov	r2, r0
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	2b64      	cmp	r3, #100	; 0x64
 8000e4a:	d901      	bls.n	8000e50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	e103      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e50:	4b75      	ldr	r3, [pc, #468]	; (8001028 <HAL_RCC_OscConfig+0x4c8>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d0f0      	beq.n	8000e3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d106      	bne.n	8000e72 <HAL_RCC_OscConfig+0x312>
 8000e64:	4b6f      	ldr	r3, [pc, #444]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000e66:	6a1b      	ldr	r3, [r3, #32]
 8000e68:	4a6e      	ldr	r2, [pc, #440]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	6213      	str	r3, [r2, #32]
 8000e70:	e02d      	b.n	8000ece <HAL_RCC_OscConfig+0x36e>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d10c      	bne.n	8000e94 <HAL_RCC_OscConfig+0x334>
 8000e7a:	4b6a      	ldr	r3, [pc, #424]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000e7c:	6a1b      	ldr	r3, [r3, #32]
 8000e7e:	4a69      	ldr	r2, [pc, #420]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000e80:	f023 0301 	bic.w	r3, r3, #1
 8000e84:	6213      	str	r3, [r2, #32]
 8000e86:	4b67      	ldr	r3, [pc, #412]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000e88:	6a1b      	ldr	r3, [r3, #32]
 8000e8a:	4a66      	ldr	r2, [pc, #408]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000e8c:	f023 0304 	bic.w	r3, r3, #4
 8000e90:	6213      	str	r3, [r2, #32]
 8000e92:	e01c      	b.n	8000ece <HAL_RCC_OscConfig+0x36e>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	2b05      	cmp	r3, #5
 8000e9a:	d10c      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x356>
 8000e9c:	4b61      	ldr	r3, [pc, #388]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000e9e:	6a1b      	ldr	r3, [r3, #32]
 8000ea0:	4a60      	ldr	r2, [pc, #384]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000ea2:	f043 0304 	orr.w	r3, r3, #4
 8000ea6:	6213      	str	r3, [r2, #32]
 8000ea8:	4b5e      	ldr	r3, [pc, #376]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000eaa:	6a1b      	ldr	r3, [r3, #32]
 8000eac:	4a5d      	ldr	r2, [pc, #372]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6213      	str	r3, [r2, #32]
 8000eb4:	e00b      	b.n	8000ece <HAL_RCC_OscConfig+0x36e>
 8000eb6:	4b5b      	ldr	r3, [pc, #364]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000eb8:	6a1b      	ldr	r3, [r3, #32]
 8000eba:	4a5a      	ldr	r2, [pc, #360]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000ebc:	f023 0301 	bic.w	r3, r3, #1
 8000ec0:	6213      	str	r3, [r2, #32]
 8000ec2:	4b58      	ldr	r3, [pc, #352]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000ec4:	6a1b      	ldr	r3, [r3, #32]
 8000ec6:	4a57      	ldr	r2, [pc, #348]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000ec8:	f023 0304 	bic.w	r3, r3, #4
 8000ecc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d015      	beq.n	8000f02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed6:	f7ff fbb9 	bl	800064c <HAL_GetTick>
 8000eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000edc:	e00a      	b.n	8000ef4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ede:	f7ff fbb5 	bl	800064c <HAL_GetTick>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d901      	bls.n	8000ef4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	e0b1      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ef4:	4b4b      	ldr	r3, [pc, #300]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000ef6:	6a1b      	ldr	r3, [r3, #32]
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d0ee      	beq.n	8000ede <HAL_RCC_OscConfig+0x37e>
 8000f00:	e014      	b.n	8000f2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f02:	f7ff fba3 	bl	800064c <HAL_GetTick>
 8000f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f08:	e00a      	b.n	8000f20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f0a:	f7ff fb9f 	bl	800064c <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e09b      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f20:	4b40      	ldr	r3, [pc, #256]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000f22:	6a1b      	ldr	r3, [r3, #32]
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1ee      	bne.n	8000f0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f2c:	7dfb      	ldrb	r3, [r7, #23]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d105      	bne.n	8000f3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f32:	4b3c      	ldr	r3, [pc, #240]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	4a3b      	ldr	r2, [pc, #236]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000f38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f000 8087 	beq.w	8001056 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f48:	4b36      	ldr	r3, [pc, #216]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 030c 	and.w	r3, r3, #12
 8000f50:	2b08      	cmp	r3, #8
 8000f52:	d061      	beq.n	8001018 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	69db      	ldr	r3, [r3, #28]
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d146      	bne.n	8000fea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f5c:	4b33      	ldr	r3, [pc, #204]	; (800102c <HAL_RCC_OscConfig+0x4cc>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f62:	f7ff fb73 	bl	800064c <HAL_GetTick>
 8000f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f68:	e008      	b.n	8000f7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f6a:	f7ff fb6f 	bl	800064c <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d901      	bls.n	8000f7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e06d      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f7c:	4b29      	ldr	r3, [pc, #164]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1f0      	bne.n	8000f6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6a1b      	ldr	r3, [r3, #32]
 8000f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f90:	d108      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f92:	4b24      	ldr	r3, [pc, #144]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	4921      	ldr	r1, [pc, #132]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a19      	ldr	r1, [r3, #32]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb4:	430b      	orrs	r3, r1
 8000fb6:	491b      	ldr	r1, [pc, #108]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fbc:	4b1b      	ldr	r3, [pc, #108]	; (800102c <HAL_RCC_OscConfig+0x4cc>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc2:	f7ff fb43 	bl	800064c <HAL_GetTick>
 8000fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fc8:	e008      	b.n	8000fdc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fca:	f7ff fb3f 	bl	800064c <HAL_GetTick>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d901      	bls.n	8000fdc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e03d      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fdc:	4b11      	ldr	r3, [pc, #68]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d0f0      	beq.n	8000fca <HAL_RCC_OscConfig+0x46a>
 8000fe8:	e035      	b.n	8001056 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <HAL_RCC_OscConfig+0x4cc>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fb2c 	bl	800064c <HAL_GetTick>
 8000ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ff8:	f7ff fb28 	bl	800064c <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e026      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_RCC_OscConfig+0x4c4>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1f0      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x498>
 8001016:	e01e      	b.n	8001056 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	69db      	ldr	r3, [r3, #28]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d107      	bne.n	8001030 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e019      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
 8001024:	40021000 	.word	0x40021000
 8001028:	40007000 	.word	0x40007000
 800102c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <HAL_RCC_OscConfig+0x500>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	429a      	cmp	r2, r3
 8001042:	d106      	bne.n	8001052 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800104e:	429a      	cmp	r2, r3
 8001050:	d001      	beq.n	8001056 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40021000 	.word	0x40021000

08001064 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d101      	bne.n	8001078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e0d0      	b.n	800121a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001078:	4b6a      	ldr	r3, [pc, #424]	; (8001224 <HAL_RCC_ClockConfig+0x1c0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	429a      	cmp	r2, r3
 8001084:	d910      	bls.n	80010a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001086:	4b67      	ldr	r3, [pc, #412]	; (8001224 <HAL_RCC_ClockConfig+0x1c0>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f023 0207 	bic.w	r2, r3, #7
 800108e:	4965      	ldr	r1, [pc, #404]	; (8001224 <HAL_RCC_ClockConfig+0x1c0>)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	4313      	orrs	r3, r2
 8001094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001096:	4b63      	ldr	r3, [pc, #396]	; (8001224 <HAL_RCC_ClockConfig+0x1c0>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d001      	beq.n	80010a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e0b8      	b.n	800121a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d020      	beq.n	80010f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d005      	beq.n	80010cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010c0:	4b59      	ldr	r3, [pc, #356]	; (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	4a58      	ldr	r2, [pc, #352]	; (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 80010c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d005      	beq.n	80010e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010d8:	4b53      	ldr	r3, [pc, #332]	; (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	4a52      	ldr	r2, [pc, #328]	; (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 80010de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80010e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010e4:	4b50      	ldr	r3, [pc, #320]	; (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	494d      	ldr	r1, [pc, #308]	; (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d040      	beq.n	8001184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d107      	bne.n	800111a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110a:	4b47      	ldr	r3, [pc, #284]	; (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d115      	bne.n	8001142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e07f      	b.n	800121a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b02      	cmp	r3, #2
 8001120:	d107      	bne.n	8001132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001122:	4b41      	ldr	r3, [pc, #260]	; (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d109      	bne.n	8001142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e073      	b.n	800121a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001132:	4b3d      	ldr	r3, [pc, #244]	; (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e06b      	b.n	800121a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001142:	4b39      	ldr	r3, [pc, #228]	; (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f023 0203 	bic.w	r2, r3, #3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	4936      	ldr	r1, [pc, #216]	; (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 8001150:	4313      	orrs	r3, r2
 8001152:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001154:	f7ff fa7a 	bl	800064c <HAL_GetTick>
 8001158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800115a:	e00a      	b.n	8001172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800115c:	f7ff fa76 	bl	800064c <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	f241 3288 	movw	r2, #5000	; 0x1388
 800116a:	4293      	cmp	r3, r2
 800116c:	d901      	bls.n	8001172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e053      	b.n	800121a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001172:	4b2d      	ldr	r3, [pc, #180]	; (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 020c 	and.w	r2, r3, #12
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	429a      	cmp	r2, r3
 8001182:	d1eb      	bne.n	800115c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001184:	4b27      	ldr	r3, [pc, #156]	; (8001224 <HAL_RCC_ClockConfig+0x1c0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0307 	and.w	r3, r3, #7
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	429a      	cmp	r2, r3
 8001190:	d210      	bcs.n	80011b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001192:	4b24      	ldr	r3, [pc, #144]	; (8001224 <HAL_RCC_ClockConfig+0x1c0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f023 0207 	bic.w	r2, r3, #7
 800119a:	4922      	ldr	r1, [pc, #136]	; (8001224 <HAL_RCC_ClockConfig+0x1c0>)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	4313      	orrs	r3, r2
 80011a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <HAL_RCC_ClockConfig+0x1c0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d001      	beq.n	80011b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e032      	b.n	800121a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d008      	beq.n	80011d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011c0:	4b19      	ldr	r3, [pc, #100]	; (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	4916      	ldr	r1, [pc, #88]	; (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 80011ce:	4313      	orrs	r3, r2
 80011d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d009      	beq.n	80011f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	490e      	ldr	r1, [pc, #56]	; (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 80011ee:	4313      	orrs	r3, r2
 80011f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011f2:	f000 f821 	bl	8001238 <HAL_RCC_GetSysClockFreq>
 80011f6:	4602      	mov	r2, r0
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	091b      	lsrs	r3, r3, #4
 80011fe:	f003 030f 	and.w	r3, r3, #15
 8001202:	490a      	ldr	r1, [pc, #40]	; (800122c <HAL_RCC_ClockConfig+0x1c8>)
 8001204:	5ccb      	ldrb	r3, [r1, r3]
 8001206:	fa22 f303 	lsr.w	r3, r2, r3
 800120a:	4a09      	ldr	r2, [pc, #36]	; (8001230 <HAL_RCC_ClockConfig+0x1cc>)
 800120c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <HAL_RCC_ClockConfig+0x1d0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f9d8 	bl	80005c8 <HAL_InitTick>

  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40022000 	.word	0x40022000
 8001228:	40021000 	.word	0x40021000
 800122c:	080036b4 	.word	0x080036b4
 8001230:	20000000 	.word	0x20000000
 8001234:	20000004 	.word	0x20000004

08001238 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001238:	b490      	push	{r4, r7}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800123e:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001240:	1d3c      	adds	r4, r7, #4
 8001242:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001244:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001248:	f240 2301 	movw	r3, #513	; 0x201
 800124c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
 8001256:	2300      	movs	r3, #0
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001262:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f003 030c 	and.w	r3, r3, #12
 800126e:	2b04      	cmp	r3, #4
 8001270:	d002      	beq.n	8001278 <HAL_RCC_GetSysClockFreq+0x40>
 8001272:	2b08      	cmp	r3, #8
 8001274:	d003      	beq.n	800127e <HAL_RCC_GetSysClockFreq+0x46>
 8001276:	e02b      	b.n	80012d0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001278:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800127a:	623b      	str	r3, [r7, #32]
      break;
 800127c:	e02b      	b.n	80012d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	0c9b      	lsrs	r3, r3, #18
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	3328      	adds	r3, #40	; 0x28
 8001288:	443b      	add	r3, r7
 800128a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800128e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d012      	beq.n	80012c0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	0c5b      	lsrs	r3, r3, #17
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	3328      	adds	r3, #40	; 0x28
 80012a6:	443b      	add	r3, r7
 80012a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80012ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80012b2:	fb03 f202 	mul.w	r2, r3, r2
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
 80012be:	e004      	b.n	80012ca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012c4:	fb02 f303 	mul.w	r3, r2, r3
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	623b      	str	r3, [r7, #32]
      break;
 80012ce:	e002      	b.n	80012d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80012d2:	623b      	str	r3, [r7, #32]
      break;
 80012d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012d6:	6a3b      	ldr	r3, [r7, #32]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3728      	adds	r7, #40	; 0x28
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc90      	pop	{r4, r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	0800318c 	.word	0x0800318c
 80012e8:	40021000 	.word	0x40021000
 80012ec:	007a1200 	.word	0x007a1200
 80012f0:	003d0900 	.word	0x003d0900

080012f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012f8:	4b02      	ldr	r3, [pc, #8]	; (8001304 <HAL_RCC_GetHCLKFreq+0x10>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	20000000 	.word	0x20000000

08001308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800130c:	f7ff fff2 	bl	80012f4 <HAL_RCC_GetHCLKFreq>
 8001310:	4602      	mov	r2, r0
 8001312:	4b05      	ldr	r3, [pc, #20]	; (8001328 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	0a1b      	lsrs	r3, r3, #8
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	4903      	ldr	r1, [pc, #12]	; (800132c <HAL_RCC_GetPCLK1Freq+0x24>)
 800131e:	5ccb      	ldrb	r3, [r1, r3]
 8001320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001324:	4618      	mov	r0, r3
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40021000 	.word	0x40021000
 800132c:	080036c4 	.word	0x080036c4

08001330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001334:	f7ff ffde 	bl	80012f4 <HAL_RCC_GetHCLKFreq>
 8001338:	4602      	mov	r2, r0
 800133a:	4b05      	ldr	r3, [pc, #20]	; (8001350 <HAL_RCC_GetPCLK2Freq+0x20>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	0adb      	lsrs	r3, r3, #11
 8001340:	f003 0307 	and.w	r3, r3, #7
 8001344:	4903      	ldr	r1, [pc, #12]	; (8001354 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001346:	5ccb      	ldrb	r3, [r1, r3]
 8001348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800134c:	4618      	mov	r0, r3
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40021000 	.word	0x40021000
 8001354:	080036c4 	.word	0x080036c4

08001358 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <RCC_Delay+0x34>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <RCC_Delay+0x38>)
 8001366:	fba2 2303 	umull	r2, r3, r2, r3
 800136a:	0a5b      	lsrs	r3, r3, #9
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	fb02 f303 	mul.w	r3, r2, r3
 8001372:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001374:	bf00      	nop
  }
  while (Delay --);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	1e5a      	subs	r2, r3, #1
 800137a:	60fa      	str	r2, [r7, #12]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1f9      	bne.n	8001374 <RCC_Delay+0x1c>
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	20000000 	.word	0x20000000
 8001390:	10624dd3 	.word	0x10624dd3

08001394 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e047      	b.n	8001436 <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d106      	bne.n	80013c0 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7fe ffce 	bl	800035c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2224      	movs	r2, #36	; 0x24
 80013c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68da      	ldr	r2, [r3, #12]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 f90d 	bl	80015f8 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	691a      	ldr	r2, [r3, #16]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80013ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	695a      	ldr	r2, [r3, #20]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80013fc:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	695a      	ldr	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f042 0208 	orr.w	r2, r2, #8
 800140c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68da      	ldr	r2, [r3, #12]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800141c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2220      	movs	r2, #32
 8001428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2220      	movs	r2, #32
 8001430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b08a      	sub	sp, #40	; 0x28
 8001442:	af02      	add	r7, sp, #8
 8001444:	60f8      	str	r0, [r7, #12]
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	603b      	str	r3, [r7, #0]
 800144a:	4613      	mov	r3, r2
 800144c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b20      	cmp	r3, #32
 800145c:	d17c      	bne.n	8001558 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d002      	beq.n	800146a <HAL_UART_Transmit+0x2c>
 8001464:	88fb      	ldrh	r3, [r7, #6]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e075      	b.n	800155a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001474:	2b01      	cmp	r3, #1
 8001476:	d101      	bne.n	800147c <HAL_UART_Transmit+0x3e>
 8001478:	2302      	movs	r3, #2
 800147a:	e06e      	b.n	800155a <HAL_UART_Transmit+0x11c>
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2200      	movs	r2, #0
 8001488:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2221      	movs	r2, #33	; 0x21
 800148e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001492:	f7ff f8db 	bl	800064c <HAL_GetTick>
 8001496:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	88fa      	ldrh	r2, [r7, #6]
 800149c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	88fa      	ldrh	r2, [r7, #6]
 80014a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014ac:	d108      	bne.n	80014c0 <HAL_UART_Transmit+0x82>
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d104      	bne.n	80014c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	61bb      	str	r3, [r7, #24]
 80014be:	e003      	b.n	80014c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80014d0:	e02a      	b.n	8001528 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	2200      	movs	r2, #0
 80014da:	2180      	movs	r1, #128	; 0x80
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f000 f840 	bl	8001562 <UART_WaitOnFlagUntilTimeout>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e036      	b.n	800155a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10b      	bne.n	800150a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	461a      	mov	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001500:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	3302      	adds	r3, #2
 8001506:	61bb      	str	r3, [r7, #24]
 8001508:	e007      	b.n	800151a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	781a      	ldrb	r2, [r3, #0]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	3301      	adds	r3, #1
 8001518:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800151e:	b29b      	uxth	r3, r3
 8001520:	3b01      	subs	r3, #1
 8001522:	b29a      	uxth	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800152c:	b29b      	uxth	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1cf      	bne.n	80014d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	2200      	movs	r2, #0
 800153a:	2140      	movs	r1, #64	; 0x40
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f000 f810 	bl	8001562 <UART_WaitOnFlagUntilTimeout>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e006      	b.n	800155a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2220      	movs	r2, #32
 8001550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	e000      	b.n	800155a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001558:	2302      	movs	r3, #2
  }
}
 800155a:	4618      	mov	r0, r3
 800155c:	3720      	adds	r7, #32
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b084      	sub	sp, #16
 8001566:	af00      	add	r7, sp, #0
 8001568:	60f8      	str	r0, [r7, #12]
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	603b      	str	r3, [r7, #0]
 800156e:	4613      	mov	r3, r2
 8001570:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001572:	e02c      	b.n	80015ce <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800157a:	d028      	beq.n	80015ce <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d007      	beq.n	8001592 <UART_WaitOnFlagUntilTimeout+0x30>
 8001582:	f7ff f863 	bl	800064c <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	429a      	cmp	r2, r3
 8001590:	d21d      	bcs.n	80015ce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68da      	ldr	r2, [r3, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80015a0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	695a      	ldr	r2, [r3, #20]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 0201 	bic.w	r2, r2, #1
 80015b0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2220      	movs	r2, #32
 80015b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2220      	movs	r2, #32
 80015be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e00f      	b.n	80015ee <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	4013      	ands	r3, r2
 80015d8:	68ba      	ldr	r2, [r7, #8]
 80015da:	429a      	cmp	r2, r3
 80015dc:	bf0c      	ite	eq
 80015de:	2301      	moveq	r3, #1
 80015e0:	2300      	movne	r3, #0
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	461a      	mov	r2, r3
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d0c3      	beq.n	8001574 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68da      	ldr	r2, [r3, #12]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	430a      	orrs	r2, r1
 8001614:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	4313      	orrs	r3, r2
 8001626:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001632:	f023 030c 	bic.w	r3, r3, #12
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	68b9      	ldr	r1, [r7, #8]
 800163c:	430b      	orrs	r3, r1
 800163e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	699a      	ldr	r2, [r3, #24]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a2c      	ldr	r2, [pc, #176]	; (800170c <UART_SetConfig+0x114>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d103      	bne.n	8001668 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001660:	f7ff fe66 	bl	8001330 <HAL_RCC_GetPCLK2Freq>
 8001664:	60f8      	str	r0, [r7, #12]
 8001666:	e002      	b.n	800166e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001668:	f7ff fe4e 	bl	8001308 <HAL_RCC_GetPCLK1Freq>
 800166c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	009a      	lsls	r2, r3, #2
 8001678:	441a      	add	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	fbb2 f3f3 	udiv	r3, r2, r3
 8001684:	4a22      	ldr	r2, [pc, #136]	; (8001710 <UART_SetConfig+0x118>)
 8001686:	fba2 2303 	umull	r2, r3, r2, r3
 800168a:	095b      	lsrs	r3, r3, #5
 800168c:	0119      	lsls	r1, r3, #4
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	009a      	lsls	r2, r3, #2
 8001698:	441a      	add	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80016a4:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <UART_SetConfig+0x118>)
 80016a6:	fba3 0302 	umull	r0, r3, r3, r2
 80016aa:	095b      	lsrs	r3, r3, #5
 80016ac:	2064      	movs	r0, #100	; 0x64
 80016ae:	fb00 f303 	mul.w	r3, r0, r3
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	011b      	lsls	r3, r3, #4
 80016b6:	3332      	adds	r3, #50	; 0x32
 80016b8:	4a15      	ldr	r2, [pc, #84]	; (8001710 <UART_SetConfig+0x118>)
 80016ba:	fba2 2303 	umull	r2, r3, r2, r3
 80016be:	095b      	lsrs	r3, r3, #5
 80016c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016c4:	4419      	add	r1, r3
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	009a      	lsls	r2, r3, #2
 80016d0:	441a      	add	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <UART_SetConfig+0x118>)
 80016de:	fba3 0302 	umull	r0, r3, r3, r2
 80016e2:	095b      	lsrs	r3, r3, #5
 80016e4:	2064      	movs	r0, #100	; 0x64
 80016e6:	fb00 f303 	mul.w	r3, r0, r3
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	011b      	lsls	r3, r3, #4
 80016ee:	3332      	adds	r3, #50	; 0x32
 80016f0:	4a07      	ldr	r2, [pc, #28]	; (8001710 <UART_SetConfig+0x118>)
 80016f2:	fba2 2303 	umull	r2, r3, r2, r3
 80016f6:	095b      	lsrs	r3, r3, #5
 80016f8:	f003 020f 	and.w	r2, r3, #15
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	440a      	add	r2, r1
 8001702:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001704:	bf00      	nop
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40013800 	.word	0x40013800
 8001710:	51eb851f 	.word	0x51eb851f

08001714 <console>:
static uint8_t scheduler_started = 0;	// Scheduler started flag
static int priority_task = -1;		// track the priority task


/********************LOCAL FUNCTIONS***************************/
static void console(ConsoleState state,const char* func_name, const char* msg,...){
 8001714:	b40c      	push	{r2, r3}
 8001716:	b580      	push	{r7, lr}
 8001718:	b084      	sub	sp, #16
 800171a:	af00      	add	r7, sp, #0
 800171c:	4603      	mov	r3, r0
 800171e:	6039      	str	r1, [r7, #0]
 8001720:	71fb      	strb	r3, [r7, #7]
//	if(state!=CONSOLE_ERROR)
//		return;
	//TODO make naked and show all registers
	if(state==CONSOLE_ERROR){
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d104      	bne.n	8001732 <console+0x1e>
		printf("TASK|%s> ERROR :",func_name);
 8001728:	6839      	ldr	r1, [r7, #0]
 800172a:	4813      	ldr	r0, [pc, #76]	; (8001778 <console+0x64>)
 800172c:	f000 fcfc 	bl	8002128 <iprintf>
 8001730:	e013      	b.n	800175a <console+0x46>
	}else if(state==CONSOLE_INFO){
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d104      	bne.n	8001742 <console+0x2e>
		printf("TASK|%s> INFO : ",func_name);
 8001738:	6839      	ldr	r1, [r7, #0]
 800173a:	4810      	ldr	r0, [pc, #64]	; (800177c <console+0x68>)
 800173c:	f000 fcf4 	bl	8002128 <iprintf>
 8001740:	e00b      	b.n	800175a <console+0x46>
	}else if(state == CONSOLE_WARNING){
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d104      	bne.n	8001752 <console+0x3e>
		printf("TASK|%s> WARNING : ",func_name);
 8001748:	6839      	ldr	r1, [r7, #0]
 800174a:	480d      	ldr	r0, [pc, #52]	; (8001780 <console+0x6c>)
 800174c:	f000 fcec 	bl	8002128 <iprintf>
 8001750:	e003      	b.n	800175a <console+0x46>
	}else{
		printf("TASK|%s: ",func_name);
 8001752:	6839      	ldr	r1, [r7, #0]
 8001754:	480b      	ldr	r0, [pc, #44]	; (8001784 <console+0x70>)
 8001756:	f000 fce7 	bl	8002128 <iprintf>
	}
	va_list args;
	va_start(args, msg);
 800175a:	f107 031c 	add.w	r3, r7, #28
 800175e:	60fb      	str	r3, [r7, #12]
	vprintf(msg, args);
 8001760:	68f9      	ldr	r1, [r7, #12]
 8001762:	69b8      	ldr	r0, [r7, #24]
 8001764:	f000 fd6e 	bl	8002244 <viprintf>
    va_end(args);
}
 8001768:	bf00      	nop
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001772:	b002      	add	sp, #8
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	0800319c 	.word	0x0800319c
 800177c:	080031b0 	.word	0x080031b0
 8001780:	080031c4 	.word	0x080031c4
 8001784:	080031d8 	.word	0x080031d8

08001788 <task_getCurrentPSP>:


uint32_t task_getCurrentPSP(){
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
	return task[current_task_index].psp;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <task_getCurrentPSP+0x20>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4906      	ldr	r1, [pc, #24]	; (80017ac <task_getCurrentPSP+0x24>)
 8001792:	4613      	mov	r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	1a9b      	subs	r3, r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	440b      	add	r3, r1
 800179c:	3308      	adds	r3, #8
 800179e:	681b      	ldr	r3, [r3, #0]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	20000208 	.word	0x20000208
 80017ac:	200000ec 	.word	0x200000ec

080017b0 <task_saveCurrentPSP>:

void task_saveCurrentPSP(uint32_t psp) {
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	task[current_task_index].psp = psp;
 80017b8:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <task_saveCurrentPSP+0x28>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4907      	ldr	r1, [pc, #28]	; (80017dc <task_saveCurrentPSP+0x2c>)
 80017be:	4613      	mov	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	1a9b      	subs	r3, r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	440b      	add	r3, r1
 80017c8:	3308      	adds	r3, #8
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	601a      	str	r2, [r3, #0]
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr
 80017d8:	20000208 	.word	0x20000208
 80017dc:	200000ec 	.word	0x200000ec

080017e0 <task_selectNextTask>:


void task_selectNextTask(){
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
	if(current_task_index==TASK_MAX_NUMBER-1)
 80017e6:	4b32      	ldr	r3, [pc, #200]	; (80018b0 <task_selectNextTask+0xd0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b09      	cmp	r3, #9
 80017ec:	d102      	bne.n	80017f4 <task_selectNextTask+0x14>
		current_task_index = 0;	//In case of last task skip ideal task
 80017ee:	4b30      	ldr	r3, [pc, #192]	; (80018b0 <task_selectNextTask+0xd0>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]

	int idx = current_task_index;
 80017f4:	4b2e      	ldr	r3, [pc, #184]	; (80018b0 <task_selectNextTask+0xd0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	603b      	str	r3, [r7, #0]
	int i=1;
 80017fa:	2301      	movs	r3, #1
 80017fc:	607b      	str	r3, [r7, #4]
	for(; i<TASK_MAX_NUMBER; i++){
 80017fe:	e049      	b.n	8001894 <task_selectNextTask+0xb4>
		idx = (i+current_task_index)%TASK_MAX_NUMBER;
 8001800:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <task_selectNextTask+0xd0>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	441a      	add	r2, r3
 8001808:	4b2a      	ldr	r3, [pc, #168]	; (80018b4 <task_selectNextTask+0xd4>)
 800180a:	fb83 1302 	smull	r1, r3, r3, r2
 800180e:	1099      	asrs	r1, r3, #2
 8001810:	17d3      	asrs	r3, r2, #31
 8001812:	1ac9      	subs	r1, r1, r3
 8001814:	460b      	mov	r3, r1
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	603b      	str	r3, [r7, #0]
		if(priority_task>0 && priority_task!=idx)
 8001820:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <task_selectNextTask+0xd8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	dd04      	ble.n	8001832 <task_selectNextTask+0x52>
 8001828:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <task_selectNextTask+0xd8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	429a      	cmp	r2, r3
 8001830:	d126      	bne.n	8001880 <task_selectNextTask+0xa0>
			continue;// If priority task exist and it is not priority task

		if(task[idx].psp == 0)
 8001832:	4922      	ldr	r1, [pc, #136]	; (80018bc <task_selectNextTask+0xdc>)
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	4613      	mov	r3, r2
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	1a9b      	subs	r3, r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	440b      	add	r3, r1
 8001840:	3308      	adds	r3, #8
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d01d      	beq.n	8001884 <task_selectNextTask+0xa4>
			continue;	// Empty slot

		/* Non empty slot found */
		if(task[idx].state == PAUSE)
 8001848:	491c      	ldr	r1, [pc, #112]	; (80018bc <task_selectNextTask+0xdc>)
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	4613      	mov	r3, r2
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	1a9b      	subs	r3, r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	330c      	adds	r3, #12
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d014      	beq.n	8001888 <task_selectNextTask+0xa8>
			continue;	// Task is paused

		/* Running task is found */
		if(task[idx].wait_tick > global_ticks)
 800185e:	4917      	ldr	r1, [pc, #92]	; (80018bc <task_selectNextTask+0xdc>)
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	4613      	mov	r3, r2
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	1a9b      	subs	r3, r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	440b      	add	r3, r1
 800186c:	3310      	adds	r3, #16
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <task_selectNextTask+0xe0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d809      	bhi.n	800188c <task_selectNextTask+0xac>
			continue;	// Task is waiting or delayed

		/* Non waiting task is found */
		current_task_index = idx;
 8001878:	4a0d      	ldr	r2, [pc, #52]	; (80018b0 <task_selectNextTask+0xd0>)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	6013      	str	r3, [r2, #0]
		break;
 800187e:	e00c      	b.n	800189a <task_selectNextTask+0xba>
			continue;// If priority task exist and it is not priority task
 8001880:	bf00      	nop
 8001882:	e004      	b.n	800188e <task_selectNextTask+0xae>
			continue;	// Empty slot
 8001884:	bf00      	nop
 8001886:	e002      	b.n	800188e <task_selectNextTask+0xae>
			continue;	// Task is paused
 8001888:	bf00      	nop
 800188a:	e000      	b.n	800188e <task_selectNextTask+0xae>
			continue;	// Task is waiting or delayed
 800188c:	bf00      	nop
	for(; i<TASK_MAX_NUMBER; i++){
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3301      	adds	r3, #1
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b09      	cmp	r3, #9
 8001898:	ddb2      	ble.n	8001800 <task_selectNextTask+0x20>
	}

	if(i>=TASK_MAX_NUMBER)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b09      	cmp	r3, #9
 800189e:	dd02      	ble.n	80018a6 <task_selectNextTask+0xc6>
		current_task_index = 0;	//If all tasks are blocked then use idle main
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <task_selectNextTask+0xd0>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	20000208 	.word	0x20000208
 80018b4:	66666667 	.word	0x66666667
 80018b8:	2000000c 	.word	0x2000000c
 80018bc:	200000ec 	.word	0x200000ec
 80018c0:	20000204 	.word	0x20000204

080018c4 <task_switchTask>:

__attribute__((naked)) void task_switchTask() {
	/*save LR back to main, must do this firstly*/
	__asm volatile("PUSH {LR}");
 80018c4:	b500      	push	{lr}
//	printf("****\n");

	/* Save the context of current task */

	/* get current PSP */
	__asm volatile("MRS R0, PSP");
 80018c6:	f3ef 8009 	mrs	r0, PSP

	/* save R4 to R11 to PSP Frame Stack */
	__asm volatile("STMDB R0!, {R4-R11}");		// R0 is updated after decrement
 80018ca:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	/* save current value of PSP */
	__asm volatile("BL task_saveCurrentPSP");	// R0 is first argument
 80018ce:	f7ff ff6f 	bl	80017b0 <task_saveCurrentPSP>

	/* Do scheduling */

	/* select next task */
	__asm volatile("BL task_selectNextTask");
 80018d2:	f7ff ff85 	bl	80017e0 <task_selectNextTask>

	/* Retrieve the context of next task */

	/* get its past PSP value */
	__asm volatile("BL task_getCurrentPSP");	// return PSP is in R0
 80018d6:	f7ff ff57 	bl	8001788 <task_getCurrentPSP>
	/* retrieve R4-R11 from PSP Fram Stack */
	__asm volatile("LDMIA R0!, {R4-R11}");		// R0 is updated after increment
 80018da:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	/* update PSP */
	__asm volatile("MSR PSP, R0");
 80018de:	f380 8809 	msr	PSP, r0

	/* exit */
	__asm volatile("POP {LR}");
 80018e2:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 80018e6:	4770      	bx	lr
}
 80018e8:	bf00      	nop
	...

080018ec <task_reschedule>:

void task_reschedule(uint32_t priv) {
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  if(priv) //Already has privileged access
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d006      	beq.n	8001908 <task_reschedule+0x1c>
	  /* Enable pendSV exception */
	  *(uint32_t*) 0xE000ED04 |= (0x1 << 28);
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <task_reschedule+0x28>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a05      	ldr	r2, [pc, #20]	; (8001914 <task_reschedule+0x28>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001904:	6013      	str	r3, [r2, #0]
  else
	  /* call Supervisor exception to get Privileged access */
	  __asm volatile("SVC #255");
}
 8001906:	e000      	b.n	800190a <task_reschedule+0x1e>
	  __asm volatile("SVC #255");
 8001908:	dfff      	svc	255	; 0xff
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	e000ed04 	.word	0xe000ed04

08001918 <task_idle_main>:

void task_idle_main(void) {
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
	while(1) {
		__asm volatile("NOP");
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <task_idle_main+0x4>

08001920 <task_SVCHandler>:
	 * 0xFFFFFFF9 (0b111....1001) for Thread mode (MSP)-> 3rd bit 0
	 * 0xFFFFFFFD (0b111....1101) for Thread mode (PSP)-> 3rd bit 1
	 */

	/* Check LR to know which stack is used */
	__asm volatile("TST LR, 4"); /* LR bitwise and with 4 */
 8001920:	f01e 0f04 	tst.w	lr, #4

	/* 2 next instructions are conditional */
	__asm volatile("ITE EQ"); /* If-then-else */
 8001924:	bf0c      	ite	eq

	/* save MSP to R0 if 3rd bit is equal 0 */
	__asm volatile("MRSEQ R0, MSP");
 8001926:	f3ef 8008 	mrseq	r0, MSP

	/* save PSP to R0 if 3rd bit is not equal 0 */
	__asm volatile("MRSNE R0, PSP");
 800192a:	f3ef 8009 	mrsne	r0, PSP

	/* pass R0 as argument*/
	__asm volatile("B task_SVCHandlerMain");
 800192e:	f000 b801 	b.w	8001934 <task_SVCHandlerMain>
}
 8001932:	bf00      	nop

08001934 <task_SVCHandlerMain>:

void task_SVCHandlerMain(uint32_t* SP){
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	 * Previous instruction address (PC of previous thread)
	 * is stored in stack with offset 6 from Stack Pointer (SP)
	 */

	/* get the address of the instruction saved in PC */
	uint8_t *pInstruction = (uint8_t*)(SP[6]);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3318      	adds	r3, #24
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	60fb      	str	r3, [r7, #12]

	/* go back 2 bytes (16-bit opcode) */
	pInstruction -= 2;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	3b02      	subs	r3, #2
 8001948:	60fb      	str	r3, [r7, #12]

	/* get the opcode, in little endian */
	uint8_t svc_num = *pInstruction;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	72fb      	strb	r3, [r7, #11]

	if(svc_num == 255)
 8001950:	7afb      	ldrb	r3, [r7, #11]
 8001952:	2bff      	cmp	r3, #255	; 0xff
 8001954:	d105      	bne.n	8001962 <task_SVCHandlerMain+0x2e>
		/* Enable pendSV exception */
		*(uint32_t*) 0xE000ED04 |= (0x1 << 28);
 8001956:	4b05      	ldr	r3, [pc, #20]	; (800196c <task_SVCHandlerMain+0x38>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a04      	ldr	r2, [pc, #16]	; (800196c <task_SVCHandlerMain+0x38>)
 800195c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001960:	6013      	str	r3, [r2, #0]
}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr
 800196c:	e000ed04 	.word	0xe000ed04

08001970 <task_SysTickHandler>:

void task_SysTickHandler(){
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	if(!scheduler_started)
 8001974:	4b11      	ldr	r3, [pc, #68]	; (80019bc <task_SysTickHandler+0x4c>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d019      	beq.n	80019b0 <task_SysTickHandler+0x40>
		return;
	global_ticks++;
 800197c:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <task_SysTickHandler+0x50>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	3301      	adds	r3, #1
 8001982:	4a0f      	ldr	r2, [pc, #60]	; (80019c0 <task_SysTickHandler+0x50>)
 8001984:	6013      	str	r3, [r2, #0]
	if(global_ticks<100)
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <task_SysTickHandler+0x50>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2b63      	cmp	r3, #99	; 0x63
 800198c:	d912      	bls.n	80019b4 <task_SysTickHandler+0x44>
		return;

	if(global_ticks%10!=0)
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <task_SysTickHandler+0x50>)
 8001990:	6819      	ldr	r1, [r3, #0]
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <task_SysTickHandler+0x54>)
 8001994:	fba3 2301 	umull	r2, r3, r3, r1
 8001998:	08da      	lsrs	r2, r3, #3
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	1aca      	subs	r2, r1, r3
 80019a4:	2a00      	cmp	r2, #0
 80019a6:	d107      	bne.n	80019b8 <task_SysTickHandler+0x48>
		return;
	task_reschedule(1);// 1 for privileged
 80019a8:	2001      	movs	r0, #1
 80019aa:	f7ff ff9f 	bl	80018ec <task_reschedule>
 80019ae:	e004      	b.n	80019ba <task_SysTickHandler+0x4a>
		return;
 80019b0:	bf00      	nop
 80019b2:	e002      	b.n	80019ba <task_SysTickHandler+0x4a>
		return;
 80019b4:	bf00      	nop
 80019b6:	e000      	b.n	80019ba <task_SysTickHandler+0x4a>
		return;
 80019b8:	bf00      	nop
}
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	2000020c 	.word	0x2000020c
 80019c0:	20000204 	.word	0x20000204
 80019c4:	cccccccd 	.word	0xcccccccd

080019c8 <task_PendSVHandler>:

void task_PendSVHandler(void){


	/*save LR back to main, must do this firstly*/
	__asm volatile("PUSH {LR}");
 80019c8:	b500      	push	{lr}

	task_switchTask();
 80019ca:	f7ff ff7b 	bl	80018c4 <task_switchTask>

	/* exit */
	__asm volatile("POP {LR}");
 80019ce:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 80019d2:	4770      	bx	lr
}
 80019d4:	bf00      	nop
	...

080019d8 <task_init>:
 * This sets the total stack size and main stack pointer
 * @param msp 				: Main stack pointer
 * @param total_stack_size	: Total stack size
 * @param main_stack_size	: Size of main stack
 */
void task_init(uint32_t msp, uint32_t total_stack_size, uint32_t main_stack_size) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
	MSP = msp;
 80019e4:	4a1a      	ldr	r2, [pc, #104]	; (8001a50 <task_init+0x78>)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6013      	str	r3, [r2, #0]
	TOTAL_STACK_SIZE = total_stack_size;
 80019ea:	4a1a      	ldr	r2, [pc, #104]	; (8001a54 <task_init+0x7c>)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	6013      	str	r3, [r2, #0]
	MAIN_STACK_SIZE = main_stack_size;
 80019f0:	4a19      	ldr	r2, [pc, #100]	; (8001a58 <task_init+0x80>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6013      	str	r3, [r2, #0]
	for(int i=0;i<TASK_MAX_NUMBER;i++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	e00c      	b.n	8001a16 <task_init+0x3e>
		task[i].psp = 0;
 80019fc:	4917      	ldr	r1, [pc, #92]	; (8001a5c <task_init+0x84>)
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	4613      	mov	r3, r2
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	1a9b      	subs	r3, r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	3308      	adds	r3, #8
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
	for(int i=0;i<TASK_MAX_NUMBER;i++)
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	3301      	adds	r3, #1
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	2b09      	cmp	r3, #9
 8001a1a:	ddef      	ble.n	80019fc <task_init+0x24>
	stack_tracker += main_stack_size;
 8001a1c:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <task_init+0x88>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4413      	add	r3, r2
 8001a24:	4a0e      	ldr	r2, [pc, #56]	; (8001a60 <task_init+0x88>)
 8001a26:	6013      	str	r3, [r2, #0]
	current_task_index = 0;
 8001a28:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <task_init+0x8c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
	global_ticks = 0;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <task_init+0x90>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
	scheduler_started = 0;
 8001a34:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <task_init+0x94>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]

	/* Add idle task which run when there is no any task to run*/
	task_add(0xFFFFFFFF, task_idle_main, 100);
 8001a3a:	2264      	movs	r2, #100	; 0x64
 8001a3c:	490c      	ldr	r1, [pc, #48]	; (8001a70 <task_init+0x98>)
 8001a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a42:	f000 f817 	bl	8001a74 <task_add>
}
 8001a46:	bf00      	nop
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200000e0 	.word	0x200000e0
 8001a54:	200000dc 	.word	0x200000dc
 8001a58:	200000e4 	.word	0x200000e4
 8001a5c:	200000ec 	.word	0x200000ec
 8001a60:	200000e8 	.word	0x200000e8
 8001a64:	20000208 	.word	0x20000208
 8001a68:	20000204 	.word	0x20000204
 8001a6c:	2000020c 	.word	0x2000020c
 8001a70:	08001919 	.word	0x08001919

08001a74 <task_add>:
 * @param handler		: Main function
 * @param stack_size	: Size provided for it
 * @return				: 1 => Successfully task added
 *						: 0 => Failed to add task
 */
int task_add(uint32_t id,void (*handler)(void),uint32_t stack_size){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08c      	sub	sp, #48	; 0x30
 8001a78:	af02      	add	r7, sp, #8
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
	/*Search for empty slot index*/
	int idx = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
	for(;idx<TASK_MAX_NUMBER;idx++)
 8001a84:	e00d      	b.n	8001aa2 <task_add+0x2e>
		if(task[idx].psp==0)
 8001a86:	494e      	ldr	r1, [pc, #312]	; (8001bc0 <task_add+0x14c>)
 8001a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	1a9b      	subs	r3, r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	440b      	add	r3, r1
 8001a94:	3308      	adds	r3, #8
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d006      	beq.n	8001aaa <task_add+0x36>
	for(;idx<TASK_MAX_NUMBER;idx++)
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	2b09      	cmp	r3, #9
 8001aa6:	ddee      	ble.n	8001a86 <task_add+0x12>
 8001aa8:	e000      	b.n	8001aac <task_add+0x38>
			break;
 8001aaa:	bf00      	nop

	for(int i = 0;i<TASK_MAX_NUMBER;i++){
 8001aac:	2300      	movs	r3, #0
 8001aae:	623b      	str	r3, [r7, #32]
 8001ab0:	e02c      	b.n	8001b0c <task_add+0x98>
		if(task[i].psp!=0 && task[i].id == id){
 8001ab2:	4943      	ldr	r1, [pc, #268]	; (8001bc0 <task_add+0x14c>)
 8001ab4:	6a3a      	ldr	r2, [r7, #32]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	1a9b      	subs	r3, r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	440b      	add	r3, r1
 8001ac0:	3308      	adds	r3, #8
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d01e      	beq.n	8001b06 <task_add+0x92>
 8001ac8:	493d      	ldr	r1, [pc, #244]	; (8001bc0 <task_add+0x14c>)
 8001aca:	6a3a      	ldr	r2, [r7, #32]
 8001acc:	4613      	mov	r3, r2
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	1a9b      	subs	r3, r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d113      	bne.n	8001b06 <task_add+0x92>
			console(CONSOLE_ERROR,__func__, "Handler %p addition failed. ID %d is already associated with handler %p.\n",handler,id,task[i].handler);
 8001ade:	4938      	ldr	r1, [pc, #224]	; (8001bc0 <task_add+0x14c>)
 8001ae0:	6a3a      	ldr	r2, [r7, #32]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	1a9b      	subs	r3, r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	440b      	add	r3, r1
 8001aec:	3304      	adds	r3, #4
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	9301      	str	r3, [sp, #4]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	4a32      	ldr	r2, [pc, #200]	; (8001bc4 <task_add+0x150>)
 8001afa:	4933      	ldr	r1, [pc, #204]	; (8001bc8 <task_add+0x154>)
 8001afc:	2000      	movs	r0, #0
 8001afe:	f7ff fe09 	bl	8001714 <console>
			return 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	e137      	b.n	8001d76 <task_add+0x302>
	for(int i = 0;i<TASK_MAX_NUMBER;i++){
 8001b06:	6a3b      	ldr	r3, [r7, #32]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	623b      	str	r3, [r7, #32]
 8001b0c:	6a3b      	ldr	r3, [r7, #32]
 8001b0e:	2b09      	cmp	r3, #9
 8001b10:	ddcf      	ble.n	8001ab2 <task_add+0x3e>
		}
	}

	for(int i = 0;i<TASK_MAX_NUMBER;i++){
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
 8001b16:	e02a      	b.n	8001b6e <task_add+0xfa>
		if(task[i].psp!=0 && task[i].handler == handler){
 8001b18:	4929      	ldr	r1, [pc, #164]	; (8001bc0 <task_add+0x14c>)
 8001b1a:	69fa      	ldr	r2, [r7, #28]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	1a9b      	subs	r3, r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	3308      	adds	r3, #8
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d01c      	beq.n	8001b68 <task_add+0xf4>
 8001b2e:	4924      	ldr	r1, [pc, #144]	; (8001bc0 <task_add+0x14c>)
 8001b30:	69fa      	ldr	r2, [r7, #28]
 8001b32:	4613      	mov	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	1a9b      	subs	r3, r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d110      	bne.n	8001b68 <task_add+0xf4>
			console(CONSOLE_ERROR,__func__, "Handler %p addition failed. Handler already in slots, associated with ID %d.\n",handler,task[i].id);
 8001b46:	491e      	ldr	r1, [pc, #120]	; (8001bc0 <task_add+0x14c>)
 8001b48:	69fa      	ldr	r2, [r7, #28]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	1a9b      	subs	r3, r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	440b      	add	r3, r1
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	4a1c      	ldr	r2, [pc, #112]	; (8001bcc <task_add+0x158>)
 8001b5c:	491a      	ldr	r1, [pc, #104]	; (8001bc8 <task_add+0x154>)
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f7ff fdd8 	bl	8001714 <console>
			return 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	e106      	b.n	8001d76 <task_add+0x302>
	for(int i = 0;i<TASK_MAX_NUMBER;i++){
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	61fb      	str	r3, [r7, #28]
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	2b09      	cmp	r3, #9
 8001b72:	ddd1      	ble.n	8001b18 <task_add+0xa4>
		}
	}

	if(idx>=TASK_MAX_NUMBER){
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	2b09      	cmp	r3, #9
 8001b78:	dd09      	ble.n	8001b8e <task_add+0x11a>
		/* All slots are full */
		console(CONSOLE_ERROR,__func__, "Handler %p addition failed. All %d slots are full.\n",handler,TASK_MAX_NUMBER);
 8001b7a:	230a      	movs	r3, #10
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	4a13      	ldr	r2, [pc, #76]	; (8001bd0 <task_add+0x15c>)
 8001b82:	4911      	ldr	r1, [pc, #68]	; (8001bc8 <task_add+0x154>)
 8001b84:	2000      	movs	r0, #0
 8001b86:	f7ff fdc5 	bl	8001714 <console>
		return 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e0f3      	b.n	8001d76 <task_add+0x302>
	}

	uint32_t remaining = TOTAL_STACK_SIZE-stack_tracker;
 8001b8e:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <task_add+0x160>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <task_add+0x164>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	61bb      	str	r3, [r7, #24]
	if(remaining<stack_size){
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d21e      	bcs.n	8001be0 <task_add+0x16c>
		/* Out of stack */
		uint32_t overflow = stack_size-remaining;
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	613b      	str	r3, [r7, #16]
		console(CONSOLE_ERROR,__func__, "Handler %p addition failed. Not Enough Stack. %ld bytes more stack is required.\n",handler,overflow);
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <task_add+0x168>)
 8001bb2:	4905      	ldr	r1, [pc, #20]	; (8001bc8 <task_add+0x154>)
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f7ff fdad 	bl	8001714 <console>
		return 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	e0db      	b.n	8001d76 <task_add+0x302>
 8001bbe:	bf00      	nop
 8001bc0:	200000ec 	.word	0x200000ec
 8001bc4:	080031e4 	.word	0x080031e4
 8001bc8:	080036cc 	.word	0x080036cc
 8001bcc:	08003230 	.word	0x08003230
 8001bd0:	08003280 	.word	0x08003280
 8001bd4:	200000dc 	.word	0x200000dc
 8001bd8:	200000e8 	.word	0x200000e8
 8001bdc:	080032b4 	.word	0x080032b4
	}

	/* Calculate PSP */
	stack_tracker += stack_size;
 8001be0:	4b67      	ldr	r3, [pc, #412]	; (8001d80 <task_add+0x30c>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4413      	add	r3, r2
 8001be8:	4a65      	ldr	r2, [pc, #404]	; (8001d80 <task_add+0x30c>)
 8001bea:	6013      	str	r3, [r2, #0]
	uint32_t *psp = (uint32_t*)(MSP-stack_tracker);
 8001bec:	4b65      	ldr	r3, [pc, #404]	; (8001d84 <task_add+0x310>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b63      	ldr	r3, [pc, #396]	; (8001d80 <task_add+0x30c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	617b      	str	r3, [r7, #20]
	task[idx].stack_start = (uint32_t)psp;
 8001bf8:	6979      	ldr	r1, [r7, #20]
 8001bfa:	4863      	ldr	r0, [pc, #396]	; (8001d88 <task_add+0x314>)
 8001bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bfe:	4613      	mov	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	1a9b      	subs	r3, r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4403      	add	r3, r0
 8001c08:	3318      	adds	r3, #24
 8001c0a:	6019      	str	r1, [r3, #0]

	/* fill dummy stack frame */
	*(--psp) = 0x01000000u; 		// Dummy xPSR, just enable Thumb State bit;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	3b04      	subs	r3, #4
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c18:	601a      	str	r2, [r3, #0]
	*(--psp) = (uint32_t) handler; 	// PC
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	3b04      	subs	r3, #4
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	68ba      	ldr	r2, [r7, #8]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	601a      	str	r2, [r3, #0]
	*(--psp) = 0xFFFFFFFDu; 		// LR with EXC_RETURN to return to Thread using PSP
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	3b04      	subs	r3, #4
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f06f 0202 	mvn.w	r2, #2
 8001c32:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x12121212u; 		// Dummy R12
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	3b04      	subs	r3, #4
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 8001c40:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x03030303u; 		// Dummy R3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	3b04      	subs	r3, #4
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 8001c4e:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x02020202u; 		// Dummy R2
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	3b04      	subs	r3, #4
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8001c5c:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x01010101u; 		// Dummy R1
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	3b04      	subs	r3, #4
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8001c6a:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x00000000u; 		// Dummy R0
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	3b04      	subs	r3, #4
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x11111111u; 		// Dummy R11
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	3b04      	subs	r3, #4
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8001c84:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x10101010u; 		// Dummy R10
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3b04      	subs	r3, #4
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8001c92:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x09090909u; 		// Dummy R9
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	3b04      	subs	r3, #4
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8001ca0:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x08080808u; 		// Dummy R8
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	3b04      	subs	r3, #4
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8001cae:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x07070707u; 		// Dummy R7
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	3b04      	subs	r3, #4
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8001cbc:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x06060606u; 		// Dummy R6
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	3b04      	subs	r3, #4
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8001cca:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x05050505u; 		// Dummy R5
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	3b04      	subs	r3, #4
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8001cd8:	601a      	str	r2, [r3, #0]
	*(--psp) = 0x04040404u; 		// Dummy R4
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3b04      	subs	r3, #4
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8001ce6:	601a      	str	r2, [r3, #0]

	/* Add task */
	task[idx].id = id;
 8001ce8:	4927      	ldr	r1, [pc, #156]	; (8001d88 <task_add+0x314>)
 8001cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cec:	4613      	mov	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	1a9b      	subs	r3, r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	601a      	str	r2, [r3, #0]
	task[idx].handler = handler;
 8001cfa:	4923      	ldr	r1, [pc, #140]	; (8001d88 <task_add+0x314>)
 8001cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cfe:	4613      	mov	r3, r2
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	1a9b      	subs	r3, r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	440b      	add	r3, r1
 8001d08:	3304      	adds	r3, #4
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	601a      	str	r2, [r3, #0]
	task[idx].state = RUNNING;
 8001d0e:	491e      	ldr	r1, [pc, #120]	; (8001d88 <task_add+0x314>)
 8001d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d12:	4613      	mov	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	1a9b      	subs	r3, r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	330c      	adds	r3, #12
 8001d1e:	2200      	movs	r2, #0
 8001d20:	701a      	strb	r2, [r3, #0]
	task[idx].stack_size = stack_size;
 8001d22:	4919      	ldr	r1, [pc, #100]	; (8001d88 <task_add+0x314>)
 8001d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d26:	4613      	mov	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	1a9b      	subs	r3, r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	440b      	add	r3, r1
 8001d30:	3314      	adds	r3, #20
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	601a      	str	r2, [r3, #0]
	task[idx].wait_tick = 0;
 8001d36:	4914      	ldr	r1, [pc, #80]	; (8001d88 <task_add+0x314>)
 8001d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	1a9b      	subs	r3, r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	440b      	add	r3, r1
 8001d44:	3310      	adds	r3, #16
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
	task[idx].psp = (uint32_t)psp;
 8001d4a:	6979      	ldr	r1, [r7, #20]
 8001d4c:	480e      	ldr	r0, [pc, #56]	; (8001d88 <task_add+0x314>)
 8001d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d50:	4613      	mov	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	1a9b      	subs	r3, r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4403      	add	r3, r0
 8001d5a:	3308      	adds	r3, #8
 8001d5c:	6019      	str	r1, [r3, #0]

	if(idx!=0)	//Skip the idle task
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d007      	beq.n	8001d74 <task_add+0x300>
		console(CONSOLE_INFO,__func__, "Handler %p is added successfully with id %d.\n",handler,id);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	4a08      	ldr	r2, [pc, #32]	; (8001d8c <task_add+0x318>)
 8001d6c:	4908      	ldr	r1, [pc, #32]	; (8001d90 <task_add+0x31c>)
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f7ff fcd0 	bl	8001714 <console>
	return 1;
 8001d74:	2301      	movs	r3, #1
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3728      	adds	r7, #40	; 0x28
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200000e8 	.word	0x200000e8
 8001d84:	200000e0 	.word	0x200000e0
 8001d88:	200000ec 	.word	0x200000ec
 8001d8c:	08003308 	.word	0x08003308
 8001d90:	080036cc 	.word	0x080036cc

08001d94 <task_enableHighestPriority>:
/**
 * This priorities the task. These block all other tasks.
 * @return	: 1 => Successfully resumed
 *			: 0 => Failed to resume
 */
int task_enableHighestPriority(){
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af02      	add	r7, sp, #8
	if(task[current_task_index].state == PRIORITY){
 8001d9a:	4b2a      	ldr	r3, [pc, #168]	; (8001e44 <task_enableHighestPriority+0xb0>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	492a      	ldr	r1, [pc, #168]	; (8001e48 <task_enableHighestPriority+0xb4>)
 8001da0:	4613      	mov	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	1a9b      	subs	r3, r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	330c      	adds	r3, #12
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d11b      	bne.n	8001dea <task_enableHighestPriority+0x56>
		console(CONSOLE_WARNING,__func__, "Handler %p associated with id %d is already enabled as highest priority task.\n",task[current_task_index].handler,task[current_task_index].id);
 8001db2:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <task_enableHighestPriority+0xb0>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	4924      	ldr	r1, [pc, #144]	; (8001e48 <task_enableHighestPriority+0xb4>)
 8001db8:	4613      	mov	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	1a9b      	subs	r3, r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	6819      	ldr	r1, [r3, #0]
 8001dc6:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <task_enableHighestPriority+0xb0>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	481f      	ldr	r0, [pc, #124]	; (8001e48 <task_enableHighestPriority+0xb4>)
 8001dcc:	4613      	mov	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	1a9b      	subs	r3, r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4403      	add	r3, r0
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4a1b      	ldr	r2, [pc, #108]	; (8001e4c <task_enableHighestPriority+0xb8>)
 8001dde:	491c      	ldr	r1, [pc, #112]	; (8001e50 <task_enableHighestPriority+0xbc>)
 8001de0:	2002      	movs	r0, #2
 8001de2:	f7ff fc97 	bl	8001714 <console>
		return 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	e029      	b.n	8001e3e <task_enableHighestPriority+0xaa>
	}

	task[current_task_index].state = PRIORITY;
 8001dea:	4b16      	ldr	r3, [pc, #88]	; (8001e44 <task_enableHighestPriority+0xb0>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	4916      	ldr	r1, [pc, #88]	; (8001e48 <task_enableHighestPriority+0xb4>)
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	330c      	adds	r3, #12
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	701a      	strb	r2, [r3, #0]
	priority_task = current_task_index;
 8001e00:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <task_enableHighestPriority+0xb0>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a13      	ldr	r2, [pc, #76]	; (8001e54 <task_enableHighestPriority+0xc0>)
 8001e06:	6013      	str	r3, [r2, #0]
	console(CONSOLE_INFO,__func__, "Handler %p associated with id %d is enabled as highest priority task.\n",task[current_task_index].handler,task[current_task_index].id);
 8001e08:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <task_enableHighestPriority+0xb0>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	490e      	ldr	r1, [pc, #56]	; (8001e48 <task_enableHighestPriority+0xb4>)
 8001e0e:	4613      	mov	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	1a9b      	subs	r3, r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	440b      	add	r3, r1
 8001e18:	3304      	adds	r3, #4
 8001e1a:	6819      	ldr	r1, [r3, #0]
 8001e1c:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <task_enableHighestPriority+0xb0>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4809      	ldr	r0, [pc, #36]	; (8001e48 <task_enableHighestPriority+0xb4>)
 8001e22:	4613      	mov	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	1a9b      	subs	r3, r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4403      	add	r3, r0
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	460b      	mov	r3, r1
 8001e32:	4a09      	ldr	r2, [pc, #36]	; (8001e58 <task_enableHighestPriority+0xc4>)
 8001e34:	4906      	ldr	r1, [pc, #24]	; (8001e50 <task_enableHighestPriority+0xbc>)
 8001e36:	2001      	movs	r0, #1
 8001e38:	f7ff fc6c 	bl	8001714 <console>
	return 1;
 8001e3c:	2301      	movs	r3, #1
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000208 	.word	0x20000208
 8001e48:	200000ec 	.word	0x200000ec
 8001e4c:	08003530 	.word	0x08003530
 8001e50:	080036d8 	.word	0x080036d8
 8001e54:	2000000c 	.word	0x2000000c
 8001e58:	08003580 	.word	0x08003580

08001e5c <task_disableHighestPriority>:
/**
 * This disable prioritized task.
 * @return	: 1 => Successfully resumed
 *			: 0 => Failed to resume
 */
int task_disableHighestPriority(){
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af02      	add	r7, sp, #8
	if(task[current_task_index].state == RUNNING){
 8001e62:	4b2a      	ldr	r3, [pc, #168]	; (8001f0c <task_disableHighestPriority+0xb0>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	492a      	ldr	r1, [pc, #168]	; (8001f10 <task_disableHighestPriority+0xb4>)
 8001e68:	4613      	mov	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	1a9b      	subs	r3, r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	330c      	adds	r3, #12
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d11b      	bne.n	8001eb2 <task_disableHighestPriority+0x56>
		console(CONSOLE_WARNING,__func__, "Handler %p associated with id %d is not highest priority task.\n",task[current_task_index].handler,task[current_task_index].id);
 8001e7a:	4b24      	ldr	r3, [pc, #144]	; (8001f0c <task_disableHighestPriority+0xb0>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	4924      	ldr	r1, [pc, #144]	; (8001f10 <task_disableHighestPriority+0xb4>)
 8001e80:	4613      	mov	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	1a9b      	subs	r3, r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	6819      	ldr	r1, [r3, #0]
 8001e8e:	4b1f      	ldr	r3, [pc, #124]	; (8001f0c <task_disableHighestPriority+0xb0>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	481f      	ldr	r0, [pc, #124]	; (8001f10 <task_disableHighestPriority+0xb4>)
 8001e94:	4613      	mov	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4403      	add	r3, r0
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4a1b      	ldr	r2, [pc, #108]	; (8001f14 <task_disableHighestPriority+0xb8>)
 8001ea6:	491c      	ldr	r1, [pc, #112]	; (8001f18 <task_disableHighestPriority+0xbc>)
 8001ea8:	2002      	movs	r0, #2
 8001eaa:	f7ff fc33 	bl	8001714 <console>
		return 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e029      	b.n	8001f06 <task_disableHighestPriority+0xaa>
	}

	task[current_task_index].state = RUNNING;
 8001eb2:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <task_disableHighestPriority+0xb0>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	4916      	ldr	r1, [pc, #88]	; (8001f10 <task_disableHighestPriority+0xb4>)
 8001eb8:	4613      	mov	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	1a9b      	subs	r3, r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	330c      	adds	r3, #12
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
	priority_task = -1;
 8001ec8:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <task_disableHighestPriority+0xc0>)
 8001eca:	f04f 32ff 	mov.w	r2, #4294967295
 8001ece:	601a      	str	r2, [r3, #0]
	console(CONSOLE_INFO,__func__, "Handler %p associated with id %d is disabled as highest priority task.\n",task[current_task_index].handler,task[current_task_index].id);
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <task_disableHighestPriority+0xb0>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	490e      	ldr	r1, [pc, #56]	; (8001f10 <task_disableHighestPriority+0xb4>)
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	1a9b      	subs	r3, r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	440b      	add	r3, r1
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	6819      	ldr	r1, [r3, #0]
 8001ee4:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <task_disableHighestPriority+0xb0>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4809      	ldr	r0, [pc, #36]	; (8001f10 <task_disableHighestPriority+0xb4>)
 8001eea:	4613      	mov	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	1a9b      	subs	r3, r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4403      	add	r3, r0
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	4a09      	ldr	r2, [pc, #36]	; (8001f20 <task_disableHighestPriority+0xc4>)
 8001efc:	4906      	ldr	r1, [pc, #24]	; (8001f18 <task_disableHighestPriority+0xbc>)
 8001efe:	2001      	movs	r0, #1
 8001f00:	f7ff fc08 	bl	8001714 <console>
	return 1;
 8001f04:	2301      	movs	r3, #1
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000208 	.word	0x20000208
 8001f10:	200000ec 	.word	0x200000ec
 8001f14:	080035c8 	.word	0x080035c8
 8001f18:	080036f4 	.word	0x080036f4
 8001f1c:	2000000c 	.word	0x2000000c
 8001f20:	08003608 	.word	0x08003608

08001f24 <task_delay>:

/**
 * This delay the task
 * @param ticks	: Ticks upto which task should be delayed
 */
void task_delay(uint32_t ticks){
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	if(current_task_index==0)
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <task_delay+0x3c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d011      	beq.n	8001f58 <task_delay+0x34>
		return;
	task[current_task_index].wait_tick = global_ticks+ticks;
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <task_delay+0x40>)
 8001f36:	6819      	ldr	r1, [r3, #0]
 8001f38:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <task_delay+0x3c>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4419      	add	r1, r3
 8001f40:	4809      	ldr	r0, [pc, #36]	; (8001f68 <task_delay+0x44>)
 8001f42:	4613      	mov	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	1a9b      	subs	r3, r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4403      	add	r3, r0
 8001f4c:	3310      	adds	r3, #16
 8001f4e:	6019      	str	r1, [r3, #0]
	task_reschedule(0);
 8001f50:	2000      	movs	r0, #0
 8001f52:	f7ff fccb 	bl	80018ec <task_reschedule>
 8001f56:	e000      	b.n	8001f5a <task_delay+0x36>
		return;
 8001f58:	bf00      	nop
}
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20000208 	.word	0x20000208
 8001f64:	20000204 	.word	0x20000204
 8001f68:	200000ec 	.word	0x200000ec

08001f6c <task_startScheduler>:

/**
 * This starts the scheduler from main
 */
void task_startScheduler(){
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
	/* Start with the first task */
	current_task_index = 0;
 8001f72:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <task_startScheduler+0x58>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]

	/* prepare PSP of the first task */
	__asm volatile("BL task_getCurrentPSP");	// return PSP in R0
 8001f78:	f7ff fc06 	bl	8001788 <task_getCurrentPSP>
	__asm volatile("MSR PSP, R0");		// set PSP
 8001f7c:	f380 8809 	msr	PSP, r0

	/* change to use PSP */
	__asm volatile("MRS R0, CONTROL");
 8001f80:	f3ef 8014 	mrs	r0, CONTROL
	__asm volatile("ORR R0, R0, #2");	// set bit[1] SPSEL
 8001f84:	f040 0002 	orr.w	r0, r0, #2
	__asm volatile("MSR CONTROL, R0");
 8001f88:	f380 8814 	msr	CONTROL, r0

	/* Move to Unprivileged level */
	__asm volatile("MRS R0, CONTROL");
 8001f8c:	f3ef 8014 	mrs	r0, CONTROL
	__asm volatile("ORR R0, R0, #1");	// Set bit[0] nPRIV
 8001f90:	f040 0001 	orr.w	r0, r0, #1
	__asm volatile("MSR CONTROL, R0");
 8001f94:	f380 8814 	msr	CONTROL, r0

	/* get the handler of the first task by tracing back from PSP which is at R4 slot */
	void (*handler)() = (void (*))((uint32_t*)task[current_task_index].psp)[8+6];
 8001f98:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <task_startScheduler+0x58>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	490a      	ldr	r1, [pc, #40]	; (8001fc8 <task_startScheduler+0x5c>)
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	1a9b      	subs	r3, r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	3308      	adds	r3, #8
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	3338      	adds	r3, #56	; 0x38
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	607b      	str	r3, [r7, #4]
	scheduler_started = 1;
 8001fb2:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <task_startScheduler+0x60>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	701a      	strb	r2, [r3, #0]
	/* execute the handler */
	handler();
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4798      	blx	r3
//	task[current_task_index].handler();

}
 8001fbc:	bf00      	nop
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000208 	.word	0x20000208
 8001fc8:	200000ec 	.word	0x200000ec
 8001fcc:	2000020c 	.word	0x2000020c

08001fd0 <task1>:
#define RAM_START       (0x20000000u)
#define RAM_SIZE        (20 * 1024) // 20 KB
#define MAIN_STACK    	(RAM_START + RAM_SIZE)

/////////////////////////////MAIN///////////////////////////////
void task1() {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
	printf("Task1 starting\n");
 8001fd4:	4804      	ldr	r0, [pc, #16]	; (8001fe8 <task1+0x18>)
 8001fd6:	f000 f92d 	bl	8002234 <puts>
	while (1) {
		printf("I am task1\n");
 8001fda:	4804      	ldr	r0, [pc, #16]	; (8001fec <task1+0x1c>)
 8001fdc:	f000 f92a 	bl	8002234 <puts>
		task_delay(200);
 8001fe0:	20c8      	movs	r0, #200	; 0xc8
 8001fe2:	f7ff ff9f 	bl	8001f24 <task_delay>
		printf("I am task1\n");
 8001fe6:	e7f8      	b.n	8001fda <task1+0xa>
 8001fe8:	08003650 	.word	0x08003650
 8001fec:	08003660 	.word	0x08003660

08001ff0 <task2>:
	}
}
void task2() {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
	printf("Task2 starting\n");
 8001ff4:	4805      	ldr	r0, [pc, #20]	; (800200c <task2+0x1c>)
 8001ff6:	f000 f91d 	bl	8002234 <puts>
	while (1) {
		printf("I am task2\n");
 8001ffa:	4805      	ldr	r0, [pc, #20]	; (8002010 <task2+0x20>)
 8001ffc:	f000 f91a 	bl	8002234 <puts>
		task_delay(500);
 8002000:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002004:	f7ff ff8e 	bl	8001f24 <task_delay>
		printf("I am task2\n");
 8002008:	e7f7      	b.n	8001ffa <task2+0xa>
 800200a:	bf00      	nop
 800200c:	0800366c 	.word	0x0800366c
 8002010:	0800367c 	.word	0x0800367c

08002014 <task3>:
	}
}

int x = 0;
void task3() {
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
	printf("Task3 starting\n");
 8002018:	480e      	ldr	r0, [pc, #56]	; (8002054 <task3+0x40>)
 800201a:	f000 f90b 	bl	8002234 <puts>
	while (1) {
		printf("I am task3\n\n");
 800201e:	480e      	ldr	r0, [pc, #56]	; (8002058 <task3+0x44>)
 8002020:	f000 f908 	bl	8002234 <puts>
		task_delay(1000);
 8002024:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002028:	f7ff ff7c 	bl	8001f24 <task_delay>
		x++;
 800202c:	4b0b      	ldr	r3, [pc, #44]	; (800205c <task3+0x48>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	3301      	adds	r3, #1
 8002032:	4a0a      	ldr	r2, [pc, #40]	; (800205c <task3+0x48>)
 8002034:	6013      	str	r3, [r2, #0]
		if(x==2)
 8002036:	4b09      	ldr	r3, [pc, #36]	; (800205c <task3+0x48>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d102      	bne.n	8002044 <task3+0x30>
			task_enableHighestPriority();
 800203e:	f7ff fea9 	bl	8001d94 <task_enableHighestPriority>
 8002042:	e7ec      	b.n	800201e <task3+0xa>
		else if(x==6)
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <task3+0x48>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b06      	cmp	r3, #6
 800204a:	d1e8      	bne.n	800201e <task3+0xa>
			task_disableHighestPriority();
 800204c:	f7ff ff06 	bl	8001e5c <task_disableHighestPriority>
		printf("I am task3\n\n");
 8002050:	e7e5      	b.n	800201e <task3+0xa>
 8002052:	bf00      	nop
 8002054:	08003688 	.word	0x08003688
 8002058:	08003698 	.word	0x08003698
 800205c:	20000210 	.word	0x20000210

08002060 <init>:
	}
}


void init() {
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
	printf("Initiating....\n");
 8002064:	480f      	ldr	r0, [pc, #60]	; (80020a4 <init+0x44>)
 8002066:	f000 f8e5 	bl	8002234 <puts>

	task_init(MAIN_STACK, 5000,1024);
 800206a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800206e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002072:	480d      	ldr	r0, [pc, #52]	; (80020a8 <init+0x48>)
 8002074:	f7ff fcb0 	bl	80019d8 <task_init>
	task_add(1, task1, 1024);
 8002078:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800207c:	490b      	ldr	r1, [pc, #44]	; (80020ac <init+0x4c>)
 800207e:	2001      	movs	r0, #1
 8002080:	f7ff fcf8 	bl	8001a74 <task_add>
	task_add(2, task2, 1024);
 8002084:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002088:	4909      	ldr	r1, [pc, #36]	; (80020b0 <init+0x50>)
 800208a:	2002      	movs	r0, #2
 800208c:	f7ff fcf2 	bl	8001a74 <task_add>
	task_add(3, task3, 1024);
 8002090:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002094:	4907      	ldr	r1, [pc, #28]	; (80020b4 <init+0x54>)
 8002096:	2003      	movs	r0, #3
 8002098:	f7ff fcec 	bl	8001a74 <task_add>

	task_startScheduler();
 800209c:	f7ff ff66 	bl	8001f6c <task_startScheduler>
}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	080036a4 	.word	0x080036a4
 80020a8:	20005000 	.word	0x20005000
 80020ac:	08001fd1 	.word	0x08001fd1
 80020b0:	08001ff1 	.word	0x08001ff1
 80020b4:	08002015 	.word	0x08002015

080020b8 <loop>:

void loop() {
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0

}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr

080020c4 <__errno>:
 80020c4:	4b01      	ldr	r3, [pc, #4]	; (80020cc <__errno+0x8>)
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000010 	.word	0x20000010

080020d0 <__libc_init_array>:
 80020d0:	b570      	push	{r4, r5, r6, lr}
 80020d2:	2600      	movs	r6, #0
 80020d4:	4d0c      	ldr	r5, [pc, #48]	; (8002108 <__libc_init_array+0x38>)
 80020d6:	4c0d      	ldr	r4, [pc, #52]	; (800210c <__libc_init_array+0x3c>)
 80020d8:	1b64      	subs	r4, r4, r5
 80020da:	10a4      	asrs	r4, r4, #2
 80020dc:	42a6      	cmp	r6, r4
 80020de:	d109      	bne.n	80020f4 <__libc_init_array+0x24>
 80020e0:	f001 f842 	bl	8003168 <_init>
 80020e4:	2600      	movs	r6, #0
 80020e6:	4d0a      	ldr	r5, [pc, #40]	; (8002110 <__libc_init_array+0x40>)
 80020e8:	4c0a      	ldr	r4, [pc, #40]	; (8002114 <__libc_init_array+0x44>)
 80020ea:	1b64      	subs	r4, r4, r5
 80020ec:	10a4      	asrs	r4, r4, #2
 80020ee:	42a6      	cmp	r6, r4
 80020f0:	d105      	bne.n	80020fe <__libc_init_array+0x2e>
 80020f2:	bd70      	pop	{r4, r5, r6, pc}
 80020f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80020f8:	4798      	blx	r3
 80020fa:	3601      	adds	r6, #1
 80020fc:	e7ee      	b.n	80020dc <__libc_init_array+0xc>
 80020fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002102:	4798      	blx	r3
 8002104:	3601      	adds	r6, #1
 8002106:	e7f2      	b.n	80020ee <__libc_init_array+0x1e>
 8002108:	080037a8 	.word	0x080037a8
 800210c:	080037a8 	.word	0x080037a8
 8002110:	080037a8 	.word	0x080037a8
 8002114:	080037ac 	.word	0x080037ac

08002118 <memset>:
 8002118:	4603      	mov	r3, r0
 800211a:	4402      	add	r2, r0
 800211c:	4293      	cmp	r3, r2
 800211e:	d100      	bne.n	8002122 <memset+0xa>
 8002120:	4770      	bx	lr
 8002122:	f803 1b01 	strb.w	r1, [r3], #1
 8002126:	e7f9      	b.n	800211c <memset+0x4>

08002128 <iprintf>:
 8002128:	b40f      	push	{r0, r1, r2, r3}
 800212a:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <iprintf+0x2c>)
 800212c:	b513      	push	{r0, r1, r4, lr}
 800212e:	681c      	ldr	r4, [r3, #0]
 8002130:	b124      	cbz	r4, 800213c <iprintf+0x14>
 8002132:	69a3      	ldr	r3, [r4, #24]
 8002134:	b913      	cbnz	r3, 800213c <iprintf+0x14>
 8002136:	4620      	mov	r0, r4
 8002138:	f000 fa70 	bl	800261c <__sinit>
 800213c:	ab05      	add	r3, sp, #20
 800213e:	4620      	mov	r0, r4
 8002140:	9a04      	ldr	r2, [sp, #16]
 8002142:	68a1      	ldr	r1, [r4, #8]
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	f000 fc73 	bl	8002a30 <_vfiprintf_r>
 800214a:	b002      	add	sp, #8
 800214c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002150:	b004      	add	sp, #16
 8002152:	4770      	bx	lr
 8002154:	20000010 	.word	0x20000010

08002158 <_puts_r>:
 8002158:	b570      	push	{r4, r5, r6, lr}
 800215a:	460e      	mov	r6, r1
 800215c:	4605      	mov	r5, r0
 800215e:	b118      	cbz	r0, 8002168 <_puts_r+0x10>
 8002160:	6983      	ldr	r3, [r0, #24]
 8002162:	b90b      	cbnz	r3, 8002168 <_puts_r+0x10>
 8002164:	f000 fa5a 	bl	800261c <__sinit>
 8002168:	69ab      	ldr	r3, [r5, #24]
 800216a:	68ac      	ldr	r4, [r5, #8]
 800216c:	b913      	cbnz	r3, 8002174 <_puts_r+0x1c>
 800216e:	4628      	mov	r0, r5
 8002170:	f000 fa54 	bl	800261c <__sinit>
 8002174:	4b2c      	ldr	r3, [pc, #176]	; (8002228 <_puts_r+0xd0>)
 8002176:	429c      	cmp	r4, r3
 8002178:	d120      	bne.n	80021bc <_puts_r+0x64>
 800217a:	686c      	ldr	r4, [r5, #4]
 800217c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800217e:	07db      	lsls	r3, r3, #31
 8002180:	d405      	bmi.n	800218e <_puts_r+0x36>
 8002182:	89a3      	ldrh	r3, [r4, #12]
 8002184:	0598      	lsls	r0, r3, #22
 8002186:	d402      	bmi.n	800218e <_puts_r+0x36>
 8002188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800218a:	f000 fae5 	bl	8002758 <__retarget_lock_acquire_recursive>
 800218e:	89a3      	ldrh	r3, [r4, #12]
 8002190:	0719      	lsls	r1, r3, #28
 8002192:	d51d      	bpl.n	80021d0 <_puts_r+0x78>
 8002194:	6923      	ldr	r3, [r4, #16]
 8002196:	b1db      	cbz	r3, 80021d0 <_puts_r+0x78>
 8002198:	3e01      	subs	r6, #1
 800219a:	68a3      	ldr	r3, [r4, #8]
 800219c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80021a0:	3b01      	subs	r3, #1
 80021a2:	60a3      	str	r3, [r4, #8]
 80021a4:	bb39      	cbnz	r1, 80021f6 <_puts_r+0x9e>
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	da38      	bge.n	800221c <_puts_r+0xc4>
 80021aa:	4622      	mov	r2, r4
 80021ac:	210a      	movs	r1, #10
 80021ae:	4628      	mov	r0, r5
 80021b0:	f000 f85e 	bl	8002270 <__swbuf_r>
 80021b4:	3001      	adds	r0, #1
 80021b6:	d011      	beq.n	80021dc <_puts_r+0x84>
 80021b8:	250a      	movs	r5, #10
 80021ba:	e011      	b.n	80021e0 <_puts_r+0x88>
 80021bc:	4b1b      	ldr	r3, [pc, #108]	; (800222c <_puts_r+0xd4>)
 80021be:	429c      	cmp	r4, r3
 80021c0:	d101      	bne.n	80021c6 <_puts_r+0x6e>
 80021c2:	68ac      	ldr	r4, [r5, #8]
 80021c4:	e7da      	b.n	800217c <_puts_r+0x24>
 80021c6:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <_puts_r+0xd8>)
 80021c8:	429c      	cmp	r4, r3
 80021ca:	bf08      	it	eq
 80021cc:	68ec      	ldreq	r4, [r5, #12]
 80021ce:	e7d5      	b.n	800217c <_puts_r+0x24>
 80021d0:	4621      	mov	r1, r4
 80021d2:	4628      	mov	r0, r5
 80021d4:	f000 f89e 	bl	8002314 <__swsetup_r>
 80021d8:	2800      	cmp	r0, #0
 80021da:	d0dd      	beq.n	8002198 <_puts_r+0x40>
 80021dc:	f04f 35ff 	mov.w	r5, #4294967295
 80021e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80021e2:	07da      	lsls	r2, r3, #31
 80021e4:	d405      	bmi.n	80021f2 <_puts_r+0x9a>
 80021e6:	89a3      	ldrh	r3, [r4, #12]
 80021e8:	059b      	lsls	r3, r3, #22
 80021ea:	d402      	bmi.n	80021f2 <_puts_r+0x9a>
 80021ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80021ee:	f000 fab4 	bl	800275a <__retarget_lock_release_recursive>
 80021f2:	4628      	mov	r0, r5
 80021f4:	bd70      	pop	{r4, r5, r6, pc}
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	da04      	bge.n	8002204 <_puts_r+0xac>
 80021fa:	69a2      	ldr	r2, [r4, #24]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	dc06      	bgt.n	800220e <_puts_r+0xb6>
 8002200:	290a      	cmp	r1, #10
 8002202:	d004      	beq.n	800220e <_puts_r+0xb6>
 8002204:	6823      	ldr	r3, [r4, #0]
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	6022      	str	r2, [r4, #0]
 800220a:	7019      	strb	r1, [r3, #0]
 800220c:	e7c5      	b.n	800219a <_puts_r+0x42>
 800220e:	4622      	mov	r2, r4
 8002210:	4628      	mov	r0, r5
 8002212:	f000 f82d 	bl	8002270 <__swbuf_r>
 8002216:	3001      	adds	r0, #1
 8002218:	d1bf      	bne.n	800219a <_puts_r+0x42>
 800221a:	e7df      	b.n	80021dc <_puts_r+0x84>
 800221c:	250a      	movs	r5, #10
 800221e:	6823      	ldr	r3, [r4, #0]
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	6022      	str	r2, [r4, #0]
 8002224:	701d      	strb	r5, [r3, #0]
 8002226:	e7db      	b.n	80021e0 <_puts_r+0x88>
 8002228:	08003734 	.word	0x08003734
 800222c:	08003754 	.word	0x08003754
 8002230:	08003714 	.word	0x08003714

08002234 <puts>:
 8002234:	4b02      	ldr	r3, [pc, #8]	; (8002240 <puts+0xc>)
 8002236:	4601      	mov	r1, r0
 8002238:	6818      	ldr	r0, [r3, #0]
 800223a:	f7ff bf8d 	b.w	8002158 <_puts_r>
 800223e:	bf00      	nop
 8002240:	20000010 	.word	0x20000010

08002244 <viprintf>:
 8002244:	4b09      	ldr	r3, [pc, #36]	; (800226c <viprintf+0x28>)
 8002246:	b570      	push	{r4, r5, r6, lr}
 8002248:	681c      	ldr	r4, [r3, #0]
 800224a:	4605      	mov	r5, r0
 800224c:	460e      	mov	r6, r1
 800224e:	b124      	cbz	r4, 800225a <viprintf+0x16>
 8002250:	69a3      	ldr	r3, [r4, #24]
 8002252:	b913      	cbnz	r3, 800225a <viprintf+0x16>
 8002254:	4620      	mov	r0, r4
 8002256:	f000 f9e1 	bl	800261c <__sinit>
 800225a:	4633      	mov	r3, r6
 800225c:	462a      	mov	r2, r5
 800225e:	4620      	mov	r0, r4
 8002260:	68a1      	ldr	r1, [r4, #8]
 8002262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002266:	f000 bbe3 	b.w	8002a30 <_vfiprintf_r>
 800226a:	bf00      	nop
 800226c:	20000010 	.word	0x20000010

08002270 <__swbuf_r>:
 8002270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002272:	460e      	mov	r6, r1
 8002274:	4614      	mov	r4, r2
 8002276:	4605      	mov	r5, r0
 8002278:	b118      	cbz	r0, 8002282 <__swbuf_r+0x12>
 800227a:	6983      	ldr	r3, [r0, #24]
 800227c:	b90b      	cbnz	r3, 8002282 <__swbuf_r+0x12>
 800227e:	f000 f9cd 	bl	800261c <__sinit>
 8002282:	4b21      	ldr	r3, [pc, #132]	; (8002308 <__swbuf_r+0x98>)
 8002284:	429c      	cmp	r4, r3
 8002286:	d12b      	bne.n	80022e0 <__swbuf_r+0x70>
 8002288:	686c      	ldr	r4, [r5, #4]
 800228a:	69a3      	ldr	r3, [r4, #24]
 800228c:	60a3      	str	r3, [r4, #8]
 800228e:	89a3      	ldrh	r3, [r4, #12]
 8002290:	071a      	lsls	r2, r3, #28
 8002292:	d52f      	bpl.n	80022f4 <__swbuf_r+0x84>
 8002294:	6923      	ldr	r3, [r4, #16]
 8002296:	b36b      	cbz	r3, 80022f4 <__swbuf_r+0x84>
 8002298:	6923      	ldr	r3, [r4, #16]
 800229a:	6820      	ldr	r0, [r4, #0]
 800229c:	b2f6      	uxtb	r6, r6
 800229e:	1ac0      	subs	r0, r0, r3
 80022a0:	6963      	ldr	r3, [r4, #20]
 80022a2:	4637      	mov	r7, r6
 80022a4:	4283      	cmp	r3, r0
 80022a6:	dc04      	bgt.n	80022b2 <__swbuf_r+0x42>
 80022a8:	4621      	mov	r1, r4
 80022aa:	4628      	mov	r0, r5
 80022ac:	f000 f922 	bl	80024f4 <_fflush_r>
 80022b0:	bb30      	cbnz	r0, 8002300 <__swbuf_r+0x90>
 80022b2:	68a3      	ldr	r3, [r4, #8]
 80022b4:	3001      	adds	r0, #1
 80022b6:	3b01      	subs	r3, #1
 80022b8:	60a3      	str	r3, [r4, #8]
 80022ba:	6823      	ldr	r3, [r4, #0]
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	6022      	str	r2, [r4, #0]
 80022c0:	701e      	strb	r6, [r3, #0]
 80022c2:	6963      	ldr	r3, [r4, #20]
 80022c4:	4283      	cmp	r3, r0
 80022c6:	d004      	beq.n	80022d2 <__swbuf_r+0x62>
 80022c8:	89a3      	ldrh	r3, [r4, #12]
 80022ca:	07db      	lsls	r3, r3, #31
 80022cc:	d506      	bpl.n	80022dc <__swbuf_r+0x6c>
 80022ce:	2e0a      	cmp	r6, #10
 80022d0:	d104      	bne.n	80022dc <__swbuf_r+0x6c>
 80022d2:	4621      	mov	r1, r4
 80022d4:	4628      	mov	r0, r5
 80022d6:	f000 f90d 	bl	80024f4 <_fflush_r>
 80022da:	b988      	cbnz	r0, 8002300 <__swbuf_r+0x90>
 80022dc:	4638      	mov	r0, r7
 80022de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022e0:	4b0a      	ldr	r3, [pc, #40]	; (800230c <__swbuf_r+0x9c>)
 80022e2:	429c      	cmp	r4, r3
 80022e4:	d101      	bne.n	80022ea <__swbuf_r+0x7a>
 80022e6:	68ac      	ldr	r4, [r5, #8]
 80022e8:	e7cf      	b.n	800228a <__swbuf_r+0x1a>
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <__swbuf_r+0xa0>)
 80022ec:	429c      	cmp	r4, r3
 80022ee:	bf08      	it	eq
 80022f0:	68ec      	ldreq	r4, [r5, #12]
 80022f2:	e7ca      	b.n	800228a <__swbuf_r+0x1a>
 80022f4:	4621      	mov	r1, r4
 80022f6:	4628      	mov	r0, r5
 80022f8:	f000 f80c 	bl	8002314 <__swsetup_r>
 80022fc:	2800      	cmp	r0, #0
 80022fe:	d0cb      	beq.n	8002298 <__swbuf_r+0x28>
 8002300:	f04f 37ff 	mov.w	r7, #4294967295
 8002304:	e7ea      	b.n	80022dc <__swbuf_r+0x6c>
 8002306:	bf00      	nop
 8002308:	08003734 	.word	0x08003734
 800230c:	08003754 	.word	0x08003754
 8002310:	08003714 	.word	0x08003714

08002314 <__swsetup_r>:
 8002314:	4b32      	ldr	r3, [pc, #200]	; (80023e0 <__swsetup_r+0xcc>)
 8002316:	b570      	push	{r4, r5, r6, lr}
 8002318:	681d      	ldr	r5, [r3, #0]
 800231a:	4606      	mov	r6, r0
 800231c:	460c      	mov	r4, r1
 800231e:	b125      	cbz	r5, 800232a <__swsetup_r+0x16>
 8002320:	69ab      	ldr	r3, [r5, #24]
 8002322:	b913      	cbnz	r3, 800232a <__swsetup_r+0x16>
 8002324:	4628      	mov	r0, r5
 8002326:	f000 f979 	bl	800261c <__sinit>
 800232a:	4b2e      	ldr	r3, [pc, #184]	; (80023e4 <__swsetup_r+0xd0>)
 800232c:	429c      	cmp	r4, r3
 800232e:	d10f      	bne.n	8002350 <__swsetup_r+0x3c>
 8002330:	686c      	ldr	r4, [r5, #4]
 8002332:	89a3      	ldrh	r3, [r4, #12]
 8002334:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002338:	0719      	lsls	r1, r3, #28
 800233a:	d42c      	bmi.n	8002396 <__swsetup_r+0x82>
 800233c:	06dd      	lsls	r5, r3, #27
 800233e:	d411      	bmi.n	8002364 <__swsetup_r+0x50>
 8002340:	2309      	movs	r3, #9
 8002342:	6033      	str	r3, [r6, #0]
 8002344:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002348:	f04f 30ff 	mov.w	r0, #4294967295
 800234c:	81a3      	strh	r3, [r4, #12]
 800234e:	e03e      	b.n	80023ce <__swsetup_r+0xba>
 8002350:	4b25      	ldr	r3, [pc, #148]	; (80023e8 <__swsetup_r+0xd4>)
 8002352:	429c      	cmp	r4, r3
 8002354:	d101      	bne.n	800235a <__swsetup_r+0x46>
 8002356:	68ac      	ldr	r4, [r5, #8]
 8002358:	e7eb      	b.n	8002332 <__swsetup_r+0x1e>
 800235a:	4b24      	ldr	r3, [pc, #144]	; (80023ec <__swsetup_r+0xd8>)
 800235c:	429c      	cmp	r4, r3
 800235e:	bf08      	it	eq
 8002360:	68ec      	ldreq	r4, [r5, #12]
 8002362:	e7e6      	b.n	8002332 <__swsetup_r+0x1e>
 8002364:	0758      	lsls	r0, r3, #29
 8002366:	d512      	bpl.n	800238e <__swsetup_r+0x7a>
 8002368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800236a:	b141      	cbz	r1, 800237e <__swsetup_r+0x6a>
 800236c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002370:	4299      	cmp	r1, r3
 8002372:	d002      	beq.n	800237a <__swsetup_r+0x66>
 8002374:	4630      	mov	r0, r6
 8002376:	f000 fa57 	bl	8002828 <_free_r>
 800237a:	2300      	movs	r3, #0
 800237c:	6363      	str	r3, [r4, #52]	; 0x34
 800237e:	89a3      	ldrh	r3, [r4, #12]
 8002380:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002384:	81a3      	strh	r3, [r4, #12]
 8002386:	2300      	movs	r3, #0
 8002388:	6063      	str	r3, [r4, #4]
 800238a:	6923      	ldr	r3, [r4, #16]
 800238c:	6023      	str	r3, [r4, #0]
 800238e:	89a3      	ldrh	r3, [r4, #12]
 8002390:	f043 0308 	orr.w	r3, r3, #8
 8002394:	81a3      	strh	r3, [r4, #12]
 8002396:	6923      	ldr	r3, [r4, #16]
 8002398:	b94b      	cbnz	r3, 80023ae <__swsetup_r+0x9a>
 800239a:	89a3      	ldrh	r3, [r4, #12]
 800239c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80023a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023a4:	d003      	beq.n	80023ae <__swsetup_r+0x9a>
 80023a6:	4621      	mov	r1, r4
 80023a8:	4630      	mov	r0, r6
 80023aa:	f000 f9fd 	bl	80027a8 <__smakebuf_r>
 80023ae:	89a0      	ldrh	r0, [r4, #12]
 80023b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80023b4:	f010 0301 	ands.w	r3, r0, #1
 80023b8:	d00a      	beq.n	80023d0 <__swsetup_r+0xbc>
 80023ba:	2300      	movs	r3, #0
 80023bc:	60a3      	str	r3, [r4, #8]
 80023be:	6963      	ldr	r3, [r4, #20]
 80023c0:	425b      	negs	r3, r3
 80023c2:	61a3      	str	r3, [r4, #24]
 80023c4:	6923      	ldr	r3, [r4, #16]
 80023c6:	b943      	cbnz	r3, 80023da <__swsetup_r+0xc6>
 80023c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80023cc:	d1ba      	bne.n	8002344 <__swsetup_r+0x30>
 80023ce:	bd70      	pop	{r4, r5, r6, pc}
 80023d0:	0781      	lsls	r1, r0, #30
 80023d2:	bf58      	it	pl
 80023d4:	6963      	ldrpl	r3, [r4, #20]
 80023d6:	60a3      	str	r3, [r4, #8]
 80023d8:	e7f4      	b.n	80023c4 <__swsetup_r+0xb0>
 80023da:	2000      	movs	r0, #0
 80023dc:	e7f7      	b.n	80023ce <__swsetup_r+0xba>
 80023de:	bf00      	nop
 80023e0:	20000010 	.word	0x20000010
 80023e4:	08003734 	.word	0x08003734
 80023e8:	08003754 	.word	0x08003754
 80023ec:	08003714 	.word	0x08003714

080023f0 <__sflush_r>:
 80023f0:	898a      	ldrh	r2, [r1, #12]
 80023f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023f4:	4605      	mov	r5, r0
 80023f6:	0710      	lsls	r0, r2, #28
 80023f8:	460c      	mov	r4, r1
 80023fa:	d457      	bmi.n	80024ac <__sflush_r+0xbc>
 80023fc:	684b      	ldr	r3, [r1, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	dc04      	bgt.n	800240c <__sflush_r+0x1c>
 8002402:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002404:	2b00      	cmp	r3, #0
 8002406:	dc01      	bgt.n	800240c <__sflush_r+0x1c>
 8002408:	2000      	movs	r0, #0
 800240a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800240c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800240e:	2e00      	cmp	r6, #0
 8002410:	d0fa      	beq.n	8002408 <__sflush_r+0x18>
 8002412:	2300      	movs	r3, #0
 8002414:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002418:	682f      	ldr	r7, [r5, #0]
 800241a:	602b      	str	r3, [r5, #0]
 800241c:	d032      	beq.n	8002484 <__sflush_r+0x94>
 800241e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002420:	89a3      	ldrh	r3, [r4, #12]
 8002422:	075a      	lsls	r2, r3, #29
 8002424:	d505      	bpl.n	8002432 <__sflush_r+0x42>
 8002426:	6863      	ldr	r3, [r4, #4]
 8002428:	1ac0      	subs	r0, r0, r3
 800242a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800242c:	b10b      	cbz	r3, 8002432 <__sflush_r+0x42>
 800242e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002430:	1ac0      	subs	r0, r0, r3
 8002432:	2300      	movs	r3, #0
 8002434:	4602      	mov	r2, r0
 8002436:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002438:	4628      	mov	r0, r5
 800243a:	6a21      	ldr	r1, [r4, #32]
 800243c:	47b0      	blx	r6
 800243e:	1c43      	adds	r3, r0, #1
 8002440:	89a3      	ldrh	r3, [r4, #12]
 8002442:	d106      	bne.n	8002452 <__sflush_r+0x62>
 8002444:	6829      	ldr	r1, [r5, #0]
 8002446:	291d      	cmp	r1, #29
 8002448:	d82c      	bhi.n	80024a4 <__sflush_r+0xb4>
 800244a:	4a29      	ldr	r2, [pc, #164]	; (80024f0 <__sflush_r+0x100>)
 800244c:	40ca      	lsrs	r2, r1
 800244e:	07d6      	lsls	r6, r2, #31
 8002450:	d528      	bpl.n	80024a4 <__sflush_r+0xb4>
 8002452:	2200      	movs	r2, #0
 8002454:	6062      	str	r2, [r4, #4]
 8002456:	6922      	ldr	r2, [r4, #16]
 8002458:	04d9      	lsls	r1, r3, #19
 800245a:	6022      	str	r2, [r4, #0]
 800245c:	d504      	bpl.n	8002468 <__sflush_r+0x78>
 800245e:	1c42      	adds	r2, r0, #1
 8002460:	d101      	bne.n	8002466 <__sflush_r+0x76>
 8002462:	682b      	ldr	r3, [r5, #0]
 8002464:	b903      	cbnz	r3, 8002468 <__sflush_r+0x78>
 8002466:	6560      	str	r0, [r4, #84]	; 0x54
 8002468:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800246a:	602f      	str	r7, [r5, #0]
 800246c:	2900      	cmp	r1, #0
 800246e:	d0cb      	beq.n	8002408 <__sflush_r+0x18>
 8002470:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002474:	4299      	cmp	r1, r3
 8002476:	d002      	beq.n	800247e <__sflush_r+0x8e>
 8002478:	4628      	mov	r0, r5
 800247a:	f000 f9d5 	bl	8002828 <_free_r>
 800247e:	2000      	movs	r0, #0
 8002480:	6360      	str	r0, [r4, #52]	; 0x34
 8002482:	e7c2      	b.n	800240a <__sflush_r+0x1a>
 8002484:	6a21      	ldr	r1, [r4, #32]
 8002486:	2301      	movs	r3, #1
 8002488:	4628      	mov	r0, r5
 800248a:	47b0      	blx	r6
 800248c:	1c41      	adds	r1, r0, #1
 800248e:	d1c7      	bne.n	8002420 <__sflush_r+0x30>
 8002490:	682b      	ldr	r3, [r5, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0c4      	beq.n	8002420 <__sflush_r+0x30>
 8002496:	2b1d      	cmp	r3, #29
 8002498:	d001      	beq.n	800249e <__sflush_r+0xae>
 800249a:	2b16      	cmp	r3, #22
 800249c:	d101      	bne.n	80024a2 <__sflush_r+0xb2>
 800249e:	602f      	str	r7, [r5, #0]
 80024a0:	e7b2      	b.n	8002408 <__sflush_r+0x18>
 80024a2:	89a3      	ldrh	r3, [r4, #12]
 80024a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024a8:	81a3      	strh	r3, [r4, #12]
 80024aa:	e7ae      	b.n	800240a <__sflush_r+0x1a>
 80024ac:	690f      	ldr	r7, [r1, #16]
 80024ae:	2f00      	cmp	r7, #0
 80024b0:	d0aa      	beq.n	8002408 <__sflush_r+0x18>
 80024b2:	0793      	lsls	r3, r2, #30
 80024b4:	bf18      	it	ne
 80024b6:	2300      	movne	r3, #0
 80024b8:	680e      	ldr	r6, [r1, #0]
 80024ba:	bf08      	it	eq
 80024bc:	694b      	ldreq	r3, [r1, #20]
 80024be:	1bf6      	subs	r6, r6, r7
 80024c0:	600f      	str	r7, [r1, #0]
 80024c2:	608b      	str	r3, [r1, #8]
 80024c4:	2e00      	cmp	r6, #0
 80024c6:	dd9f      	ble.n	8002408 <__sflush_r+0x18>
 80024c8:	4633      	mov	r3, r6
 80024ca:	463a      	mov	r2, r7
 80024cc:	4628      	mov	r0, r5
 80024ce:	6a21      	ldr	r1, [r4, #32]
 80024d0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80024d4:	47e0      	blx	ip
 80024d6:	2800      	cmp	r0, #0
 80024d8:	dc06      	bgt.n	80024e8 <__sflush_r+0xf8>
 80024da:	89a3      	ldrh	r3, [r4, #12]
 80024dc:	f04f 30ff 	mov.w	r0, #4294967295
 80024e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024e4:	81a3      	strh	r3, [r4, #12]
 80024e6:	e790      	b.n	800240a <__sflush_r+0x1a>
 80024e8:	4407      	add	r7, r0
 80024ea:	1a36      	subs	r6, r6, r0
 80024ec:	e7ea      	b.n	80024c4 <__sflush_r+0xd4>
 80024ee:	bf00      	nop
 80024f0:	20400001 	.word	0x20400001

080024f4 <_fflush_r>:
 80024f4:	b538      	push	{r3, r4, r5, lr}
 80024f6:	690b      	ldr	r3, [r1, #16]
 80024f8:	4605      	mov	r5, r0
 80024fa:	460c      	mov	r4, r1
 80024fc:	b913      	cbnz	r3, 8002504 <_fflush_r+0x10>
 80024fe:	2500      	movs	r5, #0
 8002500:	4628      	mov	r0, r5
 8002502:	bd38      	pop	{r3, r4, r5, pc}
 8002504:	b118      	cbz	r0, 800250e <_fflush_r+0x1a>
 8002506:	6983      	ldr	r3, [r0, #24]
 8002508:	b90b      	cbnz	r3, 800250e <_fflush_r+0x1a>
 800250a:	f000 f887 	bl	800261c <__sinit>
 800250e:	4b14      	ldr	r3, [pc, #80]	; (8002560 <_fflush_r+0x6c>)
 8002510:	429c      	cmp	r4, r3
 8002512:	d11b      	bne.n	800254c <_fflush_r+0x58>
 8002514:	686c      	ldr	r4, [r5, #4]
 8002516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0ef      	beq.n	80024fe <_fflush_r+0xa>
 800251e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002520:	07d0      	lsls	r0, r2, #31
 8002522:	d404      	bmi.n	800252e <_fflush_r+0x3a>
 8002524:	0599      	lsls	r1, r3, #22
 8002526:	d402      	bmi.n	800252e <_fflush_r+0x3a>
 8002528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800252a:	f000 f915 	bl	8002758 <__retarget_lock_acquire_recursive>
 800252e:	4628      	mov	r0, r5
 8002530:	4621      	mov	r1, r4
 8002532:	f7ff ff5d 	bl	80023f0 <__sflush_r>
 8002536:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002538:	4605      	mov	r5, r0
 800253a:	07da      	lsls	r2, r3, #31
 800253c:	d4e0      	bmi.n	8002500 <_fflush_r+0xc>
 800253e:	89a3      	ldrh	r3, [r4, #12]
 8002540:	059b      	lsls	r3, r3, #22
 8002542:	d4dd      	bmi.n	8002500 <_fflush_r+0xc>
 8002544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002546:	f000 f908 	bl	800275a <__retarget_lock_release_recursive>
 800254a:	e7d9      	b.n	8002500 <_fflush_r+0xc>
 800254c:	4b05      	ldr	r3, [pc, #20]	; (8002564 <_fflush_r+0x70>)
 800254e:	429c      	cmp	r4, r3
 8002550:	d101      	bne.n	8002556 <_fflush_r+0x62>
 8002552:	68ac      	ldr	r4, [r5, #8]
 8002554:	e7df      	b.n	8002516 <_fflush_r+0x22>
 8002556:	4b04      	ldr	r3, [pc, #16]	; (8002568 <_fflush_r+0x74>)
 8002558:	429c      	cmp	r4, r3
 800255a:	bf08      	it	eq
 800255c:	68ec      	ldreq	r4, [r5, #12]
 800255e:	e7da      	b.n	8002516 <_fflush_r+0x22>
 8002560:	08003734 	.word	0x08003734
 8002564:	08003754 	.word	0x08003754
 8002568:	08003714 	.word	0x08003714

0800256c <std>:
 800256c:	2300      	movs	r3, #0
 800256e:	b510      	push	{r4, lr}
 8002570:	4604      	mov	r4, r0
 8002572:	e9c0 3300 	strd	r3, r3, [r0]
 8002576:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800257a:	6083      	str	r3, [r0, #8]
 800257c:	8181      	strh	r1, [r0, #12]
 800257e:	6643      	str	r3, [r0, #100]	; 0x64
 8002580:	81c2      	strh	r2, [r0, #14]
 8002582:	6183      	str	r3, [r0, #24]
 8002584:	4619      	mov	r1, r3
 8002586:	2208      	movs	r2, #8
 8002588:	305c      	adds	r0, #92	; 0x5c
 800258a:	f7ff fdc5 	bl	8002118 <memset>
 800258e:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <std+0x38>)
 8002590:	6224      	str	r4, [r4, #32]
 8002592:	6263      	str	r3, [r4, #36]	; 0x24
 8002594:	4b04      	ldr	r3, [pc, #16]	; (80025a8 <std+0x3c>)
 8002596:	62a3      	str	r3, [r4, #40]	; 0x28
 8002598:	4b04      	ldr	r3, [pc, #16]	; (80025ac <std+0x40>)
 800259a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800259c:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <std+0x44>)
 800259e:	6323      	str	r3, [r4, #48]	; 0x30
 80025a0:	bd10      	pop	{r4, pc}
 80025a2:	bf00      	nop
 80025a4:	08002fdd 	.word	0x08002fdd
 80025a8:	08002fff 	.word	0x08002fff
 80025ac:	08003037 	.word	0x08003037
 80025b0:	0800305b 	.word	0x0800305b

080025b4 <_cleanup_r>:
 80025b4:	4901      	ldr	r1, [pc, #4]	; (80025bc <_cleanup_r+0x8>)
 80025b6:	f000 b8af 	b.w	8002718 <_fwalk_reent>
 80025ba:	bf00      	nop
 80025bc:	080024f5 	.word	0x080024f5

080025c0 <__sfmoreglue>:
 80025c0:	2268      	movs	r2, #104	; 0x68
 80025c2:	b570      	push	{r4, r5, r6, lr}
 80025c4:	1e4d      	subs	r5, r1, #1
 80025c6:	4355      	muls	r5, r2
 80025c8:	460e      	mov	r6, r1
 80025ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80025ce:	f000 f993 	bl	80028f8 <_malloc_r>
 80025d2:	4604      	mov	r4, r0
 80025d4:	b140      	cbz	r0, 80025e8 <__sfmoreglue+0x28>
 80025d6:	2100      	movs	r1, #0
 80025d8:	e9c0 1600 	strd	r1, r6, [r0]
 80025dc:	300c      	adds	r0, #12
 80025de:	60a0      	str	r0, [r4, #8]
 80025e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80025e4:	f7ff fd98 	bl	8002118 <memset>
 80025e8:	4620      	mov	r0, r4
 80025ea:	bd70      	pop	{r4, r5, r6, pc}

080025ec <__sfp_lock_acquire>:
 80025ec:	4801      	ldr	r0, [pc, #4]	; (80025f4 <__sfp_lock_acquire+0x8>)
 80025ee:	f000 b8b3 	b.w	8002758 <__retarget_lock_acquire_recursive>
 80025f2:	bf00      	nop
 80025f4:	20000215 	.word	0x20000215

080025f8 <__sfp_lock_release>:
 80025f8:	4801      	ldr	r0, [pc, #4]	; (8002600 <__sfp_lock_release+0x8>)
 80025fa:	f000 b8ae 	b.w	800275a <__retarget_lock_release_recursive>
 80025fe:	bf00      	nop
 8002600:	20000215 	.word	0x20000215

08002604 <__sinit_lock_acquire>:
 8002604:	4801      	ldr	r0, [pc, #4]	; (800260c <__sinit_lock_acquire+0x8>)
 8002606:	f000 b8a7 	b.w	8002758 <__retarget_lock_acquire_recursive>
 800260a:	bf00      	nop
 800260c:	20000216 	.word	0x20000216

08002610 <__sinit_lock_release>:
 8002610:	4801      	ldr	r0, [pc, #4]	; (8002618 <__sinit_lock_release+0x8>)
 8002612:	f000 b8a2 	b.w	800275a <__retarget_lock_release_recursive>
 8002616:	bf00      	nop
 8002618:	20000216 	.word	0x20000216

0800261c <__sinit>:
 800261c:	b510      	push	{r4, lr}
 800261e:	4604      	mov	r4, r0
 8002620:	f7ff fff0 	bl	8002604 <__sinit_lock_acquire>
 8002624:	69a3      	ldr	r3, [r4, #24]
 8002626:	b11b      	cbz	r3, 8002630 <__sinit+0x14>
 8002628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800262c:	f7ff bff0 	b.w	8002610 <__sinit_lock_release>
 8002630:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002634:	6523      	str	r3, [r4, #80]	; 0x50
 8002636:	4b13      	ldr	r3, [pc, #76]	; (8002684 <__sinit+0x68>)
 8002638:	4a13      	ldr	r2, [pc, #76]	; (8002688 <__sinit+0x6c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	62a2      	str	r2, [r4, #40]	; 0x28
 800263e:	42a3      	cmp	r3, r4
 8002640:	bf08      	it	eq
 8002642:	2301      	moveq	r3, #1
 8002644:	4620      	mov	r0, r4
 8002646:	bf08      	it	eq
 8002648:	61a3      	streq	r3, [r4, #24]
 800264a:	f000 f81f 	bl	800268c <__sfp>
 800264e:	6060      	str	r0, [r4, #4]
 8002650:	4620      	mov	r0, r4
 8002652:	f000 f81b 	bl	800268c <__sfp>
 8002656:	60a0      	str	r0, [r4, #8]
 8002658:	4620      	mov	r0, r4
 800265a:	f000 f817 	bl	800268c <__sfp>
 800265e:	2200      	movs	r2, #0
 8002660:	2104      	movs	r1, #4
 8002662:	60e0      	str	r0, [r4, #12]
 8002664:	6860      	ldr	r0, [r4, #4]
 8002666:	f7ff ff81 	bl	800256c <std>
 800266a:	2201      	movs	r2, #1
 800266c:	2109      	movs	r1, #9
 800266e:	68a0      	ldr	r0, [r4, #8]
 8002670:	f7ff ff7c 	bl	800256c <std>
 8002674:	2202      	movs	r2, #2
 8002676:	2112      	movs	r1, #18
 8002678:	68e0      	ldr	r0, [r4, #12]
 800267a:	f7ff ff77 	bl	800256c <std>
 800267e:	2301      	movs	r3, #1
 8002680:	61a3      	str	r3, [r4, #24]
 8002682:	e7d1      	b.n	8002628 <__sinit+0xc>
 8002684:	08003710 	.word	0x08003710
 8002688:	080025b5 	.word	0x080025b5

0800268c <__sfp>:
 800268c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268e:	4607      	mov	r7, r0
 8002690:	f7ff ffac 	bl	80025ec <__sfp_lock_acquire>
 8002694:	4b1e      	ldr	r3, [pc, #120]	; (8002710 <__sfp+0x84>)
 8002696:	681e      	ldr	r6, [r3, #0]
 8002698:	69b3      	ldr	r3, [r6, #24]
 800269a:	b913      	cbnz	r3, 80026a2 <__sfp+0x16>
 800269c:	4630      	mov	r0, r6
 800269e:	f7ff ffbd 	bl	800261c <__sinit>
 80026a2:	3648      	adds	r6, #72	; 0x48
 80026a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80026a8:	3b01      	subs	r3, #1
 80026aa:	d503      	bpl.n	80026b4 <__sfp+0x28>
 80026ac:	6833      	ldr	r3, [r6, #0]
 80026ae:	b30b      	cbz	r3, 80026f4 <__sfp+0x68>
 80026b0:	6836      	ldr	r6, [r6, #0]
 80026b2:	e7f7      	b.n	80026a4 <__sfp+0x18>
 80026b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80026b8:	b9d5      	cbnz	r5, 80026f0 <__sfp+0x64>
 80026ba:	4b16      	ldr	r3, [pc, #88]	; (8002714 <__sfp+0x88>)
 80026bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80026c0:	60e3      	str	r3, [r4, #12]
 80026c2:	6665      	str	r5, [r4, #100]	; 0x64
 80026c4:	f000 f847 	bl	8002756 <__retarget_lock_init_recursive>
 80026c8:	f7ff ff96 	bl	80025f8 <__sfp_lock_release>
 80026cc:	2208      	movs	r2, #8
 80026ce:	4629      	mov	r1, r5
 80026d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80026d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80026d8:	6025      	str	r5, [r4, #0]
 80026da:	61a5      	str	r5, [r4, #24]
 80026dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80026e0:	f7ff fd1a 	bl	8002118 <memset>
 80026e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80026e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80026ec:	4620      	mov	r0, r4
 80026ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026f0:	3468      	adds	r4, #104	; 0x68
 80026f2:	e7d9      	b.n	80026a8 <__sfp+0x1c>
 80026f4:	2104      	movs	r1, #4
 80026f6:	4638      	mov	r0, r7
 80026f8:	f7ff ff62 	bl	80025c0 <__sfmoreglue>
 80026fc:	4604      	mov	r4, r0
 80026fe:	6030      	str	r0, [r6, #0]
 8002700:	2800      	cmp	r0, #0
 8002702:	d1d5      	bne.n	80026b0 <__sfp+0x24>
 8002704:	f7ff ff78 	bl	80025f8 <__sfp_lock_release>
 8002708:	230c      	movs	r3, #12
 800270a:	603b      	str	r3, [r7, #0]
 800270c:	e7ee      	b.n	80026ec <__sfp+0x60>
 800270e:	bf00      	nop
 8002710:	08003710 	.word	0x08003710
 8002714:	ffff0001 	.word	0xffff0001

08002718 <_fwalk_reent>:
 8002718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800271c:	4606      	mov	r6, r0
 800271e:	4688      	mov	r8, r1
 8002720:	2700      	movs	r7, #0
 8002722:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002726:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800272a:	f1b9 0901 	subs.w	r9, r9, #1
 800272e:	d505      	bpl.n	800273c <_fwalk_reent+0x24>
 8002730:	6824      	ldr	r4, [r4, #0]
 8002732:	2c00      	cmp	r4, #0
 8002734:	d1f7      	bne.n	8002726 <_fwalk_reent+0xe>
 8002736:	4638      	mov	r0, r7
 8002738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800273c:	89ab      	ldrh	r3, [r5, #12]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d907      	bls.n	8002752 <_fwalk_reent+0x3a>
 8002742:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002746:	3301      	adds	r3, #1
 8002748:	d003      	beq.n	8002752 <_fwalk_reent+0x3a>
 800274a:	4629      	mov	r1, r5
 800274c:	4630      	mov	r0, r6
 800274e:	47c0      	blx	r8
 8002750:	4307      	orrs	r7, r0
 8002752:	3568      	adds	r5, #104	; 0x68
 8002754:	e7e9      	b.n	800272a <_fwalk_reent+0x12>

08002756 <__retarget_lock_init_recursive>:
 8002756:	4770      	bx	lr

08002758 <__retarget_lock_acquire_recursive>:
 8002758:	4770      	bx	lr

0800275a <__retarget_lock_release_recursive>:
 800275a:	4770      	bx	lr

0800275c <__swhatbuf_r>:
 800275c:	b570      	push	{r4, r5, r6, lr}
 800275e:	460e      	mov	r6, r1
 8002760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002764:	4614      	mov	r4, r2
 8002766:	2900      	cmp	r1, #0
 8002768:	461d      	mov	r5, r3
 800276a:	b096      	sub	sp, #88	; 0x58
 800276c:	da08      	bge.n	8002780 <__swhatbuf_r+0x24>
 800276e:	2200      	movs	r2, #0
 8002770:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002774:	602a      	str	r2, [r5, #0]
 8002776:	061a      	lsls	r2, r3, #24
 8002778:	d410      	bmi.n	800279c <__swhatbuf_r+0x40>
 800277a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800277e:	e00e      	b.n	800279e <__swhatbuf_r+0x42>
 8002780:	466a      	mov	r2, sp
 8002782:	f000 fc91 	bl	80030a8 <_fstat_r>
 8002786:	2800      	cmp	r0, #0
 8002788:	dbf1      	blt.n	800276e <__swhatbuf_r+0x12>
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002790:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002794:	425a      	negs	r2, r3
 8002796:	415a      	adcs	r2, r3
 8002798:	602a      	str	r2, [r5, #0]
 800279a:	e7ee      	b.n	800277a <__swhatbuf_r+0x1e>
 800279c:	2340      	movs	r3, #64	; 0x40
 800279e:	2000      	movs	r0, #0
 80027a0:	6023      	str	r3, [r4, #0]
 80027a2:	b016      	add	sp, #88	; 0x58
 80027a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080027a8 <__smakebuf_r>:
 80027a8:	898b      	ldrh	r3, [r1, #12]
 80027aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80027ac:	079d      	lsls	r5, r3, #30
 80027ae:	4606      	mov	r6, r0
 80027b0:	460c      	mov	r4, r1
 80027b2:	d507      	bpl.n	80027c4 <__smakebuf_r+0x1c>
 80027b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80027b8:	6023      	str	r3, [r4, #0]
 80027ba:	6123      	str	r3, [r4, #16]
 80027bc:	2301      	movs	r3, #1
 80027be:	6163      	str	r3, [r4, #20]
 80027c0:	b002      	add	sp, #8
 80027c2:	bd70      	pop	{r4, r5, r6, pc}
 80027c4:	466a      	mov	r2, sp
 80027c6:	ab01      	add	r3, sp, #4
 80027c8:	f7ff ffc8 	bl	800275c <__swhatbuf_r>
 80027cc:	9900      	ldr	r1, [sp, #0]
 80027ce:	4605      	mov	r5, r0
 80027d0:	4630      	mov	r0, r6
 80027d2:	f000 f891 	bl	80028f8 <_malloc_r>
 80027d6:	b948      	cbnz	r0, 80027ec <__smakebuf_r+0x44>
 80027d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027dc:	059a      	lsls	r2, r3, #22
 80027de:	d4ef      	bmi.n	80027c0 <__smakebuf_r+0x18>
 80027e0:	f023 0303 	bic.w	r3, r3, #3
 80027e4:	f043 0302 	orr.w	r3, r3, #2
 80027e8:	81a3      	strh	r3, [r4, #12]
 80027ea:	e7e3      	b.n	80027b4 <__smakebuf_r+0xc>
 80027ec:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <__smakebuf_r+0x7c>)
 80027ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80027f0:	89a3      	ldrh	r3, [r4, #12]
 80027f2:	6020      	str	r0, [r4, #0]
 80027f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f8:	81a3      	strh	r3, [r4, #12]
 80027fa:	9b00      	ldr	r3, [sp, #0]
 80027fc:	6120      	str	r0, [r4, #16]
 80027fe:	6163      	str	r3, [r4, #20]
 8002800:	9b01      	ldr	r3, [sp, #4]
 8002802:	b15b      	cbz	r3, 800281c <__smakebuf_r+0x74>
 8002804:	4630      	mov	r0, r6
 8002806:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800280a:	f000 fc5f 	bl	80030cc <_isatty_r>
 800280e:	b128      	cbz	r0, 800281c <__smakebuf_r+0x74>
 8002810:	89a3      	ldrh	r3, [r4, #12]
 8002812:	f023 0303 	bic.w	r3, r3, #3
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	81a3      	strh	r3, [r4, #12]
 800281c:	89a0      	ldrh	r0, [r4, #12]
 800281e:	4305      	orrs	r5, r0
 8002820:	81a5      	strh	r5, [r4, #12]
 8002822:	e7cd      	b.n	80027c0 <__smakebuf_r+0x18>
 8002824:	080025b5 	.word	0x080025b5

08002828 <_free_r>:
 8002828:	b538      	push	{r3, r4, r5, lr}
 800282a:	4605      	mov	r5, r0
 800282c:	2900      	cmp	r1, #0
 800282e:	d040      	beq.n	80028b2 <_free_r+0x8a>
 8002830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002834:	1f0c      	subs	r4, r1, #4
 8002836:	2b00      	cmp	r3, #0
 8002838:	bfb8      	it	lt
 800283a:	18e4      	addlt	r4, r4, r3
 800283c:	f000 fc76 	bl	800312c <__malloc_lock>
 8002840:	4a1c      	ldr	r2, [pc, #112]	; (80028b4 <_free_r+0x8c>)
 8002842:	6813      	ldr	r3, [r2, #0]
 8002844:	b933      	cbnz	r3, 8002854 <_free_r+0x2c>
 8002846:	6063      	str	r3, [r4, #4]
 8002848:	6014      	str	r4, [r2, #0]
 800284a:	4628      	mov	r0, r5
 800284c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002850:	f000 bc72 	b.w	8003138 <__malloc_unlock>
 8002854:	42a3      	cmp	r3, r4
 8002856:	d908      	bls.n	800286a <_free_r+0x42>
 8002858:	6820      	ldr	r0, [r4, #0]
 800285a:	1821      	adds	r1, r4, r0
 800285c:	428b      	cmp	r3, r1
 800285e:	bf01      	itttt	eq
 8002860:	6819      	ldreq	r1, [r3, #0]
 8002862:	685b      	ldreq	r3, [r3, #4]
 8002864:	1809      	addeq	r1, r1, r0
 8002866:	6021      	streq	r1, [r4, #0]
 8002868:	e7ed      	b.n	8002846 <_free_r+0x1e>
 800286a:	461a      	mov	r2, r3
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	b10b      	cbz	r3, 8002874 <_free_r+0x4c>
 8002870:	42a3      	cmp	r3, r4
 8002872:	d9fa      	bls.n	800286a <_free_r+0x42>
 8002874:	6811      	ldr	r1, [r2, #0]
 8002876:	1850      	adds	r0, r2, r1
 8002878:	42a0      	cmp	r0, r4
 800287a:	d10b      	bne.n	8002894 <_free_r+0x6c>
 800287c:	6820      	ldr	r0, [r4, #0]
 800287e:	4401      	add	r1, r0
 8002880:	1850      	adds	r0, r2, r1
 8002882:	4283      	cmp	r3, r0
 8002884:	6011      	str	r1, [r2, #0]
 8002886:	d1e0      	bne.n	800284a <_free_r+0x22>
 8002888:	6818      	ldr	r0, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	4401      	add	r1, r0
 800288e:	6011      	str	r1, [r2, #0]
 8002890:	6053      	str	r3, [r2, #4]
 8002892:	e7da      	b.n	800284a <_free_r+0x22>
 8002894:	d902      	bls.n	800289c <_free_r+0x74>
 8002896:	230c      	movs	r3, #12
 8002898:	602b      	str	r3, [r5, #0]
 800289a:	e7d6      	b.n	800284a <_free_r+0x22>
 800289c:	6820      	ldr	r0, [r4, #0]
 800289e:	1821      	adds	r1, r4, r0
 80028a0:	428b      	cmp	r3, r1
 80028a2:	bf01      	itttt	eq
 80028a4:	6819      	ldreq	r1, [r3, #0]
 80028a6:	685b      	ldreq	r3, [r3, #4]
 80028a8:	1809      	addeq	r1, r1, r0
 80028aa:	6021      	streq	r1, [r4, #0]
 80028ac:	6063      	str	r3, [r4, #4]
 80028ae:	6054      	str	r4, [r2, #4]
 80028b0:	e7cb      	b.n	800284a <_free_r+0x22>
 80028b2:	bd38      	pop	{r3, r4, r5, pc}
 80028b4:	20000218 	.word	0x20000218

080028b8 <sbrk_aligned>:
 80028b8:	b570      	push	{r4, r5, r6, lr}
 80028ba:	4e0e      	ldr	r6, [pc, #56]	; (80028f4 <sbrk_aligned+0x3c>)
 80028bc:	460c      	mov	r4, r1
 80028be:	6831      	ldr	r1, [r6, #0]
 80028c0:	4605      	mov	r5, r0
 80028c2:	b911      	cbnz	r1, 80028ca <sbrk_aligned+0x12>
 80028c4:	f000 fb7a 	bl	8002fbc <_sbrk_r>
 80028c8:	6030      	str	r0, [r6, #0]
 80028ca:	4621      	mov	r1, r4
 80028cc:	4628      	mov	r0, r5
 80028ce:	f000 fb75 	bl	8002fbc <_sbrk_r>
 80028d2:	1c43      	adds	r3, r0, #1
 80028d4:	d00a      	beq.n	80028ec <sbrk_aligned+0x34>
 80028d6:	1cc4      	adds	r4, r0, #3
 80028d8:	f024 0403 	bic.w	r4, r4, #3
 80028dc:	42a0      	cmp	r0, r4
 80028de:	d007      	beq.n	80028f0 <sbrk_aligned+0x38>
 80028e0:	1a21      	subs	r1, r4, r0
 80028e2:	4628      	mov	r0, r5
 80028e4:	f000 fb6a 	bl	8002fbc <_sbrk_r>
 80028e8:	3001      	adds	r0, #1
 80028ea:	d101      	bne.n	80028f0 <sbrk_aligned+0x38>
 80028ec:	f04f 34ff 	mov.w	r4, #4294967295
 80028f0:	4620      	mov	r0, r4
 80028f2:	bd70      	pop	{r4, r5, r6, pc}
 80028f4:	2000021c 	.word	0x2000021c

080028f8 <_malloc_r>:
 80028f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028fc:	1ccd      	adds	r5, r1, #3
 80028fe:	f025 0503 	bic.w	r5, r5, #3
 8002902:	3508      	adds	r5, #8
 8002904:	2d0c      	cmp	r5, #12
 8002906:	bf38      	it	cc
 8002908:	250c      	movcc	r5, #12
 800290a:	2d00      	cmp	r5, #0
 800290c:	4607      	mov	r7, r0
 800290e:	db01      	blt.n	8002914 <_malloc_r+0x1c>
 8002910:	42a9      	cmp	r1, r5
 8002912:	d905      	bls.n	8002920 <_malloc_r+0x28>
 8002914:	230c      	movs	r3, #12
 8002916:	2600      	movs	r6, #0
 8002918:	603b      	str	r3, [r7, #0]
 800291a:	4630      	mov	r0, r6
 800291c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002920:	4e2e      	ldr	r6, [pc, #184]	; (80029dc <_malloc_r+0xe4>)
 8002922:	f000 fc03 	bl	800312c <__malloc_lock>
 8002926:	6833      	ldr	r3, [r6, #0]
 8002928:	461c      	mov	r4, r3
 800292a:	bb34      	cbnz	r4, 800297a <_malloc_r+0x82>
 800292c:	4629      	mov	r1, r5
 800292e:	4638      	mov	r0, r7
 8002930:	f7ff ffc2 	bl	80028b8 <sbrk_aligned>
 8002934:	1c43      	adds	r3, r0, #1
 8002936:	4604      	mov	r4, r0
 8002938:	d14d      	bne.n	80029d6 <_malloc_r+0xde>
 800293a:	6834      	ldr	r4, [r6, #0]
 800293c:	4626      	mov	r6, r4
 800293e:	2e00      	cmp	r6, #0
 8002940:	d140      	bne.n	80029c4 <_malloc_r+0xcc>
 8002942:	6823      	ldr	r3, [r4, #0]
 8002944:	4631      	mov	r1, r6
 8002946:	4638      	mov	r0, r7
 8002948:	eb04 0803 	add.w	r8, r4, r3
 800294c:	f000 fb36 	bl	8002fbc <_sbrk_r>
 8002950:	4580      	cmp	r8, r0
 8002952:	d13a      	bne.n	80029ca <_malloc_r+0xd2>
 8002954:	6821      	ldr	r1, [r4, #0]
 8002956:	3503      	adds	r5, #3
 8002958:	1a6d      	subs	r5, r5, r1
 800295a:	f025 0503 	bic.w	r5, r5, #3
 800295e:	3508      	adds	r5, #8
 8002960:	2d0c      	cmp	r5, #12
 8002962:	bf38      	it	cc
 8002964:	250c      	movcc	r5, #12
 8002966:	4638      	mov	r0, r7
 8002968:	4629      	mov	r1, r5
 800296a:	f7ff ffa5 	bl	80028b8 <sbrk_aligned>
 800296e:	3001      	adds	r0, #1
 8002970:	d02b      	beq.n	80029ca <_malloc_r+0xd2>
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	442b      	add	r3, r5
 8002976:	6023      	str	r3, [r4, #0]
 8002978:	e00e      	b.n	8002998 <_malloc_r+0xa0>
 800297a:	6822      	ldr	r2, [r4, #0]
 800297c:	1b52      	subs	r2, r2, r5
 800297e:	d41e      	bmi.n	80029be <_malloc_r+0xc6>
 8002980:	2a0b      	cmp	r2, #11
 8002982:	d916      	bls.n	80029b2 <_malloc_r+0xba>
 8002984:	1961      	adds	r1, r4, r5
 8002986:	42a3      	cmp	r3, r4
 8002988:	6025      	str	r5, [r4, #0]
 800298a:	bf18      	it	ne
 800298c:	6059      	strne	r1, [r3, #4]
 800298e:	6863      	ldr	r3, [r4, #4]
 8002990:	bf08      	it	eq
 8002992:	6031      	streq	r1, [r6, #0]
 8002994:	5162      	str	r2, [r4, r5]
 8002996:	604b      	str	r3, [r1, #4]
 8002998:	4638      	mov	r0, r7
 800299a:	f104 060b 	add.w	r6, r4, #11
 800299e:	f000 fbcb 	bl	8003138 <__malloc_unlock>
 80029a2:	f026 0607 	bic.w	r6, r6, #7
 80029a6:	1d23      	adds	r3, r4, #4
 80029a8:	1af2      	subs	r2, r6, r3
 80029aa:	d0b6      	beq.n	800291a <_malloc_r+0x22>
 80029ac:	1b9b      	subs	r3, r3, r6
 80029ae:	50a3      	str	r3, [r4, r2]
 80029b0:	e7b3      	b.n	800291a <_malloc_r+0x22>
 80029b2:	6862      	ldr	r2, [r4, #4]
 80029b4:	42a3      	cmp	r3, r4
 80029b6:	bf0c      	ite	eq
 80029b8:	6032      	streq	r2, [r6, #0]
 80029ba:	605a      	strne	r2, [r3, #4]
 80029bc:	e7ec      	b.n	8002998 <_malloc_r+0xa0>
 80029be:	4623      	mov	r3, r4
 80029c0:	6864      	ldr	r4, [r4, #4]
 80029c2:	e7b2      	b.n	800292a <_malloc_r+0x32>
 80029c4:	4634      	mov	r4, r6
 80029c6:	6876      	ldr	r6, [r6, #4]
 80029c8:	e7b9      	b.n	800293e <_malloc_r+0x46>
 80029ca:	230c      	movs	r3, #12
 80029cc:	4638      	mov	r0, r7
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	f000 fbb2 	bl	8003138 <__malloc_unlock>
 80029d4:	e7a1      	b.n	800291a <_malloc_r+0x22>
 80029d6:	6025      	str	r5, [r4, #0]
 80029d8:	e7de      	b.n	8002998 <_malloc_r+0xa0>
 80029da:	bf00      	nop
 80029dc:	20000218 	.word	0x20000218

080029e0 <__sfputc_r>:
 80029e0:	6893      	ldr	r3, [r2, #8]
 80029e2:	b410      	push	{r4}
 80029e4:	3b01      	subs	r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	6093      	str	r3, [r2, #8]
 80029ea:	da07      	bge.n	80029fc <__sfputc_r+0x1c>
 80029ec:	6994      	ldr	r4, [r2, #24]
 80029ee:	42a3      	cmp	r3, r4
 80029f0:	db01      	blt.n	80029f6 <__sfputc_r+0x16>
 80029f2:	290a      	cmp	r1, #10
 80029f4:	d102      	bne.n	80029fc <__sfputc_r+0x1c>
 80029f6:	bc10      	pop	{r4}
 80029f8:	f7ff bc3a 	b.w	8002270 <__swbuf_r>
 80029fc:	6813      	ldr	r3, [r2, #0]
 80029fe:	1c58      	adds	r0, r3, #1
 8002a00:	6010      	str	r0, [r2, #0]
 8002a02:	7019      	strb	r1, [r3, #0]
 8002a04:	4608      	mov	r0, r1
 8002a06:	bc10      	pop	{r4}
 8002a08:	4770      	bx	lr

08002a0a <__sfputs_r>:
 8002a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a0c:	4606      	mov	r6, r0
 8002a0e:	460f      	mov	r7, r1
 8002a10:	4614      	mov	r4, r2
 8002a12:	18d5      	adds	r5, r2, r3
 8002a14:	42ac      	cmp	r4, r5
 8002a16:	d101      	bne.n	8002a1c <__sfputs_r+0x12>
 8002a18:	2000      	movs	r0, #0
 8002a1a:	e007      	b.n	8002a2c <__sfputs_r+0x22>
 8002a1c:	463a      	mov	r2, r7
 8002a1e:	4630      	mov	r0, r6
 8002a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a24:	f7ff ffdc 	bl	80029e0 <__sfputc_r>
 8002a28:	1c43      	adds	r3, r0, #1
 8002a2a:	d1f3      	bne.n	8002a14 <__sfputs_r+0xa>
 8002a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002a30 <_vfiprintf_r>:
 8002a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a34:	460d      	mov	r5, r1
 8002a36:	4614      	mov	r4, r2
 8002a38:	4698      	mov	r8, r3
 8002a3a:	4606      	mov	r6, r0
 8002a3c:	b09d      	sub	sp, #116	; 0x74
 8002a3e:	b118      	cbz	r0, 8002a48 <_vfiprintf_r+0x18>
 8002a40:	6983      	ldr	r3, [r0, #24]
 8002a42:	b90b      	cbnz	r3, 8002a48 <_vfiprintf_r+0x18>
 8002a44:	f7ff fdea 	bl	800261c <__sinit>
 8002a48:	4b89      	ldr	r3, [pc, #548]	; (8002c70 <_vfiprintf_r+0x240>)
 8002a4a:	429d      	cmp	r5, r3
 8002a4c:	d11b      	bne.n	8002a86 <_vfiprintf_r+0x56>
 8002a4e:	6875      	ldr	r5, [r6, #4]
 8002a50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a52:	07d9      	lsls	r1, r3, #31
 8002a54:	d405      	bmi.n	8002a62 <_vfiprintf_r+0x32>
 8002a56:	89ab      	ldrh	r3, [r5, #12]
 8002a58:	059a      	lsls	r2, r3, #22
 8002a5a:	d402      	bmi.n	8002a62 <_vfiprintf_r+0x32>
 8002a5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a5e:	f7ff fe7b 	bl	8002758 <__retarget_lock_acquire_recursive>
 8002a62:	89ab      	ldrh	r3, [r5, #12]
 8002a64:	071b      	lsls	r3, r3, #28
 8002a66:	d501      	bpl.n	8002a6c <_vfiprintf_r+0x3c>
 8002a68:	692b      	ldr	r3, [r5, #16]
 8002a6a:	b9eb      	cbnz	r3, 8002aa8 <_vfiprintf_r+0x78>
 8002a6c:	4629      	mov	r1, r5
 8002a6e:	4630      	mov	r0, r6
 8002a70:	f7ff fc50 	bl	8002314 <__swsetup_r>
 8002a74:	b1c0      	cbz	r0, 8002aa8 <_vfiprintf_r+0x78>
 8002a76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a78:	07dc      	lsls	r4, r3, #31
 8002a7a:	d50e      	bpl.n	8002a9a <_vfiprintf_r+0x6a>
 8002a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a80:	b01d      	add	sp, #116	; 0x74
 8002a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a86:	4b7b      	ldr	r3, [pc, #492]	; (8002c74 <_vfiprintf_r+0x244>)
 8002a88:	429d      	cmp	r5, r3
 8002a8a:	d101      	bne.n	8002a90 <_vfiprintf_r+0x60>
 8002a8c:	68b5      	ldr	r5, [r6, #8]
 8002a8e:	e7df      	b.n	8002a50 <_vfiprintf_r+0x20>
 8002a90:	4b79      	ldr	r3, [pc, #484]	; (8002c78 <_vfiprintf_r+0x248>)
 8002a92:	429d      	cmp	r5, r3
 8002a94:	bf08      	it	eq
 8002a96:	68f5      	ldreq	r5, [r6, #12]
 8002a98:	e7da      	b.n	8002a50 <_vfiprintf_r+0x20>
 8002a9a:	89ab      	ldrh	r3, [r5, #12]
 8002a9c:	0598      	lsls	r0, r3, #22
 8002a9e:	d4ed      	bmi.n	8002a7c <_vfiprintf_r+0x4c>
 8002aa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002aa2:	f7ff fe5a 	bl	800275a <__retarget_lock_release_recursive>
 8002aa6:	e7e9      	b.n	8002a7c <_vfiprintf_r+0x4c>
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	9309      	str	r3, [sp, #36]	; 0x24
 8002aac:	2320      	movs	r3, #32
 8002aae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ab2:	2330      	movs	r3, #48	; 0x30
 8002ab4:	f04f 0901 	mov.w	r9, #1
 8002ab8:	f8cd 800c 	str.w	r8, [sp, #12]
 8002abc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002c7c <_vfiprintf_r+0x24c>
 8002ac0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ac4:	4623      	mov	r3, r4
 8002ac6:	469a      	mov	sl, r3
 8002ac8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002acc:	b10a      	cbz	r2, 8002ad2 <_vfiprintf_r+0xa2>
 8002ace:	2a25      	cmp	r2, #37	; 0x25
 8002ad0:	d1f9      	bne.n	8002ac6 <_vfiprintf_r+0x96>
 8002ad2:	ebba 0b04 	subs.w	fp, sl, r4
 8002ad6:	d00b      	beq.n	8002af0 <_vfiprintf_r+0xc0>
 8002ad8:	465b      	mov	r3, fp
 8002ada:	4622      	mov	r2, r4
 8002adc:	4629      	mov	r1, r5
 8002ade:	4630      	mov	r0, r6
 8002ae0:	f7ff ff93 	bl	8002a0a <__sfputs_r>
 8002ae4:	3001      	adds	r0, #1
 8002ae6:	f000 80aa 	beq.w	8002c3e <_vfiprintf_r+0x20e>
 8002aea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002aec:	445a      	add	r2, fp
 8002aee:	9209      	str	r2, [sp, #36]	; 0x24
 8002af0:	f89a 3000 	ldrb.w	r3, [sl]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 80a2 	beq.w	8002c3e <_vfiprintf_r+0x20e>
 8002afa:	2300      	movs	r3, #0
 8002afc:	f04f 32ff 	mov.w	r2, #4294967295
 8002b00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b04:	f10a 0a01 	add.w	sl, sl, #1
 8002b08:	9304      	str	r3, [sp, #16]
 8002b0a:	9307      	str	r3, [sp, #28]
 8002b0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b10:	931a      	str	r3, [sp, #104]	; 0x68
 8002b12:	4654      	mov	r4, sl
 8002b14:	2205      	movs	r2, #5
 8002b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b1a:	4858      	ldr	r0, [pc, #352]	; (8002c7c <_vfiprintf_r+0x24c>)
 8002b1c:	f000 faf8 	bl	8003110 <memchr>
 8002b20:	9a04      	ldr	r2, [sp, #16]
 8002b22:	b9d8      	cbnz	r0, 8002b5c <_vfiprintf_r+0x12c>
 8002b24:	06d1      	lsls	r1, r2, #27
 8002b26:	bf44      	itt	mi
 8002b28:	2320      	movmi	r3, #32
 8002b2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b2e:	0713      	lsls	r3, r2, #28
 8002b30:	bf44      	itt	mi
 8002b32:	232b      	movmi	r3, #43	; 0x2b
 8002b34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b38:	f89a 3000 	ldrb.w	r3, [sl]
 8002b3c:	2b2a      	cmp	r3, #42	; 0x2a
 8002b3e:	d015      	beq.n	8002b6c <_vfiprintf_r+0x13c>
 8002b40:	4654      	mov	r4, sl
 8002b42:	2000      	movs	r0, #0
 8002b44:	f04f 0c0a 	mov.w	ip, #10
 8002b48:	9a07      	ldr	r2, [sp, #28]
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b50:	3b30      	subs	r3, #48	; 0x30
 8002b52:	2b09      	cmp	r3, #9
 8002b54:	d94e      	bls.n	8002bf4 <_vfiprintf_r+0x1c4>
 8002b56:	b1b0      	cbz	r0, 8002b86 <_vfiprintf_r+0x156>
 8002b58:	9207      	str	r2, [sp, #28]
 8002b5a:	e014      	b.n	8002b86 <_vfiprintf_r+0x156>
 8002b5c:	eba0 0308 	sub.w	r3, r0, r8
 8002b60:	fa09 f303 	lsl.w	r3, r9, r3
 8002b64:	4313      	orrs	r3, r2
 8002b66:	46a2      	mov	sl, r4
 8002b68:	9304      	str	r3, [sp, #16]
 8002b6a:	e7d2      	b.n	8002b12 <_vfiprintf_r+0xe2>
 8002b6c:	9b03      	ldr	r3, [sp, #12]
 8002b6e:	1d19      	adds	r1, r3, #4
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	9103      	str	r1, [sp, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	bfbb      	ittet	lt
 8002b78:	425b      	neglt	r3, r3
 8002b7a:	f042 0202 	orrlt.w	r2, r2, #2
 8002b7e:	9307      	strge	r3, [sp, #28]
 8002b80:	9307      	strlt	r3, [sp, #28]
 8002b82:	bfb8      	it	lt
 8002b84:	9204      	strlt	r2, [sp, #16]
 8002b86:	7823      	ldrb	r3, [r4, #0]
 8002b88:	2b2e      	cmp	r3, #46	; 0x2e
 8002b8a:	d10c      	bne.n	8002ba6 <_vfiprintf_r+0x176>
 8002b8c:	7863      	ldrb	r3, [r4, #1]
 8002b8e:	2b2a      	cmp	r3, #42	; 0x2a
 8002b90:	d135      	bne.n	8002bfe <_vfiprintf_r+0x1ce>
 8002b92:	9b03      	ldr	r3, [sp, #12]
 8002b94:	3402      	adds	r4, #2
 8002b96:	1d1a      	adds	r2, r3, #4
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	9203      	str	r2, [sp, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	bfb8      	it	lt
 8002ba0:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ba4:	9305      	str	r3, [sp, #20]
 8002ba6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002c80 <_vfiprintf_r+0x250>
 8002baa:	2203      	movs	r2, #3
 8002bac:	4650      	mov	r0, sl
 8002bae:	7821      	ldrb	r1, [r4, #0]
 8002bb0:	f000 faae 	bl	8003110 <memchr>
 8002bb4:	b140      	cbz	r0, 8002bc8 <_vfiprintf_r+0x198>
 8002bb6:	2340      	movs	r3, #64	; 0x40
 8002bb8:	eba0 000a 	sub.w	r0, r0, sl
 8002bbc:	fa03 f000 	lsl.w	r0, r3, r0
 8002bc0:	9b04      	ldr	r3, [sp, #16]
 8002bc2:	3401      	adds	r4, #1
 8002bc4:	4303      	orrs	r3, r0
 8002bc6:	9304      	str	r3, [sp, #16]
 8002bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bcc:	2206      	movs	r2, #6
 8002bce:	482d      	ldr	r0, [pc, #180]	; (8002c84 <_vfiprintf_r+0x254>)
 8002bd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002bd4:	f000 fa9c 	bl	8003110 <memchr>
 8002bd8:	2800      	cmp	r0, #0
 8002bda:	d03f      	beq.n	8002c5c <_vfiprintf_r+0x22c>
 8002bdc:	4b2a      	ldr	r3, [pc, #168]	; (8002c88 <_vfiprintf_r+0x258>)
 8002bde:	bb1b      	cbnz	r3, 8002c28 <_vfiprintf_r+0x1f8>
 8002be0:	9b03      	ldr	r3, [sp, #12]
 8002be2:	3307      	adds	r3, #7
 8002be4:	f023 0307 	bic.w	r3, r3, #7
 8002be8:	3308      	adds	r3, #8
 8002bea:	9303      	str	r3, [sp, #12]
 8002bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bee:	443b      	add	r3, r7
 8002bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8002bf2:	e767      	b.n	8002ac4 <_vfiprintf_r+0x94>
 8002bf4:	460c      	mov	r4, r1
 8002bf6:	2001      	movs	r0, #1
 8002bf8:	fb0c 3202 	mla	r2, ip, r2, r3
 8002bfc:	e7a5      	b.n	8002b4a <_vfiprintf_r+0x11a>
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f04f 0c0a 	mov.w	ip, #10
 8002c04:	4619      	mov	r1, r3
 8002c06:	3401      	adds	r4, #1
 8002c08:	9305      	str	r3, [sp, #20]
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c10:	3a30      	subs	r2, #48	; 0x30
 8002c12:	2a09      	cmp	r2, #9
 8002c14:	d903      	bls.n	8002c1e <_vfiprintf_r+0x1ee>
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0c5      	beq.n	8002ba6 <_vfiprintf_r+0x176>
 8002c1a:	9105      	str	r1, [sp, #20]
 8002c1c:	e7c3      	b.n	8002ba6 <_vfiprintf_r+0x176>
 8002c1e:	4604      	mov	r4, r0
 8002c20:	2301      	movs	r3, #1
 8002c22:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c26:	e7f0      	b.n	8002c0a <_vfiprintf_r+0x1da>
 8002c28:	ab03      	add	r3, sp, #12
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	462a      	mov	r2, r5
 8002c2e:	4630      	mov	r0, r6
 8002c30:	4b16      	ldr	r3, [pc, #88]	; (8002c8c <_vfiprintf_r+0x25c>)
 8002c32:	a904      	add	r1, sp, #16
 8002c34:	f3af 8000 	nop.w
 8002c38:	4607      	mov	r7, r0
 8002c3a:	1c78      	adds	r0, r7, #1
 8002c3c:	d1d6      	bne.n	8002bec <_vfiprintf_r+0x1bc>
 8002c3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c40:	07d9      	lsls	r1, r3, #31
 8002c42:	d405      	bmi.n	8002c50 <_vfiprintf_r+0x220>
 8002c44:	89ab      	ldrh	r3, [r5, #12]
 8002c46:	059a      	lsls	r2, r3, #22
 8002c48:	d402      	bmi.n	8002c50 <_vfiprintf_r+0x220>
 8002c4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c4c:	f7ff fd85 	bl	800275a <__retarget_lock_release_recursive>
 8002c50:	89ab      	ldrh	r3, [r5, #12]
 8002c52:	065b      	lsls	r3, r3, #25
 8002c54:	f53f af12 	bmi.w	8002a7c <_vfiprintf_r+0x4c>
 8002c58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c5a:	e711      	b.n	8002a80 <_vfiprintf_r+0x50>
 8002c5c:	ab03      	add	r3, sp, #12
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	462a      	mov	r2, r5
 8002c62:	4630      	mov	r0, r6
 8002c64:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <_vfiprintf_r+0x25c>)
 8002c66:	a904      	add	r1, sp, #16
 8002c68:	f000 f882 	bl	8002d70 <_printf_i>
 8002c6c:	e7e4      	b.n	8002c38 <_vfiprintf_r+0x208>
 8002c6e:	bf00      	nop
 8002c70:	08003734 	.word	0x08003734
 8002c74:	08003754 	.word	0x08003754
 8002c78:	08003714 	.word	0x08003714
 8002c7c:	08003774 	.word	0x08003774
 8002c80:	0800377a 	.word	0x0800377a
 8002c84:	0800377e 	.word	0x0800377e
 8002c88:	00000000 	.word	0x00000000
 8002c8c:	08002a0b 	.word	0x08002a0b

08002c90 <_printf_common>:
 8002c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c94:	4616      	mov	r6, r2
 8002c96:	4699      	mov	r9, r3
 8002c98:	688a      	ldr	r2, [r1, #8]
 8002c9a:	690b      	ldr	r3, [r1, #16]
 8002c9c:	4607      	mov	r7, r0
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	bfb8      	it	lt
 8002ca2:	4613      	movlt	r3, r2
 8002ca4:	6033      	str	r3, [r6, #0]
 8002ca6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002caa:	460c      	mov	r4, r1
 8002cac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002cb0:	b10a      	cbz	r2, 8002cb6 <_printf_common+0x26>
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	6033      	str	r3, [r6, #0]
 8002cb6:	6823      	ldr	r3, [r4, #0]
 8002cb8:	0699      	lsls	r1, r3, #26
 8002cba:	bf42      	ittt	mi
 8002cbc:	6833      	ldrmi	r3, [r6, #0]
 8002cbe:	3302      	addmi	r3, #2
 8002cc0:	6033      	strmi	r3, [r6, #0]
 8002cc2:	6825      	ldr	r5, [r4, #0]
 8002cc4:	f015 0506 	ands.w	r5, r5, #6
 8002cc8:	d106      	bne.n	8002cd8 <_printf_common+0x48>
 8002cca:	f104 0a19 	add.w	sl, r4, #25
 8002cce:	68e3      	ldr	r3, [r4, #12]
 8002cd0:	6832      	ldr	r2, [r6, #0]
 8002cd2:	1a9b      	subs	r3, r3, r2
 8002cd4:	42ab      	cmp	r3, r5
 8002cd6:	dc28      	bgt.n	8002d2a <_printf_common+0x9a>
 8002cd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002cdc:	1e13      	subs	r3, r2, #0
 8002cde:	6822      	ldr	r2, [r4, #0]
 8002ce0:	bf18      	it	ne
 8002ce2:	2301      	movne	r3, #1
 8002ce4:	0692      	lsls	r2, r2, #26
 8002ce6:	d42d      	bmi.n	8002d44 <_printf_common+0xb4>
 8002ce8:	4649      	mov	r1, r9
 8002cea:	4638      	mov	r0, r7
 8002cec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002cf0:	47c0      	blx	r8
 8002cf2:	3001      	adds	r0, #1
 8002cf4:	d020      	beq.n	8002d38 <_printf_common+0xa8>
 8002cf6:	6823      	ldr	r3, [r4, #0]
 8002cf8:	68e5      	ldr	r5, [r4, #12]
 8002cfa:	f003 0306 	and.w	r3, r3, #6
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	bf18      	it	ne
 8002d02:	2500      	movne	r5, #0
 8002d04:	6832      	ldr	r2, [r6, #0]
 8002d06:	f04f 0600 	mov.w	r6, #0
 8002d0a:	68a3      	ldr	r3, [r4, #8]
 8002d0c:	bf08      	it	eq
 8002d0e:	1aad      	subeq	r5, r5, r2
 8002d10:	6922      	ldr	r2, [r4, #16]
 8002d12:	bf08      	it	eq
 8002d14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	bfc4      	itt	gt
 8002d1c:	1a9b      	subgt	r3, r3, r2
 8002d1e:	18ed      	addgt	r5, r5, r3
 8002d20:	341a      	adds	r4, #26
 8002d22:	42b5      	cmp	r5, r6
 8002d24:	d11a      	bne.n	8002d5c <_printf_common+0xcc>
 8002d26:	2000      	movs	r0, #0
 8002d28:	e008      	b.n	8002d3c <_printf_common+0xac>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	4652      	mov	r2, sl
 8002d2e:	4649      	mov	r1, r9
 8002d30:	4638      	mov	r0, r7
 8002d32:	47c0      	blx	r8
 8002d34:	3001      	adds	r0, #1
 8002d36:	d103      	bne.n	8002d40 <_printf_common+0xb0>
 8002d38:	f04f 30ff 	mov.w	r0, #4294967295
 8002d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d40:	3501      	adds	r5, #1
 8002d42:	e7c4      	b.n	8002cce <_printf_common+0x3e>
 8002d44:	2030      	movs	r0, #48	; 0x30
 8002d46:	18e1      	adds	r1, r4, r3
 8002d48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d52:	4422      	add	r2, r4
 8002d54:	3302      	adds	r3, #2
 8002d56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d5a:	e7c5      	b.n	8002ce8 <_printf_common+0x58>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	4622      	mov	r2, r4
 8002d60:	4649      	mov	r1, r9
 8002d62:	4638      	mov	r0, r7
 8002d64:	47c0      	blx	r8
 8002d66:	3001      	adds	r0, #1
 8002d68:	d0e6      	beq.n	8002d38 <_printf_common+0xa8>
 8002d6a:	3601      	adds	r6, #1
 8002d6c:	e7d9      	b.n	8002d22 <_printf_common+0x92>
	...

08002d70 <_printf_i>:
 8002d70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d74:	7e0f      	ldrb	r7, [r1, #24]
 8002d76:	4691      	mov	r9, r2
 8002d78:	2f78      	cmp	r7, #120	; 0x78
 8002d7a:	4680      	mov	r8, r0
 8002d7c:	460c      	mov	r4, r1
 8002d7e:	469a      	mov	sl, r3
 8002d80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002d86:	d807      	bhi.n	8002d98 <_printf_i+0x28>
 8002d88:	2f62      	cmp	r7, #98	; 0x62
 8002d8a:	d80a      	bhi.n	8002da2 <_printf_i+0x32>
 8002d8c:	2f00      	cmp	r7, #0
 8002d8e:	f000 80d9 	beq.w	8002f44 <_printf_i+0x1d4>
 8002d92:	2f58      	cmp	r7, #88	; 0x58
 8002d94:	f000 80a4 	beq.w	8002ee0 <_printf_i+0x170>
 8002d98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002da0:	e03a      	b.n	8002e18 <_printf_i+0xa8>
 8002da2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002da6:	2b15      	cmp	r3, #21
 8002da8:	d8f6      	bhi.n	8002d98 <_printf_i+0x28>
 8002daa:	a101      	add	r1, pc, #4	; (adr r1, 8002db0 <_printf_i+0x40>)
 8002dac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002db0:	08002e09 	.word	0x08002e09
 8002db4:	08002e1d 	.word	0x08002e1d
 8002db8:	08002d99 	.word	0x08002d99
 8002dbc:	08002d99 	.word	0x08002d99
 8002dc0:	08002d99 	.word	0x08002d99
 8002dc4:	08002d99 	.word	0x08002d99
 8002dc8:	08002e1d 	.word	0x08002e1d
 8002dcc:	08002d99 	.word	0x08002d99
 8002dd0:	08002d99 	.word	0x08002d99
 8002dd4:	08002d99 	.word	0x08002d99
 8002dd8:	08002d99 	.word	0x08002d99
 8002ddc:	08002f2b 	.word	0x08002f2b
 8002de0:	08002e4d 	.word	0x08002e4d
 8002de4:	08002f0d 	.word	0x08002f0d
 8002de8:	08002d99 	.word	0x08002d99
 8002dec:	08002d99 	.word	0x08002d99
 8002df0:	08002f4d 	.word	0x08002f4d
 8002df4:	08002d99 	.word	0x08002d99
 8002df8:	08002e4d 	.word	0x08002e4d
 8002dfc:	08002d99 	.word	0x08002d99
 8002e00:	08002d99 	.word	0x08002d99
 8002e04:	08002f15 	.word	0x08002f15
 8002e08:	682b      	ldr	r3, [r5, #0]
 8002e0a:	1d1a      	adds	r2, r3, #4
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	602a      	str	r2, [r5, #0]
 8002e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0a4      	b.n	8002f66 <_printf_i+0x1f6>
 8002e1c:	6820      	ldr	r0, [r4, #0]
 8002e1e:	6829      	ldr	r1, [r5, #0]
 8002e20:	0606      	lsls	r6, r0, #24
 8002e22:	f101 0304 	add.w	r3, r1, #4
 8002e26:	d50a      	bpl.n	8002e3e <_printf_i+0xce>
 8002e28:	680e      	ldr	r6, [r1, #0]
 8002e2a:	602b      	str	r3, [r5, #0]
 8002e2c:	2e00      	cmp	r6, #0
 8002e2e:	da03      	bge.n	8002e38 <_printf_i+0xc8>
 8002e30:	232d      	movs	r3, #45	; 0x2d
 8002e32:	4276      	negs	r6, r6
 8002e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e38:	230a      	movs	r3, #10
 8002e3a:	485e      	ldr	r0, [pc, #376]	; (8002fb4 <_printf_i+0x244>)
 8002e3c:	e019      	b.n	8002e72 <_printf_i+0x102>
 8002e3e:	680e      	ldr	r6, [r1, #0]
 8002e40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e44:	602b      	str	r3, [r5, #0]
 8002e46:	bf18      	it	ne
 8002e48:	b236      	sxthne	r6, r6
 8002e4a:	e7ef      	b.n	8002e2c <_printf_i+0xbc>
 8002e4c:	682b      	ldr	r3, [r5, #0]
 8002e4e:	6820      	ldr	r0, [r4, #0]
 8002e50:	1d19      	adds	r1, r3, #4
 8002e52:	6029      	str	r1, [r5, #0]
 8002e54:	0601      	lsls	r1, r0, #24
 8002e56:	d501      	bpl.n	8002e5c <_printf_i+0xec>
 8002e58:	681e      	ldr	r6, [r3, #0]
 8002e5a:	e002      	b.n	8002e62 <_printf_i+0xf2>
 8002e5c:	0646      	lsls	r6, r0, #25
 8002e5e:	d5fb      	bpl.n	8002e58 <_printf_i+0xe8>
 8002e60:	881e      	ldrh	r6, [r3, #0]
 8002e62:	2f6f      	cmp	r7, #111	; 0x6f
 8002e64:	bf0c      	ite	eq
 8002e66:	2308      	moveq	r3, #8
 8002e68:	230a      	movne	r3, #10
 8002e6a:	4852      	ldr	r0, [pc, #328]	; (8002fb4 <_printf_i+0x244>)
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e72:	6865      	ldr	r5, [r4, #4]
 8002e74:	2d00      	cmp	r5, #0
 8002e76:	bfa8      	it	ge
 8002e78:	6821      	ldrge	r1, [r4, #0]
 8002e7a:	60a5      	str	r5, [r4, #8]
 8002e7c:	bfa4      	itt	ge
 8002e7e:	f021 0104 	bicge.w	r1, r1, #4
 8002e82:	6021      	strge	r1, [r4, #0]
 8002e84:	b90e      	cbnz	r6, 8002e8a <_printf_i+0x11a>
 8002e86:	2d00      	cmp	r5, #0
 8002e88:	d04d      	beq.n	8002f26 <_printf_i+0x1b6>
 8002e8a:	4615      	mov	r5, r2
 8002e8c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002e90:	fb03 6711 	mls	r7, r3, r1, r6
 8002e94:	5dc7      	ldrb	r7, [r0, r7]
 8002e96:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002e9a:	4637      	mov	r7, r6
 8002e9c:	42bb      	cmp	r3, r7
 8002e9e:	460e      	mov	r6, r1
 8002ea0:	d9f4      	bls.n	8002e8c <_printf_i+0x11c>
 8002ea2:	2b08      	cmp	r3, #8
 8002ea4:	d10b      	bne.n	8002ebe <_printf_i+0x14e>
 8002ea6:	6823      	ldr	r3, [r4, #0]
 8002ea8:	07de      	lsls	r6, r3, #31
 8002eaa:	d508      	bpl.n	8002ebe <_printf_i+0x14e>
 8002eac:	6923      	ldr	r3, [r4, #16]
 8002eae:	6861      	ldr	r1, [r4, #4]
 8002eb0:	4299      	cmp	r1, r3
 8002eb2:	bfde      	ittt	le
 8002eb4:	2330      	movle	r3, #48	; 0x30
 8002eb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002eba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002ebe:	1b52      	subs	r2, r2, r5
 8002ec0:	6122      	str	r2, [r4, #16]
 8002ec2:	464b      	mov	r3, r9
 8002ec4:	4621      	mov	r1, r4
 8002ec6:	4640      	mov	r0, r8
 8002ec8:	f8cd a000 	str.w	sl, [sp]
 8002ecc:	aa03      	add	r2, sp, #12
 8002ece:	f7ff fedf 	bl	8002c90 <_printf_common>
 8002ed2:	3001      	adds	r0, #1
 8002ed4:	d14c      	bne.n	8002f70 <_printf_i+0x200>
 8002ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8002eda:	b004      	add	sp, #16
 8002edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ee0:	4834      	ldr	r0, [pc, #208]	; (8002fb4 <_printf_i+0x244>)
 8002ee2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002ee6:	6829      	ldr	r1, [r5, #0]
 8002ee8:	6823      	ldr	r3, [r4, #0]
 8002eea:	f851 6b04 	ldr.w	r6, [r1], #4
 8002eee:	6029      	str	r1, [r5, #0]
 8002ef0:	061d      	lsls	r5, r3, #24
 8002ef2:	d514      	bpl.n	8002f1e <_printf_i+0x1ae>
 8002ef4:	07df      	lsls	r7, r3, #31
 8002ef6:	bf44      	itt	mi
 8002ef8:	f043 0320 	orrmi.w	r3, r3, #32
 8002efc:	6023      	strmi	r3, [r4, #0]
 8002efe:	b91e      	cbnz	r6, 8002f08 <_printf_i+0x198>
 8002f00:	6823      	ldr	r3, [r4, #0]
 8002f02:	f023 0320 	bic.w	r3, r3, #32
 8002f06:	6023      	str	r3, [r4, #0]
 8002f08:	2310      	movs	r3, #16
 8002f0a:	e7af      	b.n	8002e6c <_printf_i+0xfc>
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	f043 0320 	orr.w	r3, r3, #32
 8002f12:	6023      	str	r3, [r4, #0]
 8002f14:	2378      	movs	r3, #120	; 0x78
 8002f16:	4828      	ldr	r0, [pc, #160]	; (8002fb8 <_printf_i+0x248>)
 8002f18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f1c:	e7e3      	b.n	8002ee6 <_printf_i+0x176>
 8002f1e:	0659      	lsls	r1, r3, #25
 8002f20:	bf48      	it	mi
 8002f22:	b2b6      	uxthmi	r6, r6
 8002f24:	e7e6      	b.n	8002ef4 <_printf_i+0x184>
 8002f26:	4615      	mov	r5, r2
 8002f28:	e7bb      	b.n	8002ea2 <_printf_i+0x132>
 8002f2a:	682b      	ldr	r3, [r5, #0]
 8002f2c:	6826      	ldr	r6, [r4, #0]
 8002f2e:	1d18      	adds	r0, r3, #4
 8002f30:	6961      	ldr	r1, [r4, #20]
 8002f32:	6028      	str	r0, [r5, #0]
 8002f34:	0635      	lsls	r5, r6, #24
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	d501      	bpl.n	8002f3e <_printf_i+0x1ce>
 8002f3a:	6019      	str	r1, [r3, #0]
 8002f3c:	e002      	b.n	8002f44 <_printf_i+0x1d4>
 8002f3e:	0670      	lsls	r0, r6, #25
 8002f40:	d5fb      	bpl.n	8002f3a <_printf_i+0x1ca>
 8002f42:	8019      	strh	r1, [r3, #0]
 8002f44:	2300      	movs	r3, #0
 8002f46:	4615      	mov	r5, r2
 8002f48:	6123      	str	r3, [r4, #16]
 8002f4a:	e7ba      	b.n	8002ec2 <_printf_i+0x152>
 8002f4c:	682b      	ldr	r3, [r5, #0]
 8002f4e:	2100      	movs	r1, #0
 8002f50:	1d1a      	adds	r2, r3, #4
 8002f52:	602a      	str	r2, [r5, #0]
 8002f54:	681d      	ldr	r5, [r3, #0]
 8002f56:	6862      	ldr	r2, [r4, #4]
 8002f58:	4628      	mov	r0, r5
 8002f5a:	f000 f8d9 	bl	8003110 <memchr>
 8002f5e:	b108      	cbz	r0, 8002f64 <_printf_i+0x1f4>
 8002f60:	1b40      	subs	r0, r0, r5
 8002f62:	6060      	str	r0, [r4, #4]
 8002f64:	6863      	ldr	r3, [r4, #4]
 8002f66:	6123      	str	r3, [r4, #16]
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f6e:	e7a8      	b.n	8002ec2 <_printf_i+0x152>
 8002f70:	462a      	mov	r2, r5
 8002f72:	4649      	mov	r1, r9
 8002f74:	4640      	mov	r0, r8
 8002f76:	6923      	ldr	r3, [r4, #16]
 8002f78:	47d0      	blx	sl
 8002f7a:	3001      	adds	r0, #1
 8002f7c:	d0ab      	beq.n	8002ed6 <_printf_i+0x166>
 8002f7e:	6823      	ldr	r3, [r4, #0]
 8002f80:	079b      	lsls	r3, r3, #30
 8002f82:	d413      	bmi.n	8002fac <_printf_i+0x23c>
 8002f84:	68e0      	ldr	r0, [r4, #12]
 8002f86:	9b03      	ldr	r3, [sp, #12]
 8002f88:	4298      	cmp	r0, r3
 8002f8a:	bfb8      	it	lt
 8002f8c:	4618      	movlt	r0, r3
 8002f8e:	e7a4      	b.n	8002eda <_printf_i+0x16a>
 8002f90:	2301      	movs	r3, #1
 8002f92:	4632      	mov	r2, r6
 8002f94:	4649      	mov	r1, r9
 8002f96:	4640      	mov	r0, r8
 8002f98:	47d0      	blx	sl
 8002f9a:	3001      	adds	r0, #1
 8002f9c:	d09b      	beq.n	8002ed6 <_printf_i+0x166>
 8002f9e:	3501      	adds	r5, #1
 8002fa0:	68e3      	ldr	r3, [r4, #12]
 8002fa2:	9903      	ldr	r1, [sp, #12]
 8002fa4:	1a5b      	subs	r3, r3, r1
 8002fa6:	42ab      	cmp	r3, r5
 8002fa8:	dcf2      	bgt.n	8002f90 <_printf_i+0x220>
 8002faa:	e7eb      	b.n	8002f84 <_printf_i+0x214>
 8002fac:	2500      	movs	r5, #0
 8002fae:	f104 0619 	add.w	r6, r4, #25
 8002fb2:	e7f5      	b.n	8002fa0 <_printf_i+0x230>
 8002fb4:	08003785 	.word	0x08003785
 8002fb8:	08003796 	.word	0x08003796

08002fbc <_sbrk_r>:
 8002fbc:	b538      	push	{r3, r4, r5, lr}
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	4d05      	ldr	r5, [pc, #20]	; (8002fd8 <_sbrk_r+0x1c>)
 8002fc2:	4604      	mov	r4, r0
 8002fc4:	4608      	mov	r0, r1
 8002fc6:	602b      	str	r3, [r5, #0]
 8002fc8:	f7fd fa86 	bl	80004d8 <_sbrk>
 8002fcc:	1c43      	adds	r3, r0, #1
 8002fce:	d102      	bne.n	8002fd6 <_sbrk_r+0x1a>
 8002fd0:	682b      	ldr	r3, [r5, #0]
 8002fd2:	b103      	cbz	r3, 8002fd6 <_sbrk_r+0x1a>
 8002fd4:	6023      	str	r3, [r4, #0]
 8002fd6:	bd38      	pop	{r3, r4, r5, pc}
 8002fd8:	20000220 	.word	0x20000220

08002fdc <__sread>:
 8002fdc:	b510      	push	{r4, lr}
 8002fde:	460c      	mov	r4, r1
 8002fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fe4:	f000 f8ae 	bl	8003144 <_read_r>
 8002fe8:	2800      	cmp	r0, #0
 8002fea:	bfab      	itete	ge
 8002fec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002fee:	89a3      	ldrhlt	r3, [r4, #12]
 8002ff0:	181b      	addge	r3, r3, r0
 8002ff2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002ff6:	bfac      	ite	ge
 8002ff8:	6563      	strge	r3, [r4, #84]	; 0x54
 8002ffa:	81a3      	strhlt	r3, [r4, #12]
 8002ffc:	bd10      	pop	{r4, pc}

08002ffe <__swrite>:
 8002ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003002:	461f      	mov	r7, r3
 8003004:	898b      	ldrh	r3, [r1, #12]
 8003006:	4605      	mov	r5, r0
 8003008:	05db      	lsls	r3, r3, #23
 800300a:	460c      	mov	r4, r1
 800300c:	4616      	mov	r6, r2
 800300e:	d505      	bpl.n	800301c <__swrite+0x1e>
 8003010:	2302      	movs	r3, #2
 8003012:	2200      	movs	r2, #0
 8003014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003018:	f000 f868 	bl	80030ec <_lseek_r>
 800301c:	89a3      	ldrh	r3, [r4, #12]
 800301e:	4632      	mov	r2, r6
 8003020:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003024:	81a3      	strh	r3, [r4, #12]
 8003026:	4628      	mov	r0, r5
 8003028:	463b      	mov	r3, r7
 800302a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800302e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003032:	f000 b817 	b.w	8003064 <_write_r>

08003036 <__sseek>:
 8003036:	b510      	push	{r4, lr}
 8003038:	460c      	mov	r4, r1
 800303a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800303e:	f000 f855 	bl	80030ec <_lseek_r>
 8003042:	1c43      	adds	r3, r0, #1
 8003044:	89a3      	ldrh	r3, [r4, #12]
 8003046:	bf15      	itete	ne
 8003048:	6560      	strne	r0, [r4, #84]	; 0x54
 800304a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800304e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003052:	81a3      	strheq	r3, [r4, #12]
 8003054:	bf18      	it	ne
 8003056:	81a3      	strhne	r3, [r4, #12]
 8003058:	bd10      	pop	{r4, pc}

0800305a <__sclose>:
 800305a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800305e:	f000 b813 	b.w	8003088 <_close_r>
	...

08003064 <_write_r>:
 8003064:	b538      	push	{r3, r4, r5, lr}
 8003066:	4604      	mov	r4, r0
 8003068:	4608      	mov	r0, r1
 800306a:	4611      	mov	r1, r2
 800306c:	2200      	movs	r2, #0
 800306e:	4d05      	ldr	r5, [pc, #20]	; (8003084 <_write_r+0x20>)
 8003070:	602a      	str	r2, [r5, #0]
 8003072:	461a      	mov	r2, r3
 8003074:	f7fd f934 	bl	80002e0 <_write>
 8003078:	1c43      	adds	r3, r0, #1
 800307a:	d102      	bne.n	8003082 <_write_r+0x1e>
 800307c:	682b      	ldr	r3, [r5, #0]
 800307e:	b103      	cbz	r3, 8003082 <_write_r+0x1e>
 8003080:	6023      	str	r3, [r4, #0]
 8003082:	bd38      	pop	{r3, r4, r5, pc}
 8003084:	20000220 	.word	0x20000220

08003088 <_close_r>:
 8003088:	b538      	push	{r3, r4, r5, lr}
 800308a:	2300      	movs	r3, #0
 800308c:	4d05      	ldr	r5, [pc, #20]	; (80030a4 <_close_r+0x1c>)
 800308e:	4604      	mov	r4, r0
 8003090:	4608      	mov	r0, r1
 8003092:	602b      	str	r3, [r5, #0]
 8003094:	f7fd f9ef 	bl	8000476 <_close>
 8003098:	1c43      	adds	r3, r0, #1
 800309a:	d102      	bne.n	80030a2 <_close_r+0x1a>
 800309c:	682b      	ldr	r3, [r5, #0]
 800309e:	b103      	cbz	r3, 80030a2 <_close_r+0x1a>
 80030a0:	6023      	str	r3, [r4, #0]
 80030a2:	bd38      	pop	{r3, r4, r5, pc}
 80030a4:	20000220 	.word	0x20000220

080030a8 <_fstat_r>:
 80030a8:	b538      	push	{r3, r4, r5, lr}
 80030aa:	2300      	movs	r3, #0
 80030ac:	4d06      	ldr	r5, [pc, #24]	; (80030c8 <_fstat_r+0x20>)
 80030ae:	4604      	mov	r4, r0
 80030b0:	4608      	mov	r0, r1
 80030b2:	4611      	mov	r1, r2
 80030b4:	602b      	str	r3, [r5, #0]
 80030b6:	f7fd f9e9 	bl	800048c <_fstat>
 80030ba:	1c43      	adds	r3, r0, #1
 80030bc:	d102      	bne.n	80030c4 <_fstat_r+0x1c>
 80030be:	682b      	ldr	r3, [r5, #0]
 80030c0:	b103      	cbz	r3, 80030c4 <_fstat_r+0x1c>
 80030c2:	6023      	str	r3, [r4, #0]
 80030c4:	bd38      	pop	{r3, r4, r5, pc}
 80030c6:	bf00      	nop
 80030c8:	20000220 	.word	0x20000220

080030cc <_isatty_r>:
 80030cc:	b538      	push	{r3, r4, r5, lr}
 80030ce:	2300      	movs	r3, #0
 80030d0:	4d05      	ldr	r5, [pc, #20]	; (80030e8 <_isatty_r+0x1c>)
 80030d2:	4604      	mov	r4, r0
 80030d4:	4608      	mov	r0, r1
 80030d6:	602b      	str	r3, [r5, #0]
 80030d8:	f7fd f9e7 	bl	80004aa <_isatty>
 80030dc:	1c43      	adds	r3, r0, #1
 80030de:	d102      	bne.n	80030e6 <_isatty_r+0x1a>
 80030e0:	682b      	ldr	r3, [r5, #0]
 80030e2:	b103      	cbz	r3, 80030e6 <_isatty_r+0x1a>
 80030e4:	6023      	str	r3, [r4, #0]
 80030e6:	bd38      	pop	{r3, r4, r5, pc}
 80030e8:	20000220 	.word	0x20000220

080030ec <_lseek_r>:
 80030ec:	b538      	push	{r3, r4, r5, lr}
 80030ee:	4604      	mov	r4, r0
 80030f0:	4608      	mov	r0, r1
 80030f2:	4611      	mov	r1, r2
 80030f4:	2200      	movs	r2, #0
 80030f6:	4d05      	ldr	r5, [pc, #20]	; (800310c <_lseek_r+0x20>)
 80030f8:	602a      	str	r2, [r5, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	f7fd f9df 	bl	80004be <_lseek>
 8003100:	1c43      	adds	r3, r0, #1
 8003102:	d102      	bne.n	800310a <_lseek_r+0x1e>
 8003104:	682b      	ldr	r3, [r5, #0]
 8003106:	b103      	cbz	r3, 800310a <_lseek_r+0x1e>
 8003108:	6023      	str	r3, [r4, #0]
 800310a:	bd38      	pop	{r3, r4, r5, pc}
 800310c:	20000220 	.word	0x20000220

08003110 <memchr>:
 8003110:	4603      	mov	r3, r0
 8003112:	b510      	push	{r4, lr}
 8003114:	b2c9      	uxtb	r1, r1
 8003116:	4402      	add	r2, r0
 8003118:	4293      	cmp	r3, r2
 800311a:	4618      	mov	r0, r3
 800311c:	d101      	bne.n	8003122 <memchr+0x12>
 800311e:	2000      	movs	r0, #0
 8003120:	e003      	b.n	800312a <memchr+0x1a>
 8003122:	7804      	ldrb	r4, [r0, #0]
 8003124:	3301      	adds	r3, #1
 8003126:	428c      	cmp	r4, r1
 8003128:	d1f6      	bne.n	8003118 <memchr+0x8>
 800312a:	bd10      	pop	{r4, pc}

0800312c <__malloc_lock>:
 800312c:	4801      	ldr	r0, [pc, #4]	; (8003134 <__malloc_lock+0x8>)
 800312e:	f7ff bb13 	b.w	8002758 <__retarget_lock_acquire_recursive>
 8003132:	bf00      	nop
 8003134:	20000214 	.word	0x20000214

08003138 <__malloc_unlock>:
 8003138:	4801      	ldr	r0, [pc, #4]	; (8003140 <__malloc_unlock+0x8>)
 800313a:	f7ff bb0e 	b.w	800275a <__retarget_lock_release_recursive>
 800313e:	bf00      	nop
 8003140:	20000214 	.word	0x20000214

08003144 <_read_r>:
 8003144:	b538      	push	{r3, r4, r5, lr}
 8003146:	4604      	mov	r4, r0
 8003148:	4608      	mov	r0, r1
 800314a:	4611      	mov	r1, r2
 800314c:	2200      	movs	r2, #0
 800314e:	4d05      	ldr	r5, [pc, #20]	; (8003164 <_read_r+0x20>)
 8003150:	602a      	str	r2, [r5, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	f7fd f972 	bl	800043c <_read>
 8003158:	1c43      	adds	r3, r0, #1
 800315a:	d102      	bne.n	8003162 <_read_r+0x1e>
 800315c:	682b      	ldr	r3, [r5, #0]
 800315e:	b103      	cbz	r3, 8003162 <_read_r+0x1e>
 8003160:	6023      	str	r3, [r4, #0]
 8003162:	bd38      	pop	{r3, r4, r5, pc}
 8003164:	20000220 	.word	0x20000220

08003168 <_init>:
 8003168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316a:	bf00      	nop
 800316c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316e:	bc08      	pop	{r3}
 8003170:	469e      	mov	lr, r3
 8003172:	4770      	bx	lr

08003174 <_fini>:
 8003174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003176:	bf00      	nop
 8003178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800317a:	bc08      	pop	{r3}
 800317c:	469e      	mov	lr, r3
 800317e:	4770      	bx	lr
