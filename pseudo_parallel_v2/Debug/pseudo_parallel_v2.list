
pseudo_parallel_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000609c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  080061a8  080061a8  000161a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006808  08006808  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006808  08006808  00016808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006810  08006810  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006810  08006810  00016810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006814  08006814  00016814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  20000070  08006888  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  08006888  00020578  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ac4  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce6  00000000  00000000  00027b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  00029848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000820  00000000  00000000  0002a120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018619  00000000  00000000  0002a940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000acbc  00000000  00000000  00042f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084366  00000000  00000000  0004dc15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1f7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003114  00000000  00000000  000d1fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08006190 	.word	0x08006190

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08006190 	.word	0x08006190

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_dmul>:
 800015c:	b570      	push	{r4, r5, r6, lr}
 800015e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000162:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000166:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016a:	bf1d      	ittte	ne
 800016c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000170:	ea94 0f0c 	teqne	r4, ip
 8000174:	ea95 0f0c 	teqne	r5, ip
 8000178:	f000 f8de 	bleq	8000338 <__aeabi_dmul+0x1dc>
 800017c:	442c      	add	r4, r5
 800017e:	ea81 0603 	eor.w	r6, r1, r3
 8000182:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000186:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800018e:	bf18      	it	ne
 8000190:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000194:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000198:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800019c:	d038      	beq.n	8000210 <__aeabi_dmul+0xb4>
 800019e:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a2:	f04f 0500 	mov.w	r5, #0
 80001a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b2:	f04f 0600 	mov.w	r6, #0
 80001b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ba:	f09c 0f00 	teq	ip, #0
 80001be:	bf18      	it	ne
 80001c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d0:	d204      	bcs.n	80001dc <__aeabi_dmul+0x80>
 80001d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001d6:	416d      	adcs	r5, r5
 80001d8:	eb46 0606 	adc.w	r6, r6, r6
 80001dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f4:	bf88      	it	hi
 80001f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fa:	d81e      	bhi.n	800023a <__aeabi_dmul+0xde>
 80001fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000200:	bf08      	it	eq
 8000202:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000206:	f150 0000 	adcs.w	r0, r0, #0
 800020a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800020e:	bd70      	pop	{r4, r5, r6, pc}
 8000210:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000214:	ea46 0101 	orr.w	r1, r6, r1
 8000218:	ea40 0002 	orr.w	r0, r0, r2
 800021c:	ea81 0103 	eor.w	r1, r1, r3
 8000220:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000224:	bfc2      	ittt	gt
 8000226:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800022e:	bd70      	popgt	{r4, r5, r6, pc}
 8000230:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000234:	f04f 0e00 	mov.w	lr, #0
 8000238:	3c01      	subs	r4, #1
 800023a:	f300 80ab 	bgt.w	8000394 <__aeabi_dmul+0x238>
 800023e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000242:	bfde      	ittt	le
 8000244:	2000      	movle	r0, #0
 8000246:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024a:	bd70      	pople	{r4, r5, r6, pc}
 800024c:	f1c4 0400 	rsb	r4, r4, #0
 8000250:	3c20      	subs	r4, #32
 8000252:	da35      	bge.n	80002c0 <__aeabi_dmul+0x164>
 8000254:	340c      	adds	r4, #12
 8000256:	dc1b      	bgt.n	8000290 <__aeabi_dmul+0x134>
 8000258:	f104 0414 	add.w	r4, r4, #20
 800025c:	f1c4 0520 	rsb	r5, r4, #32
 8000260:	fa00 f305 	lsl.w	r3, r0, r5
 8000264:	fa20 f004 	lsr.w	r0, r0, r4
 8000268:	fa01 f205 	lsl.w	r2, r1, r5
 800026c:	ea40 0002 	orr.w	r0, r0, r2
 8000270:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000274:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000278:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800027c:	fa21 f604 	lsr.w	r6, r1, r4
 8000280:	eb42 0106 	adc.w	r1, r2, r6
 8000284:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000288:	bf08      	it	eq
 800028a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800028e:	bd70      	pop	{r4, r5, r6, pc}
 8000290:	f1c4 040c 	rsb	r4, r4, #12
 8000294:	f1c4 0520 	rsb	r5, r4, #32
 8000298:	fa00 f304 	lsl.w	r3, r0, r4
 800029c:	fa20 f005 	lsr.w	r0, r0, r5
 80002a0:	fa01 f204 	lsl.w	r2, r1, r4
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002b8:	bf08      	it	eq
 80002ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002be:	bd70      	pop	{r4, r5, r6, pc}
 80002c0:	f1c4 0520 	rsb	r5, r4, #32
 80002c4:	fa00 f205 	lsl.w	r2, r0, r5
 80002c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80002cc:	fa20 f304 	lsr.w	r3, r0, r4
 80002d0:	fa01 f205 	lsl.w	r2, r1, r5
 80002d4:	ea43 0302 	orr.w	r3, r3, r2
 80002d8:	fa21 f004 	lsr.w	r0, r1, r4
 80002dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e0:	fa21 f204 	lsr.w	r2, r1, r4
 80002e4:	ea20 0002 	bic.w	r0, r0, r2
 80002e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f0:	bf08      	it	eq
 80002f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002f6:	bd70      	pop	{r4, r5, r6, pc}
 80002f8:	f094 0f00 	teq	r4, #0
 80002fc:	d10f      	bne.n	800031e <__aeabi_dmul+0x1c2>
 80002fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000302:	0040      	lsls	r0, r0, #1
 8000304:	eb41 0101 	adc.w	r1, r1, r1
 8000308:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030c:	bf08      	it	eq
 800030e:	3c01      	subeq	r4, #1
 8000310:	d0f7      	beq.n	8000302 <__aeabi_dmul+0x1a6>
 8000312:	ea41 0106 	orr.w	r1, r1, r6
 8000316:	f095 0f00 	teq	r5, #0
 800031a:	bf18      	it	ne
 800031c:	4770      	bxne	lr
 800031e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000322:	0052      	lsls	r2, r2, #1
 8000324:	eb43 0303 	adc.w	r3, r3, r3
 8000328:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800032c:	bf08      	it	eq
 800032e:	3d01      	subeq	r5, #1
 8000330:	d0f7      	beq.n	8000322 <__aeabi_dmul+0x1c6>
 8000332:	ea43 0306 	orr.w	r3, r3, r6
 8000336:	4770      	bx	lr
 8000338:	ea94 0f0c 	teq	r4, ip
 800033c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000340:	bf18      	it	ne
 8000342:	ea95 0f0c 	teqne	r5, ip
 8000346:	d00c      	beq.n	8000362 <__aeabi_dmul+0x206>
 8000348:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800034c:	bf18      	it	ne
 800034e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000352:	d1d1      	bne.n	80002f8 <__aeabi_dmul+0x19c>
 8000354:	ea81 0103 	eor.w	r1, r1, r3
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	f04f 0000 	mov.w	r0, #0
 8000360:	bd70      	pop	{r4, r5, r6, pc}
 8000362:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000366:	bf06      	itte	eq
 8000368:	4610      	moveq	r0, r2
 800036a:	4619      	moveq	r1, r3
 800036c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000370:	d019      	beq.n	80003a6 <__aeabi_dmul+0x24a>
 8000372:	ea94 0f0c 	teq	r4, ip
 8000376:	d102      	bne.n	800037e <__aeabi_dmul+0x222>
 8000378:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800037c:	d113      	bne.n	80003a6 <__aeabi_dmul+0x24a>
 800037e:	ea95 0f0c 	teq	r5, ip
 8000382:	d105      	bne.n	8000390 <__aeabi_dmul+0x234>
 8000384:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000388:	bf1c      	itt	ne
 800038a:	4610      	movne	r0, r2
 800038c:	4619      	movne	r1, r3
 800038e:	d10a      	bne.n	80003a6 <__aeabi_dmul+0x24a>
 8000390:	ea81 0103 	eor.w	r1, r1, r3
 8000394:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000398:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd70      	pop	{r4, r5, r6, pc}
 80003a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003ae:	bd70      	pop	{r4, r5, r6, pc}

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__gedf2>:
 8000728:	f04f 3cff 	mov.w	ip, #4294967295
 800072c:	e006      	b.n	800073c <__cmpdf2+0x4>
 800072e:	bf00      	nop

08000730 <__ledf2>:
 8000730:	f04f 0c01 	mov.w	ip, #1
 8000734:	e002      	b.n	800073c <__cmpdf2+0x4>
 8000736:	bf00      	nop

08000738 <__cmpdf2>:
 8000738:	f04f 0c01 	mov.w	ip, #1
 800073c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000740:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000744:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000748:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800074c:	bf18      	it	ne
 800074e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000752:	d01b      	beq.n	800078c <__cmpdf2+0x54>
 8000754:	b001      	add	sp, #4
 8000756:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800075a:	bf0c      	ite	eq
 800075c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000760:	ea91 0f03 	teqne	r1, r3
 8000764:	bf02      	ittt	eq
 8000766:	ea90 0f02 	teqeq	r0, r2
 800076a:	2000      	moveq	r0, #0
 800076c:	4770      	bxeq	lr
 800076e:	f110 0f00 	cmn.w	r0, #0
 8000772:	ea91 0f03 	teq	r1, r3
 8000776:	bf58      	it	pl
 8000778:	4299      	cmppl	r1, r3
 800077a:	bf08      	it	eq
 800077c:	4290      	cmpeq	r0, r2
 800077e:	bf2c      	ite	cs
 8000780:	17d8      	asrcs	r0, r3, #31
 8000782:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000786:	f040 0001 	orr.w	r0, r0, #1
 800078a:	4770      	bx	lr
 800078c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000790:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000794:	d102      	bne.n	800079c <__cmpdf2+0x64>
 8000796:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800079a:	d107      	bne.n	80007ac <__cmpdf2+0x74>
 800079c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a4:	d1d6      	bne.n	8000754 <__cmpdf2+0x1c>
 80007a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007aa:	d0d3      	beq.n	8000754 <__cmpdf2+0x1c>
 80007ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop

080007b4 <__aeabi_cdrcmple>:
 80007b4:	4684      	mov	ip, r0
 80007b6:	4610      	mov	r0, r2
 80007b8:	4662      	mov	r2, ip
 80007ba:	468c      	mov	ip, r1
 80007bc:	4619      	mov	r1, r3
 80007be:	4663      	mov	r3, ip
 80007c0:	e000      	b.n	80007c4 <__aeabi_cdcmpeq>
 80007c2:	bf00      	nop

080007c4 <__aeabi_cdcmpeq>:
 80007c4:	b501      	push	{r0, lr}
 80007c6:	f7ff ffb7 	bl	8000738 <__cmpdf2>
 80007ca:	2800      	cmp	r0, #0
 80007cc:	bf48      	it	mi
 80007ce:	f110 0f00 	cmnmi.w	r0, #0
 80007d2:	bd01      	pop	{r0, pc}

080007d4 <__aeabi_dcmpeq>:
 80007d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007d8:	f7ff fff4 	bl	80007c4 <__aeabi_cdcmpeq>
 80007dc:	bf0c      	ite	eq
 80007de:	2001      	moveq	r0, #1
 80007e0:	2000      	movne	r0, #0
 80007e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007e6:	bf00      	nop

080007e8 <__aeabi_dcmplt>:
 80007e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007ec:	f7ff ffea 	bl	80007c4 <__aeabi_cdcmpeq>
 80007f0:	bf34      	ite	cc
 80007f2:	2001      	movcc	r0, #1
 80007f4:	2000      	movcs	r0, #0
 80007f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007fa:	bf00      	nop

080007fc <__aeabi_dcmple>:
 80007fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000800:	f7ff ffe0 	bl	80007c4 <__aeabi_cdcmpeq>
 8000804:	bf94      	ite	ls
 8000806:	2001      	movls	r0, #1
 8000808:	2000      	movhi	r0, #0
 800080a:	f85d fb08 	ldr.w	pc, [sp], #8
 800080e:	bf00      	nop

08000810 <__aeabi_dcmpge>:
 8000810:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000814:	f7ff ffce 	bl	80007b4 <__aeabi_cdrcmple>
 8000818:	bf94      	ite	ls
 800081a:	2001      	movls	r0, #1
 800081c:	2000      	movhi	r0, #0
 800081e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000822:	bf00      	nop

08000824 <__aeabi_dcmpgt>:
 8000824:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000828:	f7ff ffc4 	bl	80007b4 <__aeabi_cdrcmple>
 800082c:	bf34      	ite	cc
 800082e:	2001      	movcc	r0, #1
 8000830:	2000      	movcs	r0, #0
 8000832:	f85d fb08 	ldr.w	pc, [sp], #8
 8000836:	bf00      	nop

08000838 <__aeabi_frsub>:
 8000838:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800083c:	e002      	b.n	8000844 <__addsf3>
 800083e:	bf00      	nop

08000840 <__aeabi_fsub>:
 8000840:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000844 <__addsf3>:
 8000844:	0042      	lsls	r2, r0, #1
 8000846:	bf1f      	itttt	ne
 8000848:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800084c:	ea92 0f03 	teqne	r2, r3
 8000850:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000854:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000858:	d06a      	beq.n	8000930 <__addsf3+0xec>
 800085a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800085e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000862:	bfc1      	itttt	gt
 8000864:	18d2      	addgt	r2, r2, r3
 8000866:	4041      	eorgt	r1, r0
 8000868:	4048      	eorgt	r0, r1
 800086a:	4041      	eorgt	r1, r0
 800086c:	bfb8      	it	lt
 800086e:	425b      	neglt	r3, r3
 8000870:	2b19      	cmp	r3, #25
 8000872:	bf88      	it	hi
 8000874:	4770      	bxhi	lr
 8000876:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800087a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800087e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000882:	bf18      	it	ne
 8000884:	4240      	negne	r0, r0
 8000886:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800088a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800088e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000892:	bf18      	it	ne
 8000894:	4249      	negne	r1, r1
 8000896:	ea92 0f03 	teq	r2, r3
 800089a:	d03f      	beq.n	800091c <__addsf3+0xd8>
 800089c:	f1a2 0201 	sub.w	r2, r2, #1
 80008a0:	fa41 fc03 	asr.w	ip, r1, r3
 80008a4:	eb10 000c 	adds.w	r0, r0, ip
 80008a8:	f1c3 0320 	rsb	r3, r3, #32
 80008ac:	fa01 f103 	lsl.w	r1, r1, r3
 80008b0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008b4:	d502      	bpl.n	80008bc <__addsf3+0x78>
 80008b6:	4249      	negs	r1, r1
 80008b8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80008bc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80008c0:	d313      	bcc.n	80008ea <__addsf3+0xa6>
 80008c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008c6:	d306      	bcc.n	80008d6 <__addsf3+0x92>
 80008c8:	0840      	lsrs	r0, r0, #1
 80008ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80008ce:	f102 0201 	add.w	r2, r2, #1
 80008d2:	2afe      	cmp	r2, #254	; 0xfe
 80008d4:	d251      	bcs.n	800097a <__addsf3+0x136>
 80008d6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80008da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008de:	bf08      	it	eq
 80008e0:	f020 0001 	biceq.w	r0, r0, #1
 80008e4:	ea40 0003 	orr.w	r0, r0, r3
 80008e8:	4770      	bx	lr
 80008ea:	0049      	lsls	r1, r1, #1
 80008ec:	eb40 0000 	adc.w	r0, r0, r0
 80008f0:	3a01      	subs	r2, #1
 80008f2:	bf28      	it	cs
 80008f4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80008f8:	d2ed      	bcs.n	80008d6 <__addsf3+0x92>
 80008fa:	fab0 fc80 	clz	ip, r0
 80008fe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000902:	ebb2 020c 	subs.w	r2, r2, ip
 8000906:	fa00 f00c 	lsl.w	r0, r0, ip
 800090a:	bfaa      	itet	ge
 800090c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000910:	4252      	neglt	r2, r2
 8000912:	4318      	orrge	r0, r3
 8000914:	bfbc      	itt	lt
 8000916:	40d0      	lsrlt	r0, r2
 8000918:	4318      	orrlt	r0, r3
 800091a:	4770      	bx	lr
 800091c:	f092 0f00 	teq	r2, #0
 8000920:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000924:	bf06      	itte	eq
 8000926:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800092a:	3201      	addeq	r2, #1
 800092c:	3b01      	subne	r3, #1
 800092e:	e7b5      	b.n	800089c <__addsf3+0x58>
 8000930:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000934:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000938:	bf18      	it	ne
 800093a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800093e:	d021      	beq.n	8000984 <__addsf3+0x140>
 8000940:	ea92 0f03 	teq	r2, r3
 8000944:	d004      	beq.n	8000950 <__addsf3+0x10c>
 8000946:	f092 0f00 	teq	r2, #0
 800094a:	bf08      	it	eq
 800094c:	4608      	moveq	r0, r1
 800094e:	4770      	bx	lr
 8000950:	ea90 0f01 	teq	r0, r1
 8000954:	bf1c      	itt	ne
 8000956:	2000      	movne	r0, #0
 8000958:	4770      	bxne	lr
 800095a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800095e:	d104      	bne.n	800096a <__addsf3+0x126>
 8000960:	0040      	lsls	r0, r0, #1
 8000962:	bf28      	it	cs
 8000964:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000968:	4770      	bx	lr
 800096a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800096e:	bf3c      	itt	cc
 8000970:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000974:	4770      	bxcc	lr
 8000976:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800097a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800097e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000982:	4770      	bx	lr
 8000984:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000988:	bf16      	itet	ne
 800098a:	4608      	movne	r0, r1
 800098c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000990:	4601      	movne	r1, r0
 8000992:	0242      	lsls	r2, r0, #9
 8000994:	bf06      	itte	eq
 8000996:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800099a:	ea90 0f01 	teqeq	r0, r1
 800099e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_ui2f>:
 80009a4:	f04f 0300 	mov.w	r3, #0
 80009a8:	e004      	b.n	80009b4 <__aeabi_i2f+0x8>
 80009aa:	bf00      	nop

080009ac <__aeabi_i2f>:
 80009ac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80009b0:	bf48      	it	mi
 80009b2:	4240      	negmi	r0, r0
 80009b4:	ea5f 0c00 	movs.w	ip, r0
 80009b8:	bf08      	it	eq
 80009ba:	4770      	bxeq	lr
 80009bc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80009c0:	4601      	mov	r1, r0
 80009c2:	f04f 0000 	mov.w	r0, #0
 80009c6:	e01c      	b.n	8000a02 <__aeabi_l2f+0x2a>

080009c8 <__aeabi_ul2f>:
 80009c8:	ea50 0201 	orrs.w	r2, r0, r1
 80009cc:	bf08      	it	eq
 80009ce:	4770      	bxeq	lr
 80009d0:	f04f 0300 	mov.w	r3, #0
 80009d4:	e00a      	b.n	80009ec <__aeabi_l2f+0x14>
 80009d6:	bf00      	nop

080009d8 <__aeabi_l2f>:
 80009d8:	ea50 0201 	orrs.w	r2, r0, r1
 80009dc:	bf08      	it	eq
 80009de:	4770      	bxeq	lr
 80009e0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80009e4:	d502      	bpl.n	80009ec <__aeabi_l2f+0x14>
 80009e6:	4240      	negs	r0, r0
 80009e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009ec:	ea5f 0c01 	movs.w	ip, r1
 80009f0:	bf02      	ittt	eq
 80009f2:	4684      	moveq	ip, r0
 80009f4:	4601      	moveq	r1, r0
 80009f6:	2000      	moveq	r0, #0
 80009f8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80009fc:	bf08      	it	eq
 80009fe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000a02:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000a06:	fabc f28c 	clz	r2, ip
 8000a0a:	3a08      	subs	r2, #8
 8000a0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000a10:	db10      	blt.n	8000a34 <__aeabi_l2f+0x5c>
 8000a12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a16:	4463      	add	r3, ip
 8000a18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a1c:	f1c2 0220 	rsb	r2, r2, #32
 8000a20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000a24:	fa20 f202 	lsr.w	r2, r0, r2
 8000a28:	eb43 0002 	adc.w	r0, r3, r2
 8000a2c:	bf08      	it	eq
 8000a2e:	f020 0001 	biceq.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	f102 0220 	add.w	r2, r2, #32
 8000a38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a3c:	f1c2 0220 	rsb	r2, r2, #32
 8000a40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000a44:	fa21 f202 	lsr.w	r2, r1, r2
 8000a48:	eb43 0002 	adc.w	r0, r3, r2
 8000a4c:	bf08      	it	eq
 8000a4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a52:	4770      	bx	lr

08000a54 <__aeabi_fmul>:
 8000a54:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a5c:	bf1e      	ittt	ne
 8000a5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a62:	ea92 0f0c 	teqne	r2, ip
 8000a66:	ea93 0f0c 	teqne	r3, ip
 8000a6a:	d06f      	beq.n	8000b4c <__aeabi_fmul+0xf8>
 8000a6c:	441a      	add	r2, r3
 8000a6e:	ea80 0c01 	eor.w	ip, r0, r1
 8000a72:	0240      	lsls	r0, r0, #9
 8000a74:	bf18      	it	ne
 8000a76:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000a7a:	d01e      	beq.n	8000aba <__aeabi_fmul+0x66>
 8000a7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a80:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a84:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a88:	fba0 3101 	umull	r3, r1, r0, r1
 8000a8c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a90:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a94:	bf3e      	ittt	cc
 8000a96:	0049      	lslcc	r1, r1, #1
 8000a98:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a9c:	005b      	lslcc	r3, r3, #1
 8000a9e:	ea40 0001 	orr.w	r0, r0, r1
 8000aa2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000aa6:	2afd      	cmp	r2, #253	; 0xfd
 8000aa8:	d81d      	bhi.n	8000ae6 <__aeabi_fmul+0x92>
 8000aaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000aae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ab2:	bf08      	it	eq
 8000ab4:	f020 0001 	biceq.w	r0, r0, #1
 8000ab8:	4770      	bx	lr
 8000aba:	f090 0f00 	teq	r0, #0
 8000abe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ac2:	bf08      	it	eq
 8000ac4:	0249      	lsleq	r1, r1, #9
 8000ac6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000aca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ace:	3a7f      	subs	r2, #127	; 0x7f
 8000ad0:	bfc2      	ittt	gt
 8000ad2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ad6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ada:	4770      	bxgt	lr
 8000adc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae0:	f04f 0300 	mov.w	r3, #0
 8000ae4:	3a01      	subs	r2, #1
 8000ae6:	dc5d      	bgt.n	8000ba4 <__aeabi_fmul+0x150>
 8000ae8:	f112 0f19 	cmn.w	r2, #25
 8000aec:	bfdc      	itt	le
 8000aee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000af2:	4770      	bxle	lr
 8000af4:	f1c2 0200 	rsb	r2, r2, #0
 8000af8:	0041      	lsls	r1, r0, #1
 8000afa:	fa21 f102 	lsr.w	r1, r1, r2
 8000afe:	f1c2 0220 	rsb	r2, r2, #32
 8000b02:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b06:	ea5f 0031 	movs.w	r0, r1, rrx
 8000b0a:	f140 0000 	adc.w	r0, r0, #0
 8000b0e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000b12:	bf08      	it	eq
 8000b14:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b18:	4770      	bx	lr
 8000b1a:	f092 0f00 	teq	r2, #0
 8000b1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000b22:	bf02      	ittt	eq
 8000b24:	0040      	lsleq	r0, r0, #1
 8000b26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000b2a:	3a01      	subeq	r2, #1
 8000b2c:	d0f9      	beq.n	8000b22 <__aeabi_fmul+0xce>
 8000b2e:	ea40 000c 	orr.w	r0, r0, ip
 8000b32:	f093 0f00 	teq	r3, #0
 8000b36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b3a:	bf02      	ittt	eq
 8000b3c:	0049      	lsleq	r1, r1, #1
 8000b3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000b42:	3b01      	subeq	r3, #1
 8000b44:	d0f9      	beq.n	8000b3a <__aeabi_fmul+0xe6>
 8000b46:	ea41 010c 	orr.w	r1, r1, ip
 8000b4a:	e78f      	b.n	8000a6c <__aeabi_fmul+0x18>
 8000b4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b50:	ea92 0f0c 	teq	r2, ip
 8000b54:	bf18      	it	ne
 8000b56:	ea93 0f0c 	teqne	r3, ip
 8000b5a:	d00a      	beq.n	8000b72 <__aeabi_fmul+0x11e>
 8000b5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b60:	bf18      	it	ne
 8000b62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b66:	d1d8      	bne.n	8000b1a <__aeabi_fmul+0xc6>
 8000b68:	ea80 0001 	eor.w	r0, r0, r1
 8000b6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b70:	4770      	bx	lr
 8000b72:	f090 0f00 	teq	r0, #0
 8000b76:	bf17      	itett	ne
 8000b78:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b7c:	4608      	moveq	r0, r1
 8000b7e:	f091 0f00 	teqne	r1, #0
 8000b82:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b86:	d014      	beq.n	8000bb2 <__aeabi_fmul+0x15e>
 8000b88:	ea92 0f0c 	teq	r2, ip
 8000b8c:	d101      	bne.n	8000b92 <__aeabi_fmul+0x13e>
 8000b8e:	0242      	lsls	r2, r0, #9
 8000b90:	d10f      	bne.n	8000bb2 <__aeabi_fmul+0x15e>
 8000b92:	ea93 0f0c 	teq	r3, ip
 8000b96:	d103      	bne.n	8000ba0 <__aeabi_fmul+0x14c>
 8000b98:	024b      	lsls	r3, r1, #9
 8000b9a:	bf18      	it	ne
 8000b9c:	4608      	movne	r0, r1
 8000b9e:	d108      	bne.n	8000bb2 <__aeabi_fmul+0x15e>
 8000ba0:	ea80 0001 	eor.w	r0, r0, r1
 8000ba4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_fdiv>:
 8000bbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bca:	ea92 0f0c 	teqne	r2, ip
 8000bce:	ea93 0f0c 	teqne	r3, ip
 8000bd2:	d069      	beq.n	8000ca8 <__aeabi_fdiv+0xec>
 8000bd4:	eba2 0203 	sub.w	r2, r2, r3
 8000bd8:	ea80 0c01 	eor.w	ip, r0, r1
 8000bdc:	0249      	lsls	r1, r1, #9
 8000bde:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000be2:	d037      	beq.n	8000c54 <__aeabi_fdiv+0x98>
 8000be4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000be8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000bec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000bf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bf4:	428b      	cmp	r3, r1
 8000bf6:	bf38      	it	cc
 8000bf8:	005b      	lslcc	r3, r3, #1
 8000bfa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000bfe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000c02:	428b      	cmp	r3, r1
 8000c04:	bf24      	itt	cs
 8000c06:	1a5b      	subcs	r3, r3, r1
 8000c08:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c0c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000c10:	bf24      	itt	cs
 8000c12:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000c16:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c1a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000c1e:	bf24      	itt	cs
 8000c20:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000c24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c28:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000c2c:	bf24      	itt	cs
 8000c2e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000c32:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c36:	011b      	lsls	r3, r3, #4
 8000c38:	bf18      	it	ne
 8000c3a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000c3e:	d1e0      	bne.n	8000c02 <__aeabi_fdiv+0x46>
 8000c40:	2afd      	cmp	r2, #253	; 0xfd
 8000c42:	f63f af50 	bhi.w	8000ae6 <__aeabi_fmul+0x92>
 8000c46:	428b      	cmp	r3, r1
 8000c48:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4c:	bf08      	it	eq
 8000c4e:	f020 0001 	biceq.w	r0, r0, #1
 8000c52:	4770      	bx	lr
 8000c54:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c58:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c5c:	327f      	adds	r2, #127	; 0x7f
 8000c5e:	bfc2      	ittt	gt
 8000c60:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c64:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c68:	4770      	bxgt	lr
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	f04f 0300 	mov.w	r3, #0
 8000c72:	3a01      	subs	r2, #1
 8000c74:	e737      	b.n	8000ae6 <__aeabi_fmul+0x92>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c7e:	bf02      	ittt	eq
 8000c80:	0040      	lsleq	r0, r0, #1
 8000c82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c86:	3a01      	subeq	r2, #1
 8000c88:	d0f9      	beq.n	8000c7e <__aeabi_fdiv+0xc2>
 8000c8a:	ea40 000c 	orr.w	r0, r0, ip
 8000c8e:	f093 0f00 	teq	r3, #0
 8000c92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c96:	bf02      	ittt	eq
 8000c98:	0049      	lsleq	r1, r1, #1
 8000c9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c9e:	3b01      	subeq	r3, #1
 8000ca0:	d0f9      	beq.n	8000c96 <__aeabi_fdiv+0xda>
 8000ca2:	ea41 010c 	orr.w	r1, r1, ip
 8000ca6:	e795      	b.n	8000bd4 <__aeabi_fdiv+0x18>
 8000ca8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cac:	ea92 0f0c 	teq	r2, ip
 8000cb0:	d108      	bne.n	8000cc4 <__aeabi_fdiv+0x108>
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	f47f af7d 	bne.w	8000bb2 <__aeabi_fmul+0x15e>
 8000cb8:	ea93 0f0c 	teq	r3, ip
 8000cbc:	f47f af70 	bne.w	8000ba0 <__aeabi_fmul+0x14c>
 8000cc0:	4608      	mov	r0, r1
 8000cc2:	e776      	b.n	8000bb2 <__aeabi_fmul+0x15e>
 8000cc4:	ea93 0f0c 	teq	r3, ip
 8000cc8:	d104      	bne.n	8000cd4 <__aeabi_fdiv+0x118>
 8000cca:	024b      	lsls	r3, r1, #9
 8000ccc:	f43f af4c 	beq.w	8000b68 <__aeabi_fmul+0x114>
 8000cd0:	4608      	mov	r0, r1
 8000cd2:	e76e      	b.n	8000bb2 <__aeabi_fmul+0x15e>
 8000cd4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cd8:	bf18      	it	ne
 8000cda:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cde:	d1ca      	bne.n	8000c76 <__aeabi_fdiv+0xba>
 8000ce0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ce4:	f47f af5c 	bne.w	8000ba0 <__aeabi_fmul+0x14c>
 8000ce8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000cec:	f47f af3c 	bne.w	8000b68 <__aeabi_fmul+0x114>
 8000cf0:	e75f      	b.n	8000bb2 <__aeabi_fmul+0x15e>
 8000cf2:	bf00      	nop

08000cf4 <__gesf2>:
 8000cf4:	f04f 3cff 	mov.w	ip, #4294967295
 8000cf8:	e006      	b.n	8000d08 <__cmpsf2+0x4>
 8000cfa:	bf00      	nop

08000cfc <__lesf2>:
 8000cfc:	f04f 0c01 	mov.w	ip, #1
 8000d00:	e002      	b.n	8000d08 <__cmpsf2+0x4>
 8000d02:	bf00      	nop

08000d04 <__cmpsf2>:
 8000d04:	f04f 0c01 	mov.w	ip, #1
 8000d08:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d0c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d18:	bf18      	it	ne
 8000d1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d1e:	d011      	beq.n	8000d44 <__cmpsf2+0x40>
 8000d20:	b001      	add	sp, #4
 8000d22:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d26:	bf18      	it	ne
 8000d28:	ea90 0f01 	teqne	r0, r1
 8000d2c:	bf58      	it	pl
 8000d2e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d32:	bf88      	it	hi
 8000d34:	17c8      	asrhi	r0, r1, #31
 8000d36:	bf38      	it	cc
 8000d38:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d3c:	bf18      	it	ne
 8000d3e:	f040 0001 	orrne.w	r0, r0, #1
 8000d42:	4770      	bx	lr
 8000d44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d48:	d102      	bne.n	8000d50 <__cmpsf2+0x4c>
 8000d4a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d4e:	d105      	bne.n	8000d5c <__cmpsf2+0x58>
 8000d50:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d54:	d1e4      	bne.n	8000d20 <__cmpsf2+0x1c>
 8000d56:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d5a:	d0e1      	beq.n	8000d20 <__cmpsf2+0x1c>
 8000d5c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <__aeabi_cfrcmple>:
 8000d64:	4684      	mov	ip, r0
 8000d66:	4608      	mov	r0, r1
 8000d68:	4661      	mov	r1, ip
 8000d6a:	e7ff      	b.n	8000d6c <__aeabi_cfcmpeq>

08000d6c <__aeabi_cfcmpeq>:
 8000d6c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d6e:	f7ff ffc9 	bl	8000d04 <__cmpsf2>
 8000d72:	2800      	cmp	r0, #0
 8000d74:	bf48      	it	mi
 8000d76:	f110 0f00 	cmnmi.w	r0, #0
 8000d7a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d7c <__aeabi_fcmpeq>:
 8000d7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d80:	f7ff fff4 	bl	8000d6c <__aeabi_cfcmpeq>
 8000d84:	bf0c      	ite	eq
 8000d86:	2001      	moveq	r0, #1
 8000d88:	2000      	movne	r0, #0
 8000d8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d8e:	bf00      	nop

08000d90 <__aeabi_fcmplt>:
 8000d90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d94:	f7ff ffea 	bl	8000d6c <__aeabi_cfcmpeq>
 8000d98:	bf34      	ite	cc
 8000d9a:	2001      	movcc	r0, #1
 8000d9c:	2000      	movcs	r0, #0
 8000d9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000da2:	bf00      	nop

08000da4 <__aeabi_fcmple>:
 8000da4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000da8:	f7ff ffe0 	bl	8000d6c <__aeabi_cfcmpeq>
 8000dac:	bf94      	ite	ls
 8000dae:	2001      	movls	r0, #1
 8000db0:	2000      	movhi	r0, #0
 8000db2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000db6:	bf00      	nop

08000db8 <__aeabi_fcmpge>:
 8000db8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dbc:	f7ff ffd2 	bl	8000d64 <__aeabi_cfrcmple>
 8000dc0:	bf94      	ite	ls
 8000dc2:	2001      	movls	r0, #1
 8000dc4:	2000      	movhi	r0, #0
 8000dc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dca:	bf00      	nop

08000dcc <__aeabi_fcmpgt>:
 8000dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd0:	f7ff ffc8 	bl	8000d64 <__aeabi_cfrcmple>
 8000dd4:	bf34      	ite	cc
 8000dd6:	2001      	movcc	r0, #1
 8000dd8:	2000      	movcs	r0, #0
 8000dda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dde:	bf00      	nop

08000de0 <__aeabi_fcmpun>:
 8000de0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000de4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000de8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dec:	d102      	bne.n	8000df4 <__aeabi_fcmpun+0x14>
 8000dee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000df2:	d108      	bne.n	8000e06 <__aeabi_fcmpun+0x26>
 8000df4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000df8:	d102      	bne.n	8000e00 <__aeabi_fcmpun+0x20>
 8000dfa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000dfe:	d102      	bne.n	8000e06 <__aeabi_fcmpun+0x26>
 8000e00:	f04f 0000 	mov.w	r0, #0
 8000e04:	4770      	bx	lr
 8000e06:	f04f 0001 	mov.w	r0, #1
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_ldivmod>:
 8000e0c:	b97b      	cbnz	r3, 8000e2e <__aeabi_ldivmod+0x22>
 8000e0e:	b972      	cbnz	r2, 8000e2e <__aeabi_ldivmod+0x22>
 8000e10:	2900      	cmp	r1, #0
 8000e12:	bfbe      	ittt	lt
 8000e14:	2000      	movlt	r0, #0
 8000e16:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000e1a:	e006      	blt.n	8000e2a <__aeabi_ldivmod+0x1e>
 8000e1c:	bf08      	it	eq
 8000e1e:	2800      	cmpeq	r0, #0
 8000e20:	bf1c      	itt	ne
 8000e22:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000e26:	f04f 30ff 	movne.w	r0, #4294967295
 8000e2a:	f000 b9f9 	b.w	8001220 <__aeabi_idiv0>
 8000e2e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e32:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e36:	2900      	cmp	r1, #0
 8000e38:	db09      	blt.n	8000e4e <__aeabi_ldivmod+0x42>
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	db1a      	blt.n	8000e74 <__aeabi_ldivmod+0x68>
 8000e3e:	f000 f885 	bl	8000f4c <__udivmoddi4>
 8000e42:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e4a:	b004      	add	sp, #16
 8000e4c:	4770      	bx	lr
 8000e4e:	4240      	negs	r0, r0
 8000e50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	db1b      	blt.n	8000e90 <__aeabi_ldivmod+0x84>
 8000e58:	f000 f878 	bl	8000f4c <__udivmoddi4>
 8000e5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e64:	b004      	add	sp, #16
 8000e66:	4240      	negs	r0, r0
 8000e68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e6c:	4252      	negs	r2, r2
 8000e6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e72:	4770      	bx	lr
 8000e74:	4252      	negs	r2, r2
 8000e76:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e7a:	f000 f867 	bl	8000f4c <__udivmoddi4>
 8000e7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e86:	b004      	add	sp, #16
 8000e88:	4240      	negs	r0, r0
 8000e8a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e8e:	4770      	bx	lr
 8000e90:	4252      	negs	r2, r2
 8000e92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e96:	f000 f859 	bl	8000f4c <__udivmoddi4>
 8000e9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ea2:	b004      	add	sp, #16
 8000ea4:	4252      	negs	r2, r2
 8000ea6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_uldivmod>:
 8000eac:	b953      	cbnz	r3, 8000ec4 <__aeabi_uldivmod+0x18>
 8000eae:	b94a      	cbnz	r2, 8000ec4 <__aeabi_uldivmod+0x18>
 8000eb0:	2900      	cmp	r1, #0
 8000eb2:	bf08      	it	eq
 8000eb4:	2800      	cmpeq	r0, #0
 8000eb6:	bf1c      	itt	ne
 8000eb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000ebc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ec0:	f000 b9ae 	b.w	8001220 <__aeabi_idiv0>
 8000ec4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ec8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ecc:	f000 f83e 	bl	8000f4c <__udivmoddi4>
 8000ed0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ed4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ed8:	b004      	add	sp, #16
 8000eda:	4770      	bx	lr

08000edc <__aeabi_d2lz>:
 8000edc:	b538      	push	{r3, r4, r5, lr}
 8000ede:	4605      	mov	r5, r0
 8000ee0:	460c      	mov	r4, r1
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	4628      	mov	r0, r5
 8000ee8:	4621      	mov	r1, r4
 8000eea:	f7ff fc7d 	bl	80007e8 <__aeabi_dcmplt>
 8000eee:	b928      	cbnz	r0, 8000efc <__aeabi_d2lz+0x20>
 8000ef0:	4628      	mov	r0, r5
 8000ef2:	4621      	mov	r1, r4
 8000ef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ef8:	f000 b80a 	b.w	8000f10 <__aeabi_d2ulz>
 8000efc:	4628      	mov	r0, r5
 8000efe:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000f02:	f000 f805 	bl	8000f10 <__aeabi_d2ulz>
 8000f06:	4240      	negs	r0, r0
 8000f08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f0c:	bd38      	pop	{r3, r4, r5, pc}
 8000f0e:	bf00      	nop

08000f10 <__aeabi_d2ulz>:
 8000f10:	b5d0      	push	{r4, r6, r7, lr}
 8000f12:	2200      	movs	r2, #0
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <__aeabi_d2ulz+0x34>)
 8000f16:	4606      	mov	r6, r0
 8000f18:	460f      	mov	r7, r1
 8000f1a:	f7ff f91f 	bl	800015c <__aeabi_dmul>
 8000f1e:	f000 f981 	bl	8001224 <__aeabi_d2uiz>
 8000f22:	4604      	mov	r4, r0
 8000f24:	f7ff fb86 	bl	8000634 <__aeabi_ui2d>
 8000f28:	2200      	movs	r2, #0
 8000f2a:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <__aeabi_d2ulz+0x38>)
 8000f2c:	f7ff f916 	bl	800015c <__aeabi_dmul>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	4630      	mov	r0, r6
 8000f36:	4639      	mov	r1, r7
 8000f38:	f7ff fa3e 	bl	80003b8 <__aeabi_dsub>
 8000f3c:	f000 f972 	bl	8001224 <__aeabi_d2uiz>
 8000f40:	4621      	mov	r1, r4
 8000f42:	bdd0      	pop	{r4, r6, r7, pc}
 8000f44:	3df00000 	.word	0x3df00000
 8000f48:	41f00000 	.word	0x41f00000

08000f4c <__udivmoddi4>:
 8000f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f50:	9e08      	ldr	r6, [sp, #32]
 8000f52:	460d      	mov	r5, r1
 8000f54:	4604      	mov	r4, r0
 8000f56:	4688      	mov	r8, r1
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d14d      	bne.n	8000ff8 <__udivmoddi4+0xac>
 8000f5c:	428a      	cmp	r2, r1
 8000f5e:	4694      	mov	ip, r2
 8000f60:	d968      	bls.n	8001034 <__udivmoddi4+0xe8>
 8000f62:	fab2 f282 	clz	r2, r2
 8000f66:	b152      	cbz	r2, 8000f7e <__udivmoddi4+0x32>
 8000f68:	fa01 f302 	lsl.w	r3, r1, r2
 8000f6c:	f1c2 0120 	rsb	r1, r2, #32
 8000f70:	fa20 f101 	lsr.w	r1, r0, r1
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	ea41 0803 	orr.w	r8, r1, r3
 8000f7c:	4094      	lsls	r4, r2
 8000f7e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000f82:	fbb8 f7f1 	udiv	r7, r8, r1
 8000f86:	fa1f fe8c 	uxth.w	lr, ip
 8000f8a:	fb01 8817 	mls	r8, r1, r7, r8
 8000f8e:	fb07 f00e 	mul.w	r0, r7, lr
 8000f92:	0c23      	lsrs	r3, r4, #16
 8000f94:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f98:	4298      	cmp	r0, r3
 8000f9a:	d90a      	bls.n	8000fb2 <__udivmoddi4+0x66>
 8000f9c:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa0:	f107 35ff 	add.w	r5, r7, #4294967295
 8000fa4:	f080 811e 	bcs.w	80011e4 <__udivmoddi4+0x298>
 8000fa8:	4298      	cmp	r0, r3
 8000faa:	f240 811b 	bls.w	80011e4 <__udivmoddi4+0x298>
 8000fae:	3f02      	subs	r7, #2
 8000fb0:	4463      	add	r3, ip
 8000fb2:	1a1b      	subs	r3, r3, r0
 8000fb4:	fbb3 f0f1 	udiv	r0, r3, r1
 8000fb8:	fb01 3310 	mls	r3, r1, r0, r3
 8000fbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fc0:	b2a4      	uxth	r4, r4
 8000fc2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc6:	45a6      	cmp	lr, r4
 8000fc8:	d90a      	bls.n	8000fe0 <__udivmoddi4+0x94>
 8000fca:	eb1c 0404 	adds.w	r4, ip, r4
 8000fce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fd2:	f080 8109 	bcs.w	80011e8 <__udivmoddi4+0x29c>
 8000fd6:	45a6      	cmp	lr, r4
 8000fd8:	f240 8106 	bls.w	80011e8 <__udivmoddi4+0x29c>
 8000fdc:	4464      	add	r4, ip
 8000fde:	3802      	subs	r0, #2
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	eba4 040e 	sub.w	r4, r4, lr
 8000fe6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000fea:	b11e      	cbz	r6, 8000ff4 <__udivmoddi4+0xa8>
 8000fec:	2300      	movs	r3, #0
 8000fee:	40d4      	lsrs	r4, r2
 8000ff0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff8:	428b      	cmp	r3, r1
 8000ffa:	d908      	bls.n	800100e <__udivmoddi4+0xc2>
 8000ffc:	2e00      	cmp	r6, #0
 8000ffe:	f000 80ee 	beq.w	80011de <__udivmoddi4+0x292>
 8001002:	2100      	movs	r1, #0
 8001004:	e9c6 0500 	strd	r0, r5, [r6]
 8001008:	4608      	mov	r0, r1
 800100a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100e:	fab3 f183 	clz	r1, r3
 8001012:	2900      	cmp	r1, #0
 8001014:	d14a      	bne.n	80010ac <__udivmoddi4+0x160>
 8001016:	42ab      	cmp	r3, r5
 8001018:	d302      	bcc.n	8001020 <__udivmoddi4+0xd4>
 800101a:	4282      	cmp	r2, r0
 800101c:	f200 80fc 	bhi.w	8001218 <__udivmoddi4+0x2cc>
 8001020:	1a84      	subs	r4, r0, r2
 8001022:	eb65 0303 	sbc.w	r3, r5, r3
 8001026:	2001      	movs	r0, #1
 8001028:	4698      	mov	r8, r3
 800102a:	2e00      	cmp	r6, #0
 800102c:	d0e2      	beq.n	8000ff4 <__udivmoddi4+0xa8>
 800102e:	e9c6 4800 	strd	r4, r8, [r6]
 8001032:	e7df      	b.n	8000ff4 <__udivmoddi4+0xa8>
 8001034:	b902      	cbnz	r2, 8001038 <__udivmoddi4+0xec>
 8001036:	deff      	udf	#255	; 0xff
 8001038:	fab2 f282 	clz	r2, r2
 800103c:	2a00      	cmp	r2, #0
 800103e:	f040 8091 	bne.w	8001164 <__udivmoddi4+0x218>
 8001042:	eba1 000c 	sub.w	r0, r1, ip
 8001046:	2101      	movs	r1, #1
 8001048:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800104c:	fa1f fe8c 	uxth.w	lr, ip
 8001050:	fbb0 f3f7 	udiv	r3, r0, r7
 8001054:	fb07 0013 	mls	r0, r7, r3, r0
 8001058:	0c25      	lsrs	r5, r4, #16
 800105a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800105e:	fb0e f003 	mul.w	r0, lr, r3
 8001062:	42a8      	cmp	r0, r5
 8001064:	d908      	bls.n	8001078 <__udivmoddi4+0x12c>
 8001066:	eb1c 0505 	adds.w	r5, ip, r5
 800106a:	f103 38ff 	add.w	r8, r3, #4294967295
 800106e:	d202      	bcs.n	8001076 <__udivmoddi4+0x12a>
 8001070:	42a8      	cmp	r0, r5
 8001072:	f200 80ce 	bhi.w	8001212 <__udivmoddi4+0x2c6>
 8001076:	4643      	mov	r3, r8
 8001078:	1a2d      	subs	r5, r5, r0
 800107a:	fbb5 f0f7 	udiv	r0, r5, r7
 800107e:	fb07 5510 	mls	r5, r7, r0, r5
 8001082:	fb0e fe00 	mul.w	lr, lr, r0
 8001086:	b2a4      	uxth	r4, r4
 8001088:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800108c:	45a6      	cmp	lr, r4
 800108e:	d908      	bls.n	80010a2 <__udivmoddi4+0x156>
 8001090:	eb1c 0404 	adds.w	r4, ip, r4
 8001094:	f100 35ff 	add.w	r5, r0, #4294967295
 8001098:	d202      	bcs.n	80010a0 <__udivmoddi4+0x154>
 800109a:	45a6      	cmp	lr, r4
 800109c:	f200 80b6 	bhi.w	800120c <__udivmoddi4+0x2c0>
 80010a0:	4628      	mov	r0, r5
 80010a2:	eba4 040e 	sub.w	r4, r4, lr
 80010a6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80010aa:	e79e      	b.n	8000fea <__udivmoddi4+0x9e>
 80010ac:	f1c1 0720 	rsb	r7, r1, #32
 80010b0:	408b      	lsls	r3, r1
 80010b2:	fa22 fc07 	lsr.w	ip, r2, r7
 80010b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80010ba:	fa25 fa07 	lsr.w	sl, r5, r7
 80010be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80010c2:	fbba f8f9 	udiv	r8, sl, r9
 80010c6:	fa20 f307 	lsr.w	r3, r0, r7
 80010ca:	fb09 aa18 	mls	sl, r9, r8, sl
 80010ce:	408d      	lsls	r5, r1
 80010d0:	fa1f fe8c 	uxth.w	lr, ip
 80010d4:	431d      	orrs	r5, r3
 80010d6:	fa00 f301 	lsl.w	r3, r0, r1
 80010da:	fb08 f00e 	mul.w	r0, r8, lr
 80010de:	0c2c      	lsrs	r4, r5, #16
 80010e0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80010e4:	42a0      	cmp	r0, r4
 80010e6:	fa02 f201 	lsl.w	r2, r2, r1
 80010ea:	d90b      	bls.n	8001104 <__udivmoddi4+0x1b8>
 80010ec:	eb1c 0404 	adds.w	r4, ip, r4
 80010f0:	f108 3aff 	add.w	sl, r8, #4294967295
 80010f4:	f080 8088 	bcs.w	8001208 <__udivmoddi4+0x2bc>
 80010f8:	42a0      	cmp	r0, r4
 80010fa:	f240 8085 	bls.w	8001208 <__udivmoddi4+0x2bc>
 80010fe:	f1a8 0802 	sub.w	r8, r8, #2
 8001102:	4464      	add	r4, ip
 8001104:	1a24      	subs	r4, r4, r0
 8001106:	fbb4 f0f9 	udiv	r0, r4, r9
 800110a:	fb09 4410 	mls	r4, r9, r0, r4
 800110e:	fb00 fe0e 	mul.w	lr, r0, lr
 8001112:	b2ad      	uxth	r5, r5
 8001114:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001118:	45a6      	cmp	lr, r4
 800111a:	d908      	bls.n	800112e <__udivmoddi4+0x1e2>
 800111c:	eb1c 0404 	adds.w	r4, ip, r4
 8001120:	f100 35ff 	add.w	r5, r0, #4294967295
 8001124:	d26c      	bcs.n	8001200 <__udivmoddi4+0x2b4>
 8001126:	45a6      	cmp	lr, r4
 8001128:	d96a      	bls.n	8001200 <__udivmoddi4+0x2b4>
 800112a:	3802      	subs	r0, #2
 800112c:	4464      	add	r4, ip
 800112e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001132:	fba0 9502 	umull	r9, r5, r0, r2
 8001136:	eba4 040e 	sub.w	r4, r4, lr
 800113a:	42ac      	cmp	r4, r5
 800113c:	46c8      	mov	r8, r9
 800113e:	46ae      	mov	lr, r5
 8001140:	d356      	bcc.n	80011f0 <__udivmoddi4+0x2a4>
 8001142:	d053      	beq.n	80011ec <__udivmoddi4+0x2a0>
 8001144:	2e00      	cmp	r6, #0
 8001146:	d069      	beq.n	800121c <__udivmoddi4+0x2d0>
 8001148:	ebb3 0208 	subs.w	r2, r3, r8
 800114c:	eb64 040e 	sbc.w	r4, r4, lr
 8001150:	fa22 f301 	lsr.w	r3, r2, r1
 8001154:	fa04 f707 	lsl.w	r7, r4, r7
 8001158:	431f      	orrs	r7, r3
 800115a:	40cc      	lsrs	r4, r1
 800115c:	e9c6 7400 	strd	r7, r4, [r6]
 8001160:	2100      	movs	r1, #0
 8001162:	e747      	b.n	8000ff4 <__udivmoddi4+0xa8>
 8001164:	fa0c fc02 	lsl.w	ip, ip, r2
 8001168:	f1c2 0120 	rsb	r1, r2, #32
 800116c:	fa25 f301 	lsr.w	r3, r5, r1
 8001170:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001174:	fa20 f101 	lsr.w	r1, r0, r1
 8001178:	4095      	lsls	r5, r2
 800117a:	430d      	orrs	r5, r1
 800117c:	fbb3 f1f7 	udiv	r1, r3, r7
 8001180:	fb07 3311 	mls	r3, r7, r1, r3
 8001184:	fa1f fe8c 	uxth.w	lr, ip
 8001188:	0c28      	lsrs	r0, r5, #16
 800118a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800118e:	fb01 f30e 	mul.w	r3, r1, lr
 8001192:	4283      	cmp	r3, r0
 8001194:	fa04 f402 	lsl.w	r4, r4, r2
 8001198:	d908      	bls.n	80011ac <__udivmoddi4+0x260>
 800119a:	eb1c 0000 	adds.w	r0, ip, r0
 800119e:	f101 38ff 	add.w	r8, r1, #4294967295
 80011a2:	d22f      	bcs.n	8001204 <__udivmoddi4+0x2b8>
 80011a4:	4283      	cmp	r3, r0
 80011a6:	d92d      	bls.n	8001204 <__udivmoddi4+0x2b8>
 80011a8:	3902      	subs	r1, #2
 80011aa:	4460      	add	r0, ip
 80011ac:	1ac0      	subs	r0, r0, r3
 80011ae:	fbb0 f3f7 	udiv	r3, r0, r7
 80011b2:	fb07 0013 	mls	r0, r7, r3, r0
 80011b6:	b2ad      	uxth	r5, r5
 80011b8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80011bc:	fb03 f00e 	mul.w	r0, r3, lr
 80011c0:	42a8      	cmp	r0, r5
 80011c2:	d908      	bls.n	80011d6 <__udivmoddi4+0x28a>
 80011c4:	eb1c 0505 	adds.w	r5, ip, r5
 80011c8:	f103 38ff 	add.w	r8, r3, #4294967295
 80011cc:	d216      	bcs.n	80011fc <__udivmoddi4+0x2b0>
 80011ce:	42a8      	cmp	r0, r5
 80011d0:	d914      	bls.n	80011fc <__udivmoddi4+0x2b0>
 80011d2:	3b02      	subs	r3, #2
 80011d4:	4465      	add	r5, ip
 80011d6:	1a28      	subs	r0, r5, r0
 80011d8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80011dc:	e738      	b.n	8001050 <__udivmoddi4+0x104>
 80011de:	4631      	mov	r1, r6
 80011e0:	4630      	mov	r0, r6
 80011e2:	e707      	b.n	8000ff4 <__udivmoddi4+0xa8>
 80011e4:	462f      	mov	r7, r5
 80011e6:	e6e4      	b.n	8000fb2 <__udivmoddi4+0x66>
 80011e8:	4618      	mov	r0, r3
 80011ea:	e6f9      	b.n	8000fe0 <__udivmoddi4+0x94>
 80011ec:	454b      	cmp	r3, r9
 80011ee:	d2a9      	bcs.n	8001144 <__udivmoddi4+0x1f8>
 80011f0:	ebb9 0802 	subs.w	r8, r9, r2
 80011f4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80011f8:	3801      	subs	r0, #1
 80011fa:	e7a3      	b.n	8001144 <__udivmoddi4+0x1f8>
 80011fc:	4643      	mov	r3, r8
 80011fe:	e7ea      	b.n	80011d6 <__udivmoddi4+0x28a>
 8001200:	4628      	mov	r0, r5
 8001202:	e794      	b.n	800112e <__udivmoddi4+0x1e2>
 8001204:	4641      	mov	r1, r8
 8001206:	e7d1      	b.n	80011ac <__udivmoddi4+0x260>
 8001208:	46d0      	mov	r8, sl
 800120a:	e77b      	b.n	8001104 <__udivmoddi4+0x1b8>
 800120c:	4464      	add	r4, ip
 800120e:	3802      	subs	r0, #2
 8001210:	e747      	b.n	80010a2 <__udivmoddi4+0x156>
 8001212:	3b02      	subs	r3, #2
 8001214:	4465      	add	r5, ip
 8001216:	e72f      	b.n	8001078 <__udivmoddi4+0x12c>
 8001218:	4608      	mov	r0, r1
 800121a:	e706      	b.n	800102a <__udivmoddi4+0xde>
 800121c:	4631      	mov	r1, r6
 800121e:	e6e9      	b.n	8000ff4 <__udivmoddi4+0xa8>

08001220 <__aeabi_idiv0>:
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop

08001224 <__aeabi_d2uiz>:
 8001224:	004a      	lsls	r2, r1, #1
 8001226:	d211      	bcs.n	800124c <__aeabi_d2uiz+0x28>
 8001228:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800122c:	d211      	bcs.n	8001252 <__aeabi_d2uiz+0x2e>
 800122e:	d50d      	bpl.n	800124c <__aeabi_d2uiz+0x28>
 8001230:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001234:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001238:	d40e      	bmi.n	8001258 <__aeabi_d2uiz+0x34>
 800123a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800123e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001242:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001246:	fa23 f002 	lsr.w	r0, r3, r2
 800124a:	4770      	bx	lr
 800124c:	f04f 0000 	mov.w	r0, #0
 8001250:	4770      	bx	lr
 8001252:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001256:	d102      	bne.n	800125e <__aeabi_d2uiz+0x3a>
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	4770      	bx	lr
 800125e:	f04f 0000 	mov.w	r0, #0
 8001262:	4770      	bx	lr

08001264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001268:	f000 faa4 	bl	80017b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800126c:	f000 f809 	bl	8001282 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001270:	f000 f876 	bl	8001360 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001274:	f000 f84a 	bl	800130c <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  init();
 8001278:	f003 fa92 	bl	80047a0 <init>
  while (1)
  {
	  loop();
 800127c:	f003 faba 	bl	80047f4 <loop>
 8001280:	e7fc      	b.n	800127c <main+0x18>

08001282 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b090      	sub	sp, #64	; 0x40
 8001286:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001288:	f107 0318 	add.w	r3, r7, #24
 800128c:	2228      	movs	r2, #40	; 0x28
 800128e:	2100      	movs	r1, #0
 8001290:	4618      	mov	r0, r3
 8001292:	f003 faef 	bl	8004874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012a4:	2301      	movs	r3, #1
 80012a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ac:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b2:	2301      	movs	r3, #1
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b6:	2302      	movs	r3, #2
 80012b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012c0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c6:	f107 0318 	add.w	r3, r7, #24
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 fd54 	bl	8001d78 <HAL_RCC_OscConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012d6:	f000 f8a5 	bl	8001424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012da:	230f      	movs	r3, #15
 80012dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012de:	2302      	movs	r3, #2
 80012e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	2102      	movs	r1, #2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 ffc1 	bl	800227c <HAL_RCC_ClockConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001300:	f000 f890 	bl	8001424 <Error_Handler>
  }
}
 8001304:	bf00      	nop
 8001306:	3740      	adds	r7, #64	; 0x40
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 8001312:	4a12      	ldr	r2, [pc, #72]	; (800135c <MX_USART1_UART_Init+0x50>)
 8001314:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 8001318:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800131c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 8001332:	220c      	movs	r2, #12
 8001334:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 8001344:	f001 f932 	bl	80025ac <HAL_HalfDuplex_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800134e:	f000 f869 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	2000008c 	.word	0x2000008c
 800135c:	40013800 	.word	0x40013800

08001360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001366:	f107 0310 	add.w	r3, r7, #16
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001374:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <MX_GPIO_Init+0x90>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <MX_GPIO_Init+0x90>)
 800137a:	f043 0310 	orr.w	r3, r3, #16
 800137e:	6193      	str	r3, [r2, #24]
 8001380:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <MX_GPIO_Init+0x90>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	f003 0310 	and.w	r3, r3, #16
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800138c:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <MX_GPIO_Init+0x90>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <MX_GPIO_Init+0x90>)
 8001392:	f043 0320 	orr.w	r3, r3, #32
 8001396:	6193      	str	r3, [r2, #24]
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <MX_GPIO_Init+0x90>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f003 0320 	and.w	r3, r3, #32
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <MX_GPIO_Init+0x90>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	4a11      	ldr	r2, [pc, #68]	; (80013f0 <MX_GPIO_Init+0x90>)
 80013aa:	f043 0304 	orr.w	r3, r3, #4
 80013ae:	6193      	str	r3, [r2, #24]
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <MX_GPIO_Init+0x90>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c2:	480c      	ldr	r0, [pc, #48]	; (80013f4 <MX_GPIO_Init+0x94>)
 80013c4:	f000 fcc0 	bl	8001d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ce:	2301      	movs	r3, #1
 80013d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2302      	movs	r3, #2
 80013d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013da:	f107 0310 	add.w	r3, r7, #16
 80013de:	4619      	mov	r1, r3
 80013e0:	4804      	ldr	r0, [pc, #16]	; (80013f4 <MX_GPIO_Init+0x94>)
 80013e2:	f000 fb2d 	bl	8001a40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013e6:	bf00      	nop
 80013e8:	3720      	adds	r7, #32
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40011000 	.word	0x40011000

080013f8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int fd,char*data,int len){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)data, len, HAL_MAX_DELAY);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	b29a      	uxth	r2, r3
 8001408:	f04f 33ff 	mov.w	r3, #4294967295
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	4804      	ldr	r0, [pc, #16]	; (8001420 <_write+0x28>)
 8001410:	f001 f921 	bl	8002656 <HAL_UART_Transmit>
	return len;
 8001414:	687b      	ldr	r3, [r7, #4]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	2000008c 	.word	0x2000008c

08001424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001428:	b672      	cpsid	i
}
 800142a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800142c:	e7fe      	b.n	800142c <Error_Handler+0x8>
	...

08001430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <HAL_MspInit+0x40>)
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <HAL_MspInit+0x40>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6193      	str	r3, [r2, #24]
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <HAL_MspInit+0x40>)
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	4b08      	ldr	r3, [pc, #32]	; (8001470 <HAL_MspInit+0x40>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	4a07      	ldr	r2, [pc, #28]	; (8001470 <HAL_MspInit+0x40>)
 8001454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001458:	61d3      	str	r3, [r2, #28]
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_MspInit+0x40>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	40021000 	.word	0x40021000

08001474 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a16      	ldr	r2, [pc, #88]	; (80014e8 <HAL_UART_MspInit+0x74>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d124      	bne.n	80014de <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_UART_MspInit+0x78>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	4a14      	ldr	r2, [pc, #80]	; (80014ec <HAL_UART_MspInit+0x78>)
 800149a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800149e:	6193      	str	r3, [r2, #24]
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_UART_MspInit+0x78>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <HAL_UART_MspInit+0x78>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <HAL_UART_MspInit+0x78>)
 80014b2:	f043 0304 	orr.w	r3, r3, #4
 80014b6:	6193      	str	r3, [r2, #24]
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <HAL_UART_MspInit+0x78>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ca:	2312      	movs	r3, #18
 80014cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ce:	2303      	movs	r3, #3
 80014d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 0310 	add.w	r3, r7, #16
 80014d6:	4619      	mov	r1, r3
 80014d8:	4805      	ldr	r0, [pc, #20]	; (80014f0 <HAL_UART_MspInit+0x7c>)
 80014da:	f000 fab1 	bl	8001a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014de:	bf00      	nop
 80014e0:	3720      	adds	r7, #32
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40013800 	.word	0x40013800
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40010800 	.word	0x40010800

080014f4 <dumpExceptionRegister>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void dumpExceptionRegister(uint32_t *pSP, uint32_t offset) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
	printf(" MSP = %p\n", pSP + offset);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	4619      	mov	r1, r3
 8001508:	482a      	ldr	r0, [pc, #168]	; (80015b4 <dumpExceptionRegister+0xc0>)
 800150a:	f003 fa97 	bl	8004a3c <iprintf>
	printf("  R0 = 0x%lx\n", pSP[0 + offset]);  // May have argument of function
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	4827      	ldr	r0, [pc, #156]	; (80015b8 <dumpExceptionRegister+0xc4>)
 800151c:	f003 fa8e 	bl	8004a3c <iprintf>
	printf("  R1 = 0x%lx\n", pSP[1 + offset]);  // May have argument of function
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	3301      	adds	r3, #1
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4619      	mov	r1, r3
 800152e:	4823      	ldr	r0, [pc, #140]	; (80015bc <dumpExceptionRegister+0xc8>)
 8001530:	f003 fa84 	bl	8004a3c <iprintf>
	printf("  R2 = 0x%lx\n", pSP[2 + offset]);  // May have argument of function
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	3302      	adds	r3, #2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4619      	mov	r1, r3
 8001542:	481f      	ldr	r0, [pc, #124]	; (80015c0 <dumpExceptionRegister+0xcc>)
 8001544:	f003 fa7a 	bl	8004a3c <iprintf>
	printf("  R3 = 0x%lx\n", pSP[3 + offset]);  // May have argument of function
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	3303      	adds	r3, #3
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4619      	mov	r1, r3
 8001556:	481b      	ldr	r0, [pc, #108]	; (80015c4 <dumpExceptionRegister+0xd0>)
 8001558:	f003 fa70 	bl	8004a3c <iprintf>
	printf(" R12 = 0x%lx\n", pSP[4 + offset]); // IP holds an intermediate value of a calculation
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	3304      	adds	r3, #4
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	4817      	ldr	r0, [pc, #92]	; (80015c8 <dumpExceptionRegister+0xd4>)
 800156c:	f003 fa66 	bl	8004a3c <iprintf>
	printf("  LR = 0x%lx\n", pSP[5 + offset]); // Address of the next instruction before the exception
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	3305      	adds	r3, #5
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	4813      	ldr	r0, [pc, #76]	; (80015cc <dumpExceptionRegister+0xd8>)
 8001580:	f003 fa5c 	bl	8004a3c <iprintf>
	printf("  PC = 0x%lx\n", pSP[6 + offset]); // CPU was executing the instruction at PC
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	3306      	adds	r3, #6
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	480f      	ldr	r0, [pc, #60]	; (80015d0 <dumpExceptionRegister+0xdc>)
 8001594:	f003 fa52 	bl	8004a3c <iprintf>
	printf("xPSR = 0x%lx\n", pSP[7 + offset]); // Status of system before execution at PC completes
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	3307      	adds	r3, #7
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	480b      	ldr	r0, [pc, #44]	; (80015d4 <dumpExceptionRegister+0xe0>)
 80015a8:	f003 fa48 	bl	8004a3c <iprintf>
}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	080061a8 	.word	0x080061a8
 80015b8:	080061b4 	.word	0x080061b4
 80015bc:	080061c4 	.word	0x080061c4
 80015c0:	080061d4 	.word	0x080061d4
 80015c4:	080061e4 	.word	0x080061e4
 80015c8:	080061f4 	.word	0x080061f4
 80015cc:	08006204 	.word	0x08006204
 80015d0:	08006214 	.word	0x08006214
 80015d4:	08006224 	.word	0x08006224

080015d8 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80015dc:	e7fe      	b.n	80015dc <NMI_Handler+0x4>
	...

080015e0 <HardFault_Handler>:
/**
 * @brief This function handles Hard fault interrupt.
 */
__attribute__((naked)) void HardFault_Handler(void) {
	/* USER CODE BEGIN HardFault_IRQn 0 */
	printf("Hard fault\n");
 80015e0:	4809      	ldr	r0, [pc, #36]	; (8001608 <HardFault_Handler+0x28>)
 80015e2:	f003 fab1 	bl	8004b48 <puts>

	uint32_t *pSP;
	__asm volatile("TST LR, 4");
 80015e6:	f01e 0f04 	tst.w	lr, #4
	__asm volatile("ITE EQ");
 80015ea:	bf0c      	ite	eq
	__asm volatile("MRSEQ R0, MSP");
 80015ec:	f3ef 8008 	mrseq	r0, MSP
	__asm volatile("MRSNE R0, PSP");
 80015f0:	f3ef 8009 	mrsne	r0, PSP
	__asm volatile("MRS R0, MSP");
 80015f4:	f3ef 8008 	mrs	r0, MSP
	__asm volatile("MOV %0,R0":"=r"(pSP));
 80015f8:	4603      	mov	r3, r0
 80015fa:	461c      	mov	r4, r3
	dumpExceptionRegister(pSP, 4);
 80015fc:	2104      	movs	r1, #4
 80015fe:	4620      	mov	r0, r4
 8001600:	f7ff ff78 	bl	80014f4 <dumpExceptionRegister>

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8001604:	e7fe      	b.n	8001604 <HardFault_Handler+0x24>
 8001606:	bf00      	nop
 8001608:	08006234 	.word	0x08006234

0800160c <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8001610:	e7fe      	b.n	8001610 <MemManage_Handler+0x4>

08001612 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8001616:	e7fe      	b.n	8001616 <BusFault_Handler+0x4>

08001618 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 800161c:	e7fe      	b.n	800161c <UsageFault_Handler+0x4>

0800161e <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr

0800162a <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr

08001636 <PendSV_Handler>:
 */
__attribute__((naked)) void PendSV_Handler(void) {
	/* USER CODE BEGIN PendSV_IRQn 0 */

	/*save LR back to main, must do this firstly*/
	__asm volatile("PUSH {LR}");
 8001636:	b500      	push	{lr}

	task_PendSVHandler();
 8001638:	f002 fd0c 	bl	8004054 <task_PendSVHandler>

	/* exit */
	__asm volatile("POP {LR}");
 800163c:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 8001640:	4770      	bx	lr
	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8001642:	bf00      	nop

08001644 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */
	task_SysTickHandler();
 8001648:	f002 fcee 	bl	8004028 <task_SysTickHandler>
	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800164c:	f000 f8f8 	bl	8001840 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}

08001654 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	e00a      	b.n	800167c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001666:	f3af 8000 	nop.w
 800166a:	4601      	mov	r1, r0
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	60ba      	str	r2, [r7, #8]
 8001672:	b2ca      	uxtb	r2, r1
 8001674:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	3301      	adds	r3, #1
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	429a      	cmp	r2, r3
 8001682:	dbf0      	blt.n	8001666 <_read+0x12>
  }

  return len;
 8001684:	687b      	ldr	r3, [r7, #4]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <_close>:
  }
  return len;
}

int _close(int file)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
}
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016b4:	605a      	str	r2, [r3, #4]
  return 0;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <_isatty>:

int _isatty(int file)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016ca:	2301      	movs	r3, #1
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr

080016d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b085      	sub	sp, #20
 80016da:	af00      	add	r7, sp, #0
 80016dc:	60f8      	str	r0, [r7, #12]
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr
	...

080016f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f8:	4a14      	ldr	r2, [pc, #80]	; (800174c <_sbrk+0x5c>)
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <_sbrk+0x60>)
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <_sbrk+0x64>)
 800170e:	4a12      	ldr	r2, [pc, #72]	; (8001758 <_sbrk+0x68>)
 8001710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <_sbrk+0x64>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	429a      	cmp	r2, r3
 800171e:	d207      	bcs.n	8001730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001720:	f003 f86e 	bl	8004800 <__errno>
 8001724:	4603      	mov	r3, r0
 8001726:	220c      	movs	r2, #12
 8001728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
 800172e:	e009      	b.n	8001744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001736:	4b07      	ldr	r3, [pc, #28]	; (8001754 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	4a05      	ldr	r2, [pc, #20]	; (8001754 <_sbrk+0x64>)
 8001740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001742:	68fb      	ldr	r3, [r7, #12]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20005000 	.word	0x20005000
 8001750:	00000400 	.word	0x00000400
 8001754:	200000d0 	.word	0x200000d0
 8001758:	20000578 	.word	0x20000578

0800175c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001768:	480c      	ldr	r0, [pc, #48]	; (800179c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800176a:	490d      	ldr	r1, [pc, #52]	; (80017a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800176c:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001770:	e002      	b.n	8001778 <LoopCopyDataInit>

08001772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001776:	3304      	adds	r3, #4

08001778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800177a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800177c:	d3f9      	bcc.n	8001772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177e:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001780:	4c0a      	ldr	r4, [pc, #40]	; (80017ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001784:	e001      	b.n	800178a <LoopFillZerobss>

08001786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001788:	3204      	adds	r2, #4

0800178a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800178a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800178c:	d3fb      	bcc.n	8001786 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800178e:	f7ff ffe5 	bl	800175c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001792:	f003 f83b 	bl	800480c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001796:	f7ff fd65 	bl	8001264 <main>
  bx lr
 800179a:	4770      	bx	lr
  ldr r0, =_sdata
 800179c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80017a4:	08006818 	.word	0x08006818
  ldr r2, =_sbss
 80017a8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80017ac:	20000578 	.word	0x20000578

080017b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017b0:	e7fe      	b.n	80017b0 <ADC1_2_IRQHandler>
	...

080017b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <HAL_Init+0x28>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a07      	ldr	r2, [pc, #28]	; (80017dc <HAL_Init+0x28>)
 80017be:	f043 0310 	orr.w	r3, r3, #16
 80017c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c4:	2003      	movs	r0, #3
 80017c6:	f000 f907 	bl	80019d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ca:	2000      	movs	r0, #0
 80017cc:	f000 f808 	bl	80017e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017d0:	f7ff fe2e 	bl	8001430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40022000 	.word	0x40022000

080017e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_InitTick+0x54>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_InitTick+0x58>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4619      	mov	r1, r3
 80017f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f911 	bl	8001a26 <HAL_SYSTICK_Config>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e00e      	b.n	800182c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b0f      	cmp	r3, #15
 8001812:	d80a      	bhi.n	800182a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001814:	2200      	movs	r2, #0
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	f04f 30ff 	mov.w	r0, #4294967295
 800181c:	f000 f8e7 	bl	80019ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001820:	4a06      	ldr	r2, [pc, #24]	; (800183c <HAL_InitTick+0x5c>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	e000      	b.n	800182c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
}
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000000 	.word	0x20000000
 8001838:	20000008 	.word	0x20000008
 800183c:	20000004 	.word	0x20000004

08001840 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <HAL_IncTick+0x1c>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	4b05      	ldr	r3, [pc, #20]	; (8001860 <HAL_IncTick+0x20>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4413      	add	r3, r2
 8001850:	4a03      	ldr	r2, [pc, #12]	; (8001860 <HAL_IncTick+0x20>)
 8001852:	6013      	str	r3, [r2, #0]
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	20000008 	.word	0x20000008
 8001860:	200000d4 	.word	0x200000d4

08001864 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return uwTick;
 8001868:	4b02      	ldr	r3, [pc, #8]	; (8001874 <HAL_GetTick+0x10>)
 800186a:	681b      	ldr	r3, [r3, #0]
}
 800186c:	4618      	mov	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr
 8001874:	200000d4 	.word	0x200000d4

08001878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001894:	4013      	ands	r3, r2
 8001896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018aa:	4a04      	ldr	r2, [pc, #16]	; (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	60d3      	str	r3, [r2, #12]
}
 80018b0:	bf00      	nop
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <__NVIC_GetPriorityGrouping+0x18>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	f003 0307 	and.w	r3, r3, #7
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	6039      	str	r1, [r7, #0]
 80018e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	db0a      	blt.n	8001906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	490c      	ldr	r1, [pc, #48]	; (8001928 <__NVIC_SetPriority+0x4c>)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	0112      	lsls	r2, r2, #4
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	440b      	add	r3, r1
 8001900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001904:	e00a      	b.n	800191c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4908      	ldr	r1, [pc, #32]	; (800192c <__NVIC_SetPriority+0x50>)
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	3b04      	subs	r3, #4
 8001914:	0112      	lsls	r2, r2, #4
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	440b      	add	r3, r1
 800191a:	761a      	strb	r2, [r3, #24]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000e100 	.word	0xe000e100
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001930:	b480      	push	{r7}
 8001932:	b089      	sub	sp, #36	; 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f1c3 0307 	rsb	r3, r3, #7
 800194a:	2b04      	cmp	r3, #4
 800194c:	bf28      	it	cs
 800194e:	2304      	movcs	r3, #4
 8001950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3304      	adds	r3, #4
 8001956:	2b06      	cmp	r3, #6
 8001958:	d902      	bls.n	8001960 <NVIC_EncodePriority+0x30>
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3b03      	subs	r3, #3
 800195e:	e000      	b.n	8001962 <NVIC_EncodePriority+0x32>
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	f04f 32ff 	mov.w	r2, #4294967295
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43da      	mvns	r2, r3
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	401a      	ands	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001978:	f04f 31ff 	mov.w	r1, #4294967295
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	fa01 f303 	lsl.w	r3, r1, r3
 8001982:	43d9      	mvns	r1, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	4313      	orrs	r3, r2
         );
}
 800198a:	4618      	mov	r0, r3
 800198c:	3724      	adds	r7, #36	; 0x24
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3b01      	subs	r3, #1
 80019a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a4:	d301      	bcc.n	80019aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00f      	b.n	80019ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019aa:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <SysTick_Config+0x40>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b2:	210f      	movs	r1, #15
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	f7ff ff90 	bl	80018dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019bc:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <SysTick_Config+0x40>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c2:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <SysTick_Config+0x40>)
 80019c4:	2207      	movs	r2, #7
 80019c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	e000e010 	.word	0xe000e010

080019d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ff49 	bl	8001878 <__NVIC_SetPriorityGrouping>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a00:	f7ff ff5e 	bl	80018c0 <__NVIC_GetPriorityGrouping>
 8001a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	6978      	ldr	r0, [r7, #20]
 8001a0c:	f7ff ff90 	bl	8001930 <NVIC_EncodePriority>
 8001a10:	4602      	mov	r2, r0
 8001a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff5f 	bl	80018dc <__NVIC_SetPriority>
}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff ffb0 	bl	8001994 <SysTick_Config>
 8001a34:	4603      	mov	r3, r0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b08b      	sub	sp, #44	; 0x2c
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a52:	e169      	b.n	8001d28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a54:	2201      	movs	r2, #1
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	69fa      	ldr	r2, [r7, #28]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	f040 8158 	bne.w	8001d22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	4a9a      	ldr	r2, [pc, #616]	; (8001ce0 <HAL_GPIO_Init+0x2a0>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d05e      	beq.n	8001b3a <HAL_GPIO_Init+0xfa>
 8001a7c:	4a98      	ldr	r2, [pc, #608]	; (8001ce0 <HAL_GPIO_Init+0x2a0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d875      	bhi.n	8001b6e <HAL_GPIO_Init+0x12e>
 8001a82:	4a98      	ldr	r2, [pc, #608]	; (8001ce4 <HAL_GPIO_Init+0x2a4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d058      	beq.n	8001b3a <HAL_GPIO_Init+0xfa>
 8001a88:	4a96      	ldr	r2, [pc, #600]	; (8001ce4 <HAL_GPIO_Init+0x2a4>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d86f      	bhi.n	8001b6e <HAL_GPIO_Init+0x12e>
 8001a8e:	4a96      	ldr	r2, [pc, #600]	; (8001ce8 <HAL_GPIO_Init+0x2a8>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d052      	beq.n	8001b3a <HAL_GPIO_Init+0xfa>
 8001a94:	4a94      	ldr	r2, [pc, #592]	; (8001ce8 <HAL_GPIO_Init+0x2a8>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d869      	bhi.n	8001b6e <HAL_GPIO_Init+0x12e>
 8001a9a:	4a94      	ldr	r2, [pc, #592]	; (8001cec <HAL_GPIO_Init+0x2ac>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d04c      	beq.n	8001b3a <HAL_GPIO_Init+0xfa>
 8001aa0:	4a92      	ldr	r2, [pc, #584]	; (8001cec <HAL_GPIO_Init+0x2ac>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d863      	bhi.n	8001b6e <HAL_GPIO_Init+0x12e>
 8001aa6:	4a92      	ldr	r2, [pc, #584]	; (8001cf0 <HAL_GPIO_Init+0x2b0>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d046      	beq.n	8001b3a <HAL_GPIO_Init+0xfa>
 8001aac:	4a90      	ldr	r2, [pc, #576]	; (8001cf0 <HAL_GPIO_Init+0x2b0>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d85d      	bhi.n	8001b6e <HAL_GPIO_Init+0x12e>
 8001ab2:	2b12      	cmp	r3, #18
 8001ab4:	d82a      	bhi.n	8001b0c <HAL_GPIO_Init+0xcc>
 8001ab6:	2b12      	cmp	r3, #18
 8001ab8:	d859      	bhi.n	8001b6e <HAL_GPIO_Init+0x12e>
 8001aba:	a201      	add	r2, pc, #4	; (adr r2, 8001ac0 <HAL_GPIO_Init+0x80>)
 8001abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac0:	08001b3b 	.word	0x08001b3b
 8001ac4:	08001b15 	.word	0x08001b15
 8001ac8:	08001b27 	.word	0x08001b27
 8001acc:	08001b69 	.word	0x08001b69
 8001ad0:	08001b6f 	.word	0x08001b6f
 8001ad4:	08001b6f 	.word	0x08001b6f
 8001ad8:	08001b6f 	.word	0x08001b6f
 8001adc:	08001b6f 	.word	0x08001b6f
 8001ae0:	08001b6f 	.word	0x08001b6f
 8001ae4:	08001b6f 	.word	0x08001b6f
 8001ae8:	08001b6f 	.word	0x08001b6f
 8001aec:	08001b6f 	.word	0x08001b6f
 8001af0:	08001b6f 	.word	0x08001b6f
 8001af4:	08001b6f 	.word	0x08001b6f
 8001af8:	08001b6f 	.word	0x08001b6f
 8001afc:	08001b6f 	.word	0x08001b6f
 8001b00:	08001b6f 	.word	0x08001b6f
 8001b04:	08001b1d 	.word	0x08001b1d
 8001b08:	08001b31 	.word	0x08001b31
 8001b0c:	4a79      	ldr	r2, [pc, #484]	; (8001cf4 <HAL_GPIO_Init+0x2b4>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d013      	beq.n	8001b3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b12:	e02c      	b.n	8001b6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	623b      	str	r3, [r7, #32]
          break;
 8001b1a:	e029      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	3304      	adds	r3, #4
 8001b22:	623b      	str	r3, [r7, #32]
          break;
 8001b24:	e024      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	3308      	adds	r3, #8
 8001b2c:	623b      	str	r3, [r7, #32]
          break;
 8001b2e:	e01f      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	330c      	adds	r3, #12
 8001b36:	623b      	str	r3, [r7, #32]
          break;
 8001b38:	e01a      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d102      	bne.n	8001b48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b42:	2304      	movs	r3, #4
 8001b44:	623b      	str	r3, [r7, #32]
          break;
 8001b46:	e013      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d105      	bne.n	8001b5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b50:	2308      	movs	r3, #8
 8001b52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	611a      	str	r2, [r3, #16]
          break;
 8001b5a:	e009      	b.n	8001b70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b5c:	2308      	movs	r3, #8
 8001b5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69fa      	ldr	r2, [r7, #28]
 8001b64:	615a      	str	r2, [r3, #20]
          break;
 8001b66:	e003      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	623b      	str	r3, [r7, #32]
          break;
 8001b6c:	e000      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          break;
 8001b6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	2bff      	cmp	r3, #255	; 0xff
 8001b74:	d801      	bhi.n	8001b7a <HAL_GPIO_Init+0x13a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	e001      	b.n	8001b7e <HAL_GPIO_Init+0x13e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	2bff      	cmp	r3, #255	; 0xff
 8001b84:	d802      	bhi.n	8001b8c <HAL_GPIO_Init+0x14c>
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	e002      	b.n	8001b92 <HAL_GPIO_Init+0x152>
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	3b08      	subs	r3, #8
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	210f      	movs	r1, #15
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	6a39      	ldr	r1, [r7, #32]
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bac:	431a      	orrs	r2, r3
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 80b1 	beq.w	8001d22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bc0:	4b4d      	ldr	r3, [pc, #308]	; (8001cf8 <HAL_GPIO_Init+0x2b8>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	4a4c      	ldr	r2, [pc, #304]	; (8001cf8 <HAL_GPIO_Init+0x2b8>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6193      	str	r3, [r2, #24]
 8001bcc:	4b4a      	ldr	r3, [pc, #296]	; (8001cf8 <HAL_GPIO_Init+0x2b8>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bd8:	4a48      	ldr	r2, [pc, #288]	; (8001cfc <HAL_GPIO_Init+0x2bc>)
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	089b      	lsrs	r3, r3, #2
 8001bde:	3302      	adds	r3, #2
 8001be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	220f      	movs	r2, #15
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a40      	ldr	r2, [pc, #256]	; (8001d00 <HAL_GPIO_Init+0x2c0>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d013      	beq.n	8001c2c <HAL_GPIO_Init+0x1ec>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a3f      	ldr	r2, [pc, #252]	; (8001d04 <HAL_GPIO_Init+0x2c4>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d00d      	beq.n	8001c28 <HAL_GPIO_Init+0x1e8>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a3e      	ldr	r2, [pc, #248]	; (8001d08 <HAL_GPIO_Init+0x2c8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d007      	beq.n	8001c24 <HAL_GPIO_Init+0x1e4>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a3d      	ldr	r2, [pc, #244]	; (8001d0c <HAL_GPIO_Init+0x2cc>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d101      	bne.n	8001c20 <HAL_GPIO_Init+0x1e0>
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e006      	b.n	8001c2e <HAL_GPIO_Init+0x1ee>
 8001c20:	2304      	movs	r3, #4
 8001c22:	e004      	b.n	8001c2e <HAL_GPIO_Init+0x1ee>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e002      	b.n	8001c2e <HAL_GPIO_Init+0x1ee>
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <HAL_GPIO_Init+0x1ee>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c30:	f002 0203 	and.w	r2, r2, #3
 8001c34:	0092      	lsls	r2, r2, #2
 8001c36:	4093      	lsls	r3, r2
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c3e:	492f      	ldr	r1, [pc, #188]	; (8001cfc <HAL_GPIO_Init+0x2bc>)
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	089b      	lsrs	r3, r3, #2
 8001c44:	3302      	adds	r3, #2
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d006      	beq.n	8001c66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c58:	4b2d      	ldr	r3, [pc, #180]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	492c      	ldr	r1, [pc, #176]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	600b      	str	r3, [r1, #0]
 8001c64:	e006      	b.n	8001c74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c66:	4b2a      	ldr	r3, [pc, #168]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	4928      	ldr	r1, [pc, #160]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d006      	beq.n	8001c8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c80:	4b23      	ldr	r3, [pc, #140]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	4922      	ldr	r1, [pc, #136]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	604b      	str	r3, [r1, #4]
 8001c8c:	e006      	b.n	8001c9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c8e:	4b20      	ldr	r3, [pc, #128]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	491e      	ldr	r1, [pc, #120]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d006      	beq.n	8001cb6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	4918      	ldr	r1, [pc, #96]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	608b      	str	r3, [r1, #8]
 8001cb4:	e006      	b.n	8001cc4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cb6:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	4914      	ldr	r1, [pc, #80]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d021      	beq.n	8001d14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001cd2:	68da      	ldr	r2, [r3, #12]
 8001cd4:	490e      	ldr	r1, [pc, #56]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	60cb      	str	r3, [r1, #12]
 8001cdc:	e021      	b.n	8001d22 <HAL_GPIO_Init+0x2e2>
 8001cde:	bf00      	nop
 8001ce0:	10320000 	.word	0x10320000
 8001ce4:	10310000 	.word	0x10310000
 8001ce8:	10220000 	.word	0x10220000
 8001cec:	10210000 	.word	0x10210000
 8001cf0:	10120000 	.word	0x10120000
 8001cf4:	10110000 	.word	0x10110000
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40010000 	.word	0x40010000
 8001d00:	40010800 	.word	0x40010800
 8001d04:	40010c00 	.word	0x40010c00
 8001d08:	40011000 	.word	0x40011000
 8001d0c:	40011400 	.word	0x40011400
 8001d10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <HAL_GPIO_Init+0x304>)
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	4909      	ldr	r1, [pc, #36]	; (8001d44 <HAL_GPIO_Init+0x304>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	3301      	adds	r3, #1
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f47f ae8e 	bne.w	8001a54 <HAL_GPIO_Init+0x14>
  }
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	372c      	adds	r7, #44	; 0x2c
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	40010400 	.word	0x40010400

08001d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	460b      	mov	r3, r1
 8001d52:	807b      	strh	r3, [r7, #2]
 8001d54:	4613      	mov	r3, r2
 8001d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d58:	787b      	ldrb	r3, [r7, #1]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d5e:	887a      	ldrh	r2, [r7, #2]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d64:	e003      	b.n	8001d6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d66:	887b      	ldrh	r3, [r7, #2]
 8001d68:	041a      	lsls	r2, r3, #16
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	611a      	str	r2, [r3, #16]
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr

08001d78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e272      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 8087 	beq.w	8001ea6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d98:	4b92      	ldr	r3, [pc, #584]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 030c 	and.w	r3, r3, #12
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d00c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001da4:	4b8f      	ldr	r3, [pc, #572]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 030c 	and.w	r3, r3, #12
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d112      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x5e>
 8001db0:	4b8c      	ldr	r3, [pc, #560]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dbc:	d10b      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dbe:	4b89      	ldr	r3, [pc, #548]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d06c      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x12c>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d168      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e24c      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dde:	d106      	bne.n	8001dee <HAL_RCC_OscConfig+0x76>
 8001de0:	4b80      	ldr	r3, [pc, #512]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a7f      	ldr	r2, [pc, #508]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	e02e      	b.n	8001e4c <HAL_RCC_OscConfig+0xd4>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10c      	bne.n	8001e10 <HAL_RCC_OscConfig+0x98>
 8001df6:	4b7b      	ldr	r3, [pc, #492]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a7a      	ldr	r2, [pc, #488]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	4b78      	ldr	r3, [pc, #480]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a77      	ldr	r2, [pc, #476]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	e01d      	b.n	8001e4c <HAL_RCC_OscConfig+0xd4>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e18:	d10c      	bne.n	8001e34 <HAL_RCC_OscConfig+0xbc>
 8001e1a:	4b72      	ldr	r3, [pc, #456]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a71      	ldr	r2, [pc, #452]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	4b6f      	ldr	r3, [pc, #444]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a6e      	ldr	r2, [pc, #440]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	e00b      	b.n	8001e4c <HAL_RCC_OscConfig+0xd4>
 8001e34:	4b6b      	ldr	r3, [pc, #428]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a6a      	ldr	r2, [pc, #424]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	4b68      	ldr	r3, [pc, #416]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a67      	ldr	r2, [pc, #412]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d013      	beq.n	8001e7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e54:	f7ff fd06 	bl	8001864 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e5c:	f7ff fd02 	bl	8001864 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b64      	cmp	r3, #100	; 0x64
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e200      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6e:	4b5d      	ldr	r3, [pc, #372]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0xe4>
 8001e7a:	e014      	b.n	8001ea6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7ff fcf2 	bl	8001864 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e84:	f7ff fcee 	bl	8001864 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	; 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e1ec      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e96:	4b53      	ldr	r3, [pc, #332]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x10c>
 8001ea2:	e000      	b.n	8001ea6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d063      	beq.n	8001f7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eb2:	4b4c      	ldr	r3, [pc, #304]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00b      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ebe:	4b49      	ldr	r3, [pc, #292]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d11c      	bne.n	8001f04 <HAL_RCC_OscConfig+0x18c>
 8001eca:	4b46      	ldr	r3, [pc, #280]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d116      	bne.n	8001f04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed6:	4b43      	ldr	r3, [pc, #268]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d005      	beq.n	8001eee <HAL_RCC_OscConfig+0x176>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d001      	beq.n	8001eee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e1c0      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eee:	4b3d      	ldr	r3, [pc, #244]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4939      	ldr	r1, [pc, #228]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f02:	e03a      	b.n	8001f7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d020      	beq.n	8001f4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f0c:	4b36      	ldr	r3, [pc, #216]	; (8001fe8 <HAL_RCC_OscConfig+0x270>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f12:	f7ff fca7 	bl	8001864 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f1a:	f7ff fca3 	bl	8001864 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e1a1      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2c:	4b2d      	ldr	r3, [pc, #180]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0f0      	beq.n	8001f1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f38:	4b2a      	ldr	r3, [pc, #168]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4927      	ldr	r1, [pc, #156]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	600b      	str	r3, [r1, #0]
 8001f4c:	e015      	b.n	8001f7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f4e:	4b26      	ldr	r3, [pc, #152]	; (8001fe8 <HAL_RCC_OscConfig+0x270>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7ff fc86 	bl	8001864 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f5c:	f7ff fc82 	bl	8001864 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e180      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6e:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d03a      	beq.n	8001ffc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d019      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f8e:	4b17      	ldr	r3, [pc, #92]	; (8001fec <HAL_RCC_OscConfig+0x274>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f94:	f7ff fc66 	bl	8001864 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f9c:	f7ff fc62 	bl	8001864 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e160      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fae:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fba:	2001      	movs	r0, #1
 8001fbc:	f000 fad8 	bl	8002570 <RCC_Delay>
 8001fc0:	e01c      	b.n	8001ffc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <HAL_RCC_OscConfig+0x274>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc8:	f7ff fc4c 	bl	8001864 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fce:	e00f      	b.n	8001ff0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd0:	f7ff fc48 	bl	8001864 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d908      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e146      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
 8001fe2:	bf00      	nop
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	42420000 	.word	0x42420000
 8001fec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff0:	4b92      	ldr	r3, [pc, #584]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1e9      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80a6 	beq.w	8002156 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800200a:	2300      	movs	r3, #0
 800200c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800200e:	4b8b      	ldr	r3, [pc, #556]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10d      	bne.n	8002036 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800201a:	4b88      	ldr	r3, [pc, #544]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	4a87      	ldr	r2, [pc, #540]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 8002020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002024:	61d3      	str	r3, [r2, #28]
 8002026:	4b85      	ldr	r3, [pc, #532]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002032:	2301      	movs	r3, #1
 8002034:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002036:	4b82      	ldr	r3, [pc, #520]	; (8002240 <HAL_RCC_OscConfig+0x4c8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203e:	2b00      	cmp	r3, #0
 8002040:	d118      	bne.n	8002074 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002042:	4b7f      	ldr	r3, [pc, #508]	; (8002240 <HAL_RCC_OscConfig+0x4c8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a7e      	ldr	r2, [pc, #504]	; (8002240 <HAL_RCC_OscConfig+0x4c8>)
 8002048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800204e:	f7ff fc09 	bl	8001864 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002056:	f7ff fc05 	bl	8001864 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b64      	cmp	r3, #100	; 0x64
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e103      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002068:	4b75      	ldr	r3, [pc, #468]	; (8002240 <HAL_RCC_OscConfig+0x4c8>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0f0      	beq.n	8002056 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d106      	bne.n	800208a <HAL_RCC_OscConfig+0x312>
 800207c:	4b6f      	ldr	r3, [pc, #444]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	4a6e      	ldr	r2, [pc, #440]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	6213      	str	r3, [r2, #32]
 8002088:	e02d      	b.n	80020e6 <HAL_RCC_OscConfig+0x36e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10c      	bne.n	80020ac <HAL_RCC_OscConfig+0x334>
 8002092:	4b6a      	ldr	r3, [pc, #424]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	4a69      	ldr	r2, [pc, #420]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 8002098:	f023 0301 	bic.w	r3, r3, #1
 800209c:	6213      	str	r3, [r2, #32]
 800209e:	4b67      	ldr	r3, [pc, #412]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	4a66      	ldr	r2, [pc, #408]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 80020a4:	f023 0304 	bic.w	r3, r3, #4
 80020a8:	6213      	str	r3, [r2, #32]
 80020aa:	e01c      	b.n	80020e6 <HAL_RCC_OscConfig+0x36e>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	2b05      	cmp	r3, #5
 80020b2:	d10c      	bne.n	80020ce <HAL_RCC_OscConfig+0x356>
 80020b4:	4b61      	ldr	r3, [pc, #388]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	4a60      	ldr	r2, [pc, #384]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 80020ba:	f043 0304 	orr.w	r3, r3, #4
 80020be:	6213      	str	r3, [r2, #32]
 80020c0:	4b5e      	ldr	r3, [pc, #376]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	4a5d      	ldr	r2, [pc, #372]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6213      	str	r3, [r2, #32]
 80020cc:	e00b      	b.n	80020e6 <HAL_RCC_OscConfig+0x36e>
 80020ce:	4b5b      	ldr	r3, [pc, #364]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	4a5a      	ldr	r2, [pc, #360]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 80020d4:	f023 0301 	bic.w	r3, r3, #1
 80020d8:	6213      	str	r3, [r2, #32]
 80020da:	4b58      	ldr	r3, [pc, #352]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	4a57      	ldr	r2, [pc, #348]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	f023 0304 	bic.w	r3, r3, #4
 80020e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d015      	beq.n	800211a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ee:	f7ff fbb9 	bl	8001864 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f4:	e00a      	b.n	800210c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f6:	f7ff fbb5 	bl	8001864 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	f241 3288 	movw	r2, #5000	; 0x1388
 8002104:	4293      	cmp	r3, r2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e0b1      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800210c:	4b4b      	ldr	r3, [pc, #300]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0ee      	beq.n	80020f6 <HAL_RCC_OscConfig+0x37e>
 8002118:	e014      	b.n	8002144 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211a:	f7ff fba3 	bl	8001864 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002120:	e00a      	b.n	8002138 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002122:	f7ff fb9f 	bl	8001864 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002130:	4293      	cmp	r3, r2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e09b      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002138:	4b40      	ldr	r3, [pc, #256]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1ee      	bne.n	8002122 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002144:	7dfb      	ldrb	r3, [r7, #23]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d105      	bne.n	8002156 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800214a:	4b3c      	ldr	r3, [pc, #240]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	4a3b      	ldr	r2, [pc, #236]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 8002150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002154:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 8087 	beq.w	800226e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002160:	4b36      	ldr	r3, [pc, #216]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 030c 	and.w	r3, r3, #12
 8002168:	2b08      	cmp	r3, #8
 800216a:	d061      	beq.n	8002230 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d146      	bne.n	8002202 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002174:	4b33      	ldr	r3, [pc, #204]	; (8002244 <HAL_RCC_OscConfig+0x4cc>)
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217a:	f7ff fb73 	bl	8001864 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002182:	f7ff fb6f 	bl	8001864 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e06d      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002194:	4b29      	ldr	r3, [pc, #164]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1f0      	bne.n	8002182 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a8:	d108      	bne.n	80021bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021aa:	4b24      	ldr	r3, [pc, #144]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	4921      	ldr	r1, [pc, #132]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021bc:	4b1f      	ldr	r3, [pc, #124]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a19      	ldr	r1, [r3, #32]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	430b      	orrs	r3, r1
 80021ce:	491b      	ldr	r1, [pc, #108]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d4:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <HAL_RCC_OscConfig+0x4cc>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021da:	f7ff fb43 	bl	8001864 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e2:	f7ff fb3f 	bl	8001864 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e03d      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021f4:	4b11      	ldr	r3, [pc, #68]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x46a>
 8002200:	e035      	b.n	800226e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002202:	4b10      	ldr	r3, [pc, #64]	; (8002244 <HAL_RCC_OscConfig+0x4cc>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7ff fb2c 	bl	8001864 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002210:	f7ff fb28 	bl	8001864 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e026      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x498>
 800222e:	e01e      	b.n	800226e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d107      	bne.n	8002248 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e019      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
 800223c:	40021000 	.word	0x40021000
 8002240:	40007000 	.word	0x40007000
 8002244:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <HAL_RCC_OscConfig+0x500>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	429a      	cmp	r2, r3
 800225a:	d106      	bne.n	800226a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002266:	429a      	cmp	r2, r3
 8002268:	d001      	beq.n	800226e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e000      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40021000 	.word	0x40021000

0800227c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0d0      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002290:	4b6a      	ldr	r3, [pc, #424]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d910      	bls.n	80022c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229e:	4b67      	ldr	r3, [pc, #412]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 0207 	bic.w	r2, r3, #7
 80022a6:	4965      	ldr	r1, [pc, #404]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ae:	4b63      	ldr	r3, [pc, #396]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0b8      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d020      	beq.n	800230e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022d8:	4b59      	ldr	r3, [pc, #356]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	4a58      	ldr	r2, [pc, #352]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d005      	beq.n	80022fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022f0:	4b53      	ldr	r3, [pc, #332]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	4a52      	ldr	r2, [pc, #328]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80022f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022fc:	4b50      	ldr	r3, [pc, #320]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	494d      	ldr	r1, [pc, #308]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	4313      	orrs	r3, r2
 800230c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d040      	beq.n	800239c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d107      	bne.n	8002332 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002322:	4b47      	ldr	r3, [pc, #284]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d115      	bne.n	800235a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e07f      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d107      	bne.n	800234a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233a:	4b41      	ldr	r3, [pc, #260]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d109      	bne.n	800235a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e073      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234a:	4b3d      	ldr	r3, [pc, #244]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e06b      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800235a:	4b39      	ldr	r3, [pc, #228]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f023 0203 	bic.w	r2, r3, #3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	4936      	ldr	r1, [pc, #216]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	4313      	orrs	r3, r2
 800236a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800236c:	f7ff fa7a 	bl	8001864 <HAL_GetTick>
 8002370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002372:	e00a      	b.n	800238a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002374:	f7ff fa76 	bl	8001864 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002382:	4293      	cmp	r3, r2
 8002384:	d901      	bls.n	800238a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e053      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238a:	4b2d      	ldr	r3, [pc, #180]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 020c 	and.w	r2, r3, #12
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	429a      	cmp	r2, r3
 800239a:	d1eb      	bne.n	8002374 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800239c:	4b27      	ldr	r3, [pc, #156]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d210      	bcs.n	80023cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023aa:	4b24      	ldr	r3, [pc, #144]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 0207 	bic.w	r2, r3, #7
 80023b2:	4922      	ldr	r1, [pc, #136]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ba:	4b20      	ldr	r3, [pc, #128]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e032      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d8:	4b19      	ldr	r3, [pc, #100]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	4916      	ldr	r1, [pc, #88]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d009      	beq.n	800240a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023f6:	4b12      	ldr	r3, [pc, #72]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	490e      	ldr	r1, [pc, #56]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 8002406:	4313      	orrs	r3, r2
 8002408:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800240a:	f000 f821 	bl	8002450 <HAL_RCC_GetSysClockFreq>
 800240e:	4602      	mov	r2, r0
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	091b      	lsrs	r3, r3, #4
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	490a      	ldr	r1, [pc, #40]	; (8002444 <HAL_RCC_ClockConfig+0x1c8>)
 800241c:	5ccb      	ldrb	r3, [r1, r3]
 800241e:	fa22 f303 	lsr.w	r3, r2, r3
 8002422:	4a09      	ldr	r2, [pc, #36]	; (8002448 <HAL_RCC_ClockConfig+0x1cc>)
 8002424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <HAL_RCC_ClockConfig+0x1d0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff f9d8 	bl	80017e0 <HAL_InitTick>

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40022000 	.word	0x40022000
 8002440:	40021000 	.word	0x40021000
 8002444:	0800670c 	.word	0x0800670c
 8002448:	20000000 	.word	0x20000000
 800244c:	20000004 	.word	0x20000004

08002450 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002450:	b490      	push	{r4, r7}
 8002452:	b08a      	sub	sp, #40	; 0x28
 8002454:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002456:	4b29      	ldr	r3, [pc, #164]	; (80024fc <HAL_RCC_GetSysClockFreq+0xac>)
 8002458:	1d3c      	adds	r4, r7, #4
 800245a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800245c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002460:	f240 2301 	movw	r3, #513	; 0x201
 8002464:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	2300      	movs	r3, #0
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800247a:	4b21      	ldr	r3, [pc, #132]	; (8002500 <HAL_RCC_GetSysClockFreq+0xb0>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b04      	cmp	r3, #4
 8002488:	d002      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x40>
 800248a:	2b08      	cmp	r3, #8
 800248c:	d003      	beq.n	8002496 <HAL_RCC_GetSysClockFreq+0x46>
 800248e:	e02b      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002490:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002492:	623b      	str	r3, [r7, #32]
      break;
 8002494:	e02b      	b.n	80024ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	0c9b      	lsrs	r3, r3, #18
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	3328      	adds	r3, #40	; 0x28
 80024a0:	443b      	add	r3, r7
 80024a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80024a6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d012      	beq.n	80024d8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024b2:	4b13      	ldr	r3, [pc, #76]	; (8002500 <HAL_RCC_GetSysClockFreq+0xb0>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	0c5b      	lsrs	r3, r3, #17
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	3328      	adds	r3, #40	; 0x28
 80024be:	443b      	add	r3, r7
 80024c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80024c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	4a0e      	ldr	r2, [pc, #56]	; (8002504 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024ca:	fb03 f202 	mul.w	r2, r3, r2
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
 80024d6:	e004      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	4a0b      	ldr	r2, [pc, #44]	; (8002508 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024dc:	fb02 f303 	mul.w	r3, r2, r3
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	623b      	str	r3, [r7, #32]
      break;
 80024e6:	e002      	b.n	80024ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024ea:	623b      	str	r3, [r7, #32]
      break;
 80024ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024ee:	6a3b      	ldr	r3, [r7, #32]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3728      	adds	r7, #40	; 0x28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc90      	pop	{r4, r7}
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	08006240 	.word	0x08006240
 8002500:	40021000 	.word	0x40021000
 8002504:	007a1200 	.word	0x007a1200
 8002508:	003d0900 	.word	0x003d0900

0800250c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002510:	4b02      	ldr	r3, [pc, #8]	; (800251c <HAL_RCC_GetHCLKFreq+0x10>)
 8002512:	681b      	ldr	r3, [r3, #0]
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr
 800251c:	20000000 	.word	0x20000000

08002520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002524:	f7ff fff2 	bl	800250c <HAL_RCC_GetHCLKFreq>
 8002528:	4602      	mov	r2, r0
 800252a:	4b05      	ldr	r3, [pc, #20]	; (8002540 <HAL_RCC_GetPCLK1Freq+0x20>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	0a1b      	lsrs	r3, r3, #8
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	4903      	ldr	r1, [pc, #12]	; (8002544 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002536:	5ccb      	ldrb	r3, [r1, r3]
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800253c:	4618      	mov	r0, r3
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40021000 	.word	0x40021000
 8002544:	0800671c 	.word	0x0800671c

08002548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800254c:	f7ff ffde 	bl	800250c <HAL_RCC_GetHCLKFreq>
 8002550:	4602      	mov	r2, r0
 8002552:	4b05      	ldr	r3, [pc, #20]	; (8002568 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	0adb      	lsrs	r3, r3, #11
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	4903      	ldr	r1, [pc, #12]	; (800256c <HAL_RCC_GetPCLK2Freq+0x24>)
 800255e:	5ccb      	ldrb	r3, [r1, r3]
 8002560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002564:	4618      	mov	r0, r3
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40021000 	.word	0x40021000
 800256c:	0800671c 	.word	0x0800671c

08002570 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002578:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <RCC_Delay+0x34>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a0a      	ldr	r2, [pc, #40]	; (80025a8 <RCC_Delay+0x38>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	0a5b      	lsrs	r3, r3, #9
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	fb02 f303 	mul.w	r3, r2, r3
 800258a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800258c:	bf00      	nop
  }
  while (Delay --);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	1e5a      	subs	r2, r3, #1
 8002592:	60fa      	str	r2, [r7, #12]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f9      	bne.n	800258c <RCC_Delay+0x1c>
}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr
 80025a4:	20000000 	.word	0x20000000
 80025a8:	10624dd3 	.word	0x10624dd3

080025ac <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e047      	b.n	800264e <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7fe ff4e 	bl	8001474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2224      	movs	r2, #36	; 0x24
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f90d 	bl	8002810 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002604:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695a      	ldr	r2, [r3, #20]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8002614:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695a      	ldr	r2, [r3, #20]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0208 	orr.w	r2, r2, #8
 8002624:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002634:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b08a      	sub	sp, #40	; 0x28
 800265a:	af02      	add	r7, sp, #8
 800265c:	60f8      	str	r0, [r7, #12]
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	603b      	str	r3, [r7, #0]
 8002662:	4613      	mov	r3, r2
 8002664:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b20      	cmp	r3, #32
 8002674:	d17c      	bne.n	8002770 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <HAL_UART_Transmit+0x2c>
 800267c:	88fb      	ldrh	r3, [r7, #6]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e075      	b.n	8002772 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_UART_Transmit+0x3e>
 8002690:	2302      	movs	r3, #2
 8002692:	e06e      	b.n	8002772 <HAL_UART_Transmit+0x11c>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2221      	movs	r2, #33	; 0x21
 80026a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026aa:	f7ff f8db 	bl	8001864 <HAL_GetTick>
 80026ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	88fa      	ldrh	r2, [r7, #6]
 80026b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	88fa      	ldrh	r2, [r7, #6]
 80026ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c4:	d108      	bne.n	80026d8 <HAL_UART_Transmit+0x82>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d104      	bne.n	80026d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	61bb      	str	r3, [r7, #24]
 80026d6:	e003      	b.n	80026e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80026e8:	e02a      	b.n	8002740 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2200      	movs	r2, #0
 80026f2:	2180      	movs	r1, #128	; 0x80
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 f840 	bl	800277a <UART_WaitOnFlagUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e036      	b.n	8002772 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10b      	bne.n	8002722 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	461a      	mov	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002718:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	3302      	adds	r3, #2
 800271e:	61bb      	str	r3, [r7, #24]
 8002720:	e007      	b.n	8002732 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	781a      	ldrb	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	3301      	adds	r3, #1
 8002730:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002736:	b29b      	uxth	r3, r3
 8002738:	3b01      	subs	r3, #1
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002744:	b29b      	uxth	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1cf      	bne.n	80026ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	2200      	movs	r2, #0
 8002752:	2140      	movs	r1, #64	; 0x40
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 f810 	bl	800277a <UART_WaitOnFlagUntilTimeout>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e006      	b.n	8002772 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2220      	movs	r2, #32
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	e000      	b.n	8002772 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002770:	2302      	movs	r3, #2
  }
}
 8002772:	4618      	mov	r0, r3
 8002774:	3720      	adds	r7, #32
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b084      	sub	sp, #16
 800277e:	af00      	add	r7, sp, #0
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	603b      	str	r3, [r7, #0]
 8002786:	4613      	mov	r3, r2
 8002788:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800278a:	e02c      	b.n	80027e6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002792:	d028      	beq.n	80027e6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d007      	beq.n	80027aa <UART_WaitOnFlagUntilTimeout+0x30>
 800279a:	f7ff f863 	bl	8001864 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d21d      	bcs.n	80027e6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80027b8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695a      	ldr	r2, [r3, #20]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0201 	bic.w	r2, r2, #1
 80027c8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2220      	movs	r2, #32
 80027ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2220      	movs	r2, #32
 80027d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e00f      	b.n	8002806 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	4013      	ands	r3, r2
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	bf0c      	ite	eq
 80027f6:	2301      	moveq	r3, #1
 80027f8:	2300      	movne	r3, #0
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	461a      	mov	r2, r3
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	429a      	cmp	r2, r3
 8002802:	d0c3      	beq.n	800278c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	4313      	orrs	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800284a:	f023 030c 	bic.w	r3, r3, #12
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	68b9      	ldr	r1, [r7, #8]
 8002854:	430b      	orrs	r3, r1
 8002856:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699a      	ldr	r2, [r3, #24]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a2c      	ldr	r2, [pc, #176]	; (8002924 <UART_SetConfig+0x114>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d103      	bne.n	8002880 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002878:	f7ff fe66 	bl	8002548 <HAL_RCC_GetPCLK2Freq>
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	e002      	b.n	8002886 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002880:	f7ff fe4e 	bl	8002520 <HAL_RCC_GetPCLK1Freq>
 8002884:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	009a      	lsls	r2, r3, #2
 8002890:	441a      	add	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	fbb2 f3f3 	udiv	r3, r2, r3
 800289c:	4a22      	ldr	r2, [pc, #136]	; (8002928 <UART_SetConfig+0x118>)
 800289e:	fba2 2303 	umull	r2, r3, r2, r3
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	0119      	lsls	r1, r3, #4
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	009a      	lsls	r2, r3, #2
 80028b0:	441a      	add	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80028bc:	4b1a      	ldr	r3, [pc, #104]	; (8002928 <UART_SetConfig+0x118>)
 80028be:	fba3 0302 	umull	r0, r3, r3, r2
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	2064      	movs	r0, #100	; 0x64
 80028c6:	fb00 f303 	mul.w	r3, r0, r3
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	3332      	adds	r3, #50	; 0x32
 80028d0:	4a15      	ldr	r2, [pc, #84]	; (8002928 <UART_SetConfig+0x118>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028dc:	4419      	add	r1, r3
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	009a      	lsls	r2, r3, #2
 80028e8:	441a      	add	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80028f4:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <UART_SetConfig+0x118>)
 80028f6:	fba3 0302 	umull	r0, r3, r3, r2
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	2064      	movs	r0, #100	; 0x64
 80028fe:	fb00 f303 	mul.w	r3, r0, r3
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	3332      	adds	r3, #50	; 0x32
 8002908:	4a07      	ldr	r2, [pc, #28]	; (8002928 <UART_SetConfig+0x118>)
 800290a:	fba2 2303 	umull	r2, r3, r2, r3
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	f003 020f 	and.w	r2, r3, #15
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	440a      	add	r2, r1
 800291a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800291c:	bf00      	nop
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40013800 	.word	0x40013800
 8002928:	51eb851f 	.word	0x51eb851f

0800292c <reverseStr>:
 * This reverse the strings from given offset
 * @param str       : String
 * @param end       : End point (exclusive)
 * @param offset    : Offset
 */
static void reverseStr(char *str,uint8_t end,uint32_t offset){
 800292c:	b480      	push	{r7}
 800292e:	b089      	sub	sp, #36	; 0x24
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	460b      	mov	r3, r1
 8002936:	607a      	str	r2, [r7, #4]
 8002938:	72fb      	strb	r3, [r7, #11]
    if(end<=1)
 800293a:	7afb      	ldrb	r3, [r7, #11]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d922      	bls.n	8002986 <reverseStr+0x5a>
        return;
    uint32_t i=offset, j=end-1;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	61fb      	str	r3, [r7, #28]
 8002944:	7afb      	ldrb	r3, [r7, #11]
 8002946:	3b01      	subs	r3, #1
 8002948:	61bb      	str	r3, [r7, #24]
    char temp;
    while (i<j){
 800294a:	e017      	b.n	800297c <reverseStr+0x50>
        temp = str[i];
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	4413      	add	r3, r2
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	75fb      	strb	r3, [r7, #23]
        str[i] = str[j];
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	441a      	add	r2, r3
 800295c:	68f9      	ldr	r1, [r7, #12]
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	440b      	add	r3, r1
 8002962:	7812      	ldrb	r2, [r2, #0]
 8002964:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	4413      	add	r3, r2
 800296c:	7dfa      	ldrb	r2, [r7, #23]
 800296e:	701a      	strb	r2, [r3, #0]
        i++;
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	3301      	adds	r3, #1
 8002974:	61fb      	str	r3, [r7, #28]
        j--;
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	3b01      	subs	r3, #1
 800297a:	61bb      	str	r3, [r7, #24]
    while (i<j){
 800297c:	69fa      	ldr	r2, [r7, #28]
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	429a      	cmp	r2, r3
 8002982:	d3e3      	bcc.n	800294c <reverseStr+0x20>
 8002984:	e000      	b.n	8002988 <reverseStr+0x5c>
        return;
 8002986:	bf00      	nop
    }
}
 8002988:	3724      	adds	r7, #36	; 0x24
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <uint32ToStr>:
 * @param width     : Width of string
 * @param offset    : Offset
 * @param fill      : Filling character if width is empty
 * @return          : Last index + 1 of string
 */
static uint32_t uint32ToStr(uint32_t val,char *str,uint8_t base,uint8_t width,uint32_t offset,char fill){
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	4611      	mov	r1, r2
 800299c:	461a      	mov	r2, r3
 800299e:	460b      	mov	r3, r1
 80029a0:	71fb      	strb	r3, [r7, #7]
 80029a2:	4613      	mov	r3, r2
 80029a4:	71bb      	strb	r3, [r7, #6]
    uint32_t i=offset;
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	617b      	str	r3, [r7, #20]
    uint8_t temp;
    if(val==0)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d140      	bne.n	8002a32 <uint32ToStr+0xa2>
        str[i++] = '0';
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	1c5a      	adds	r2, r3, #1
 80029b4:	617a      	str	r2, [r7, #20]
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	4413      	add	r3, r2
 80029ba:	2230      	movs	r2, #48	; 0x30
 80029bc:	701a      	strb	r2, [r3, #0]
    while(val){
 80029be:	e038      	b.n	8002a32 <uint32ToStr+0xa2>
        temp = val % base;
 80029c0:	79fa      	ldrb	r2, [r7, #7]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80029c8:	fb01 f202 	mul.w	r2, r1, r2
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	74fb      	strb	r3, [r7, #19]
        if(temp>=0 && temp<=9)
 80029d0:	7cfb      	ldrb	r3, [r7, #19]
 80029d2:	2b09      	cmp	r3, #9
 80029d4:	d809      	bhi.n	80029ea <uint32ToStr+0x5a>
            str[i++] = (char)(temp + (int)'0');
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	617a      	str	r2, [r7, #20]
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	4413      	add	r3, r2
 80029e0:	7cfa      	ldrb	r2, [r7, #19]
 80029e2:	3230      	adds	r2, #48	; 0x30
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	701a      	strb	r2, [r3, #0]
 80029e8:	e01e      	b.n	8002a28 <uint32ToStr+0x98>
        else if(temp>=10 && temp <= (10+(ch_end-ch_start)))
 80029ea:	7cfb      	ldrb	r3, [r7, #19]
 80029ec:	2b09      	cmp	r3, #9
 80029ee:	d914      	bls.n	8002a1a <uint32ToStr+0x8a>
 80029f0:	7cfa      	ldrb	r2, [r7, #19]
 80029f2:	237a      	movs	r3, #122	; 0x7a
 80029f4:	4619      	mov	r1, r3
 80029f6:	2361      	movs	r3, #97	; 0x61
 80029f8:	1acb      	subs	r3, r1, r3
 80029fa:	330a      	adds	r3, #10
 80029fc:	429a      	cmp	r2, r3
 80029fe:	dc0c      	bgt.n	8002a1a <uint32ToStr+0x8a>
            str[i++] = (char)(temp - 10 + ch_start);
 8002a00:	2261      	movs	r2, #97	; 0x61
 8002a02:	7cfb      	ldrb	r3, [r7, #19]
 8002a04:	4413      	add	r3, r2
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	1c59      	adds	r1, r3, #1
 8002a0c:	6179      	str	r1, [r7, #20]
 8002a0e:	68b9      	ldr	r1, [r7, #8]
 8002a10:	440b      	add	r3, r1
 8002a12:	3a0a      	subs	r2, #10
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	701a      	strb	r2, [r3, #0]
 8002a18:	e006      	b.n	8002a28 <uint32ToStr+0x98>
        else
            str[i++] = (char)temp;
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	617a      	str	r2, [r7, #20]
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	4413      	add	r3, r2
 8002a24:	7cfa      	ldrb	r2, [r7, #19]
 8002a26:	701a      	strb	r2, [r3, #0]
        val/=(uint32_t)base;
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a30:	60fb      	str	r3, [r7, #12]
    while(val){
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1c3      	bne.n	80029c0 <uint32ToStr+0x30>
    }
    while(i < (width+offset)){
 8002a38:	e007      	b.n	8002a4a <uint32ToStr+0xba>
        str[i++]=fill;
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	617a      	str	r2, [r7, #20]
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	4413      	add	r3, r2
 8002a44:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002a48:	701a      	strb	r2, [r3, #0]
    while(i < (width+offset)){
 8002a4a:	79ba      	ldrb	r2, [r7, #6]
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	4413      	add	r3, r2
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d3f1      	bcc.n	8002a3a <uint32ToStr+0xaa>
    }

    reverseStr(str,i,offset);
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	6a3a      	ldr	r2, [r7, #32]
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	68b8      	ldr	r0, [r7, #8]
 8002a60:	f7ff ff64 	bl	800292c <reverseStr>
    return i;
 8002a64:	697b      	ldr	r3, [r7, #20]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <uint64ToStr>:
 * @param width     : Width of string
 * @param offset    : Offset
 * @param fill      : Filling character if width is empty
 * @return          : Last index + 1 of string
 */
static uint32_t uint64ToStr(uint64_t val,char *str,uint8_t base,uint8_t width,uint32_t offset,char fill){
 8002a6e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
 8002a7c:	70fb      	strb	r3, [r7, #3]
    uint32_t i=offset;
 8002a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a80:	617b      	str	r3, [r7, #20]
    uint8_t temp;
    if(val==0)
 8002a82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	d14d      	bne.n	8002b26 <uint64ToStr+0xb8>
        str[i++] = '0';
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	617a      	str	r2, [r7, #20]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	4413      	add	r3, r2
 8002a94:	2230      	movs	r2, #48	; 0x30
 8002a96:	701a      	strb	r2, [r3, #0]
    while(val){
 8002a98:	e045      	b.n	8002b26 <uint64ToStr+0xb8>
        temp = val % base;
 8002a9a:	78fb      	ldrb	r3, [r7, #3]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	461c      	mov	r4, r3
 8002aa0:	4615      	mov	r5, r2
 8002aa2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002aa6:	4622      	mov	r2, r4
 8002aa8:	462b      	mov	r3, r5
 8002aaa:	f7fe f9ff 	bl	8000eac <__aeabi_uldivmod>
 8002aae:	4613      	mov	r3, r2
 8002ab0:	74fb      	strb	r3, [r7, #19]
        if(temp>=0 && temp<=9)
 8002ab2:	7cfb      	ldrb	r3, [r7, #19]
 8002ab4:	2b09      	cmp	r3, #9
 8002ab6:	d809      	bhi.n	8002acc <uint64ToStr+0x5e>
            str[i++] = (char)(temp + (int)'0');
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	617a      	str	r2, [r7, #20]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	7cfa      	ldrb	r2, [r7, #19]
 8002ac4:	3230      	adds	r2, #48	; 0x30
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	701a      	strb	r2, [r3, #0]
 8002aca:	e01e      	b.n	8002b0a <uint64ToStr+0x9c>
        else if(temp>=10 && temp <= (10+(ch_end-ch_start)))
 8002acc:	7cfb      	ldrb	r3, [r7, #19]
 8002ace:	2b09      	cmp	r3, #9
 8002ad0:	d914      	bls.n	8002afc <uint64ToStr+0x8e>
 8002ad2:	7cfa      	ldrb	r2, [r7, #19]
 8002ad4:	237a      	movs	r3, #122	; 0x7a
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	2361      	movs	r3, #97	; 0x61
 8002ada:	1acb      	subs	r3, r1, r3
 8002adc:	330a      	adds	r3, #10
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	dc0c      	bgt.n	8002afc <uint64ToStr+0x8e>
            str[i++] = (char)(temp - 10 + ch_start);
 8002ae2:	2261      	movs	r2, #97	; 0x61
 8002ae4:	7cfb      	ldrb	r3, [r7, #19]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	1c59      	adds	r1, r3, #1
 8002aee:	6179      	str	r1, [r7, #20]
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	440b      	add	r3, r1
 8002af4:	3a0a      	subs	r2, #10
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	701a      	strb	r2, [r3, #0]
 8002afa:	e006      	b.n	8002b0a <uint64ToStr+0x9c>
        else
            str[i++] = (char)temp;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	1c5a      	adds	r2, r3, #1
 8002b00:	617a      	str	r2, [r7, #20]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	4413      	add	r3, r2
 8002b06:	7cfa      	ldrb	r2, [r7, #19]
 8002b08:	701a      	strb	r2, [r3, #0]
        val/=base;
 8002b0a:	78fb      	ldrb	r3, [r7, #3]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	4698      	mov	r8, r3
 8002b10:	4691      	mov	r9, r2
 8002b12:	4642      	mov	r2, r8
 8002b14:	464b      	mov	r3, r9
 8002b16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b1a:	f7fe f9c7 	bl	8000eac <__aeabi_uldivmod>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(val){
 8002b26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	d1b5      	bne.n	8002a9a <uint64ToStr+0x2c>
    }

    while(i < (width+offset)){
 8002b2e:	e007      	b.n	8002b40 <uint64ToStr+0xd2>
        str[i++]=fill;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	617a      	str	r2, [r7, #20]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	4413      	add	r3, r2
 8002b3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002b3e:	701a      	strb	r2, [r3, #0]
    while(i < (width+offset)){
 8002b40:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b46:	4413      	add	r3, r2
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d3f0      	bcc.n	8002b30 <uint64ToStr+0xc2>
    }

    reverseStr(str,i,offset);
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b54:	4619      	mov	r1, r3
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7ff fee8 	bl	800292c <reverseStr>
    return i;
 8002b5c:	697b      	ldr	r3, [r7, #20]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002b68 <int64ToStr>:
 * @param width     : Width of string
 * @param offset    : Offset
 * @param fill      : Filling character if width is empty
 * @return          : Last index + 1 of string
 */
static uint32_t int64ToStr(int64_t val,char *str,uint8_t base,uint8_t width,uint32_t offset,char fill){
 8002b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b6c:	b086      	sub	sp, #24
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002b74:	607a      	str	r2, [r7, #4]
 8002b76:	70fb      	strb	r3, [r7, #3]
    uint8_t is_negative = val < 0;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	0fdb      	lsrs	r3, r3, #31
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	74fb      	strb	r3, [r7, #19]
    uint32_t i=offset;
 8002b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b82:	617b      	str	r3, [r7, #20]
    uint8_t temp;
    if(is_negative)
 8002b84:	7cfb      	ldrb	r3, [r7, #19]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d007      	beq.n	8002b9a <int64ToStr+0x32>
        val=-val;
 8002b8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b8e:	2100      	movs	r1, #0
 8002b90:	4254      	negs	r4, r2
 8002b92:	eb61 0503 	sbc.w	r5, r1, r3
 8002b96:	e9c7 4502 	strd	r4, r5, [r7, #8]
    if(val==0)
 8002b9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	d14d      	bne.n	8002c3e <int64ToStr+0xd6>
        str[i++] = '0';
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	1c5a      	adds	r2, r3, #1
 8002ba6:	617a      	str	r2, [r7, #20]
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	4413      	add	r3, r2
 8002bac:	2230      	movs	r2, #48	; 0x30
 8002bae:	701a      	strb	r2, [r3, #0]
    while(val){
 8002bb0:	e045      	b.n	8002c3e <int64ToStr+0xd6>
        temp = val % base;
 8002bb2:	78fb      	ldrb	r3, [r7, #3]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	4698      	mov	r8, r3
 8002bb8:	4691      	mov	r9, r2
 8002bba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bbe:	4642      	mov	r2, r8
 8002bc0:	464b      	mov	r3, r9
 8002bc2:	f7fe f923 	bl	8000e0c <__aeabi_ldivmod>
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	74bb      	strb	r3, [r7, #18]
        if(temp>=0 && temp<=9)
 8002bca:	7cbb      	ldrb	r3, [r7, #18]
 8002bcc:	2b09      	cmp	r3, #9
 8002bce:	d809      	bhi.n	8002be4 <int64ToStr+0x7c>
            str[i++] = (char)(temp + (int)'0');
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	617a      	str	r2, [r7, #20]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	4413      	add	r3, r2
 8002bda:	7cba      	ldrb	r2, [r7, #18]
 8002bdc:	3230      	adds	r2, #48	; 0x30
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	701a      	strb	r2, [r3, #0]
 8002be2:	e01e      	b.n	8002c22 <int64ToStr+0xba>
        else if(temp>=10 && temp <= (10+(ch_end-ch_start)))
 8002be4:	7cbb      	ldrb	r3, [r7, #18]
 8002be6:	2b09      	cmp	r3, #9
 8002be8:	d914      	bls.n	8002c14 <int64ToStr+0xac>
 8002bea:	7cba      	ldrb	r2, [r7, #18]
 8002bec:	237a      	movs	r3, #122	; 0x7a
 8002bee:	4619      	mov	r1, r3
 8002bf0:	2361      	movs	r3, #97	; 0x61
 8002bf2:	1acb      	subs	r3, r1, r3
 8002bf4:	330a      	adds	r3, #10
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	dc0c      	bgt.n	8002c14 <int64ToStr+0xac>
            str[i++] = (char)(temp - 10 + ch_start);
 8002bfa:	2261      	movs	r2, #97	; 0x61
 8002bfc:	7cbb      	ldrb	r3, [r7, #18]
 8002bfe:	4413      	add	r3, r2
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	1c59      	adds	r1, r3, #1
 8002c06:	6179      	str	r1, [r7, #20]
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	440b      	add	r3, r1
 8002c0c:	3a0a      	subs	r2, #10
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	701a      	strb	r2, [r3, #0]
 8002c12:	e006      	b.n	8002c22 <int64ToStr+0xba>
        else
            str[i++] = (char)temp;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	617a      	str	r2, [r7, #20]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	7cba      	ldrb	r2, [r7, #18]
 8002c20:	701a      	strb	r2, [r3, #0]
        val/=base;
 8002c22:	78fb      	ldrb	r3, [r7, #3]
 8002c24:	2200      	movs	r2, #0
 8002c26:	469a      	mov	sl, r3
 8002c28:	4693      	mov	fp, r2
 8002c2a:	4652      	mov	r2, sl
 8002c2c:	465b      	mov	r3, fp
 8002c2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c32:	f7fe f8eb 	bl	8000e0c <__aeabi_ldivmod>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(val){
 8002c3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	d1b5      	bne.n	8002bb2 <int64ToStr+0x4a>
    }
    if(is_negative){
 8002c46:	7cfb      	ldrb	r3, [r7, #19]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d019      	beq.n	8002c80 <int64ToStr+0x118>
        if(fill == ' ')
 8002c4c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002c50:	2b20      	cmp	r3, #32
 8002c52:	d107      	bne.n	8002c64 <int64ToStr+0xfc>
            str[i++] = '-';
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	617a      	str	r2, [r7, #20]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	222d      	movs	r2, #45	; 0x2d
 8002c60:	701a      	strb	r2, [r3, #0]
 8002c62:	e00d      	b.n	8002c80 <int64ToStr+0x118>
        else
            width -= 1;
 8002c64:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    }
    while (i < (width+offset)) {
 8002c6e:	e007      	b.n	8002c80 <int64ToStr+0x118>
        str[i++] = fill;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	1c5a      	adds	r2, r3, #1
 8002c74:	617a      	str	r2, [r7, #20]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	4413      	add	r3, r2
 8002c7a:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8002c7e:	701a      	strb	r2, [r3, #0]
    while (i < (width+offset)) {
 8002c80:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c86:	4413      	add	r3, r2
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d3f0      	bcc.n	8002c70 <int64ToStr+0x108>
    }
    if(is_negative && fill!=' ')
 8002c8e:	7cfb      	ldrb	r3, [r7, #19]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00a      	beq.n	8002caa <int64ToStr+0x142>
 8002c94:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	d006      	beq.n	8002caa <int64ToStr+0x142>
        str[i++] = '-';
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	617a      	str	r2, [r7, #20]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	222d      	movs	r2, #45	; 0x2d
 8002ca8:	701a      	strb	r2, [r3, #0]
    reverseStr(str,i,offset);
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff fe3a 	bl	800292c <reverseStr>
    return i;
 8002cb8:	697b      	ldr	r3, [r7, #20]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002cc4 <intToStr>:
 * @param width     : Width of string
 * @param offset    : Offset
 * @param fill      : Filling character if width is empty
 * @return          : Last index + 1 of string
 */
static uint32_t intToStr(int val,char *str,uint8_t base,uint8_t width,uint32_t offset,char fill){
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	4611      	mov	r1, r2
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	71fb      	strb	r3, [r7, #7]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	71bb      	strb	r3, [r7, #6]
    uint8_t is_negative = val < 0;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	0fdb      	lsrs	r3, r3, #31
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	74fb      	strb	r3, [r7, #19]
    uint32_t i=offset;
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	617b      	str	r3, [r7, #20]
    uint8_t temp;
    if(is_negative)
 8002ce6:	7cfb      	ldrb	r3, [r7, #19]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <intToStr+0x2e>
        val=-val;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	425b      	negs	r3, r3
 8002cf0:	60fb      	str	r3, [r7, #12]
    if(val==0)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d140      	bne.n	8002d7a <intToStr+0xb6>
        str[i++] = '0';
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	617a      	str	r2, [r7, #20]
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	4413      	add	r3, r2
 8002d02:	2230      	movs	r2, #48	; 0x30
 8002d04:	701a      	strb	r2, [r3, #0]
    while(val){
 8002d06:	e038      	b.n	8002d7a <intToStr+0xb6>
        temp = val % base;
 8002d08:	79fa      	ldrb	r2, [r7, #7]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002d10:	fb01 f202 	mul.w	r2, r1, r2
 8002d14:	1a9b      	subs	r3, r3, r2
 8002d16:	74bb      	strb	r3, [r7, #18]
        if(temp>=0 && temp<=9)
 8002d18:	7cbb      	ldrb	r3, [r7, #18]
 8002d1a:	2b09      	cmp	r3, #9
 8002d1c:	d809      	bhi.n	8002d32 <intToStr+0x6e>
            str[i++] = (char)(temp + (int)'0');
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	617a      	str	r2, [r7, #20]
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	4413      	add	r3, r2
 8002d28:	7cba      	ldrb	r2, [r7, #18]
 8002d2a:	3230      	adds	r2, #48	; 0x30
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	701a      	strb	r2, [r3, #0]
 8002d30:	e01e      	b.n	8002d70 <intToStr+0xac>
        else if(temp>=10 && temp <= (10+(ch_end-ch_start)))
 8002d32:	7cbb      	ldrb	r3, [r7, #18]
 8002d34:	2b09      	cmp	r3, #9
 8002d36:	d914      	bls.n	8002d62 <intToStr+0x9e>
 8002d38:	7cba      	ldrb	r2, [r7, #18]
 8002d3a:	237a      	movs	r3, #122	; 0x7a
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	2361      	movs	r3, #97	; 0x61
 8002d40:	1acb      	subs	r3, r1, r3
 8002d42:	330a      	adds	r3, #10
 8002d44:	429a      	cmp	r2, r3
 8002d46:	dc0c      	bgt.n	8002d62 <intToStr+0x9e>
            str[i++] = (char)(temp - 10 + ch_start);
 8002d48:	2261      	movs	r2, #97	; 0x61
 8002d4a:	7cbb      	ldrb	r3, [r7, #18]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	1c59      	adds	r1, r3, #1
 8002d54:	6179      	str	r1, [r7, #20]
 8002d56:	68b9      	ldr	r1, [r7, #8]
 8002d58:	440b      	add	r3, r1
 8002d5a:	3a0a      	subs	r2, #10
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	701a      	strb	r2, [r3, #0]
 8002d60:	e006      	b.n	8002d70 <intToStr+0xac>
        else
            str[i++] = (char)temp;
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	617a      	str	r2, [r7, #20]
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	7cba      	ldrb	r2, [r7, #18]
 8002d6e:	701a      	strb	r2, [r3, #0]
        val/=base;
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d78:	60fb      	str	r3, [r7, #12]
    while(val){
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1c3      	bne.n	8002d08 <intToStr+0x44>
    }
    if(is_negative){
 8002d80:	7cfb      	ldrb	r3, [r7, #19]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d017      	beq.n	8002db6 <intToStr+0xf2>
        if(fill == ' ')
 8002d86:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002d8a:	2b20      	cmp	r3, #32
 8002d8c:	d107      	bne.n	8002d9e <intToStr+0xda>
            str[i++] = '-';
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	1c5a      	adds	r2, r3, #1
 8002d92:	617a      	str	r2, [r7, #20]
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	4413      	add	r3, r2
 8002d98:	222d      	movs	r2, #45	; 0x2d
 8002d9a:	701a      	strb	r2, [r3, #0]
 8002d9c:	e00b      	b.n	8002db6 <intToStr+0xf2>
        else
            width -= 1;
 8002d9e:	79bb      	ldrb	r3, [r7, #6]
 8002da0:	3b01      	subs	r3, #1
 8002da2:	71bb      	strb	r3, [r7, #6]
    }
    while (i < (width+offset)) {
 8002da4:	e007      	b.n	8002db6 <intToStr+0xf2>
        str[i++] = fill;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	617a      	str	r2, [r7, #20]
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	4413      	add	r3, r2
 8002db0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002db4:	701a      	strb	r2, [r3, #0]
    while (i < (width+offset)) {
 8002db6:	79ba      	ldrb	r2, [r7, #6]
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	4413      	add	r3, r2
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d3f1      	bcc.n	8002da6 <intToStr+0xe2>
    }
    if(is_negative && fill!=' ')
 8002dc2:	7cfb      	ldrb	r3, [r7, #19]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00a      	beq.n	8002dde <intToStr+0x11a>
 8002dc8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	d006      	beq.n	8002dde <intToStr+0x11a>
        str[i++] = '-';
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	1c5a      	adds	r2, r3, #1
 8002dd4:	617a      	str	r2, [r7, #20]
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	4413      	add	r3, r2
 8002dda:	222d      	movs	r2, #45	; 0x2d
 8002ddc:	701a      	strb	r2, [r3, #0]
    reverseStr(str,i,offset);
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	6a3a      	ldr	r2, [r7, #32]
 8002de4:	4619      	mov	r1, r3
 8002de6:	68b8      	ldr	r0, [r7, #8]
 8002de8:	f7ff fda0 	bl	800292c <reverseStr>
    return i;
 8002dec:	697b      	ldr	r3, [r7, #20]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <longToStr>:
 * @param width     : Width of string
 * @param offset    : Offset
 * @param fill      : Filling character if width is empty
 * @return          : Last index + 1 of string
 */
static uint32_t longToStr(long val,char *str,uint8_t base,uint8_t width,uint32_t offset,char fill){
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b086      	sub	sp, #24
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	60f8      	str	r0, [r7, #12]
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	4611      	mov	r1, r2
 8002e02:	461a      	mov	r2, r3
 8002e04:	460b      	mov	r3, r1
 8002e06:	71fb      	strb	r3, [r7, #7]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	71bb      	strb	r3, [r7, #6]
    uint8_t is_negative = val < 0;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	0fdb      	lsrs	r3, r3, #31
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	74fb      	strb	r3, [r7, #19]
    uint32_t i=offset;
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	617b      	str	r3, [r7, #20]
    uint8_t temp;
    if(is_negative)
 8002e18:	7cfb      	ldrb	r3, [r7, #19]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <longToStr+0x2e>
        val=-val;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	425b      	negs	r3, r3
 8002e22:	60fb      	str	r3, [r7, #12]
    if(val==0)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d140      	bne.n	8002eac <longToStr+0xb6>
        str[i++] = '0';
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	1c5a      	adds	r2, r3, #1
 8002e2e:	617a      	str	r2, [r7, #20]
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	4413      	add	r3, r2
 8002e34:	2230      	movs	r2, #48	; 0x30
 8002e36:	701a      	strb	r2, [r3, #0]
    while(val){
 8002e38:	e038      	b.n	8002eac <longToStr+0xb6>
        temp = val % base;
 8002e3a:	79fa      	ldrb	r2, [r7, #7]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002e42:	fb01 f202 	mul.w	r2, r1, r2
 8002e46:	1a9b      	subs	r3, r3, r2
 8002e48:	74bb      	strb	r3, [r7, #18]
        if(temp>=0 && temp<=9)
 8002e4a:	7cbb      	ldrb	r3, [r7, #18]
 8002e4c:	2b09      	cmp	r3, #9
 8002e4e:	d809      	bhi.n	8002e64 <longToStr+0x6e>
            str[i++] = (char)(temp + (int)'0');
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	1c5a      	adds	r2, r3, #1
 8002e54:	617a      	str	r2, [r7, #20]
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	4413      	add	r3, r2
 8002e5a:	7cba      	ldrb	r2, [r7, #18]
 8002e5c:	3230      	adds	r2, #48	; 0x30
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	701a      	strb	r2, [r3, #0]
 8002e62:	e01e      	b.n	8002ea2 <longToStr+0xac>
        else if(temp>=10 && temp <= (10+(ch_end-ch_start)))
 8002e64:	7cbb      	ldrb	r3, [r7, #18]
 8002e66:	2b09      	cmp	r3, #9
 8002e68:	d914      	bls.n	8002e94 <longToStr+0x9e>
 8002e6a:	7cba      	ldrb	r2, [r7, #18]
 8002e6c:	237a      	movs	r3, #122	; 0x7a
 8002e6e:	4619      	mov	r1, r3
 8002e70:	2361      	movs	r3, #97	; 0x61
 8002e72:	1acb      	subs	r3, r1, r3
 8002e74:	330a      	adds	r3, #10
 8002e76:	429a      	cmp	r2, r3
 8002e78:	dc0c      	bgt.n	8002e94 <longToStr+0x9e>
            str[i++] = (char)(temp - 10 + ch_start);
 8002e7a:	2261      	movs	r2, #97	; 0x61
 8002e7c:	7cbb      	ldrb	r3, [r7, #18]
 8002e7e:	4413      	add	r3, r2
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	1c59      	adds	r1, r3, #1
 8002e86:	6179      	str	r1, [r7, #20]
 8002e88:	68b9      	ldr	r1, [r7, #8]
 8002e8a:	440b      	add	r3, r1
 8002e8c:	3a0a      	subs	r2, #10
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	701a      	strb	r2, [r3, #0]
 8002e92:	e006      	b.n	8002ea2 <longToStr+0xac>
        else
            str[i++] = (char)temp;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	617a      	str	r2, [r7, #20]
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	7cba      	ldrb	r2, [r7, #18]
 8002ea0:	701a      	strb	r2, [r3, #0]
        val/=base;
 8002ea2:	79fb      	ldrb	r3, [r7, #7]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	fb92 f3f3 	sdiv	r3, r2, r3
 8002eaa:	60fb      	str	r3, [r7, #12]
    while(val){
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1c3      	bne.n	8002e3a <longToStr+0x44>
    }
    if(is_negative){
 8002eb2:	7cfb      	ldrb	r3, [r7, #19]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d017      	beq.n	8002ee8 <longToStr+0xf2>
        if(fill == ' ')
 8002eb8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ebc:	2b20      	cmp	r3, #32
 8002ebe:	d107      	bne.n	8002ed0 <longToStr+0xda>
            str[i++] = '-';
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	617a      	str	r2, [r7, #20]
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	4413      	add	r3, r2
 8002eca:	222d      	movs	r2, #45	; 0x2d
 8002ecc:	701a      	strb	r2, [r3, #0]
 8002ece:	e00b      	b.n	8002ee8 <longToStr+0xf2>
        else
            width -= 1;
 8002ed0:	79bb      	ldrb	r3, [r7, #6]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	71bb      	strb	r3, [r7, #6]
    }
    while (i < (width+offset)) {
 8002ed6:	e007      	b.n	8002ee8 <longToStr+0xf2>
        str[i++] = fill;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	1c5a      	adds	r2, r3, #1
 8002edc:	617a      	str	r2, [r7, #20]
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002ee6:	701a      	strb	r2, [r3, #0]
    while (i < (width+offset)) {
 8002ee8:	79ba      	ldrb	r2, [r7, #6]
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	4413      	add	r3, r2
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d3f1      	bcc.n	8002ed8 <longToStr+0xe2>
    }
    if(is_negative && fill!=' ')
 8002ef4:	7cfb      	ldrb	r3, [r7, #19]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <longToStr+0x11a>
 8002efa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002efe:	2b20      	cmp	r3, #32
 8002f00:	d006      	beq.n	8002f10 <longToStr+0x11a>
        str[i++] = '-';
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	617a      	str	r2, [r7, #20]
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	222d      	movs	r2, #45	; 0x2d
 8002f0e:	701a      	strb	r2, [r3, #0]

    reverseStr(str,i,offset);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	6a3a      	ldr	r2, [r7, #32]
 8002f16:	4619      	mov	r1, r3
 8002f18:	68b8      	ldr	r0, [r7, #8]
 8002f1a:	f7ff fd07 	bl	800292c <reverseStr>
    return i;
 8002f1e:	697b      	ldr	r3, [r7, #20]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <longLongToStr>:
 * @param width     : Width of string
 * @param offset    : Offset
 * @param fill      : Filling character if width is empty
 * @return          : Last index + 1 of string
 */
static uint32_t longLongToStr(long long val,char *str,uint8_t base,uint8_t width,uint32_t offset,char fill){
 8002f28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f2c:	b086      	sub	sp, #24
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
 8002f36:	70fb      	strb	r3, [r7, #3]
    uint8_t is_negative = val < 0;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	0fdb      	lsrs	r3, r3, #31
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	74fb      	strb	r3, [r7, #19]
    uint32_t i=offset;
 8002f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f42:	617b      	str	r3, [r7, #20]
    uint8_t temp;
    if(is_negative)
 8002f44:	7cfb      	ldrb	r3, [r7, #19]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d007      	beq.n	8002f5a <longLongToStr+0x32>
        val=-val;
 8002f4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f4e:	2100      	movs	r1, #0
 8002f50:	4254      	negs	r4, r2
 8002f52:	eb61 0503 	sbc.w	r5, r1, r3
 8002f56:	e9c7 4502 	strd	r4, r5, [r7, #8]
    if(val==0)
 8002f5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	d14d      	bne.n	8002ffe <longLongToStr+0xd6>
        str[i++] = '0';
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	617a      	str	r2, [r7, #20]
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	2230      	movs	r2, #48	; 0x30
 8002f6e:	701a      	strb	r2, [r3, #0]
    while(val){
 8002f70:	e045      	b.n	8002ffe <longLongToStr+0xd6>
        temp = val % base;
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	2200      	movs	r2, #0
 8002f76:	4698      	mov	r8, r3
 8002f78:	4691      	mov	r9, r2
 8002f7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f7e:	4642      	mov	r2, r8
 8002f80:	464b      	mov	r3, r9
 8002f82:	f7fd ff43 	bl	8000e0c <__aeabi_ldivmod>
 8002f86:	4613      	mov	r3, r2
 8002f88:	74bb      	strb	r3, [r7, #18]
        if(temp>=0 && temp<=9)
 8002f8a:	7cbb      	ldrb	r3, [r7, #18]
 8002f8c:	2b09      	cmp	r3, #9
 8002f8e:	d809      	bhi.n	8002fa4 <longLongToStr+0x7c>
            str[i++] = (char)(temp + (int)'0');
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	617a      	str	r2, [r7, #20]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	4413      	add	r3, r2
 8002f9a:	7cba      	ldrb	r2, [r7, #18]
 8002f9c:	3230      	adds	r2, #48	; 0x30
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	701a      	strb	r2, [r3, #0]
 8002fa2:	e01e      	b.n	8002fe2 <longLongToStr+0xba>
        else if(temp>=10 && temp <= (10+(ch_end-ch_start)))
 8002fa4:	7cbb      	ldrb	r3, [r7, #18]
 8002fa6:	2b09      	cmp	r3, #9
 8002fa8:	d914      	bls.n	8002fd4 <longLongToStr+0xac>
 8002faa:	7cba      	ldrb	r2, [r7, #18]
 8002fac:	237a      	movs	r3, #122	; 0x7a
 8002fae:	4619      	mov	r1, r3
 8002fb0:	2361      	movs	r3, #97	; 0x61
 8002fb2:	1acb      	subs	r3, r1, r3
 8002fb4:	330a      	adds	r3, #10
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	dc0c      	bgt.n	8002fd4 <longLongToStr+0xac>
            str[i++] = (char)(temp - 10 + ch_start);
 8002fba:	2261      	movs	r2, #97	; 0x61
 8002fbc:	7cbb      	ldrb	r3, [r7, #18]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	1c59      	adds	r1, r3, #1
 8002fc6:	6179      	str	r1, [r7, #20]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	440b      	add	r3, r1
 8002fcc:	3a0a      	subs	r2, #10
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	701a      	strb	r2, [r3, #0]
 8002fd2:	e006      	b.n	8002fe2 <longLongToStr+0xba>
        else
            str[i++] = (char)temp;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	1c5a      	adds	r2, r3, #1
 8002fd8:	617a      	str	r2, [r7, #20]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	4413      	add	r3, r2
 8002fde:	7cba      	ldrb	r2, [r7, #18]
 8002fe0:	701a      	strb	r2, [r3, #0]
        val/=base;
 8002fe2:	78fb      	ldrb	r3, [r7, #3]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	469a      	mov	sl, r3
 8002fe8:	4693      	mov	fp, r2
 8002fea:	4652      	mov	r2, sl
 8002fec:	465b      	mov	r3, fp
 8002fee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ff2:	f7fd ff0b 	bl	8000e0c <__aeabi_ldivmod>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(val){
 8002ffe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003002:	4313      	orrs	r3, r2
 8003004:	d1b5      	bne.n	8002f72 <longLongToStr+0x4a>
    }
    if(is_negative){
 8003006:	7cfb      	ldrb	r3, [r7, #19]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d019      	beq.n	8003040 <longLongToStr+0x118>
        if(fill == ' ')
 800300c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003010:	2b20      	cmp	r3, #32
 8003012:	d107      	bne.n	8003024 <longLongToStr+0xfc>
            str[i++] = '-';
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	617a      	str	r2, [r7, #20]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	4413      	add	r3, r2
 800301e:	222d      	movs	r2, #45	; 0x2d
 8003020:	701a      	strb	r2, [r3, #0]
 8003022:	e00d      	b.n	8003040 <longLongToStr+0x118>
        else
            width -= 1;
 8003024:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003028:	3b01      	subs	r3, #1
 800302a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    }
    while (i < (width+offset)) {
 800302e:	e007      	b.n	8003040 <longLongToStr+0x118>
        str[i++] = fill;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	617a      	str	r2, [r7, #20]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	4413      	add	r3, r2
 800303a:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800303e:	701a      	strb	r2, [r3, #0]
    while (i < (width+offset)) {
 8003040:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003046:	4413      	add	r3, r2
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	429a      	cmp	r2, r3
 800304c:	d3f0      	bcc.n	8003030 <longLongToStr+0x108>
    }
    if(is_negative && fill!=' ')
 800304e:	7cfb      	ldrb	r3, [r7, #19]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <longLongToStr+0x142>
 8003054:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003058:	2b20      	cmp	r3, #32
 800305a:	d006      	beq.n	800306a <longLongToStr+0x142>
        str[i++] = '-';
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	1c5a      	adds	r2, r3, #1
 8003060:	617a      	str	r2, [r7, #20]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	4413      	add	r3, r2
 8003066:	222d      	movs	r2, #45	; 0x2d
 8003068:	701a      	strb	r2, [r3, #0]

    reverseStr(str,i,offset);
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	b2db      	uxtb	r3, r3
 800306e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003070:	4619      	mov	r1, r3
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff fc5a 	bl	800292c <reverseStr>
    return i;
 8003078:	697b      	ldr	r3, [r7, #20]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003084 <unsignedToStr>:
 * @param width     : Width of string
 * @param offset    : Offset
 * @param fill      : Filling character if width is empty
 * @return          : Last index + 1 of string
 */
static uint32_t unsignedToStr(unsigned val,char *str,uint8_t base,uint8_t width,uint32_t offset,char fill){
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	4611      	mov	r1, r2
 8003090:	461a      	mov	r2, r3
 8003092:	460b      	mov	r3, r1
 8003094:	71fb      	strb	r3, [r7, #7]
 8003096:	4613      	mov	r3, r2
 8003098:	71bb      	strb	r3, [r7, #6]
    uint32_t i=offset;
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	617b      	str	r3, [r7, #20]
    uint8_t temp;
    if(val==0)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d140      	bne.n	8003126 <unsignedToStr+0xa2>
        str[i++] = '0';
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	1c5a      	adds	r2, r3, #1
 80030a8:	617a      	str	r2, [r7, #20]
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	4413      	add	r3, r2
 80030ae:	2230      	movs	r2, #48	; 0x30
 80030b0:	701a      	strb	r2, [r3, #0]
    while(val){
 80030b2:	e038      	b.n	8003126 <unsignedToStr+0xa2>
        temp = val % base;
 80030b4:	79fa      	ldrb	r2, [r7, #7]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80030bc:	fb01 f202 	mul.w	r2, r1, r2
 80030c0:	1a9b      	subs	r3, r3, r2
 80030c2:	74fb      	strb	r3, [r7, #19]
        if(temp>=0 && temp<=9)
 80030c4:	7cfb      	ldrb	r3, [r7, #19]
 80030c6:	2b09      	cmp	r3, #9
 80030c8:	d809      	bhi.n	80030de <unsignedToStr+0x5a>
            str[i++] = (char)(temp + (int)'0');
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	1c5a      	adds	r2, r3, #1
 80030ce:	617a      	str	r2, [r7, #20]
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	4413      	add	r3, r2
 80030d4:	7cfa      	ldrb	r2, [r7, #19]
 80030d6:	3230      	adds	r2, #48	; 0x30
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	701a      	strb	r2, [r3, #0]
 80030dc:	e01e      	b.n	800311c <unsignedToStr+0x98>
        else if(temp>=10 && temp <= (10+(ch_end-ch_start)))
 80030de:	7cfb      	ldrb	r3, [r7, #19]
 80030e0:	2b09      	cmp	r3, #9
 80030e2:	d914      	bls.n	800310e <unsignedToStr+0x8a>
 80030e4:	7cfa      	ldrb	r2, [r7, #19]
 80030e6:	237a      	movs	r3, #122	; 0x7a
 80030e8:	4619      	mov	r1, r3
 80030ea:	2361      	movs	r3, #97	; 0x61
 80030ec:	1acb      	subs	r3, r1, r3
 80030ee:	330a      	adds	r3, #10
 80030f0:	429a      	cmp	r2, r3
 80030f2:	dc0c      	bgt.n	800310e <unsignedToStr+0x8a>
            str[i++] = (char)(temp - 10 + ch_start);
 80030f4:	2261      	movs	r2, #97	; 0x61
 80030f6:	7cfb      	ldrb	r3, [r7, #19]
 80030f8:	4413      	add	r3, r2
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	1c59      	adds	r1, r3, #1
 8003100:	6179      	str	r1, [r7, #20]
 8003102:	68b9      	ldr	r1, [r7, #8]
 8003104:	440b      	add	r3, r1
 8003106:	3a0a      	subs	r2, #10
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	701a      	strb	r2, [r3, #0]
 800310c:	e006      	b.n	800311c <unsignedToStr+0x98>
        else
            str[i++] = (char)temp;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	617a      	str	r2, [r7, #20]
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	4413      	add	r3, r2
 8003118:	7cfa      	ldrb	r2, [r7, #19]
 800311a:	701a      	strb	r2, [r3, #0]
        val/=base;
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	fbb2 f3f3 	udiv	r3, r2, r3
 8003124:	60fb      	str	r3, [r7, #12]
    while(val){
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1c3      	bne.n	80030b4 <unsignedToStr+0x30>
    }

    while(i < (width+offset)){
 800312c:	e007      	b.n	800313e <unsignedToStr+0xba>
        str[i++]=fill;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	617a      	str	r2, [r7, #20]
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	4413      	add	r3, r2
 8003138:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800313c:	701a      	strb	r2, [r3, #0]
    while(i < (width+offset)){
 800313e:	79ba      	ldrb	r2, [r7, #6]
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	4413      	add	r3, r2
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	429a      	cmp	r2, r3
 8003148:	d3f1      	bcc.n	800312e <unsignedToStr+0xaa>
    }

    reverseStr(str,i,offset);
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	b2db      	uxtb	r3, r3
 800314e:	6a3a      	ldr	r2, [r7, #32]
 8003150:	4619      	mov	r1, r3
 8003152:	68b8      	ldr	r0, [r7, #8]
 8003154:	f7ff fbea 	bl	800292c <reverseStr>
    return i;
 8003158:	697b      	ldr	r3, [r7, #20]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <unsignedLongToStr>:
 * @param width     : Width of string
 * @param offset    : Offset
 * @param fill      : Filling character if width is empty
 * @return          : Last index + 1 of string
 */
static uint32_t unsignedLongToStr(unsigned long val,char *str,uint8_t base,uint8_t width,uint32_t offset,char fill){
 8003162:	b580      	push	{r7, lr}
 8003164:	b086      	sub	sp, #24
 8003166:	af00      	add	r7, sp, #0
 8003168:	60f8      	str	r0, [r7, #12]
 800316a:	60b9      	str	r1, [r7, #8]
 800316c:	4611      	mov	r1, r2
 800316e:	461a      	mov	r2, r3
 8003170:	460b      	mov	r3, r1
 8003172:	71fb      	strb	r3, [r7, #7]
 8003174:	4613      	mov	r3, r2
 8003176:	71bb      	strb	r3, [r7, #6]
    uint32_t i=offset;
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	617b      	str	r3, [r7, #20]
    uint8_t temp;
    if(val==0)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d140      	bne.n	8003204 <unsignedLongToStr+0xa2>
        str[i++] = '0';
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	617a      	str	r2, [r7, #20]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	4413      	add	r3, r2
 800318c:	2230      	movs	r2, #48	; 0x30
 800318e:	701a      	strb	r2, [r3, #0]
    while(val){
 8003190:	e038      	b.n	8003204 <unsignedLongToStr+0xa2>
        temp = val % base;
 8003192:	79fa      	ldrb	r2, [r7, #7]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	fbb3 f1f2 	udiv	r1, r3, r2
 800319a:	fb01 f202 	mul.w	r2, r1, r2
 800319e:	1a9b      	subs	r3, r3, r2
 80031a0:	74fb      	strb	r3, [r7, #19]
        if(temp>=0 && temp<=9)
 80031a2:	7cfb      	ldrb	r3, [r7, #19]
 80031a4:	2b09      	cmp	r3, #9
 80031a6:	d809      	bhi.n	80031bc <unsignedLongToStr+0x5a>
            str[i++] = (char)(temp + (int)'0');
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	617a      	str	r2, [r7, #20]
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	4413      	add	r3, r2
 80031b2:	7cfa      	ldrb	r2, [r7, #19]
 80031b4:	3230      	adds	r2, #48	; 0x30
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	701a      	strb	r2, [r3, #0]
 80031ba:	e01e      	b.n	80031fa <unsignedLongToStr+0x98>
        else if(temp>=10 && temp <= (10+(ch_end-ch_start)))
 80031bc:	7cfb      	ldrb	r3, [r7, #19]
 80031be:	2b09      	cmp	r3, #9
 80031c0:	d914      	bls.n	80031ec <unsignedLongToStr+0x8a>
 80031c2:	7cfa      	ldrb	r2, [r7, #19]
 80031c4:	237a      	movs	r3, #122	; 0x7a
 80031c6:	4619      	mov	r1, r3
 80031c8:	2361      	movs	r3, #97	; 0x61
 80031ca:	1acb      	subs	r3, r1, r3
 80031cc:	330a      	adds	r3, #10
 80031ce:	429a      	cmp	r2, r3
 80031d0:	dc0c      	bgt.n	80031ec <unsignedLongToStr+0x8a>
            str[i++] = (char)(temp - 10 + ch_start);
 80031d2:	2261      	movs	r2, #97	; 0x61
 80031d4:	7cfb      	ldrb	r3, [r7, #19]
 80031d6:	4413      	add	r3, r2
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	1c59      	adds	r1, r3, #1
 80031de:	6179      	str	r1, [r7, #20]
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	440b      	add	r3, r1
 80031e4:	3a0a      	subs	r2, #10
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	701a      	strb	r2, [r3, #0]
 80031ea:	e006      	b.n	80031fa <unsignedLongToStr+0x98>
        else
            str[i++] = (char)temp;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	617a      	str	r2, [r7, #20]
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	4413      	add	r3, r2
 80031f6:	7cfa      	ldrb	r2, [r7, #19]
 80031f8:	701a      	strb	r2, [r3, #0]
        val/=base;
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003202:	60fb      	str	r3, [r7, #12]
    while(val){
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1c3      	bne.n	8003192 <unsignedLongToStr+0x30>
    }

    while(i < (width+offset)){
 800320a:	e007      	b.n	800321c <unsignedLongToStr+0xba>
        str[i++]=fill;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	617a      	str	r2, [r7, #20]
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	4413      	add	r3, r2
 8003216:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800321a:	701a      	strb	r2, [r3, #0]
    while(i < (width+offset)){
 800321c:	79ba      	ldrb	r2, [r7, #6]
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	4413      	add	r3, r2
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	429a      	cmp	r2, r3
 8003226:	d3f1      	bcc.n	800320c <unsignedLongToStr+0xaa>
    }

    reverseStr(str,i,offset);
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	b2db      	uxtb	r3, r3
 800322c:	6a3a      	ldr	r2, [r7, #32]
 800322e:	4619      	mov	r1, r3
 8003230:	68b8      	ldr	r0, [r7, #8]
 8003232:	f7ff fb7b 	bl	800292c <reverseStr>
    return i;
 8003236:	697b      	ldr	r3, [r7, #20]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <unsignedLongLongToStr>:
 * @param width     : Width of string
 * @param offset    : Offset
 * @param fill      : Filling character if width is empty
 * @return          : Last index + 1 of string
 */
static uint32_t unsignedLongLongToStr(unsigned long long val,char *str,uint8_t base,uint8_t width,uint32_t offset,char fill){
 8003240:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003244:	b086      	sub	sp, #24
 8003246:	af00      	add	r7, sp, #0
 8003248:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	70fb      	strb	r3, [r7, #3]
    uint32_t i=offset;
 8003250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003252:	617b      	str	r3, [r7, #20]
    uint8_t temp;
    if(val==0)
 8003254:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003258:	4313      	orrs	r3, r2
 800325a:	d14d      	bne.n	80032f8 <unsignedLongLongToStr+0xb8>
        str[i++] = '0';
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	617a      	str	r2, [r7, #20]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	4413      	add	r3, r2
 8003266:	2230      	movs	r2, #48	; 0x30
 8003268:	701a      	strb	r2, [r3, #0]
    while(val){
 800326a:	e045      	b.n	80032f8 <unsignedLongLongToStr+0xb8>
        temp = val % base;
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	2200      	movs	r2, #0
 8003270:	461c      	mov	r4, r3
 8003272:	4615      	mov	r5, r2
 8003274:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003278:	4622      	mov	r2, r4
 800327a:	462b      	mov	r3, r5
 800327c:	f7fd fe16 	bl	8000eac <__aeabi_uldivmod>
 8003280:	4613      	mov	r3, r2
 8003282:	74fb      	strb	r3, [r7, #19]
        if(temp>=0 && temp<=9)
 8003284:	7cfb      	ldrb	r3, [r7, #19]
 8003286:	2b09      	cmp	r3, #9
 8003288:	d809      	bhi.n	800329e <unsignedLongLongToStr+0x5e>
            str[i++] = (char)(temp + (int)'0');
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	617a      	str	r2, [r7, #20]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	4413      	add	r3, r2
 8003294:	7cfa      	ldrb	r2, [r7, #19]
 8003296:	3230      	adds	r2, #48	; 0x30
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	701a      	strb	r2, [r3, #0]
 800329c:	e01e      	b.n	80032dc <unsignedLongLongToStr+0x9c>
        else if(temp>=10 && temp <= (10+(ch_end-ch_start)))
 800329e:	7cfb      	ldrb	r3, [r7, #19]
 80032a0:	2b09      	cmp	r3, #9
 80032a2:	d914      	bls.n	80032ce <unsignedLongLongToStr+0x8e>
 80032a4:	7cfa      	ldrb	r2, [r7, #19]
 80032a6:	237a      	movs	r3, #122	; 0x7a
 80032a8:	4619      	mov	r1, r3
 80032aa:	2361      	movs	r3, #97	; 0x61
 80032ac:	1acb      	subs	r3, r1, r3
 80032ae:	330a      	adds	r3, #10
 80032b0:	429a      	cmp	r2, r3
 80032b2:	dc0c      	bgt.n	80032ce <unsignedLongLongToStr+0x8e>
            str[i++] = (char)(temp - 10 + ch_start);
 80032b4:	2261      	movs	r2, #97	; 0x61
 80032b6:	7cfb      	ldrb	r3, [r7, #19]
 80032b8:	4413      	add	r3, r2
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	1c59      	adds	r1, r3, #1
 80032c0:	6179      	str	r1, [r7, #20]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	440b      	add	r3, r1
 80032c6:	3a0a      	subs	r2, #10
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	e006      	b.n	80032dc <unsignedLongLongToStr+0x9c>
        else
            str[i++] = (char)temp;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	617a      	str	r2, [r7, #20]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	4413      	add	r3, r2
 80032d8:	7cfa      	ldrb	r2, [r7, #19]
 80032da:	701a      	strb	r2, [r3, #0]
        val/=base;
 80032dc:	78fb      	ldrb	r3, [r7, #3]
 80032de:	2200      	movs	r2, #0
 80032e0:	4698      	mov	r8, r3
 80032e2:	4691      	mov	r9, r2
 80032e4:	4642      	mov	r2, r8
 80032e6:	464b      	mov	r3, r9
 80032e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032ec:	f7fd fdde 	bl	8000eac <__aeabi_uldivmod>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(val){
 80032f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	d1b5      	bne.n	800326c <unsignedLongLongToStr+0x2c>
    }

    while(i < (width+offset)){
 8003300:	e007      	b.n	8003312 <unsignedLongLongToStr+0xd2>
        str[i++]=fill;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	1c5a      	adds	r2, r3, #1
 8003306:	617a      	str	r2, [r7, #20]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	4413      	add	r3, r2
 800330c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003310:	701a      	strb	r2, [r3, #0]
    while(i < (width+offset)){
 8003312:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8003316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003318:	4413      	add	r3, r2
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	429a      	cmp	r2, r3
 800331e:	d3f0      	bcc.n	8003302 <unsignedLongLongToStr+0xc2>
    }

    reverseStr(str,i,offset);
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003326:	4619      	mov	r1, r3
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7ff faff 	bl	800292c <reverseStr>
    return i;
 800332e:	697b      	ldr	r3, [r7, #20]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800333c <doubleToStr>:
 * @param width         : Width
 * @param offset        : Offset
 * @param fill          : Filling character if width is empty
 * @return              : Last index + 1 of string
 */
static uint32_t doubleToStr(double val,char *str,uint8_t after_point,uint8_t width,uint32_t offset,char fill){
 800333c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003340:	b093      	sub	sp, #76	; 0x4c
 8003342:	af04      	add	r7, sp, #16
 8003344:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003348:	60fa      	str	r2, [r7, #12]
 800334a:	72fb      	strb	r3, [r7, #11]
    uint8_t is_negative = val < 0.0f;
 800334c:	2301      	movs	r3, #1
 800334e:	461e      	mov	r6, r3
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800335c:	f7fd fa44 	bl	80007e8 <__aeabi_dcmplt>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <doubleToStr+0x2e>
 8003366:	2300      	movs	r3, #0
 8003368:	461e      	mov	r6, r3
 800336a:	b2f3      	uxtb	r3, r6
 800336c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(is_negative)
 8003370:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003374:	2b00      	cmp	r3, #0
 8003376:	d009      	beq.n	800338c <doubleToStr+0x50>
        val=-val;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	603b      	str	r3, [r7, #0]
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003382:	607b      	str	r3, [r7, #4]
 8003384:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003388:	e9c7 2304 	strd	r2, r3, [r7, #16]

    if(after_point<1)
 800338c:	7afb      	ldrb	r3, [r7, #11]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <doubleToStr+0x5a>
        after_point = 1;
 8003392:	2301      	movs	r3, #1
 8003394:	72fb      	strb	r3, [r7, #11]

    int64_t integer_part = (int64_t)val;
 8003396:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800339a:	f7fd fd9f 	bl	8000edc <__aeabi_d2lz>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    uint64_t decimal_part = (uint64_t)((val-(double ) integer_part) * powf(10,after_point));
 80033a6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80033aa:	f7fd f98f 	bl	80006cc <__aeabi_l2d>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033b6:	f7fc ffff 	bl	80003b8 <__aeabi_dsub>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	4690      	mov	r8, r2
 80033c0:	4699      	mov	r9, r3
 80033c2:	7afb      	ldrb	r3, [r7, #11]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fd faed 	bl	80009a4 <__aeabi_ui2f>
 80033ca:	4603      	mov	r3, r0
 80033cc:	4619      	mov	r1, r3
 80033ce:	4845      	ldr	r0, [pc, #276]	; (80034e4 <doubleToStr+0x1a8>)
 80033d0:	f002 fa62 	bl	8005898 <powf>
 80033d4:	4603      	mov	r3, r0
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fd f94e 	bl	8000678 <__aeabi_f2d>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4640      	mov	r0, r8
 80033e2:	4649      	mov	r1, r9
 80033e4:	f7fc feba 	bl	800015c <__aeabi_dmul>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4610      	mov	r0, r2
 80033ee:	4619      	mov	r1, r3
 80033f0:	f7fd fd8e 	bl	8000f10 <__aeabi_d2ulz>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if(width>(after_point+1))
 80033fc:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8003400:	7afb      	ldrb	r3, [r7, #11]
 8003402:	3301      	adds	r3, #1
 8003404:	429a      	cmp	r2, r3
 8003406:	dd08      	ble.n	800341a <doubleToStr+0xde>
        width = width-after_point-1;
 8003408:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800340c:	7afb      	ldrb	r3, [r7, #11]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	b2db      	uxtb	r3, r3
 8003412:	3b01      	subs	r3, #1
 8003414:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 8003418:	e002      	b.n	8003420 <doubleToStr+0xe4>
    else
        width = 1;
 800341a:	2301      	movs	r3, #1
 800341c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

    if(integer_part==0 && is_negative && width<2)
 8003420:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003424:	4313      	orrs	r3, r2
 8003426:	d10b      	bne.n	8003440 <doubleToStr+0x104>
 8003428:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800342c:	2b00      	cmp	r3, #0
 800342e:	d007      	beq.n	8003440 <doubleToStr+0x104>
 8003430:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8003434:	2b01      	cmp	r3, #1
 8003436:	d803      	bhi.n	8003440 <doubleToStr+0x104>
        width = 2;
 8003438:	2302      	movs	r3, #2
 800343a:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 800343e:	e00b      	b.n	8003458 <doubleToStr+0x11c>
    else if(is_negative)
 8003440:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003444:	2b00      	cmp	r3, #0
 8003446:	d007      	beq.n	8003458 <doubleToStr+0x11c>
        integer_part = -integer_part;
 8003448:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800344c:	2100      	movs	r1, #0
 800344e:	4254      	negs	r4, r2
 8003450:	eb61 0503 	sbc.w	r5, r1, r3
 8003454:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    uint32_t i = offset;
 8003458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800345a:	61fb      	str	r3, [r7, #28]
    uint32_t temp = int64ToStr(integer_part,str,10,width,i,fill);
 800345c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8003460:	9302      	str	r3, [sp, #8]
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	9301      	str	r3, [sp, #4]
 8003466:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	230a      	movs	r3, #10
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003474:	f7ff fb78 	bl	8002b68 <int64ToStr>
 8003478:	61b8      	str	r0, [r7, #24]
    if(integer_part==0 && is_negative) {
 800347a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800347e:	4313      	orrs	r3, r2
 8003480:	d113      	bne.n	80034aa <doubleToStr+0x16e>
 8003482:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00f      	beq.n	80034aa <doubleToStr+0x16e>
        if(fill==' ')
 800348a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800348e:	2b20      	cmp	r3, #32
 8003490:	d106      	bne.n	80034a0 <doubleToStr+0x164>
            str[temp - 2] = '-';
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	3b02      	subs	r3, #2
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	4413      	add	r3, r2
 800349a:	222d      	movs	r2, #45	; 0x2d
 800349c:	701a      	strb	r2, [r3, #0]
 800349e:	e004      	b.n	80034aa <doubleToStr+0x16e>
        else
            str[i] = '-';
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	4413      	add	r3, r2
 80034a6:	222d      	movs	r2, #45	; 0x2d
 80034a8:	701a      	strb	r2, [r3, #0]
    }
    i = temp;
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	61fb      	str	r3, [r7, #28]
    str[i++] = '.';
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	61fa      	str	r2, [r7, #28]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	4413      	add	r3, r2
 80034b8:	222e      	movs	r2, #46	; 0x2e
 80034ba:	701a      	strb	r2, [r3, #0]
    i = uint64ToStr(decimal_part,str,10,after_point,i,'0');
 80034bc:	2330      	movs	r3, #48	; 0x30
 80034be:	9302      	str	r3, [sp, #8]
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	9301      	str	r3, [sp, #4]
 80034c4:	7afb      	ldrb	r3, [r7, #11]
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	230a      	movs	r3, #10
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80034d0:	f7ff facd 	bl	8002a6e <uint64ToStr>
 80034d4:	61f8      	str	r0, [r7, #28]
    return i;
 80034d6:	69fb      	ldr	r3, [r7, #28]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	373c      	adds	r7, #60	; 0x3c
 80034dc:	46bd      	mov	sp, r7
 80034de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80034e2:	bf00      	nop
 80034e4:	41200000 	.word	0x41200000

080034e8 <strToInt>:
__attribute__((weak)) void printString(char*str,uint32_t len){
//    for(uint32_t i=0;i<len;i++)
//        printChar(str[i]);
}

static int strToInt(const char* str,int len){
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
    if(len==0)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <strToInt+0x14>
        return 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	e01f      	b.n	800353c <strToInt+0x54>
    int x = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]
    int ten = 1;
 8003500:	2301      	movs	r3, #1
 8003502:	613b      	str	r3, [r7, #16]
    for(int i=len-1;i>=0;i--){
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	3b01      	subs	r3, #1
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	e013      	b.n	8003534 <strToInt+0x4c>
        x += (int)(str[i]-'0')*ten;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	4413      	add	r3, r2
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	3b30      	subs	r3, #48	; 0x30
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	fb02 f303 	mul.w	r3, r2, r3
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	4413      	add	r3, r2
 8003520:	617b      	str	r3, [r7, #20]
        ten*=10;
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	613b      	str	r3, [r7, #16]
    for(int i=len-1;i>=0;i--){
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	3b01      	subs	r3, #1
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2b00      	cmp	r3, #0
 8003538:	dae8      	bge.n	800350c <strToInt+0x24>
    }
    return x;
 800353a:	697b      	ldr	r3, [r7, #20]
}
 800353c:	4618      	mov	r0, r3
 800353e:	371c      	adds	r7, #28
 8003540:	46bd      	mov	sp, r7
 8003542:	bc80      	pop	{r7}
 8003544:	4770      	bx	lr
	...

08003548 <vsprint>:
    va_end(vl);
    buff[count]='\0';
    return count;
}

uint32_t vsprint(char *buff ,const char * format, va_list vl){
 8003548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800354a:	b0a9      	sub	sp, #164	; 0xa4
 800354c:	af04      	add	r7, sp, #16
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
    uint32_t count = 0;
 8003554:	2300      	movs	r3, #0
 8003556:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint32_t i = 0, len;
 800355a:	2300      	movs	r3, #0
 800355c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    char temp_buff[30]={0};
 8003560:	2300      	movs	r3, #0
 8003562:	61bb      	str	r3, [r7, #24]
 8003564:	f107 031c 	add.w	r3, r7, #28
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	605a      	str	r2, [r3, #4]
 800356e:	609a      	str	r2, [r3, #8]
 8003570:	60da      	str	r2, [r3, #12]
 8003572:	611a      	str	r2, [r3, #16]
 8003574:	615a      	str	r2, [r3, #20]
 8003576:	831a      	strh	r2, [r3, #24]
    char * str_arg;

    while (format[i]!='\0'){
 8003578:	f000 bc30 	b.w	8003ddc <vsprint+0x894>
        if(format[i] == '%'){
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003582:	4413      	add	r3, r2
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b25      	cmp	r3, #37	; 0x25
 8003588:	f040 8416 	bne.w	8003db8 <vsprint+0x870>
            char filler = ' ';
 800358c:	2320      	movs	r3, #32
 800358e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
            char a_buff[3]="";
 8003592:	4b9f      	ldr	r3, [pc, #636]	; (8003810 <vsprint+0x2c8>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	753b      	strb	r3, [r7, #20]
 8003598:	f107 0315 	add.w	r3, r7, #21
 800359c:	2200      	movs	r2, #0
 800359e:	801a      	strh	r2, [r3, #0]
            char b_buff[3]="";
 80035a0:	4b9b      	ldr	r3, [pc, #620]	; (8003810 <vsprint+0x2c8>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	743b      	strb	r3, [r7, #16]
 80035a6:	f107 0311 	add.w	r3, r7, #17
 80035aa:	2200      	movs	r2, #0
 80035ac:	801a      	strh	r2, [r3, #0]
            int a_len=0,b_len=0;
 80035ae:	2300      	movs	r3, #0
 80035b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035b4:	2300      	movs	r3, #0
 80035b6:	67fb      	str	r3, [r7, #124]	; 0x7c

            i++;
 80035b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035bc:	3301      	adds	r3, #1
 80035be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            if(format[i] == '0')
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035c8:	4413      	add	r3, r2
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b30      	cmp	r3, #48	; 0x30
 80035ce:	d109      	bne.n	80035e4 <vsprint+0x9c>
                filler = format[i++];
 80035d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	4413      	add	r3, r2
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
            uint8_t point_encounter = 0;
 80035e4:	2300      	movs	r3, #0
 80035e6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
            while(1){
                if(format[i] == 'c'){
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035f0:	4413      	add	r3, r2
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b63      	cmp	r3, #99	; 0x63
 80035f6:	d10d      	bne.n	8003614 <vsprint+0xcc>
                    buff[count++] = (char)va_arg( vl, int );
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	1d1a      	adds	r2, r3, #4
 80035fc:	607a      	str	r2, [r7, #4]
 80035fe:	6819      	ldr	r1, [r3, #0]
 8003600:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4413      	add	r3, r2
 800360e:	b2ca      	uxtb	r2, r1
 8003610:	701a      	strb	r2, [r3, #0]
                    break;
 8003612:	e3de      	b.n	8003dd2 <vsprint+0x88a>
                }else if(format[i] == 'd'){
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800361a:	4413      	add	r3, r2
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b64      	cmp	r3, #100	; 0x64
 8003620:	d131      	bne.n	8003686 <vsprint+0x13e>
                    len = intToStr(va_arg( vl, int ), temp_buff, 10, strToInt(a_buff, a_len), 0, filler);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	1d1a      	adds	r2, r3, #4
 8003626:	607a      	str	r2, [r7, #4]
 8003628:	681c      	ldr	r4, [r3, #0]
 800362a:	f107 0314 	add.w	r3, r7, #20
 800362e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff ff58 	bl	80034e8 <strToInt>
 8003638:	4603      	mov	r3, r0
 800363a:	b2da      	uxtb	r2, r3
 800363c:	f107 0118 	add.w	r1, r7, #24
 8003640:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003644:	9301      	str	r3, [sp, #4]
 8003646:	2300      	movs	r3, #0
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	4613      	mov	r3, r2
 800364c:	220a      	movs	r2, #10
 800364e:	4620      	mov	r0, r4
 8003650:	f7ff fb38 	bl	8002cc4 <intToStr>
 8003654:	63f8      	str	r0, [r7, #60]	; 0x3c
                    for(uint32_t k=0;k<len;k++)
 8003656:	2300      	movs	r3, #0
 8003658:	677b      	str	r3, [r7, #116]	; 0x74
 800365a:	e00f      	b.n	800367c <vsprint+0x134>
                        buff[count++] = temp_buff[k];
 800365c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4413      	add	r3, r2
 800366a:	f107 0118 	add.w	r1, r7, #24
 800366e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003670:	440a      	add	r2, r1
 8003672:	7812      	ldrb	r2, [r2, #0]
 8003674:	701a      	strb	r2, [r3, #0]
                    for(uint32_t k=0;k<len;k++)
 8003676:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003678:	3301      	adds	r3, #1
 800367a:	677b      	str	r3, [r7, #116]	; 0x74
 800367c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800367e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003680:	429a      	cmp	r2, r3
 8003682:	d3eb      	bcc.n	800365c <vsprint+0x114>
                    break;
 8003684:	e3a5      	b.n	8003dd2 <vsprint+0x88a>
                }else if(format[i] == 'u'){
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800368c:	4413      	add	r3, r2
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b75      	cmp	r3, #117	; 0x75
 8003692:	d131      	bne.n	80036f8 <vsprint+0x1b0>
                    len = unsignedToStr(va_arg( vl, unsigned ), temp_buff, 10, strToInt(a_buff, a_len), 0, filler);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	1d1a      	adds	r2, r3, #4
 8003698:	607a      	str	r2, [r7, #4]
 800369a:	681c      	ldr	r4, [r3, #0]
 800369c:	f107 0314 	add.w	r3, r7, #20
 80036a0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff ff1f 	bl	80034e8 <strToInt>
 80036aa:	4603      	mov	r3, r0
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	f107 0118 	add.w	r1, r7, #24
 80036b2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80036b6:	9301      	str	r3, [sp, #4]
 80036b8:	2300      	movs	r3, #0
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	4613      	mov	r3, r2
 80036be:	220a      	movs	r2, #10
 80036c0:	4620      	mov	r0, r4
 80036c2:	f7ff fcdf 	bl	8003084 <unsignedToStr>
 80036c6:	63f8      	str	r0, [r7, #60]	; 0x3c
                    for(uint32_t k=0;k<len;k++)
 80036c8:	2300      	movs	r3, #0
 80036ca:	673b      	str	r3, [r7, #112]	; 0x70
 80036cc:	e00f      	b.n	80036ee <vsprint+0x1a6>
                        buff[count++] = temp_buff[k];
 80036ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4413      	add	r3, r2
 80036dc:	f107 0118 	add.w	r1, r7, #24
 80036e0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80036e2:	440a      	add	r2, r1
 80036e4:	7812      	ldrb	r2, [r2, #0]
 80036e6:	701a      	strb	r2, [r3, #0]
                    for(uint32_t k=0;k<len;k++)
 80036e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036ea:	3301      	adds	r3, #1
 80036ec:	673b      	str	r3, [r7, #112]	; 0x70
 80036ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80036f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d3eb      	bcc.n	80036ce <vsprint+0x186>
                    break;
 80036f6:	e36c      	b.n	8003dd2 <vsprint+0x88a>
                }else if(format[i] == 'l' && format[i + 1] == 'd'){
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036fe:	4413      	add	r3, r2
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b6c      	cmp	r3, #108	; 0x6c
 8003704:	d13e      	bne.n	8003784 <vsprint+0x23c>
 8003706:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800370a:	3301      	adds	r3, #1
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	4413      	add	r3, r2
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	2b64      	cmp	r3, #100	; 0x64
 8003714:	d136      	bne.n	8003784 <vsprint+0x23c>
                    i++;
 8003716:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800371a:	3301      	adds	r3, #1
 800371c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    len = longToStr(va_arg( vl, long ), temp_buff, 10, strToInt(a_buff, a_len), 0, filler);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	1d1a      	adds	r2, r3, #4
 8003724:	607a      	str	r2, [r7, #4]
 8003726:	681c      	ldr	r4, [r3, #0]
 8003728:	f107 0314 	add.w	r3, r7, #20
 800372c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff fed9 	bl	80034e8 <strToInt>
 8003736:	4603      	mov	r3, r0
 8003738:	b2da      	uxtb	r2, r3
 800373a:	f107 0118 	add.w	r1, r7, #24
 800373e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003742:	9301      	str	r3, [sp, #4]
 8003744:	2300      	movs	r3, #0
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	4613      	mov	r3, r2
 800374a:	220a      	movs	r2, #10
 800374c:	4620      	mov	r0, r4
 800374e:	f7ff fb52 	bl	8002df6 <longToStr>
 8003752:	63f8      	str	r0, [r7, #60]	; 0x3c
                    for(uint32_t k=0;k<len;k++)
 8003754:	2300      	movs	r3, #0
 8003756:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003758:	e00f      	b.n	800377a <vsprint+0x232>
                        buff[count++] = temp_buff[k];
 800375a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800375e:	1c5a      	adds	r2, r3, #1
 8003760:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	4413      	add	r3, r2
 8003768:	f107 0118 	add.w	r1, r7, #24
 800376c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800376e:	440a      	add	r2, r1
 8003770:	7812      	ldrb	r2, [r2, #0]
 8003772:	701a      	strb	r2, [r3, #0]
                    for(uint32_t k=0;k<len;k++)
 8003774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003776:	3301      	adds	r3, #1
 8003778:	66fb      	str	r3, [r7, #108]	; 0x6c
 800377a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800377c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800377e:	429a      	cmp	r2, r3
 8003780:	d3eb      	bcc.n	800375a <vsprint+0x212>
                    break;
 8003782:	e326      	b.n	8003dd2 <vsprint+0x88a>
                }else if(format[i] == 'l' && format[i + 1] == 'u'){
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800378a:	4413      	add	r3, r2
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b6c      	cmp	r3, #108	; 0x6c
 8003790:	d140      	bne.n	8003814 <vsprint+0x2cc>
 8003792:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003796:	3301      	adds	r3, #1
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	4413      	add	r3, r2
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b75      	cmp	r3, #117	; 0x75
 80037a0:	d138      	bne.n	8003814 <vsprint+0x2cc>
                    i++;
 80037a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037a6:	3301      	adds	r3, #1
 80037a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    len = unsignedLongToStr(va_arg( vl, unsigned long), temp_buff, 10, strToInt(a_buff, a_len), 0, filler);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	1d1a      	adds	r2, r3, #4
 80037b0:	607a      	str	r2, [r7, #4]
 80037b2:	681c      	ldr	r4, [r3, #0]
 80037b4:	f107 0314 	add.w	r3, r7, #20
 80037b8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff fe93 	bl	80034e8 <strToInt>
 80037c2:	4603      	mov	r3, r0
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	f107 0118 	add.w	r1, r7, #24
 80037ca:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80037ce:	9301      	str	r3, [sp, #4]
 80037d0:	2300      	movs	r3, #0
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	4613      	mov	r3, r2
 80037d6:	220a      	movs	r2, #10
 80037d8:	4620      	mov	r0, r4
 80037da:	f7ff fcc2 	bl	8003162 <unsignedLongToStr>
 80037de:	63f8      	str	r0, [r7, #60]	; 0x3c
                    for(uint32_t k=0;k<len;k++)
 80037e0:	2300      	movs	r3, #0
 80037e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80037e4:	e00f      	b.n	8003806 <vsprint+0x2be>
                        buff[count++] = temp_buff[k];
 80037e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	4413      	add	r3, r2
 80037f4:	f107 0118 	add.w	r1, r7, #24
 80037f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80037fa:	440a      	add	r2, r1
 80037fc:	7812      	ldrb	r2, [r2, #0]
 80037fe:	701a      	strb	r2, [r3, #0]
                    for(uint32_t k=0;k<len;k++)
 8003800:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003802:	3301      	adds	r3, #1
 8003804:	66bb      	str	r3, [r7, #104]	; 0x68
 8003806:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800380a:	429a      	cmp	r2, r3
 800380c:	d3eb      	bcc.n	80037e6 <vsprint+0x29e>
                    break;
 800380e:	e2e0      	b.n	8003dd2 <vsprint+0x88a>
 8003810:	08006254 	.word	0x08006254
                }else if(format[i] == 'l' && format[i + 1] == 'l' && format[i + 2] == 'd'){
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800381a:	4413      	add	r3, r2
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b6c      	cmp	r3, #108	; 0x6c
 8003820:	d14d      	bne.n	80038be <vsprint+0x376>
 8003822:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003826:	3301      	adds	r3, #1
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	4413      	add	r3, r2
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	2b6c      	cmp	r3, #108	; 0x6c
 8003830:	d145      	bne.n	80038be <vsprint+0x376>
 8003832:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003836:	3302      	adds	r3, #2
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	4413      	add	r3, r2
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b64      	cmp	r3, #100	; 0x64
 8003840:	d13d      	bne.n	80038be <vsprint+0x376>
                    i+=2;
 8003842:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003846:	3302      	adds	r3, #2
 8003848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    len = longLongToStr(va_arg( vl, long long), temp_buff, 10, strToInt(a_buff, a_len), 0, filler);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3307      	adds	r3, #7
 8003850:	f023 0307 	bic.w	r3, r3, #7
 8003854:	f103 0208 	add.w	r2, r3, #8
 8003858:	607a      	str	r2, [r7, #4]
 800385a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800385e:	f107 0314 	add.w	r3, r7, #20
 8003862:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff fe3e 	bl	80034e8 <strToInt>
 800386c:	4603      	mov	r3, r0
 800386e:	b2db      	uxtb	r3, r3
 8003870:	f107 0118 	add.w	r1, r7, #24
 8003874:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8003878:	9202      	str	r2, [sp, #8]
 800387a:	2200      	movs	r2, #0
 800387c:	9201      	str	r2, [sp, #4]
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	230a      	movs	r3, #10
 8003882:	460a      	mov	r2, r1
 8003884:	4620      	mov	r0, r4
 8003886:	4629      	mov	r1, r5
 8003888:	f7ff fb4e 	bl	8002f28 <longLongToStr>
 800388c:	63f8      	str	r0, [r7, #60]	; 0x3c
                    for(uint32_t k=0;k<len;k++)
 800388e:	2300      	movs	r3, #0
 8003890:	667b      	str	r3, [r7, #100]	; 0x64
 8003892:	e00f      	b.n	80038b4 <vsprint+0x36c>
                        buff[count++] = temp_buff[k];
 8003894:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4413      	add	r3, r2
 80038a2:	f107 0118 	add.w	r1, r7, #24
 80038a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80038a8:	440a      	add	r2, r1
 80038aa:	7812      	ldrb	r2, [r2, #0]
 80038ac:	701a      	strb	r2, [r3, #0]
                    for(uint32_t k=0;k<len;k++)
 80038ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038b0:	3301      	adds	r3, #1
 80038b2:	667b      	str	r3, [r7, #100]	; 0x64
 80038b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80038b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d3eb      	bcc.n	8003894 <vsprint+0x34c>
                    break;
 80038bc:	e289      	b.n	8003dd2 <vsprint+0x88a>
                }else if(format[i] == 'l' && format[i + 1] == 'l' && format[i + 2] == 'u'){
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038c4:	4413      	add	r3, r2
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b6c      	cmp	r3, #108	; 0x6c
 80038ca:	d14d      	bne.n	8003968 <vsprint+0x420>
 80038cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038d0:	3301      	adds	r3, #1
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	4413      	add	r3, r2
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b6c      	cmp	r3, #108	; 0x6c
 80038da:	d145      	bne.n	8003968 <vsprint+0x420>
 80038dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038e0:	3302      	adds	r3, #2
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	4413      	add	r3, r2
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b75      	cmp	r3, #117	; 0x75
 80038ea:	d13d      	bne.n	8003968 <vsprint+0x420>
                    i+=2;
 80038ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038f0:	3302      	adds	r3, #2
 80038f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    len = unsignedLongLongToStr(va_arg( vl,unsigned long long), temp_buff, 10, strToInt(a_buff, a_len), 0, filler);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3307      	adds	r3, #7
 80038fa:	f023 0307 	bic.w	r3, r3, #7
 80038fe:	f103 0208 	add.w	r2, r3, #8
 8003902:	607a      	str	r2, [r7, #4]
 8003904:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003908:	f107 0314 	add.w	r3, r7, #20
 800390c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff fde9 	bl	80034e8 <strToInt>
 8003916:	4603      	mov	r3, r0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	f107 0118 	add.w	r1, r7, #24
 800391e:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8003922:	9202      	str	r2, [sp, #8]
 8003924:	2200      	movs	r2, #0
 8003926:	9201      	str	r2, [sp, #4]
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	230a      	movs	r3, #10
 800392c:	460a      	mov	r2, r1
 800392e:	4620      	mov	r0, r4
 8003930:	4629      	mov	r1, r5
 8003932:	f7ff fc85 	bl	8003240 <unsignedLongLongToStr>
 8003936:	63f8      	str	r0, [r7, #60]	; 0x3c
                    for(uint32_t k=0;k<len;k++)
 8003938:	2300      	movs	r3, #0
 800393a:	663b      	str	r3, [r7, #96]	; 0x60
 800393c:	e00f      	b.n	800395e <vsprint+0x416>
                        buff[count++] = temp_buff[k];
 800393e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	4413      	add	r3, r2
 800394c:	f107 0118 	add.w	r1, r7, #24
 8003950:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003952:	440a      	add	r2, r1
 8003954:	7812      	ldrb	r2, [r2, #0]
 8003956:	701a      	strb	r2, [r3, #0]
                    for(uint32_t k=0;k<len;k++)
 8003958:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800395a:	3301      	adds	r3, #1
 800395c:	663b      	str	r3, [r7, #96]	; 0x60
 800395e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003962:	429a      	cmp	r2, r3
 8003964:	d3eb      	bcc.n	800393e <vsprint+0x3f6>
                    break;
 8003966:	e234      	b.n	8003dd2 <vsprint+0x88a>
                }else if(format[i] == 'x'){
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800396e:	4413      	add	r3, r2
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b78      	cmp	r3, #120	; 0x78
 8003974:	d131      	bne.n	80039da <vsprint+0x492>
                    len = unsignedToStr(va_arg( vl, unsigned ), temp_buff, 16, strToInt(a_buff, a_len), 0, filler);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	1d1a      	adds	r2, r3, #4
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	681c      	ldr	r4, [r3, #0]
 800397e:	f107 0314 	add.w	r3, r7, #20
 8003982:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff fdae 	bl	80034e8 <strToInt>
 800398c:	4603      	mov	r3, r0
 800398e:	b2da      	uxtb	r2, r3
 8003990:	f107 0118 	add.w	r1, r7, #24
 8003994:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003998:	9301      	str	r3, [sp, #4]
 800399a:	2300      	movs	r3, #0
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	4613      	mov	r3, r2
 80039a0:	2210      	movs	r2, #16
 80039a2:	4620      	mov	r0, r4
 80039a4:	f7ff fb6e 	bl	8003084 <unsignedToStr>
 80039a8:	63f8      	str	r0, [r7, #60]	; 0x3c
                    for(uint32_t k=0;k<len;k++)
 80039aa:	2300      	movs	r3, #0
 80039ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039ae:	e00f      	b.n	80039d0 <vsprint+0x488>
                        buff[count++] = temp_buff[k];
 80039b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4413      	add	r3, r2
 80039be:	f107 0118 	add.w	r1, r7, #24
 80039c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039c4:	440a      	add	r2, r1
 80039c6:	7812      	ldrb	r2, [r2, #0]
 80039c8:	701a      	strb	r2, [r3, #0]
                    for(uint32_t k=0;k<len;k++)
 80039ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039cc:	3301      	adds	r3, #1
 80039ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d3eb      	bcc.n	80039b0 <vsprint+0x468>
                    break;
 80039d8:	e1fb      	b.n	8003dd2 <vsprint+0x88a>
                }else if(format[i] == 'l' && format[i + 1] == 'x'){
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039e0:	4413      	add	r3, r2
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b6c      	cmp	r3, #108	; 0x6c
 80039e6:	d13e      	bne.n	8003a66 <vsprint+0x51e>
 80039e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039ec:	3301      	adds	r3, #1
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	4413      	add	r3, r2
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b78      	cmp	r3, #120	; 0x78
 80039f6:	d136      	bne.n	8003a66 <vsprint+0x51e>
                    i++;
 80039f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039fc:	3301      	adds	r3, #1
 80039fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    len = unsignedLongToStr(va_arg( vl, unsigned long), temp_buff, 10, strToInt(a_buff, a_len), 0, filler);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	1d1a      	adds	r2, r3, #4
 8003a06:	607a      	str	r2, [r7, #4]
 8003a08:	681c      	ldr	r4, [r3, #0]
 8003a0a:	f107 0314 	add.w	r3, r7, #20
 8003a0e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff fd68 	bl	80034e8 <strToInt>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	f107 0118 	add.w	r1, r7, #24
 8003a20:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003a24:	9301      	str	r3, [sp, #4]
 8003a26:	2300      	movs	r3, #0
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	220a      	movs	r2, #10
 8003a2e:	4620      	mov	r0, r4
 8003a30:	f7ff fb97 	bl	8003162 <unsignedLongToStr>
 8003a34:	63f8      	str	r0, [r7, #60]	; 0x3c
                    for(uint32_t k=0;k<len;k++)
 8003a36:	2300      	movs	r3, #0
 8003a38:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a3a:	e00f      	b.n	8003a5c <vsprint+0x514>
                        buff[count++] = temp_buff[k];
 8003a3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f107 0118 	add.w	r1, r7, #24
 8003a4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a50:	440a      	add	r2, r1
 8003a52:	7812      	ldrb	r2, [r2, #0]
 8003a54:	701a      	strb	r2, [r3, #0]
                    for(uint32_t k=0;k<len;k++)
 8003a56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a58:	3301      	adds	r3, #1
 8003a5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d3eb      	bcc.n	8003a3c <vsprint+0x4f4>
                    break;
 8003a64:	e1b5      	b.n	8003dd2 <vsprint+0x88a>
                }else if(format[i] == 'l' && format[i + 1] == 'l' && format[i + 2] == 'x'){
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a6c:	4413      	add	r3, r2
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b6c      	cmp	r3, #108	; 0x6c
 8003a72:	d14d      	bne.n	8003b10 <vsprint+0x5c8>
 8003a74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a78:	3301      	adds	r3, #1
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b6c      	cmp	r3, #108	; 0x6c
 8003a82:	d145      	bne.n	8003b10 <vsprint+0x5c8>
 8003a84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a88:	3302      	adds	r3, #2
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b78      	cmp	r3, #120	; 0x78
 8003a92:	d13d      	bne.n	8003b10 <vsprint+0x5c8>
                    i+=2;
 8003a94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a98:	3302      	adds	r3, #2
 8003a9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    len = unsignedLongLongToStr(va_arg( vl,unsigned long long), temp_buff, 16, strToInt(a_buff, a_len), 0, filler);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3307      	adds	r3, #7
 8003aa2:	f023 0307 	bic.w	r3, r3, #7
 8003aa6:	f103 0208 	add.w	r2, r3, #8
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003ab0:	f107 0314 	add.w	r3, r7, #20
 8003ab4:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff fd15 	bl	80034e8 <strToInt>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	f107 0118 	add.w	r1, r7, #24
 8003ac6:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8003aca:	9202      	str	r2, [sp, #8]
 8003acc:	2200      	movs	r2, #0
 8003ace:	9201      	str	r2, [sp, #4]
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	2310      	movs	r3, #16
 8003ad4:	460a      	mov	r2, r1
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	4629      	mov	r1, r5
 8003ada:	f7ff fbb1 	bl	8003240 <unsignedLongLongToStr>
 8003ade:	63f8      	str	r0, [r7, #60]	; 0x3c
                    for(uint32_t k=0;k<len;k++)
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	657b      	str	r3, [r7, #84]	; 0x54
 8003ae4:	e00f      	b.n	8003b06 <vsprint+0x5be>
                        buff[count++] = temp_buff[k];
 8003ae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	4413      	add	r3, r2
 8003af4:	f107 0118 	add.w	r1, r7, #24
 8003af8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003afa:	440a      	add	r2, r1
 8003afc:	7812      	ldrb	r2, [r2, #0]
 8003afe:	701a      	strb	r2, [r3, #0]
                    for(uint32_t k=0;k<len;k++)
 8003b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b02:	3301      	adds	r3, #1
 8003b04:	657b      	str	r3, [r7, #84]	; 0x54
 8003b06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d3eb      	bcc.n	8003ae6 <vsprint+0x59e>
                    break;
 8003b0e:	e160      	b.n	8003dd2 <vsprint+0x88a>
                }else if(format[i] == 'p'){
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b16:	4413      	add	r3, r2
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b70      	cmp	r3, #112	; 0x70
 8003b1c:	d131      	bne.n	8003b82 <vsprint+0x63a>
                    if(sizeof(void*)<=4)
                        len = uint32ToStr(va_arg( vl, uint32_t), temp_buff, 16, 8, 0, '0');
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	1d1a      	adds	r2, r3, #4
 8003b22:	607a      	str	r2, [r7, #4]
 8003b24:	6818      	ldr	r0, [r3, #0]
 8003b26:	f107 0118 	add.w	r1, r7, #24
 8003b2a:	2330      	movs	r3, #48	; 0x30
 8003b2c:	9301      	str	r3, [sp, #4]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	2308      	movs	r3, #8
 8003b34:	2210      	movs	r2, #16
 8003b36:	f7fe ff2b 	bl	8002990 <uint32ToStr>
 8003b3a:	63f8      	str	r0, [r7, #60]	; 0x3c
                    else if(sizeof(void*)<=8)
                        len = uint64ToStr(va_arg( vl, uint64_t), temp_buff, 16, 16, 0, '0');
                    printString("0x",2);
 8003b3c:	2102      	movs	r1, #2
 8003b3e:	48b1      	ldr	r0, [pc, #708]	; (8003e04 <vsprint+0x8bc>)
 8003b40:	f000 fdb6 	bl	80046b0 <printString>
                    count+=len+2;
 8003b44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b4a:	4413      	add	r3, r2
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    for(uint32_t k=0;k<len;k++)
 8003b52:	2300      	movs	r3, #0
 8003b54:	653b      	str	r3, [r7, #80]	; 0x50
 8003b56:	e00f      	b.n	8003b78 <vsprint+0x630>
                        buff[count++] = temp_buff[k];
 8003b58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b5c:	1c5a      	adds	r2, r3, #1
 8003b5e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4413      	add	r3, r2
 8003b66:	f107 0118 	add.w	r1, r7, #24
 8003b6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b6c:	440a      	add	r2, r1
 8003b6e:	7812      	ldrb	r2, [r2, #0]
 8003b70:	701a      	strb	r2, [r3, #0]
                    for(uint32_t k=0;k<len;k++)
 8003b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b74:	3301      	adds	r3, #1
 8003b76:	653b      	str	r3, [r7, #80]	; 0x50
 8003b78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d3eb      	bcc.n	8003b58 <vsprint+0x610>
                    break;
 8003b80:	e127      	b.n	8003dd2 <vsprint+0x88a>
                }else if(format[i] == 'o'){
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b88:	4413      	add	r3, r2
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2b6f      	cmp	r3, #111	; 0x6f
 8003b8e:	d131      	bne.n	8003bf4 <vsprint+0x6ac>
                    len = intToStr(va_arg( vl, int ), temp_buff, 8, strToInt(a_buff, a_len), 0, filler);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	1d1a      	adds	r2, r3, #4
 8003b94:	607a      	str	r2, [r7, #4]
 8003b96:	681c      	ldr	r4, [r3, #0]
 8003b98:	f107 0314 	add.w	r3, r7, #20
 8003b9c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff fca1 	bl	80034e8 <strToInt>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	f107 0118 	add.w	r1, r7, #24
 8003bae:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003bb2:	9301      	str	r3, [sp, #4]
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	2208      	movs	r2, #8
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	f7ff f881 	bl	8002cc4 <intToStr>
 8003bc2:	63f8      	str	r0, [r7, #60]	; 0x3c
                    for(uint32_t k=0;k<len;k++)
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bc8:	e00f      	b.n	8003bea <vsprint+0x6a2>
                        buff[count++] = temp_buff[k];
 8003bca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f107 0118 	add.w	r1, r7, #24
 8003bdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bde:	440a      	add	r2, r1
 8003be0:	7812      	ldrb	r2, [r2, #0]
 8003be2:	701a      	strb	r2, [r3, #0]
                    for(uint32_t k=0;k<len;k++)
 8003be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be6:	3301      	adds	r3, #1
 8003be8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d3eb      	bcc.n	8003bca <vsprint+0x682>
                    break;
 8003bf2:	e0ee      	b.n	8003dd2 <vsprint+0x88a>
                }else if(format[i] == 'f'){
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bfa:	4413      	add	r3, r2
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2b66      	cmp	r3, #102	; 0x66
 8003c00:	d145      	bne.n	8003c8e <vsprint+0x746>
                    len = doubleToStr(va_arg( vl, double ), temp_buff, b_len==0?6:strToInt(b_buff, b_len), strToInt(a_buff, a_len), 0, filler);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3307      	adds	r3, #7
 8003c06:	f023 0307 	bic.w	r3, r3, #7
 8003c0a:	f103 0208 	add.w	r2, r3, #8
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003c14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d008      	beq.n	8003c2c <vsprint+0x6e4>
 8003c1a:	f107 0310 	add.w	r3, r7, #16
 8003c1e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff fc61 	bl	80034e8 <strToInt>
 8003c26:	4603      	mov	r3, r0
 8003c28:	b2de      	uxtb	r6, r3
 8003c2a:	e000      	b.n	8003c2e <vsprint+0x6e6>
 8003c2c:	2606      	movs	r6, #6
 8003c2e:	f107 0314 	add.w	r3, r7, #20
 8003c32:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff fc56 	bl	80034e8 <strToInt>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	f107 0118 	add.w	r1, r7, #24
 8003c44:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8003c48:	9202      	str	r2, [sp, #8]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	9201      	str	r2, [sp, #4]
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	4633      	mov	r3, r6
 8003c52:	460a      	mov	r2, r1
 8003c54:	4620      	mov	r0, r4
 8003c56:	4629      	mov	r1, r5
 8003c58:	f7ff fb70 	bl	800333c <doubleToStr>
 8003c5c:	63f8      	str	r0, [r7, #60]	; 0x3c
                    for(uint32_t k=0;k<len;k++)
 8003c5e:	2300      	movs	r3, #0
 8003c60:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c62:	e00f      	b.n	8003c84 <vsprint+0x73c>
                        buff[count++] = temp_buff[k];
 8003c64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4413      	add	r3, r2
 8003c72:	f107 0118 	add.w	r1, r7, #24
 8003c76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c78:	440a      	add	r2, r1
 8003c7a:	7812      	ldrb	r2, [r2, #0]
 8003c7c:	701a      	strb	r2, [r3, #0]
                    for(uint32_t k=0;k<len;k++)
 8003c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c80:	3301      	adds	r3, #1
 8003c82:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d3eb      	bcc.n	8003c64 <vsprint+0x71c>
                    break;
 8003c8c:	e0a1      	b.n	8003dd2 <vsprint+0x88a>
                }else if(format[i] == 'b'){
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c94:	4413      	add	r3, r2
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b62      	cmp	r3, #98	; 0x62
 8003c9a:	d131      	bne.n	8003d00 <vsprint+0x7b8>
                    len = unsignedToStr(va_arg( vl, unsigned ), temp_buff, 2, strToInt(a_buff, a_len), 0, filler);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	1d1a      	adds	r2, r3, #4
 8003ca0:	607a      	str	r2, [r7, #4]
 8003ca2:	681c      	ldr	r4, [r3, #0]
 8003ca4:	f107 0314 	add.w	r3, r7, #20
 8003ca8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7ff fc1b 	bl	80034e8 <strToInt>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	f107 0118 	add.w	r1, r7, #24
 8003cba:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003cbe:	9301      	str	r3, [sp, #4]
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	4620      	mov	r0, r4
 8003cca:	f7ff f9db 	bl	8003084 <unsignedToStr>
 8003cce:	63f8      	str	r0, [r7, #60]	; 0x3c
                    for(uint32_t k=0;k<len;k++)
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	647b      	str	r3, [r7, #68]	; 0x44
 8003cd4:	e00f      	b.n	8003cf6 <vsprint+0x7ae>
                        buff[count++] = temp_buff[k];
 8003cd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f107 0118 	add.w	r1, r7, #24
 8003ce8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cea:	440a      	add	r2, r1
 8003cec:	7812      	ldrb	r2, [r2, #0]
 8003cee:	701a      	strb	r2, [r3, #0]
                    for(uint32_t k=0;k<len;k++)
 8003cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	647b      	str	r3, [r7, #68]	; 0x44
 8003cf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d3eb      	bcc.n	8003cd6 <vsprint+0x78e>
                    break;
 8003cfe:	e068      	b.n	8003dd2 <vsprint+0x88a>
                }else if(format[i] == 's'){
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d06:	4413      	add	r3, r2
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	2b73      	cmp	r3, #115	; 0x73
 8003d0c:	d11f      	bne.n	8003d4e <vsprint+0x806>
                    str_arg = va_arg( vl, char* );
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	1d1a      	adds	r2, r3, #4
 8003d12:	607a      	str	r2, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	63bb      	str	r3, [r7, #56]	; 0x38
                    len = strlen(str_arg);
 8003d18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d1a:	f7fc fa17 	bl	800014c <strlen>
 8003d1e:	63f8      	str	r0, [r7, #60]	; 0x3c
                    for(uint32_t k=0;k<len;k++)
 8003d20:	2300      	movs	r3, #0
 8003d22:	643b      	str	r3, [r7, #64]	; 0x40
 8003d24:	e00e      	b.n	8003d44 <vsprint+0x7fc>
                        buff[count++] = str_arg[k];
 8003d26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d2a:	441a      	add	r2, r3
 8003d2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d30:	1c59      	adds	r1, r3, #1
 8003d32:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 8003d36:	68f9      	ldr	r1, [r7, #12]
 8003d38:	440b      	add	r3, r1
 8003d3a:	7812      	ldrb	r2, [r2, #0]
 8003d3c:	701a      	strb	r2, [r3, #0]
                    for(uint32_t k=0;k<len;k++)
 8003d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d40:	3301      	adds	r3, #1
 8003d42:	643b      	str	r3, [r7, #64]	; 0x40
 8003d44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d3ec      	bcc.n	8003d26 <vsprint+0x7de>
                    break;
 8003d4c:	e041      	b.n	8003dd2 <vsprint+0x88a>
                }else if(format[i] == '.'){
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d54:	4413      	add	r3, r2
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	2b2e      	cmp	r3, #46	; 0x2e
 8003d5a:	d108      	bne.n	8003d6e <vsprint+0x826>
                    point_encounter = 1;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
                    i++;
 8003d62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d66:	3301      	adds	r3, #1
 8003d68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d6c:	e43d      	b.n	80035ea <vsprint+0xa2>
                }else{
                    if(!point_encounter)
 8003d6e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10e      	bne.n	8003d94 <vsprint+0x84c>
                        a_buff[a_len++] = format[i];
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d7c:	441a      	add	r2, r3
 8003d7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d82:	1c59      	adds	r1, r3, #1
 8003d84:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8003d88:	7812      	ldrb	r2, [r2, #0]
 8003d8a:	3390      	adds	r3, #144	; 0x90
 8003d8c:	443b      	add	r3, r7
 8003d8e:	f803 2c7c 	strb.w	r2, [r3, #-124]
 8003d92:	e00b      	b.n	8003dac <vsprint+0x864>
                    else
                        b_buff[b_len++] = format[i];
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d9a:	441a      	add	r2, r3
 8003d9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d9e:	1c59      	adds	r1, r3, #1
 8003da0:	67f9      	str	r1, [r7, #124]	; 0x7c
 8003da2:	7812      	ldrb	r2, [r2, #0]
 8003da4:	3390      	adds	r3, #144	; 0x90
 8003da6:	443b      	add	r3, r7
 8003da8:	f803 2c80 	strb.w	r2, [r3, #-128]
                    i++;
 8003dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003db0:	3301      	adds	r3, #1
 8003db2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                if(format[i] == 'c'){
 8003db6:	e418      	b.n	80035ea <vsprint+0xa2>
                }
            }
        } else {
            buff[count++] = format[i];
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003dbe:	441a      	add	r2, r3
 8003dc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dc4:	1c59      	adds	r1, r3, #1
 8003dc6:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 8003dca:	68f9      	ldr	r1, [r7, #12]
 8003dcc:	440b      	add	r3, r1
 8003dce:	7812      	ldrb	r2, [r2, #0]
 8003dd0:	701a      	strb	r2, [r3, #0]
        }
        i++;
 8003dd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    while (format[i]!='\0'){
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003de2:	4413      	add	r3, r2
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f47f abc8 	bne.w	800357c <vsprint+0x34>
    }
    buff[count]='\0';
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003df2:	4413      	add	r3, r2
 8003df4:	2200      	movs	r2, #0
 8003df6:	701a      	strb	r2, [r3, #0]
    return count;
 8003df8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3794      	adds	r7, #148	; 0x94
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e04:	08006250 	.word	0x08006250

08003e08 <_isPSP>:
static uint8_t scheduler_started = 0;	// Scheduler started flag

static char buff[1024];

/********************LOCAL FUNCTIONS***************************/
static int _isPSP(){
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
	int control_reg;
	__asm volatile("MRS %0, CONTROL": "=r"(control_reg));
 8003e0e:	f3ef 8314 	mrs	r3, CONTROL
 8003e12:	607b      	str	r3, [r7, #4]
	/**
	 * If control register 2nd bit is set then PSP
	 * Else not PSP
	 */
	return control_reg & (1<2);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f003 0301 	and.w	r3, r3, #1
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr

08003e24 <_console>:

static void _console(ConsoleState state,const char* func_name, const char* msg,...){
 8003e24:	b40c      	push	{r2, r3}
 8003e26:	b480      	push	{r7}
 8003e28:	b085      	sub	sp, #20
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	6039      	str	r1, [r7, #0]
 8003e30:	71fb      	strb	r3, [r7, #7]
	vprintf(msg,l);
	va_end(l);

    if(_isPSP() && (priority!=-1))
    	current_task->priority = 0;
}
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bc80      	pop	{r7}
 8003e38:	b002      	add	sp, #8
 8003e3a:	4770      	bx	lr

08003e3c <_task_getCurrentPSP>:

uint32_t _task_getCurrentPSP(){
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
	return current_task->psp;
 8003e40:	4b03      	ldr	r3, [pc, #12]	; (8003e50 <_task_getCurrentPSP+0x14>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bc80      	pop	{r7}
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	20000148 	.word	0x20000148

08003e54 <_task_saveCurrentPSP>:

void _task_saveCurrentPSP(uint32_t psp) {
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
	current_task->psp = psp;
 8003e5c:	4b04      	ldr	r3, [pc, #16]	; (8003e70 <_task_saveCurrentPSP+0x1c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	609a      	str	r2, [r3, #8]
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	20000148 	.word	0x20000148

08003e74 <_task_restartCurrentTask>:

void _task_restartCurrentTask(){
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
	/* Calculate PSP */
	uint32_t *psp = (uint32_t*)current_task->stack_start;
 8003e7a:	4b17      	ldr	r3, [pc, #92]	; (8003ed8 <_task_restartCurrentTask+0x64>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	607b      	str	r3, [r7, #4]

	/* fill dummy stack frame */
	*(--psp) = 0x01000000u; 					// Dummy xPSR, just enable Thumb State bit;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3b04      	subs	r3, #4
 8003e86:	607b      	str	r3, [r7, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e8e:	601a      	str	r2, [r3, #0]
	*(--psp) = (uint32_t) current_task->handler;// PC
 8003e90:	4b11      	ldr	r3, [pc, #68]	; (8003ed8 <_task_restartCurrentTask+0x64>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3b04      	subs	r3, #4
 8003e9a:	607b      	str	r3, [r7, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	601a      	str	r2, [r3, #0]
	*(--psp) = 0xFFFFFFFDu; 					// LR with EXC_RETURN to return to Thread using PSP
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3b04      	subs	r3, #4
 8003ea4:	607b      	str	r3, [r7, #4]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f06f 0202 	mvn.w	r2, #2
 8003eac:	601a      	str	r2, [r3, #0]
	psp-=(16-3);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3b34      	subs	r3, #52	; 0x34
 8003eb2:	607b      	str	r3, [r7, #4]

	/* Add task */
	current_task->state = TASK_RUNNING;
 8003eb4:	4b08      	ldr	r3, [pc, #32]	; (8003ed8 <_task_restartCurrentTask+0x64>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	731a      	strb	r2, [r3, #12]
	current_task->wait_tick = 0;
 8003ebc:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <_task_restartCurrentTask+0x64>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	611a      	str	r2, [r3, #16]
	current_task->psp = (uint32_t)psp;
 8003ec4:	4b04      	ldr	r3, [pc, #16]	; (8003ed8 <_task_restartCurrentTask+0x64>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	609a      	str	r2, [r3, #8]
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bc80      	pop	{r7}
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	20000148 	.word	0x20000148

08003edc <_task_deleteCurrentTask>:

void _task_deleteCurrentTask(){
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
	current_task->psp = 0;
 8003ee0:	4b0d      	ldr	r3, [pc, #52]	; (8003f18 <_task_deleteCurrentTask+0x3c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	609a      	str	r2, [r3, #8]
	current_task->id = 0;
 8003ee8:	4b0b      	ldr	r3, [pc, #44]	; (8003f18 <_task_deleteCurrentTask+0x3c>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]
	current_task->handler = 0;
 8003ef0:	4b09      	ldr	r3, [pc, #36]	; (8003f18 <_task_deleteCurrentTask+0x3c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	605a      	str	r2, [r3, #4]
	current_task->state = TASK_BLOCKED;
 8003ef8:	4b07      	ldr	r3, [pc, #28]	; (8003f18 <_task_deleteCurrentTask+0x3c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2202      	movs	r2, #2
 8003efe:	731a      	strb	r2, [r3, #12]
	free(current_task->stack);
 8003f00:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <_task_deleteCurrentTask+0x3c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 fcac 	bl	8004864 <free>
	current_task->stack = NULL;
 8003f0c:	4b02      	ldr	r3, [pc, #8]	; (8003f18 <_task_deleteCurrentTask+0x3c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2200      	movs	r2, #0
 8003f12:	61da      	str	r2, [r3, #28]
}
 8003f14:	bf00      	nop
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	20000148 	.word	0x20000148

08003f1c <_task_selectNextTask>:

void _task_selectNextTask(){
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
	/* Task is set to highest priority */
	if(current_task->priority==-1)// same task should run
 8003f22:	4b2b      	ldr	r3, [pc, #172]	; (8003fd0 <_task_selectNextTask+0xb4>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f993 300d 	ldrsb.w	r3, [r3, #13]
 8003f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2e:	d04a      	beq.n	8003fc6 <_task_selectNextTask+0xaa>
		return;

	int i = 0;
 8003f30:	2300      	movs	r3, #0
 8003f32:	607b      	str	r3, [r7, #4]
	for(;i<TASK_MAX_NUMBER;i++){
 8003f34:	e03b      	b.n	8003fae <_task_selectNextTask+0x92>
		current_task = current_task->next_task;
 8003f36:	4b26      	ldr	r3, [pc, #152]	; (8003fd0 <_task_selectNextTask+0xb4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	4a24      	ldr	r2, [pc, #144]	; (8003fd0 <_task_selectNextTask+0xb4>)
 8003f3e:	6013      	str	r3, [r2, #0]
		if(current_task->id==0xFFFFFFFF)// Idle task
 8003f40:	4b23      	ldr	r3, [pc, #140]	; (8003fd0 <_task_selectNextTask+0xb4>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4a:	d026      	beq.n	8003f9a <_task_selectNextTask+0x7e>
			continue;

		if(current_task->psp==0)		//Empty task
 8003f4c:	4b20      	ldr	r3, [pc, #128]	; (8003fd0 <_task_selectNextTask+0xb4>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d023      	beq.n	8003f9e <_task_selectNextTask+0x82>
			continue;

		/*check ticks */
		if(current_task->wait_tick>global_ticks)
 8003f56:	4b1e      	ldr	r3, [pc, #120]	; (8003fd0 <_task_selectNextTask+0xb4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	4b1d      	ldr	r3, [pc, #116]	; (8003fd4 <_task_selectNextTask+0xb8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d81e      	bhi.n	8003fa2 <_task_selectNextTask+0x86>
			continue;

		if(current_task->state==TASK_RESTART)
 8003f64:	4b1a      	ldr	r3, [pc, #104]	; (8003fd0 <_task_selectNextTask+0xb4>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	7b1b      	ldrb	r3, [r3, #12]
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d102      	bne.n	8003f74 <_task_selectNextTask+0x58>
			_task_restartCurrentTask();
 8003f6e:	f7ff ff81 	bl	8003e74 <_task_restartCurrentTask>
 8003f72:	e019      	b.n	8003fa8 <_task_selectNextTask+0x8c>
		else if(current_task->state==TASK_DELETE){
 8003f74:	4b16      	ldr	r3, [pc, #88]	; (8003fd0 <_task_selectNextTask+0xb4>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	7b1b      	ldrb	r3, [r3, #12]
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d102      	bne.n	8003f84 <_task_selectNextTask+0x68>
			_task_deleteCurrentTask();
 8003f7e:	f7ff ffad 	bl	8003edc <_task_deleteCurrentTask>
			continue;
 8003f82:	e011      	b.n	8003fa8 <_task_selectNextTask+0x8c>
		}else if(current_task->state==TASK_BLOCKED)
 8003f84:	4b12      	ldr	r3, [pc, #72]	; (8003fd0 <_task_selectNextTask+0xb4>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	7b1b      	ldrb	r3, [r3, #12]
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d00b      	beq.n	8003fa6 <_task_selectNextTask+0x8a>
			continue;
		else if(current_task->state == TASK_RUNNING)
 8003f8e:	4b10      	ldr	r3, [pc, #64]	; (8003fd0 <_task_selectNextTask+0xb4>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	7b1b      	ldrb	r3, [r3, #12]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00e      	beq.n	8003fb6 <_task_selectNextTask+0x9a>
 8003f98:	e006      	b.n	8003fa8 <_task_selectNextTask+0x8c>
			continue;
 8003f9a:	bf00      	nop
 8003f9c:	e004      	b.n	8003fa8 <_task_selectNextTask+0x8c>
			continue;
 8003f9e:	bf00      	nop
 8003fa0:	e002      	b.n	8003fa8 <_task_selectNextTask+0x8c>
			continue;
 8003fa2:	bf00      	nop
 8003fa4:	e000      	b.n	8003fa8 <_task_selectNextTask+0x8c>
			continue;
 8003fa6:	bf00      	nop
	for(;i<TASK_MAX_NUMBER;i++){
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3301      	adds	r3, #1
 8003fac:	607b      	str	r3, [r7, #4]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	ddc0      	ble.n	8003f36 <_task_selectNextTask+0x1a>
 8003fb4:	e000      	b.n	8003fb8 <_task_selectNextTask+0x9c>
			break;
 8003fb6:	bf00      	nop
	}

	if(i>=TASK_MAX_NUMBER)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	dd04      	ble.n	8003fc8 <_task_selectNextTask+0xac>
		current_task = &task[0];// NO task is running then run idle task
 8003fbe:	4b04      	ldr	r3, [pc, #16]	; (8003fd0 <_task_selectNextTask+0xb4>)
 8003fc0:	4a05      	ldr	r2, [pc, #20]	; (8003fd8 <_task_selectNextTask+0xbc>)
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	e000      	b.n	8003fc8 <_task_selectNextTask+0xac>
		return;
 8003fc6:	bf00      	nop
}
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20000148 	.word	0x20000148
 8003fd4:	2000014c 	.word	0x2000014c
 8003fd8:	200000dc 	.word	0x200000dc

08003fdc <_task_switchTask>:

__attribute__((naked)) void _task_switchTask() {
	__asm volatile(
 8003fdc:	b500      	push	{lr}
 8003fde:	f3ef 8009 	mrs	r0, PSP
 8003fe2:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003fe6:	f7ff ff35 	bl	8003e54 <_task_saveCurrentPSP>
 8003fea:	f7ff ff97 	bl	8003f1c <_task_selectNextTask>
 8003fee:	f7ff ff25 	bl	8003e3c <_task_getCurrentPSP>
 8003ff2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003ff6:	f380 8809 	msr	PSP, r0
 8003ffa:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ffe:	4770      	bx	lr

			/* exit */
			"POP {LR}\n\t"
			"BX LR\n\t"
	);
}
 8004000:	bf00      	nop
	...

08004004 <_task_privilegeReschedule>:

void _task_privilegeReschedule(){
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
	/* Enable pendSV exception */
	*(uint32_t*) 0xE000ED04 |= (0x1 << 28);
 8004008:	4b04      	ldr	r3, [pc, #16]	; (800401c <_task_privilegeReschedule+0x18>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a03      	ldr	r2, [pc, #12]	; (800401c <_task_privilegeReschedule+0x18>)
 800400e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004012:	6013      	str	r3, [r2, #0]
}
 8004014:	bf00      	nop
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr
 800401c:	e000ed04 	.word	0xe000ed04

08004020 <_task_idle_main>:
void _task_unprivilegeReschedule(){
	/* call Supervisor exception to get Privileged access */
	__asm volatile("SVC #255");
}

void _task_idle_main(void) {
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
	while(1) {
		__asm volatile("NOP");
 8004024:	bf00      	nop
 8004026:	e7fd      	b.n	8004024 <_task_idle_main+0x4>

08004028 <task_SysTickHandler>:
	}
}

/*********************HANDLER**********************************/
void task_SysTickHandler(){
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
	if(!scheduler_started)
 800402c:	4b07      	ldr	r3, [pc, #28]	; (800404c <task_SysTickHandler+0x24>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d009      	beq.n	8004048 <task_SysTickHandler+0x20>
		return;
	global_ticks++;
 8004034:	4b06      	ldr	r3, [pc, #24]	; (8004050 <task_SysTickHandler+0x28>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3301      	adds	r3, #1
 800403a:	4a05      	ldr	r2, [pc, #20]	; (8004050 <task_SysTickHandler+0x28>)
 800403c:	6013      	str	r3, [r2, #0]

	if(global_ticks%1!=0)
 800403e:	4b04      	ldr	r3, [pc, #16]	; (8004050 <task_SysTickHandler+0x28>)
 8004040:	681b      	ldr	r3, [r3, #0]
		return;
	_task_privilegeReschedule();
 8004042:	f7ff ffdf 	bl	8004004 <_task_privilegeReschedule>
 8004046:	e000      	b.n	800404a <task_SysTickHandler+0x22>
		return;
 8004048:	bf00      	nop
}
 800404a:	bd80      	pop	{r7, pc}
 800404c:	20000150 	.word	0x20000150
 8004050:	2000014c 	.word	0x2000014c

08004054 <task_PendSVHandler>:

__attribute__((naked)) void task_PendSVHandler(void){
	/*save LR back to main, must do this firstly*/
	__asm volatile("PUSH {LR}");
 8004054:	b500      	push	{lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004056:	f3ef 8310 	mrs	r3, PRIMASK
 800405a:	461c      	mov	r4, r3
  return(result);
 800405c:	4623      	mov	r3, r4

	uint32_t interrupt_enabled = !__get_PRIMASK();
 800405e:	2b00      	cmp	r3, #0
 8004060:	bf0c      	ite	eq
 8004062:	2301      	moveq	r3, #1
 8004064:	2300      	movne	r3, #0
 8004066:	b2db      	uxtb	r3, r3
 8004068:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800406a:	b672      	cpsid	i
}
 800406c:	bf00      	nop
	__disable_irq();

	_task_switchTask();
 800406e:	f7ff ffb5 	bl	8003fdc <_task_switchTask>

	if(interrupt_enabled)
 8004072:	2c00      	cmp	r4, #0
 8004074:	d001      	beq.n	800407a <task_PendSVHandler+0x26>
  __ASM volatile ("cpsie i" : : : "memory");
 8004076:	b662      	cpsie	i
}
 8004078:	bf00      	nop
		__enable_irq();

	/* exit */
	__asm volatile("POP {LR}");
 800407a:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 800407e:	4770      	bx	lr
}
 8004080:	bf00      	nop
	...

08004084 <task_init>:
 * This sets the total stack size and main stack pointer
 * @param msp 				: Main stack pointer
 * @param total_stack_size	: Total stack size
 * @param main_stack_size	: Size of main stack
 */
void task_init() {
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800408a:	f3ef 8310 	mrs	r3, PRIMASK
 800408e:	607b      	str	r3, [r7, #4]
  return(result);
 8004090:	687b      	ldr	r3, [r7, #4]
	uint32_t interrupt_enabled = !__get_PRIMASK();
 8004092:	2b00      	cmp	r3, #0
 8004094:	bf0c      	ite	eq
 8004096:	2301      	moveq	r3, #1
 8004098:	2300      	movne	r3, #0
 800409a:	b2db      	uxtb	r3, r3
 800409c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 800409e:	b672      	cpsid	i
}
 80040a0:	bf00      	nop
	__disable_irq();


	for(int i=0;i<TASK_MAX_NUMBER;i++){
 80040a2:	2300      	movs	r3, #0
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	e03a      	b.n	800411e <task_init+0x9a>
		task[i].psp = 0;
 80040a8:	492c      	ldr	r1, [pc, #176]	; (800415c <task_init+0xd8>)
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	4613      	mov	r3, r2
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4413      	add	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	3308      	adds	r3, #8
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]
		task[i].stack = NULL;// Stack is not allocated
 80040bc:	4927      	ldr	r1, [pc, #156]	; (800415c <task_init+0xd8>)
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	4613      	mov	r3, r2
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	4413      	add	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	331c      	adds	r3, #28
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]
		task[i].next_task = &task[(i+1)%TASK_MAX_NUMBER];
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	1c59      	adds	r1, r3, #1
 80040d4:	4b22      	ldr	r3, [pc, #136]	; (8004160 <task_init+0xdc>)
 80040d6:	fb83 3201 	smull	r3, r2, r3, r1
 80040da:	17cb      	asrs	r3, r1, #31
 80040dc:	1ad2      	subs	r2, r2, r3
 80040de:	4613      	mov	r3, r2
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	4413      	add	r3, r2
 80040e4:	1aca      	subs	r2, r1, r3
 80040e6:	4613      	mov	r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	4413      	add	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4a1b      	ldr	r2, [pc, #108]	; (800415c <task_init+0xd8>)
 80040f0:	1899      	adds	r1, r3, r2
 80040f2:	481a      	ldr	r0, [pc, #104]	; (800415c <task_init+0xd8>)
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	4613      	mov	r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	4413      	add	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4403      	add	r3, r0
 8004100:	3320      	adds	r3, #32
 8004102:	6019      	str	r1, [r3, #0]
		task[i].priority = 0;
 8004104:	4915      	ldr	r1, [pc, #84]	; (800415c <task_init+0xd8>)
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	4613      	mov	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	4413      	add	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	330d      	adds	r3, #13
 8004114:	2200      	movs	r2, #0
 8004116:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<TASK_MAX_NUMBER;i++){
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3301      	adds	r3, #1
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b02      	cmp	r3, #2
 8004122:	ddc1      	ble.n	80040a8 <task_init+0x24>
	}
	current_task = &task[0];
 8004124:	4b0f      	ldr	r3, [pc, #60]	; (8004164 <task_init+0xe0>)
 8004126:	4a0d      	ldr	r2, [pc, #52]	; (800415c <task_init+0xd8>)
 8004128:	601a      	str	r2, [r3, #0]

	stack_tracker = 0;
 800412a:	4b0f      	ldr	r3, [pc, #60]	; (8004168 <task_init+0xe4>)
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]
	global_ticks = 0;
 8004130:	4b0e      	ldr	r3, [pc, #56]	; (800416c <task_init+0xe8>)
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
	scheduler_started = 0;
 8004136:	4b0e      	ldr	r3, [pc, #56]	; (8004170 <task_init+0xec>)
 8004138:	2200      	movs	r2, #0
 800413a:	701a      	strb	r2, [r3, #0]


	if(interrupt_enabled)
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <task_init+0xc2>
  __ASM volatile ("cpsie i" : : : "memory");
 8004142:	b662      	cpsie	i
}
 8004144:	bf00      	nop
		__enable_irq();

	/* Add idle task which run when there is no any task to run*/
	task_add(0xFFFFFFFF, _task_idle_main, 100);
 8004146:	2264      	movs	r2, #100	; 0x64
 8004148:	490a      	ldr	r1, [pc, #40]	; (8004174 <task_init+0xf0>)
 800414a:	f04f 30ff 	mov.w	r0, #4294967295
 800414e:	f000 f813 	bl	8004178 <task_add>
}
 8004152:	bf00      	nop
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	200000dc 	.word	0x200000dc
 8004160:	55555556 	.word	0x55555556
 8004164:	20000148 	.word	0x20000148
 8004168:	200000d8 	.word	0x200000d8
 800416c:	2000014c 	.word	0x2000014c
 8004170:	20000150 	.word	0x20000150
 8004174:	08004021 	.word	0x08004021

08004178 <task_add>:
 * @param handler		: Main function
 * @param stack_size	: Size provided for it
 * @return				: 1 => Successfully task added
 *						: 0 => Failed to add task
 */
int task_add(uint32_t id,void (*handler)(void),uint32_t stack_size){
 8004178:	b580      	push	{r7, lr}
 800417a:	b08e      	sub	sp, #56	; 0x38
 800417c:	af02      	add	r7, sp, #8
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004184:	f3ef 8310 	mrs	r3, PRIMASK
 8004188:	617b      	str	r3, [r7, #20]
  return(result);
 800418a:	697b      	ldr	r3, [r7, #20]
	uint32_t interrupt_enabled = !__get_PRIMASK();
 800418c:	2b00      	cmp	r3, #0
 800418e:	bf0c      	ite	eq
 8004190:	2301      	moveq	r3, #1
 8004192:	2300      	movne	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8004198:	b672      	cpsid	i
}
 800419a:	bf00      	nop
		__disable_irq();


	int8_t priority;
	if(_isPSP()){
 800419c:	f7ff fe34 	bl	8003e08 <_isPSP>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d008      	beq.n	80041b8 <task_add+0x40>
		priority = current_task->priority;
 80041a6:	4ba3      	ldr	r3, [pc, #652]	; (8004434 <task_add+0x2bc>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	7b5b      	ldrb	r3, [r3, #13]
 80041ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		current_task->priority = -1;
 80041b0:	4ba0      	ldr	r3, [pc, #640]	; (8004434 <task_add+0x2bc>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	22ff      	movs	r2, #255	; 0xff
 80041b6:	735a      	strb	r2, [r3, #13]
	}

	/*Search for empty slot index*/
	int idx = 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	62bb      	str	r3, [r7, #40]	; 0x28
	for(;idx<TASK_MAX_NUMBER;idx++)
 80041bc:	e00d      	b.n	80041da <task_add+0x62>
		if(task[idx].psp==0)
 80041be:	499e      	ldr	r1, [pc, #632]	; (8004438 <task_add+0x2c0>)
 80041c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041c2:	4613      	mov	r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	440b      	add	r3, r1
 80041cc:	3308      	adds	r3, #8
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d006      	beq.n	80041e2 <task_add+0x6a>
	for(;idx<TASK_MAX_NUMBER;idx++)
 80041d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d6:	3301      	adds	r3, #1
 80041d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80041da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041dc:	2b02      	cmp	r3, #2
 80041de:	ddee      	ble.n	80041be <task_add+0x46>
 80041e0:	e000      	b.n	80041e4 <task_add+0x6c>
			break;
 80041e2:	bf00      	nop

	for(int i = 0;i<TASK_MAX_NUMBER;i++){
 80041e4:	2300      	movs	r3, #0
 80041e6:	627b      	str	r3, [r7, #36]	; 0x24
 80041e8:	e02c      	b.n	8004244 <task_add+0xcc>
		/* ID already exist */
		if(task[i].psp!=0 && task[i].id == id){
 80041ea:	4993      	ldr	r1, [pc, #588]	; (8004438 <task_add+0x2c0>)
 80041ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ee:	4613      	mov	r3, r2
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	4413      	add	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	440b      	add	r3, r1
 80041f8:	3308      	adds	r3, #8
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d01e      	beq.n	800423e <task_add+0xc6>
 8004200:	498d      	ldr	r1, [pc, #564]	; (8004438 <task_add+0x2c0>)
 8004202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004204:	4613      	mov	r3, r2
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	4413      	add	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	429a      	cmp	r2, r3
 8004214:	d113      	bne.n	800423e <task_add+0xc6>
			_console(TASK_CONSOLE_ERROR,__func__, "Handler %p addition failed. ID %d is already associated with handler %p.\n",handler,id,task[i].handler);
 8004216:	4988      	ldr	r1, [pc, #544]	; (8004438 <task_add+0x2c0>)
 8004218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800421a:	4613      	mov	r3, r2
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	4413      	add	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	440b      	add	r3, r1
 8004224:	3304      	adds	r3, #4
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	9301      	str	r3, [sp, #4]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	4a82      	ldr	r2, [pc, #520]	; (800443c <task_add+0x2c4>)
 8004232:	4983      	ldr	r1, [pc, #524]	; (8004440 <task_add+0x2c8>)
 8004234:	2000      	movs	r0, #0
 8004236:	f7ff fdf5 	bl	8003e24 <_console>
			return 0;
 800423a:	2300      	movs	r3, #0
 800423c:	e0f6      	b.n	800442c <task_add+0x2b4>
	for(int i = 0;i<TASK_MAX_NUMBER;i++){
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	3301      	adds	r3, #1
 8004242:	627b      	str	r3, [r7, #36]	; 0x24
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	2b02      	cmp	r3, #2
 8004248:	ddcf      	ble.n	80041ea <task_add+0x72>
		}
	}

	for(int i = 0;i<TASK_MAX_NUMBER;i++){
 800424a:	2300      	movs	r3, #0
 800424c:	623b      	str	r3, [r7, #32]
 800424e:	e02a      	b.n	80042a6 <task_add+0x12e>
		/* Handler already exist */
		if(task[i].psp!=0 && task[i].handler == handler){
 8004250:	4979      	ldr	r1, [pc, #484]	; (8004438 <task_add+0x2c0>)
 8004252:	6a3a      	ldr	r2, [r7, #32]
 8004254:	4613      	mov	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	3308      	adds	r3, #8
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d01c      	beq.n	80042a0 <task_add+0x128>
 8004266:	4974      	ldr	r1, [pc, #464]	; (8004438 <task_add+0x2c0>)
 8004268:	6a3a      	ldr	r2, [r7, #32]
 800426a:	4613      	mov	r3, r2
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	4413      	add	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	440b      	add	r3, r1
 8004274:	3304      	adds	r3, #4
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	429a      	cmp	r2, r3
 800427c:	d110      	bne.n	80042a0 <task_add+0x128>
			_console(TASK_CONSOLE_ERROR,__func__, "Handler %p addition failed. Handler already in slots, associated with ID %d.\n",handler,task[i].id);
 800427e:	496e      	ldr	r1, [pc, #440]	; (8004438 <task_add+0x2c0>)
 8004280:	6a3a      	ldr	r2, [r7, #32]
 8004282:	4613      	mov	r3, r2
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	4413      	add	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	4a6c      	ldr	r2, [pc, #432]	; (8004444 <task_add+0x2cc>)
 8004294:	496a      	ldr	r1, [pc, #424]	; (8004440 <task_add+0x2c8>)
 8004296:	2000      	movs	r0, #0
 8004298:	f7ff fdc4 	bl	8003e24 <_console>
			return 0;
 800429c:	2300      	movs	r3, #0
 800429e:	e0c5      	b.n	800442c <task_add+0x2b4>
	for(int i = 0;i<TASK_MAX_NUMBER;i++){
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	3301      	adds	r3, #1
 80042a4:	623b      	str	r3, [r7, #32]
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	ddd1      	ble.n	8004250 <task_add+0xd8>
		}
	}

	if(idx>=TASK_MAX_NUMBER){
 80042ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	dd09      	ble.n	80042c6 <task_add+0x14e>
		/* All slots are full */
		_console(TASK_CONSOLE_ERROR,__func__, "Handler %p addition failed. All %d slots are full.\n",handler,TASK_MAX_NUMBER);
 80042b2:	2303      	movs	r3, #3
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	4a63      	ldr	r2, [pc, #396]	; (8004448 <task_add+0x2d0>)
 80042ba:	4961      	ldr	r1, [pc, #388]	; (8004440 <task_add+0x2c8>)
 80042bc:	2000      	movs	r0, #0
 80042be:	f7ff fdb1 	bl	8003e24 <_console>
		return 0;
 80042c2:	2300      	movs	r3, #0
 80042c4:	e0b2      	b.n	800442c <task_add+0x2b4>
	}

	/* Memory Allocation */
	task[idx].stack = (uint32_t*) malloc(stack_size/4+1);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	089b      	lsrs	r3, r3, #2
 80042ca:	3301      	adds	r3, #1
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fac1 	bl	8004854 <malloc>
 80042d2:	4603      	mov	r3, r0
 80042d4:	4618      	mov	r0, r3
 80042d6:	4958      	ldr	r1, [pc, #352]	; (8004438 <task_add+0x2c0>)
 80042d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042da:	4613      	mov	r3, r2
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	4413      	add	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	440b      	add	r3, r1
 80042e4:	331c      	adds	r3, #28
 80042e6:	6018      	str	r0, [r3, #0]
	if(task[idx].stack == NULL){
 80042e8:	4953      	ldr	r1, [pc, #332]	; (8004438 <task_add+0x2c0>)
 80042ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ec:	4613      	mov	r3, r2
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	4413      	add	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	331c      	adds	r3, #28
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d107      	bne.n	800430e <task_add+0x196>
		/* Out of stack */
		_console(TASK_CONSOLE_ERROR,__func__, "Handler %p addition failed. Not Enough heap to make stack.\n",handler);
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	4a52      	ldr	r2, [pc, #328]	; (800444c <task_add+0x2d4>)
 8004302:	494f      	ldr	r1, [pc, #316]	; (8004440 <task_add+0x2c8>)
 8004304:	2000      	movs	r0, #0
 8004306:	f7ff fd8d 	bl	8003e24 <_console>
		return 0;
 800430a:	2300      	movs	r3, #0
 800430c:	e08e      	b.n	800442c <task_add+0x2b4>
	}

	/* Calculate PSP */
	stack_tracker += stack_size;
 800430e:	4b50      	ldr	r3, [pc, #320]	; (8004450 <task_add+0x2d8>)
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4413      	add	r3, r2
 8004316:	4a4e      	ldr	r2, [pc, #312]	; (8004450 <task_add+0x2d8>)
 8004318:	6013      	str	r3, [r2, #0]
	uint32_t *psp = &task[idx].stack[stack_size/4];
 800431a:	4947      	ldr	r1, [pc, #284]	; (8004438 <task_add+0x2c0>)
 800431c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800431e:	4613      	mov	r3, r2
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	4413      	add	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	440b      	add	r3, r1
 8004328:	331c      	adds	r3, #28
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f023 0303 	bic.w	r3, r3, #3
 8004332:	4413      	add	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
	task[idx].stack_start = (uint32_t)psp;
 8004336:	69b9      	ldr	r1, [r7, #24]
 8004338:	483f      	ldr	r0, [pc, #252]	; (8004438 <task_add+0x2c0>)
 800433a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800433c:	4613      	mov	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4403      	add	r3, r0
 8004346:	3318      	adds	r3, #24
 8004348:	6019      	str	r1, [r3, #0]

	/* fill dummy stack frame */
	*(--psp) = 0x01000000u; 		// Dummy xPSR, just enable Thumb State bit;
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	3b04      	subs	r3, #4
 800434e:	61bb      	str	r3, [r7, #24]
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004356:	601a      	str	r2, [r3, #0]
	*(--psp) = (uint32_t) (handler);// PC
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	3b04      	subs	r3, #4
 800435c:	61bb      	str	r3, [r7, #24]
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	601a      	str	r2, [r3, #0]
	*(--psp) = 0xFFFFFFFDu; 		// LR with EXC_RETURN to return to Thread using PSP
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	3b04      	subs	r3, #4
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	f06f 0202 	mvn.w	r2, #2
 8004370:	601a      	str	r2, [r3, #0]
	psp-=(16-3);
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	3b34      	subs	r3, #52	; 0x34
 8004376:	61bb      	str	r3, [r7, #24]

	/* Add task */
	task[idx].id = id;
 8004378:	492f      	ldr	r1, [pc, #188]	; (8004438 <task_add+0x2c0>)
 800437a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800437c:	4613      	mov	r3, r2
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	4413      	add	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	601a      	str	r2, [r3, #0]
	task[idx].handler = handler;
 800438a:	492b      	ldr	r1, [pc, #172]	; (8004438 <task_add+0x2c0>)
 800438c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800438e:	4613      	mov	r3, r2
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	4413      	add	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	3304      	adds	r3, #4
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	601a      	str	r2, [r3, #0]
	task[idx].state = TASK_RUNNING;
 800439e:	4926      	ldr	r1, [pc, #152]	; (8004438 <task_add+0x2c0>)
 80043a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043a2:	4613      	mov	r3, r2
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	4413      	add	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	440b      	add	r3, r1
 80043ac:	330c      	adds	r3, #12
 80043ae:	2200      	movs	r2, #0
 80043b0:	701a      	strb	r2, [r3, #0]
	task[idx].stack_size = stack_size;
 80043b2:	4921      	ldr	r1, [pc, #132]	; (8004438 <task_add+0x2c0>)
 80043b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043b6:	4613      	mov	r3, r2
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	4413      	add	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	440b      	add	r3, r1
 80043c0:	3314      	adds	r3, #20
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	601a      	str	r2, [r3, #0]
	task[idx].wait_tick = 0;
 80043c6:	491c      	ldr	r1, [pc, #112]	; (8004438 <task_add+0x2c0>)
 80043c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043ca:	4613      	mov	r3, r2
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	4413      	add	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	3310      	adds	r3, #16
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
	task[idx].psp = (uint32_t)psp;
 80043da:	69b9      	ldr	r1, [r7, #24]
 80043dc:	4816      	ldr	r0, [pc, #88]	; (8004438 <task_add+0x2c0>)
 80043de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043e0:	4613      	mov	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	4413      	add	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4403      	add	r3, r0
 80043ea:	3308      	adds	r3, #8
 80043ec:	6019      	str	r1, [r3, #0]

	if(idx!=0)	//Skip the idle task
 80043ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d007      	beq.n	8004404 <task_add+0x28c>
		_console(TASK_CONSOLE_INFO,__func__, "Handler %p is added successfully with id %d.\n",handler,id);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4a16      	ldr	r2, [pc, #88]	; (8004454 <task_add+0x2dc>)
 80043fc:	4910      	ldr	r1, [pc, #64]	; (8004440 <task_add+0x2c8>)
 80043fe:	2001      	movs	r0, #1
 8004400:	f7ff fd10 	bl	8003e24 <_console>

    if(_isPSP() && (priority!=-1)){
 8004404:	f7ff fd00 	bl	8003e08 <_isPSP>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d008      	beq.n	8004420 <task_add+0x2a8>
 800440e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004416:	d003      	beq.n	8004420 <task_add+0x2a8>
    	current_task->priority = 0;
 8004418:	4b06      	ldr	r3, [pc, #24]	; (8004434 <task_add+0x2bc>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2200      	movs	r2, #0
 800441e:	735a      	strb	r2, [r3, #13]
    }

	if(interrupt_enabled)
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <task_add+0x2b2>
  __ASM volatile ("cpsie i" : : : "memory");
 8004426:	b662      	cpsie	i
}
 8004428:	bf00      	nop
		__enable_irq();

	return 1;
 800442a:	2301      	movs	r3, #1
}
 800442c:	4618      	mov	r0, r3
 800442e:	3730      	adds	r7, #48	; 0x30
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	20000148 	.word	0x20000148
 8004438:	200000dc 	.word	0x200000dc
 800443c:	08006258 	.word	0x08006258
 8004440:	08006724 	.word	0x08006724
 8004444:	080062a4 	.word	0x080062a4
 8004448:	080062f4 	.word	0x080062f4
 800444c:	08006328 	.word	0x08006328
 8004450:	200000d8 	.word	0x200000d8
 8004454:	08006364 	.word	0x08006364

08004458 <task_delay>:

/**
 * This delay the task
 * @param ticks	: time in ticks
 */
void task_delay(uint32_t ticks){
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
	current_task->wait_tick = global_ticks+ticks;
 8004460:	4b0a      	ldr	r3, [pc, #40]	; (800448c <task_delay+0x34>)
 8004462:	6819      	ldr	r1, [r3, #0]
 8004464:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <task_delay+0x38>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	440a      	add	r2, r1
 800446c:	611a      	str	r2, [r3, #16]
	while(current_task->wait_tick>global_ticks);
 800446e:	bf00      	nop
 8004470:	4b07      	ldr	r3, [pc, #28]	; (8004490 <task_delay+0x38>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691a      	ldr	r2, [r3, #16]
 8004476:	4b05      	ldr	r3, [pc, #20]	; (800448c <task_delay+0x34>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	429a      	cmp	r2, r3
 800447c:	d8f8      	bhi.n	8004470 <task_delay+0x18>
}
 800447e:	bf00      	nop
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	bc80      	pop	{r7}
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	2000014c 	.word	0x2000014c
 8004490:	20000148 	.word	0x20000148

08004494 <task_startScheduler>:

/**
 * This starts the scheduler from main
 */
void task_startScheduler(){
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800449a:	f3ef 8310 	mrs	r3, PRIMASK
 800449e:	607b      	str	r3, [r7, #4]
  return(result);
 80044a0:	687b      	ldr	r3, [r7, #4]
	uint32_t interrupt_enabled = !__get_PRIMASK();
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	bf0c      	ite	eq
 80044a6:	2301      	moveq	r3, #1
 80044a8:	2300      	movne	r3, #0
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80044ae:	b672      	cpsid	i
}
 80044b0:	bf00      	nop
	__disable_irq();

	/* prepare PSP of the first task */
	__asm volatile("BL _task_getCurrentPSP");	// return PSP in R0
 80044b2:	f7ff fcc3 	bl	8003e3c <_task_getCurrentPSP>
	__asm volatile("MSR PSP, R0");		// set PSP
 80044b6:	f380 8809 	msr	PSP, r0

	/* change to use PSP */
	__asm volatile("MRS R0, CONTROL");
 80044ba:	f3ef 8014 	mrs	r0, CONTROL
	__asm volatile("ORR R0, R0, #2");	// set bit[1] SPSEL
 80044be:	f040 0002 	orr.w	r0, r0, #2
	__asm volatile("MSR CONTROL, R0");
 80044c2:	f380 8814 	msr	CONTROL, r0

	if(interrupt_enabled)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <task_startScheduler+0x3c>
  __ASM volatile ("cpsie i" : : : "memory");
 80044cc:	b662      	cpsie	i
}
 80044ce:	bf00      	nop
		__enable_irq();

	/* Move to Unprivileged level */
	__asm volatile("MRS R0, CONTROL");
 80044d0:	f3ef 8014 	mrs	r0, CONTROL
	__asm volatile("ORR R0, R0, #1");	// Set bit[0] nPRIV
 80044d4:	f040 0001 	orr.w	r0, r0, #1
	__asm volatile("MSR CONTROL, R0");
 80044d8:	f380 8814 	msr	CONTROL, r0



	/* get the handler of the first task by tracing back from PSP which is at R4 slot */
	void (*handler)() = (void (*))((uint32_t*)current_task->psp)[8+6];
 80044dc:	4b07      	ldr	r3, [pc, #28]	; (80044fc <task_startScheduler+0x68>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	3338      	adds	r3, #56	; 0x38
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	60bb      	str	r3, [r7, #8]
	scheduler_started = 1;
 80044e8:	4b05      	ldr	r3, [pc, #20]	; (8004500 <task_startScheduler+0x6c>)
 80044ea:	2201      	movs	r2, #1
 80044ec:	701a      	strb	r2, [r3, #0]
	/* execute the handler */
	handler();
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	4798      	blx	r3
}
 80044f2:	bf00      	nop
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	20000148 	.word	0x20000148
 8004500:	20000150 	.word	0x20000150

08004504 <task_printf>:

/**
 * This is printf for task
 */
void task_printf(char* msg,...){
 8004504:	b40f      	push	{r0, r1, r2, r3}
 8004506:	b580      	push	{r7, lr}
 8004508:	b084      	sub	sp, #16
 800450a:	af00      	add	r7, sp, #0
	int8_t priority;
	if(_isPSP()){
 800450c:	f7ff fc7c 	bl	8003e08 <_isPSP>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d007      	beq.n	8004526 <task_printf+0x22>
		priority = current_task->priority;
 8004516:	4b17      	ldr	r3, [pc, #92]	; (8004574 <task_printf+0x70>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	7b5b      	ldrb	r3, [r3, #13]
 800451c:	73fb      	strb	r3, [r7, #15]
		current_task->priority = -1;
 800451e:	4b15      	ldr	r3, [pc, #84]	; (8004574 <task_printf+0x70>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	22ff      	movs	r2, #255	; 0xff
 8004524:	735a      	strb	r2, [r3, #13]
	}
	va_list l;
	va_start(l,msg);
 8004526:	f107 031c 	add.w	r3, r7, #28
 800452a:	607b      	str	r3, [r7, #4]
	uint32_t len = vsprint(buff,msg,l);
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	69b9      	ldr	r1, [r7, #24]
 8004530:	4811      	ldr	r0, [pc, #68]	; (8004578 <task_printf+0x74>)
 8004532:	f7ff f809 	bl	8003548 <vsprint>
 8004536:	60b8      	str	r0, [r7, #8]
	va_end(l);
	buff[len+1]='\0';
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	3301      	adds	r3, #1
 800453c:	4a0e      	ldr	r2, [pc, #56]	; (8004578 <task_printf+0x74>)
 800453e:	2100      	movs	r1, #0
 8004540:	54d1      	strb	r1, [r2, r3]
	printString(buff, len);
 8004542:	68b9      	ldr	r1, [r7, #8]
 8004544:	480c      	ldr	r0, [pc, #48]	; (8004578 <task_printf+0x74>)
 8004546:	f000 f8b3 	bl	80046b0 <printString>
    if(_isPSP() && (priority!=-1))
 800454a:	f7ff fc5d 	bl	8003e08 <_isPSP>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d008      	beq.n	8004566 <task_printf+0x62>
 8004554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455c:	d003      	beq.n	8004566 <task_printf+0x62>
    	current_task->priority = 0;
 800455e:	4b05      	ldr	r3, [pc, #20]	; (8004574 <task_printf+0x70>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2200      	movs	r2, #0
 8004564:	735a      	strb	r2, [r3, #13]
}
 8004566:	bf00      	nop
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004570:	b004      	add	sp, #16
 8004572:	4770      	bx	lr
 8004574:	20000148 	.word	0x20000148
 8004578:	20000154 	.word	0x20000154

0800457c <task_createSemaphore>:
/**
 * Create semaphore
 * @param type		: Semaphore type BINARY or MUTEX
 * @return			: TaskSemaphore
 */
TaskSemaphore task_createSemaphore(TaskSemaphoreType type){
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	70fb      	strb	r3, [r7, #3]
	TaskSemaphore taskSemaphore;
	taskSemaphore.type = type;
 8004588:	78fb      	ldrb	r3, [r7, #3]
 800458a:	72bb      	strb	r3, [r7, #10]
	return taskSemaphore;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	461a      	mov	r2, r3
 8004590:	f107 0308 	add.w	r3, r7, #8
 8004594:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004598:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bc80      	pop	{r7}
 80045a4:	4770      	bx	lr
	...

080045a8 <task_takeSemaphore>:
 * If semaphore is binary this task will wait for other task to give semaphore
 * If semaphore is mutex then only this task will run until this task give semaphore
 *
 * @param semaphore		: Task semaphore
 */
void task_takeSemaphore(TaskSemaphore* semaphore){
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af02      	add	r7, sp, #8
 80045ae:	6078      	str	r0, [r7, #4]
	_console(TASK_CONSOLE_INFO,__func__, "Handler %p associated with id %d took semaphore.\n",current_task->handler,current_task->id);
 80045b0:	4b17      	ldr	r3, [pc, #92]	; (8004610 <task_takeSemaphore+0x68>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	4b16      	ldr	r3, [pc, #88]	; (8004610 <task_takeSemaphore+0x68>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	4613      	mov	r3, r2
 80045c0:	4a14      	ldr	r2, [pc, #80]	; (8004614 <task_takeSemaphore+0x6c>)
 80045c2:	4915      	ldr	r1, [pc, #84]	; (8004618 <task_takeSemaphore+0x70>)
 80045c4:	2001      	movs	r0, #1
 80045c6:	f7ff fc2d 	bl	8003e24 <_console>
	semaphore->take = 1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	705a      	strb	r2, [r3, #1]
	semaphore->task = current_task;
 80045d0:	4b0f      	ldr	r3, [pc, #60]	; (8004610 <task_takeSemaphore+0x68>)
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	605a      	str	r2, [r3, #4]
	if(semaphore->type==TASK_SEMAPHORE_BINARY){
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	789b      	ldrb	r3, [r3, #2]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d105      	bne.n	80045ec <task_takeSemaphore+0x44>
		while(semaphore->take);
 80045e0:	bf00      	nop
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	785b      	ldrb	r3, [r3, #1]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1fb      	bne.n	80045e2 <task_takeSemaphore+0x3a>
	}else if(semaphore->type==TASK_SEMAPHORE_MUTEX){
		semaphore->prevPriority = current_task->priority;
		current_task->priority = -1;
	}
}
 80045ea:	e00d      	b.n	8004608 <task_takeSemaphore+0x60>
	}else if(semaphore->type==TASK_SEMAPHORE_MUTEX){
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	789b      	ldrb	r3, [r3, #2]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d109      	bne.n	8004608 <task_takeSemaphore+0x60>
		semaphore->prevPriority = current_task->priority;
 80045f4:	4b06      	ldr	r3, [pc, #24]	; (8004610 <task_takeSemaphore+0x68>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f993 200d 	ldrsb.w	r2, [r3, #13]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	701a      	strb	r2, [r3, #0]
		current_task->priority = -1;
 8004600:	4b03      	ldr	r3, [pc, #12]	; (8004610 <task_takeSemaphore+0x68>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	22ff      	movs	r2, #255	; 0xff
 8004606:	735a      	strb	r2, [r3, #13]
}
 8004608:	bf00      	nop
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	20000148 	.word	0x20000148
 8004614:	08006610 	.word	0x08006610
 8004618:	08006730 	.word	0x08006730

0800461c <task_giveSemaphore>:

/**
 * Give semaphore
 * @param semaphore		: Task semaphore
 */
void task_giveSemaphore(TaskSemaphore* semaphore){
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af02      	add	r7, sp, #8
 8004622:	6078      	str	r0, [r7, #4]
	if(semaphore->type==TASK_SEMAPHORE_MUTEX){
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	789b      	ldrb	r3, [r3, #2]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d121      	bne.n	8004670 <task_giveSemaphore+0x54>
		if(semaphore->task==current_task){
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	4b1b      	ldr	r3, [pc, #108]	; (80046a0 <task_giveSemaphore+0x84>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	429a      	cmp	r2, r3
 8004636:	d109      	bne.n	800464c <task_giveSemaphore+0x30>
			semaphore->take = 0;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	705a      	strb	r2, [r3, #1]
			semaphore->task->priority=semaphore->prevPriority;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	f992 2000 	ldrsb.w	r2, [r2]
 8004648:	735a      	strb	r2, [r3, #13]
 800464a:	e014      	b.n	8004676 <task_giveSemaphore+0x5a>
		}else{
			_console(TASK_CONSOLE_ERROR,__func__, "Handler %p associated with id %d can't give mutex semaphore of handler %p.\n",current_task->handler,current_task->id,semaphore->task->handler);
 800464c:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <task_giveSemaphore+0x84>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6859      	ldr	r1, [r3, #4]
 8004652:	4b13      	ldr	r3, [pc, #76]	; (80046a0 <task_giveSemaphore+0x84>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6852      	ldr	r2, [r2, #4]
 800465c:	6852      	ldr	r2, [r2, #4]
 800465e:	9201      	str	r2, [sp, #4]
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	460b      	mov	r3, r1
 8004664:	4a0f      	ldr	r2, [pc, #60]	; (80046a4 <task_giveSemaphore+0x88>)
 8004666:	4910      	ldr	r1, [pc, #64]	; (80046a8 <task_giveSemaphore+0x8c>)
 8004668:	2000      	movs	r0, #0
 800466a:	f7ff fbdb 	bl	8003e24 <_console>
			return;
 800466e:	e013      	b.n	8004698 <task_giveSemaphore+0x7c>
		}
	}else{
		semaphore->take = 0;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	705a      	strb	r2, [r3, #1]
	}
	_console(TASK_CONSOLE_INFO,__func__, "Handler %p associated with id %d gave semaphore of handler %p.\n",current_task->handler,current_task->id,semaphore->task->handler);
 8004676:	4b0a      	ldr	r3, [pc, #40]	; (80046a0 <task_giveSemaphore+0x84>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6859      	ldr	r1, [r3, #4]
 800467c:	4b08      	ldr	r3, [pc, #32]	; (80046a0 <task_giveSemaphore+0x84>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6852      	ldr	r2, [r2, #4]
 8004686:	6852      	ldr	r2, [r2, #4]
 8004688:	9201      	str	r2, [sp, #4]
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	460b      	mov	r3, r1
 800468e:	4a07      	ldr	r2, [pc, #28]	; (80046ac <task_giveSemaphore+0x90>)
 8004690:	4905      	ldr	r1, [pc, #20]	; (80046a8 <task_giveSemaphore+0x8c>)
 8004692:	2001      	movs	r0, #1
 8004694:	f7ff fbc6 	bl	8003e24 <_console>

}
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20000148 	.word	0x20000148
 80046a4:	08006644 	.word	0x08006644
 80046a8:	08006744 	.word	0x08006744
 80046ac:	08006690 	.word	0x08006690

080046b0 <printString>:
TaskSemaphore semaphore;
void printChar(char ch){
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
}

void printString(char*str,uint32_t len){
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)str, len, HAL_MAX_DELAY);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	b29a      	uxth	r2, r3
 80046be:	f04f 33ff 	mov.w	r3, #4294967295
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	4803      	ldr	r0, [pc, #12]	; (80046d4 <printString+0x24>)
 80046c6:	f7fd ffc6 	bl	8002656 <HAL_UART_Transmit>
}
 80046ca:	bf00      	nop
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	2000008c 	.word	0x2000008c

080046d8 <task1>:

void task1() {
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
	task_printf("Task1 starting\n");
 80046dc:	4809      	ldr	r0, [pc, #36]	; (8004704 <task1+0x2c>)
 80046de:	f7ff ff11 	bl	8004504 <task_printf>
	count1 = 0;
 80046e2:	4b09      	ldr	r3, [pc, #36]	; (8004708 <task1+0x30>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]
	while (1) {
		task_printf("I am task1\n");
 80046e8:	4808      	ldr	r0, [pc, #32]	; (800470c <task1+0x34>)
 80046ea:	f7ff ff0b 	bl	8004504 <task_printf>
		count1++;
 80046ee:	4b06      	ldr	r3, [pc, #24]	; (8004708 <task1+0x30>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	3301      	adds	r3, #1
 80046f4:	4a04      	ldr	r2, [pc, #16]	; (8004708 <task1+0x30>)
 80046f6:	6013      	str	r3, [r2, #0]
//		if(count1==4)
//			task_takeSemaphore(&semaphore);
//			task_delete(1);

		task_delay(500);
 80046f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80046fc:	f7ff feac 	bl	8004458 <task_delay>
		task_printf("I am task1\n");
 8004700:	e7f2      	b.n	80046e8 <task1+0x10>
 8004702:	bf00      	nop
 8004704:	080066d0 	.word	0x080066d0
 8004708:	20000554 	.word	0x20000554
 800470c:	080066e0 	.word	0x080066e0

08004710 <task2>:
	}
}

void task2() {
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
	task_printf("Task2 starting\n");
 8004714:	481c      	ldr	r0, [pc, #112]	; (8004788 <task2+0x78>)
 8004716:	f7ff fef5 	bl	8004504 <task_printf>
	count2 = 0;
 800471a:	4b1c      	ldr	r3, [pc, #112]	; (800478c <task2+0x7c>)
 800471c:	2200      	movs	r2, #0
 800471e:	601a      	str	r2, [r3, #0]
	while (1) {
		count2++;
 8004720:	4b1a      	ldr	r3, [pc, #104]	; (800478c <task2+0x7c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	3301      	adds	r3, #1
 8004726:	4a19      	ldr	r2, [pc, #100]	; (800478c <task2+0x7c>)
 8004728:	6013      	str	r3, [r2, #0]
		fp = (float)count2/100.0f;
 800472a:	4b18      	ldr	r3, [pc, #96]	; (800478c <task2+0x7c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f7fc f938 	bl	80009a4 <__aeabi_ui2f>
 8004734:	4603      	mov	r3, r0
 8004736:	4916      	ldr	r1, [pc, #88]	; (8004790 <task2+0x80>)
 8004738:	4618      	mov	r0, r3
 800473a:	f7fc fa3f 	bl	8000bbc <__aeabi_fdiv>
 800473e:	4603      	mov	r3, r0
 8004740:	461a      	mov	r2, r3
 8004742:	4b14      	ldr	r3, [pc, #80]	; (8004794 <task2+0x84>)
 8004744:	601a      	str	r2, [r3, #0]
		task_printf("I am task2 %f\n",fp);
 8004746:	4b13      	ldr	r3, [pc, #76]	; (8004794 <task2+0x84>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f7fb ff94 	bl	8000678 <__aeabi_f2d>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	4810      	ldr	r0, [pc, #64]	; (8004798 <task2+0x88>)
 8004756:	f7ff fed5 	bl	8004504 <task_printf>

		semaphore.type = TASK_SEMAPHORE_MUTEX;
 800475a:	4b10      	ldr	r3, [pc, #64]	; (800479c <task2+0x8c>)
 800475c:	2201      	movs	r2, #1
 800475e:	709a      	strb	r2, [r3, #2]
		if(count2==4)
 8004760:	4b0a      	ldr	r3, [pc, #40]	; (800478c <task2+0x7c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b04      	cmp	r3, #4
 8004766:	d102      	bne.n	800476e <task2+0x5e>
			task_takeSemaphore(&semaphore);
 8004768:	480c      	ldr	r0, [pc, #48]	; (800479c <task2+0x8c>)
 800476a:	f7ff ff1d 	bl	80045a8 <task_takeSemaphore>
//			task_restart(2);
//			task_deleteSelf();
//			task_enableHighestPriority();
//			task_pause(1);
		if(count2==8)
 800476e:	4b07      	ldr	r3, [pc, #28]	; (800478c <task2+0x7c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b08      	cmp	r3, #8
 8004774:	d102      	bne.n	800477c <task2+0x6c>
			task_giveSemaphore(&semaphore);
 8004776:	4809      	ldr	r0, [pc, #36]	; (800479c <task2+0x8c>)
 8004778:	f7ff ff50 	bl	800461c <task_giveSemaphore>
//			task_resume(1);
//			task_disableHighestPriority();

		task_delay(1000);
 800477c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004780:	f7ff fe6a 	bl	8004458 <task_delay>
		count2++;
 8004784:	e7cc      	b.n	8004720 <task2+0x10>
 8004786:	bf00      	nop
 8004788:	080066ec 	.word	0x080066ec
 800478c:	20000558 	.word	0x20000558
 8004790:	42c80000 	.word	0x42c80000
 8004794:	2000055c 	.word	0x2000055c
 8004798:	080066fc 	.word	0x080066fc
 800479c:	20000560 	.word	0x20000560

080047a0 <init>:
	}
}

void init() {
 80047a0:	b590      	push	{r4, r7, lr}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
//	printf("Initiating....\n");

	semaphore = task_createSemaphore(TASK_SEMAPHORE_MUTEX);
 80047a6:	4c10      	ldr	r4, [pc, #64]	; (80047e8 <init+0x48>)
 80047a8:	463b      	mov	r3, r7
 80047aa:	2101      	movs	r1, #1
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7ff fee5 	bl	800457c <task_createSemaphore>
 80047b2:	4622      	mov	r2, r4
 80047b4:	463b      	mov	r3, r7
 80047b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80047ba:	e882 0003 	stmia.w	r2, {r0, r1}

	task_init();
 80047be:	f7ff fc61 	bl	8004084 <task_init>
	task_add(1, task1, 2*1024);
 80047c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047c6:	4909      	ldr	r1, [pc, #36]	; (80047ec <init+0x4c>)
 80047c8:	2001      	movs	r0, #1
 80047ca:	f7ff fcd5 	bl	8004178 <task_add>
	task_add(2, task2, 2*1024);
 80047ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047d2:	4907      	ldr	r1, [pc, #28]	; (80047f0 <init+0x50>)
 80047d4:	2002      	movs	r0, #2
 80047d6:	f7ff fccf 	bl	8004178 <task_add>

	task_startScheduler();
 80047da:	f7ff fe5b 	bl	8004494 <task_startScheduler>

//	printf("I am here\n");
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd90      	pop	{r4, r7, pc}
 80047e6:	bf00      	nop
 80047e8:	20000560 	.word	0x20000560
 80047ec:	080046d9 	.word	0x080046d9
 80047f0:	08004711 	.word	0x08004711

080047f4 <loop>:

void loop() {
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0

}
 80047f8:	bf00      	nop
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bc80      	pop	{r7}
 80047fe:	4770      	bx	lr

08004800 <__errno>:
 8004800:	4b01      	ldr	r3, [pc, #4]	; (8004808 <__errno+0x8>)
 8004802:	6818      	ldr	r0, [r3, #0]
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	2000000c 	.word	0x2000000c

0800480c <__libc_init_array>:
 800480c:	b570      	push	{r4, r5, r6, lr}
 800480e:	2600      	movs	r6, #0
 8004810:	4d0c      	ldr	r5, [pc, #48]	; (8004844 <__libc_init_array+0x38>)
 8004812:	4c0d      	ldr	r4, [pc, #52]	; (8004848 <__libc_init_array+0x3c>)
 8004814:	1b64      	subs	r4, r4, r5
 8004816:	10a4      	asrs	r4, r4, #2
 8004818:	42a6      	cmp	r6, r4
 800481a:	d109      	bne.n	8004830 <__libc_init_array+0x24>
 800481c:	f001 fcb8 	bl	8006190 <_init>
 8004820:	2600      	movs	r6, #0
 8004822:	4d0a      	ldr	r5, [pc, #40]	; (800484c <__libc_init_array+0x40>)
 8004824:	4c0a      	ldr	r4, [pc, #40]	; (8004850 <__libc_init_array+0x44>)
 8004826:	1b64      	subs	r4, r4, r5
 8004828:	10a4      	asrs	r4, r4, #2
 800482a:	42a6      	cmp	r6, r4
 800482c:	d105      	bne.n	800483a <__libc_init_array+0x2e>
 800482e:	bd70      	pop	{r4, r5, r6, pc}
 8004830:	f855 3b04 	ldr.w	r3, [r5], #4
 8004834:	4798      	blx	r3
 8004836:	3601      	adds	r6, #1
 8004838:	e7ee      	b.n	8004818 <__libc_init_array+0xc>
 800483a:	f855 3b04 	ldr.w	r3, [r5], #4
 800483e:	4798      	blx	r3
 8004840:	3601      	adds	r6, #1
 8004842:	e7f2      	b.n	800482a <__libc_init_array+0x1e>
 8004844:	08006810 	.word	0x08006810
 8004848:	08006810 	.word	0x08006810
 800484c:	08006810 	.word	0x08006810
 8004850:	08006814 	.word	0x08006814

08004854 <malloc>:
 8004854:	4b02      	ldr	r3, [pc, #8]	; (8004860 <malloc+0xc>)
 8004856:	4601      	mov	r1, r0
 8004858:	6818      	ldr	r0, [r3, #0]
 800485a:	f000 b87b 	b.w	8004954 <_malloc_r>
 800485e:	bf00      	nop
 8004860:	2000000c 	.word	0x2000000c

08004864 <free>:
 8004864:	4b02      	ldr	r3, [pc, #8]	; (8004870 <free+0xc>)
 8004866:	4601      	mov	r1, r0
 8004868:	6818      	ldr	r0, [r3, #0]
 800486a:	f000 b80b 	b.w	8004884 <_free_r>
 800486e:	bf00      	nop
 8004870:	2000000c 	.word	0x2000000c

08004874 <memset>:
 8004874:	4603      	mov	r3, r0
 8004876:	4402      	add	r2, r0
 8004878:	4293      	cmp	r3, r2
 800487a:	d100      	bne.n	800487e <memset+0xa>
 800487c:	4770      	bx	lr
 800487e:	f803 1b01 	strb.w	r1, [r3], #1
 8004882:	e7f9      	b.n	8004878 <memset+0x4>

08004884 <_free_r>:
 8004884:	b538      	push	{r3, r4, r5, lr}
 8004886:	4605      	mov	r5, r0
 8004888:	2900      	cmp	r1, #0
 800488a:	d040      	beq.n	800490e <_free_r+0x8a>
 800488c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004890:	1f0c      	subs	r4, r1, #4
 8004892:	2b00      	cmp	r3, #0
 8004894:	bfb8      	it	lt
 8004896:	18e4      	addlt	r4, r4, r3
 8004898:	f000 fc4a 	bl	8005130 <__malloc_lock>
 800489c:	4a1c      	ldr	r2, [pc, #112]	; (8004910 <_free_r+0x8c>)
 800489e:	6813      	ldr	r3, [r2, #0]
 80048a0:	b933      	cbnz	r3, 80048b0 <_free_r+0x2c>
 80048a2:	6063      	str	r3, [r4, #4]
 80048a4:	6014      	str	r4, [r2, #0]
 80048a6:	4628      	mov	r0, r5
 80048a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048ac:	f000 bc46 	b.w	800513c <__malloc_unlock>
 80048b0:	42a3      	cmp	r3, r4
 80048b2:	d908      	bls.n	80048c6 <_free_r+0x42>
 80048b4:	6820      	ldr	r0, [r4, #0]
 80048b6:	1821      	adds	r1, r4, r0
 80048b8:	428b      	cmp	r3, r1
 80048ba:	bf01      	itttt	eq
 80048bc:	6819      	ldreq	r1, [r3, #0]
 80048be:	685b      	ldreq	r3, [r3, #4]
 80048c0:	1809      	addeq	r1, r1, r0
 80048c2:	6021      	streq	r1, [r4, #0]
 80048c4:	e7ed      	b.n	80048a2 <_free_r+0x1e>
 80048c6:	461a      	mov	r2, r3
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	b10b      	cbz	r3, 80048d0 <_free_r+0x4c>
 80048cc:	42a3      	cmp	r3, r4
 80048ce:	d9fa      	bls.n	80048c6 <_free_r+0x42>
 80048d0:	6811      	ldr	r1, [r2, #0]
 80048d2:	1850      	adds	r0, r2, r1
 80048d4:	42a0      	cmp	r0, r4
 80048d6:	d10b      	bne.n	80048f0 <_free_r+0x6c>
 80048d8:	6820      	ldr	r0, [r4, #0]
 80048da:	4401      	add	r1, r0
 80048dc:	1850      	adds	r0, r2, r1
 80048de:	4283      	cmp	r3, r0
 80048e0:	6011      	str	r1, [r2, #0]
 80048e2:	d1e0      	bne.n	80048a6 <_free_r+0x22>
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	4401      	add	r1, r0
 80048ea:	6011      	str	r1, [r2, #0]
 80048ec:	6053      	str	r3, [r2, #4]
 80048ee:	e7da      	b.n	80048a6 <_free_r+0x22>
 80048f0:	d902      	bls.n	80048f8 <_free_r+0x74>
 80048f2:	230c      	movs	r3, #12
 80048f4:	602b      	str	r3, [r5, #0]
 80048f6:	e7d6      	b.n	80048a6 <_free_r+0x22>
 80048f8:	6820      	ldr	r0, [r4, #0]
 80048fa:	1821      	adds	r1, r4, r0
 80048fc:	428b      	cmp	r3, r1
 80048fe:	bf01      	itttt	eq
 8004900:	6819      	ldreq	r1, [r3, #0]
 8004902:	685b      	ldreq	r3, [r3, #4]
 8004904:	1809      	addeq	r1, r1, r0
 8004906:	6021      	streq	r1, [r4, #0]
 8004908:	6063      	str	r3, [r4, #4]
 800490a:	6054      	str	r4, [r2, #4]
 800490c:	e7cb      	b.n	80048a6 <_free_r+0x22>
 800490e:	bd38      	pop	{r3, r4, r5, pc}
 8004910:	20000568 	.word	0x20000568

08004914 <sbrk_aligned>:
 8004914:	b570      	push	{r4, r5, r6, lr}
 8004916:	4e0e      	ldr	r6, [pc, #56]	; (8004950 <sbrk_aligned+0x3c>)
 8004918:	460c      	mov	r4, r1
 800491a:	6831      	ldr	r1, [r6, #0]
 800491c:	4605      	mov	r5, r0
 800491e:	b911      	cbnz	r1, 8004926 <sbrk_aligned+0x12>
 8004920:	f000 f91a 	bl	8004b58 <_sbrk_r>
 8004924:	6030      	str	r0, [r6, #0]
 8004926:	4621      	mov	r1, r4
 8004928:	4628      	mov	r0, r5
 800492a:	f000 f915 	bl	8004b58 <_sbrk_r>
 800492e:	1c43      	adds	r3, r0, #1
 8004930:	d00a      	beq.n	8004948 <sbrk_aligned+0x34>
 8004932:	1cc4      	adds	r4, r0, #3
 8004934:	f024 0403 	bic.w	r4, r4, #3
 8004938:	42a0      	cmp	r0, r4
 800493a:	d007      	beq.n	800494c <sbrk_aligned+0x38>
 800493c:	1a21      	subs	r1, r4, r0
 800493e:	4628      	mov	r0, r5
 8004940:	f000 f90a 	bl	8004b58 <_sbrk_r>
 8004944:	3001      	adds	r0, #1
 8004946:	d101      	bne.n	800494c <sbrk_aligned+0x38>
 8004948:	f04f 34ff 	mov.w	r4, #4294967295
 800494c:	4620      	mov	r0, r4
 800494e:	bd70      	pop	{r4, r5, r6, pc}
 8004950:	2000056c 	.word	0x2000056c

08004954 <_malloc_r>:
 8004954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004958:	1ccd      	adds	r5, r1, #3
 800495a:	f025 0503 	bic.w	r5, r5, #3
 800495e:	3508      	adds	r5, #8
 8004960:	2d0c      	cmp	r5, #12
 8004962:	bf38      	it	cc
 8004964:	250c      	movcc	r5, #12
 8004966:	2d00      	cmp	r5, #0
 8004968:	4607      	mov	r7, r0
 800496a:	db01      	blt.n	8004970 <_malloc_r+0x1c>
 800496c:	42a9      	cmp	r1, r5
 800496e:	d905      	bls.n	800497c <_malloc_r+0x28>
 8004970:	230c      	movs	r3, #12
 8004972:	2600      	movs	r6, #0
 8004974:	603b      	str	r3, [r7, #0]
 8004976:	4630      	mov	r0, r6
 8004978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800497c:	4e2e      	ldr	r6, [pc, #184]	; (8004a38 <_malloc_r+0xe4>)
 800497e:	f000 fbd7 	bl	8005130 <__malloc_lock>
 8004982:	6833      	ldr	r3, [r6, #0]
 8004984:	461c      	mov	r4, r3
 8004986:	bb34      	cbnz	r4, 80049d6 <_malloc_r+0x82>
 8004988:	4629      	mov	r1, r5
 800498a:	4638      	mov	r0, r7
 800498c:	f7ff ffc2 	bl	8004914 <sbrk_aligned>
 8004990:	1c43      	adds	r3, r0, #1
 8004992:	4604      	mov	r4, r0
 8004994:	d14d      	bne.n	8004a32 <_malloc_r+0xde>
 8004996:	6834      	ldr	r4, [r6, #0]
 8004998:	4626      	mov	r6, r4
 800499a:	2e00      	cmp	r6, #0
 800499c:	d140      	bne.n	8004a20 <_malloc_r+0xcc>
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	4631      	mov	r1, r6
 80049a2:	4638      	mov	r0, r7
 80049a4:	eb04 0803 	add.w	r8, r4, r3
 80049a8:	f000 f8d6 	bl	8004b58 <_sbrk_r>
 80049ac:	4580      	cmp	r8, r0
 80049ae:	d13a      	bne.n	8004a26 <_malloc_r+0xd2>
 80049b0:	6821      	ldr	r1, [r4, #0]
 80049b2:	3503      	adds	r5, #3
 80049b4:	1a6d      	subs	r5, r5, r1
 80049b6:	f025 0503 	bic.w	r5, r5, #3
 80049ba:	3508      	adds	r5, #8
 80049bc:	2d0c      	cmp	r5, #12
 80049be:	bf38      	it	cc
 80049c0:	250c      	movcc	r5, #12
 80049c2:	4638      	mov	r0, r7
 80049c4:	4629      	mov	r1, r5
 80049c6:	f7ff ffa5 	bl	8004914 <sbrk_aligned>
 80049ca:	3001      	adds	r0, #1
 80049cc:	d02b      	beq.n	8004a26 <_malloc_r+0xd2>
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	442b      	add	r3, r5
 80049d2:	6023      	str	r3, [r4, #0]
 80049d4:	e00e      	b.n	80049f4 <_malloc_r+0xa0>
 80049d6:	6822      	ldr	r2, [r4, #0]
 80049d8:	1b52      	subs	r2, r2, r5
 80049da:	d41e      	bmi.n	8004a1a <_malloc_r+0xc6>
 80049dc:	2a0b      	cmp	r2, #11
 80049de:	d916      	bls.n	8004a0e <_malloc_r+0xba>
 80049e0:	1961      	adds	r1, r4, r5
 80049e2:	42a3      	cmp	r3, r4
 80049e4:	6025      	str	r5, [r4, #0]
 80049e6:	bf18      	it	ne
 80049e8:	6059      	strne	r1, [r3, #4]
 80049ea:	6863      	ldr	r3, [r4, #4]
 80049ec:	bf08      	it	eq
 80049ee:	6031      	streq	r1, [r6, #0]
 80049f0:	5162      	str	r2, [r4, r5]
 80049f2:	604b      	str	r3, [r1, #4]
 80049f4:	4638      	mov	r0, r7
 80049f6:	f104 060b 	add.w	r6, r4, #11
 80049fa:	f000 fb9f 	bl	800513c <__malloc_unlock>
 80049fe:	f026 0607 	bic.w	r6, r6, #7
 8004a02:	1d23      	adds	r3, r4, #4
 8004a04:	1af2      	subs	r2, r6, r3
 8004a06:	d0b6      	beq.n	8004976 <_malloc_r+0x22>
 8004a08:	1b9b      	subs	r3, r3, r6
 8004a0a:	50a3      	str	r3, [r4, r2]
 8004a0c:	e7b3      	b.n	8004976 <_malloc_r+0x22>
 8004a0e:	6862      	ldr	r2, [r4, #4]
 8004a10:	42a3      	cmp	r3, r4
 8004a12:	bf0c      	ite	eq
 8004a14:	6032      	streq	r2, [r6, #0]
 8004a16:	605a      	strne	r2, [r3, #4]
 8004a18:	e7ec      	b.n	80049f4 <_malloc_r+0xa0>
 8004a1a:	4623      	mov	r3, r4
 8004a1c:	6864      	ldr	r4, [r4, #4]
 8004a1e:	e7b2      	b.n	8004986 <_malloc_r+0x32>
 8004a20:	4634      	mov	r4, r6
 8004a22:	6876      	ldr	r6, [r6, #4]
 8004a24:	e7b9      	b.n	800499a <_malloc_r+0x46>
 8004a26:	230c      	movs	r3, #12
 8004a28:	4638      	mov	r0, r7
 8004a2a:	603b      	str	r3, [r7, #0]
 8004a2c:	f000 fb86 	bl	800513c <__malloc_unlock>
 8004a30:	e7a1      	b.n	8004976 <_malloc_r+0x22>
 8004a32:	6025      	str	r5, [r4, #0]
 8004a34:	e7de      	b.n	80049f4 <_malloc_r+0xa0>
 8004a36:	bf00      	nop
 8004a38:	20000568 	.word	0x20000568

08004a3c <iprintf>:
 8004a3c:	b40f      	push	{r0, r1, r2, r3}
 8004a3e:	4b0a      	ldr	r3, [pc, #40]	; (8004a68 <iprintf+0x2c>)
 8004a40:	b513      	push	{r0, r1, r4, lr}
 8004a42:	681c      	ldr	r4, [r3, #0]
 8004a44:	b124      	cbz	r4, 8004a50 <iprintf+0x14>
 8004a46:	69a3      	ldr	r3, [r4, #24]
 8004a48:	b913      	cbnz	r3, 8004a50 <iprintf+0x14>
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	f000 fa6a 	bl	8004f24 <__sinit>
 8004a50:	ab05      	add	r3, sp, #20
 8004a52:	4620      	mov	r0, r4
 8004a54:	9a04      	ldr	r2, [sp, #16]
 8004a56:	68a1      	ldr	r1, [r4, #8]
 8004a58:	9301      	str	r3, [sp, #4]
 8004a5a:	f000 fb9d 	bl	8005198 <_vfiprintf_r>
 8004a5e:	b002      	add	sp, #8
 8004a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a64:	b004      	add	sp, #16
 8004a66:	4770      	bx	lr
 8004a68:	2000000c 	.word	0x2000000c

08004a6c <_puts_r>:
 8004a6c:	b570      	push	{r4, r5, r6, lr}
 8004a6e:	460e      	mov	r6, r1
 8004a70:	4605      	mov	r5, r0
 8004a72:	b118      	cbz	r0, 8004a7c <_puts_r+0x10>
 8004a74:	6983      	ldr	r3, [r0, #24]
 8004a76:	b90b      	cbnz	r3, 8004a7c <_puts_r+0x10>
 8004a78:	f000 fa54 	bl	8004f24 <__sinit>
 8004a7c:	69ab      	ldr	r3, [r5, #24]
 8004a7e:	68ac      	ldr	r4, [r5, #8]
 8004a80:	b913      	cbnz	r3, 8004a88 <_puts_r+0x1c>
 8004a82:	4628      	mov	r0, r5
 8004a84:	f000 fa4e 	bl	8004f24 <__sinit>
 8004a88:	4b2c      	ldr	r3, [pc, #176]	; (8004b3c <_puts_r+0xd0>)
 8004a8a:	429c      	cmp	r4, r3
 8004a8c:	d120      	bne.n	8004ad0 <_puts_r+0x64>
 8004a8e:	686c      	ldr	r4, [r5, #4]
 8004a90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a92:	07db      	lsls	r3, r3, #31
 8004a94:	d405      	bmi.n	8004aa2 <_puts_r+0x36>
 8004a96:	89a3      	ldrh	r3, [r4, #12]
 8004a98:	0598      	lsls	r0, r3, #22
 8004a9a:	d402      	bmi.n	8004aa2 <_puts_r+0x36>
 8004a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a9e:	f000 fadf 	bl	8005060 <__retarget_lock_acquire_recursive>
 8004aa2:	89a3      	ldrh	r3, [r4, #12]
 8004aa4:	0719      	lsls	r1, r3, #28
 8004aa6:	d51d      	bpl.n	8004ae4 <_puts_r+0x78>
 8004aa8:	6923      	ldr	r3, [r4, #16]
 8004aaa:	b1db      	cbz	r3, 8004ae4 <_puts_r+0x78>
 8004aac:	3e01      	subs	r6, #1
 8004aae:	68a3      	ldr	r3, [r4, #8]
 8004ab0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	60a3      	str	r3, [r4, #8]
 8004ab8:	bb39      	cbnz	r1, 8004b0a <_puts_r+0x9e>
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	da38      	bge.n	8004b30 <_puts_r+0xc4>
 8004abe:	4622      	mov	r2, r4
 8004ac0:	210a      	movs	r1, #10
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	f000 f858 	bl	8004b78 <__swbuf_r>
 8004ac8:	3001      	adds	r0, #1
 8004aca:	d011      	beq.n	8004af0 <_puts_r+0x84>
 8004acc:	250a      	movs	r5, #10
 8004ace:	e011      	b.n	8004af4 <_puts_r+0x88>
 8004ad0:	4b1b      	ldr	r3, [pc, #108]	; (8004b40 <_puts_r+0xd4>)
 8004ad2:	429c      	cmp	r4, r3
 8004ad4:	d101      	bne.n	8004ada <_puts_r+0x6e>
 8004ad6:	68ac      	ldr	r4, [r5, #8]
 8004ad8:	e7da      	b.n	8004a90 <_puts_r+0x24>
 8004ada:	4b1a      	ldr	r3, [pc, #104]	; (8004b44 <_puts_r+0xd8>)
 8004adc:	429c      	cmp	r4, r3
 8004ade:	bf08      	it	eq
 8004ae0:	68ec      	ldreq	r4, [r5, #12]
 8004ae2:	e7d5      	b.n	8004a90 <_puts_r+0x24>
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	f000 f898 	bl	8004c1c <__swsetup_r>
 8004aec:	2800      	cmp	r0, #0
 8004aee:	d0dd      	beq.n	8004aac <_puts_r+0x40>
 8004af0:	f04f 35ff 	mov.w	r5, #4294967295
 8004af4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004af6:	07da      	lsls	r2, r3, #31
 8004af8:	d405      	bmi.n	8004b06 <_puts_r+0x9a>
 8004afa:	89a3      	ldrh	r3, [r4, #12]
 8004afc:	059b      	lsls	r3, r3, #22
 8004afe:	d402      	bmi.n	8004b06 <_puts_r+0x9a>
 8004b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b02:	f000 faae 	bl	8005062 <__retarget_lock_release_recursive>
 8004b06:	4628      	mov	r0, r5
 8004b08:	bd70      	pop	{r4, r5, r6, pc}
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	da04      	bge.n	8004b18 <_puts_r+0xac>
 8004b0e:	69a2      	ldr	r2, [r4, #24]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	dc06      	bgt.n	8004b22 <_puts_r+0xb6>
 8004b14:	290a      	cmp	r1, #10
 8004b16:	d004      	beq.n	8004b22 <_puts_r+0xb6>
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	6022      	str	r2, [r4, #0]
 8004b1e:	7019      	strb	r1, [r3, #0]
 8004b20:	e7c5      	b.n	8004aae <_puts_r+0x42>
 8004b22:	4622      	mov	r2, r4
 8004b24:	4628      	mov	r0, r5
 8004b26:	f000 f827 	bl	8004b78 <__swbuf_r>
 8004b2a:	3001      	adds	r0, #1
 8004b2c:	d1bf      	bne.n	8004aae <_puts_r+0x42>
 8004b2e:	e7df      	b.n	8004af0 <_puts_r+0x84>
 8004b30:	250a      	movs	r5, #10
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	1c5a      	adds	r2, r3, #1
 8004b36:	6022      	str	r2, [r4, #0]
 8004b38:	701d      	strb	r5, [r3, #0]
 8004b3a:	e7db      	b.n	8004af4 <_puts_r+0x88>
 8004b3c:	0800677c 	.word	0x0800677c
 8004b40:	0800679c 	.word	0x0800679c
 8004b44:	0800675c 	.word	0x0800675c

08004b48 <puts>:
 8004b48:	4b02      	ldr	r3, [pc, #8]	; (8004b54 <puts+0xc>)
 8004b4a:	4601      	mov	r1, r0
 8004b4c:	6818      	ldr	r0, [r3, #0]
 8004b4e:	f7ff bf8d 	b.w	8004a6c <_puts_r>
 8004b52:	bf00      	nop
 8004b54:	2000000c 	.word	0x2000000c

08004b58 <_sbrk_r>:
 8004b58:	b538      	push	{r3, r4, r5, lr}
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	4d05      	ldr	r5, [pc, #20]	; (8004b74 <_sbrk_r+0x1c>)
 8004b5e:	4604      	mov	r4, r0
 8004b60:	4608      	mov	r0, r1
 8004b62:	602b      	str	r3, [r5, #0]
 8004b64:	f7fc fdc4 	bl	80016f0 <_sbrk>
 8004b68:	1c43      	adds	r3, r0, #1
 8004b6a:	d102      	bne.n	8004b72 <_sbrk_r+0x1a>
 8004b6c:	682b      	ldr	r3, [r5, #0]
 8004b6e:	b103      	cbz	r3, 8004b72 <_sbrk_r+0x1a>
 8004b70:	6023      	str	r3, [r4, #0]
 8004b72:	bd38      	pop	{r3, r4, r5, pc}
 8004b74:	20000574 	.word	0x20000574

08004b78 <__swbuf_r>:
 8004b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7a:	460e      	mov	r6, r1
 8004b7c:	4614      	mov	r4, r2
 8004b7e:	4605      	mov	r5, r0
 8004b80:	b118      	cbz	r0, 8004b8a <__swbuf_r+0x12>
 8004b82:	6983      	ldr	r3, [r0, #24]
 8004b84:	b90b      	cbnz	r3, 8004b8a <__swbuf_r+0x12>
 8004b86:	f000 f9cd 	bl	8004f24 <__sinit>
 8004b8a:	4b21      	ldr	r3, [pc, #132]	; (8004c10 <__swbuf_r+0x98>)
 8004b8c:	429c      	cmp	r4, r3
 8004b8e:	d12b      	bne.n	8004be8 <__swbuf_r+0x70>
 8004b90:	686c      	ldr	r4, [r5, #4]
 8004b92:	69a3      	ldr	r3, [r4, #24]
 8004b94:	60a3      	str	r3, [r4, #8]
 8004b96:	89a3      	ldrh	r3, [r4, #12]
 8004b98:	071a      	lsls	r2, r3, #28
 8004b9a:	d52f      	bpl.n	8004bfc <__swbuf_r+0x84>
 8004b9c:	6923      	ldr	r3, [r4, #16]
 8004b9e:	b36b      	cbz	r3, 8004bfc <__swbuf_r+0x84>
 8004ba0:	6923      	ldr	r3, [r4, #16]
 8004ba2:	6820      	ldr	r0, [r4, #0]
 8004ba4:	b2f6      	uxtb	r6, r6
 8004ba6:	1ac0      	subs	r0, r0, r3
 8004ba8:	6963      	ldr	r3, [r4, #20]
 8004baa:	4637      	mov	r7, r6
 8004bac:	4283      	cmp	r3, r0
 8004bae:	dc04      	bgt.n	8004bba <__swbuf_r+0x42>
 8004bb0:	4621      	mov	r1, r4
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	f000 f922 	bl	8004dfc <_fflush_r>
 8004bb8:	bb30      	cbnz	r0, 8004c08 <__swbuf_r+0x90>
 8004bba:	68a3      	ldr	r3, [r4, #8]
 8004bbc:	3001      	adds	r0, #1
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	60a3      	str	r3, [r4, #8]
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	6022      	str	r2, [r4, #0]
 8004bc8:	701e      	strb	r6, [r3, #0]
 8004bca:	6963      	ldr	r3, [r4, #20]
 8004bcc:	4283      	cmp	r3, r0
 8004bce:	d004      	beq.n	8004bda <__swbuf_r+0x62>
 8004bd0:	89a3      	ldrh	r3, [r4, #12]
 8004bd2:	07db      	lsls	r3, r3, #31
 8004bd4:	d506      	bpl.n	8004be4 <__swbuf_r+0x6c>
 8004bd6:	2e0a      	cmp	r6, #10
 8004bd8:	d104      	bne.n	8004be4 <__swbuf_r+0x6c>
 8004bda:	4621      	mov	r1, r4
 8004bdc:	4628      	mov	r0, r5
 8004bde:	f000 f90d 	bl	8004dfc <_fflush_r>
 8004be2:	b988      	cbnz	r0, 8004c08 <__swbuf_r+0x90>
 8004be4:	4638      	mov	r0, r7
 8004be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004be8:	4b0a      	ldr	r3, [pc, #40]	; (8004c14 <__swbuf_r+0x9c>)
 8004bea:	429c      	cmp	r4, r3
 8004bec:	d101      	bne.n	8004bf2 <__swbuf_r+0x7a>
 8004bee:	68ac      	ldr	r4, [r5, #8]
 8004bf0:	e7cf      	b.n	8004b92 <__swbuf_r+0x1a>
 8004bf2:	4b09      	ldr	r3, [pc, #36]	; (8004c18 <__swbuf_r+0xa0>)
 8004bf4:	429c      	cmp	r4, r3
 8004bf6:	bf08      	it	eq
 8004bf8:	68ec      	ldreq	r4, [r5, #12]
 8004bfa:	e7ca      	b.n	8004b92 <__swbuf_r+0x1a>
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	4628      	mov	r0, r5
 8004c00:	f000 f80c 	bl	8004c1c <__swsetup_r>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	d0cb      	beq.n	8004ba0 <__swbuf_r+0x28>
 8004c08:	f04f 37ff 	mov.w	r7, #4294967295
 8004c0c:	e7ea      	b.n	8004be4 <__swbuf_r+0x6c>
 8004c0e:	bf00      	nop
 8004c10:	0800677c 	.word	0x0800677c
 8004c14:	0800679c 	.word	0x0800679c
 8004c18:	0800675c 	.word	0x0800675c

08004c1c <__swsetup_r>:
 8004c1c:	4b32      	ldr	r3, [pc, #200]	; (8004ce8 <__swsetup_r+0xcc>)
 8004c1e:	b570      	push	{r4, r5, r6, lr}
 8004c20:	681d      	ldr	r5, [r3, #0]
 8004c22:	4606      	mov	r6, r0
 8004c24:	460c      	mov	r4, r1
 8004c26:	b125      	cbz	r5, 8004c32 <__swsetup_r+0x16>
 8004c28:	69ab      	ldr	r3, [r5, #24]
 8004c2a:	b913      	cbnz	r3, 8004c32 <__swsetup_r+0x16>
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	f000 f979 	bl	8004f24 <__sinit>
 8004c32:	4b2e      	ldr	r3, [pc, #184]	; (8004cec <__swsetup_r+0xd0>)
 8004c34:	429c      	cmp	r4, r3
 8004c36:	d10f      	bne.n	8004c58 <__swsetup_r+0x3c>
 8004c38:	686c      	ldr	r4, [r5, #4]
 8004c3a:	89a3      	ldrh	r3, [r4, #12]
 8004c3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c40:	0719      	lsls	r1, r3, #28
 8004c42:	d42c      	bmi.n	8004c9e <__swsetup_r+0x82>
 8004c44:	06dd      	lsls	r5, r3, #27
 8004c46:	d411      	bmi.n	8004c6c <__swsetup_r+0x50>
 8004c48:	2309      	movs	r3, #9
 8004c4a:	6033      	str	r3, [r6, #0]
 8004c4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c50:	f04f 30ff 	mov.w	r0, #4294967295
 8004c54:	81a3      	strh	r3, [r4, #12]
 8004c56:	e03e      	b.n	8004cd6 <__swsetup_r+0xba>
 8004c58:	4b25      	ldr	r3, [pc, #148]	; (8004cf0 <__swsetup_r+0xd4>)
 8004c5a:	429c      	cmp	r4, r3
 8004c5c:	d101      	bne.n	8004c62 <__swsetup_r+0x46>
 8004c5e:	68ac      	ldr	r4, [r5, #8]
 8004c60:	e7eb      	b.n	8004c3a <__swsetup_r+0x1e>
 8004c62:	4b24      	ldr	r3, [pc, #144]	; (8004cf4 <__swsetup_r+0xd8>)
 8004c64:	429c      	cmp	r4, r3
 8004c66:	bf08      	it	eq
 8004c68:	68ec      	ldreq	r4, [r5, #12]
 8004c6a:	e7e6      	b.n	8004c3a <__swsetup_r+0x1e>
 8004c6c:	0758      	lsls	r0, r3, #29
 8004c6e:	d512      	bpl.n	8004c96 <__swsetup_r+0x7a>
 8004c70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c72:	b141      	cbz	r1, 8004c86 <__swsetup_r+0x6a>
 8004c74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c78:	4299      	cmp	r1, r3
 8004c7a:	d002      	beq.n	8004c82 <__swsetup_r+0x66>
 8004c7c:	4630      	mov	r0, r6
 8004c7e:	f7ff fe01 	bl	8004884 <_free_r>
 8004c82:	2300      	movs	r3, #0
 8004c84:	6363      	str	r3, [r4, #52]	; 0x34
 8004c86:	89a3      	ldrh	r3, [r4, #12]
 8004c88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c8c:	81a3      	strh	r3, [r4, #12]
 8004c8e:	2300      	movs	r3, #0
 8004c90:	6063      	str	r3, [r4, #4]
 8004c92:	6923      	ldr	r3, [r4, #16]
 8004c94:	6023      	str	r3, [r4, #0]
 8004c96:	89a3      	ldrh	r3, [r4, #12]
 8004c98:	f043 0308 	orr.w	r3, r3, #8
 8004c9c:	81a3      	strh	r3, [r4, #12]
 8004c9e:	6923      	ldr	r3, [r4, #16]
 8004ca0:	b94b      	cbnz	r3, 8004cb6 <__swsetup_r+0x9a>
 8004ca2:	89a3      	ldrh	r3, [r4, #12]
 8004ca4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cac:	d003      	beq.n	8004cb6 <__swsetup_r+0x9a>
 8004cae:	4621      	mov	r1, r4
 8004cb0:	4630      	mov	r0, r6
 8004cb2:	f000 f9fd 	bl	80050b0 <__smakebuf_r>
 8004cb6:	89a0      	ldrh	r0, [r4, #12]
 8004cb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004cbc:	f010 0301 	ands.w	r3, r0, #1
 8004cc0:	d00a      	beq.n	8004cd8 <__swsetup_r+0xbc>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60a3      	str	r3, [r4, #8]
 8004cc6:	6963      	ldr	r3, [r4, #20]
 8004cc8:	425b      	negs	r3, r3
 8004cca:	61a3      	str	r3, [r4, #24]
 8004ccc:	6923      	ldr	r3, [r4, #16]
 8004cce:	b943      	cbnz	r3, 8004ce2 <__swsetup_r+0xc6>
 8004cd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004cd4:	d1ba      	bne.n	8004c4c <__swsetup_r+0x30>
 8004cd6:	bd70      	pop	{r4, r5, r6, pc}
 8004cd8:	0781      	lsls	r1, r0, #30
 8004cda:	bf58      	it	pl
 8004cdc:	6963      	ldrpl	r3, [r4, #20]
 8004cde:	60a3      	str	r3, [r4, #8]
 8004ce0:	e7f4      	b.n	8004ccc <__swsetup_r+0xb0>
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	e7f7      	b.n	8004cd6 <__swsetup_r+0xba>
 8004ce6:	bf00      	nop
 8004ce8:	2000000c 	.word	0x2000000c
 8004cec:	0800677c 	.word	0x0800677c
 8004cf0:	0800679c 	.word	0x0800679c
 8004cf4:	0800675c 	.word	0x0800675c

08004cf8 <__sflush_r>:
 8004cf8:	898a      	ldrh	r2, [r1, #12]
 8004cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfc:	4605      	mov	r5, r0
 8004cfe:	0710      	lsls	r0, r2, #28
 8004d00:	460c      	mov	r4, r1
 8004d02:	d457      	bmi.n	8004db4 <__sflush_r+0xbc>
 8004d04:	684b      	ldr	r3, [r1, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	dc04      	bgt.n	8004d14 <__sflush_r+0x1c>
 8004d0a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	dc01      	bgt.n	8004d14 <__sflush_r+0x1c>
 8004d10:	2000      	movs	r0, #0
 8004d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d16:	2e00      	cmp	r6, #0
 8004d18:	d0fa      	beq.n	8004d10 <__sflush_r+0x18>
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d20:	682f      	ldr	r7, [r5, #0]
 8004d22:	602b      	str	r3, [r5, #0]
 8004d24:	d032      	beq.n	8004d8c <__sflush_r+0x94>
 8004d26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d28:	89a3      	ldrh	r3, [r4, #12]
 8004d2a:	075a      	lsls	r2, r3, #29
 8004d2c:	d505      	bpl.n	8004d3a <__sflush_r+0x42>
 8004d2e:	6863      	ldr	r3, [r4, #4]
 8004d30:	1ac0      	subs	r0, r0, r3
 8004d32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d34:	b10b      	cbz	r3, 8004d3a <__sflush_r+0x42>
 8004d36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d38:	1ac0      	subs	r0, r0, r3
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d40:	4628      	mov	r0, r5
 8004d42:	6a21      	ldr	r1, [r4, #32]
 8004d44:	47b0      	blx	r6
 8004d46:	1c43      	adds	r3, r0, #1
 8004d48:	89a3      	ldrh	r3, [r4, #12]
 8004d4a:	d106      	bne.n	8004d5a <__sflush_r+0x62>
 8004d4c:	6829      	ldr	r1, [r5, #0]
 8004d4e:	291d      	cmp	r1, #29
 8004d50:	d82c      	bhi.n	8004dac <__sflush_r+0xb4>
 8004d52:	4a29      	ldr	r2, [pc, #164]	; (8004df8 <__sflush_r+0x100>)
 8004d54:	40ca      	lsrs	r2, r1
 8004d56:	07d6      	lsls	r6, r2, #31
 8004d58:	d528      	bpl.n	8004dac <__sflush_r+0xb4>
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	6062      	str	r2, [r4, #4]
 8004d5e:	6922      	ldr	r2, [r4, #16]
 8004d60:	04d9      	lsls	r1, r3, #19
 8004d62:	6022      	str	r2, [r4, #0]
 8004d64:	d504      	bpl.n	8004d70 <__sflush_r+0x78>
 8004d66:	1c42      	adds	r2, r0, #1
 8004d68:	d101      	bne.n	8004d6e <__sflush_r+0x76>
 8004d6a:	682b      	ldr	r3, [r5, #0]
 8004d6c:	b903      	cbnz	r3, 8004d70 <__sflush_r+0x78>
 8004d6e:	6560      	str	r0, [r4, #84]	; 0x54
 8004d70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d72:	602f      	str	r7, [r5, #0]
 8004d74:	2900      	cmp	r1, #0
 8004d76:	d0cb      	beq.n	8004d10 <__sflush_r+0x18>
 8004d78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d7c:	4299      	cmp	r1, r3
 8004d7e:	d002      	beq.n	8004d86 <__sflush_r+0x8e>
 8004d80:	4628      	mov	r0, r5
 8004d82:	f7ff fd7f 	bl	8004884 <_free_r>
 8004d86:	2000      	movs	r0, #0
 8004d88:	6360      	str	r0, [r4, #52]	; 0x34
 8004d8a:	e7c2      	b.n	8004d12 <__sflush_r+0x1a>
 8004d8c:	6a21      	ldr	r1, [r4, #32]
 8004d8e:	2301      	movs	r3, #1
 8004d90:	4628      	mov	r0, r5
 8004d92:	47b0      	blx	r6
 8004d94:	1c41      	adds	r1, r0, #1
 8004d96:	d1c7      	bne.n	8004d28 <__sflush_r+0x30>
 8004d98:	682b      	ldr	r3, [r5, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0c4      	beq.n	8004d28 <__sflush_r+0x30>
 8004d9e:	2b1d      	cmp	r3, #29
 8004da0:	d001      	beq.n	8004da6 <__sflush_r+0xae>
 8004da2:	2b16      	cmp	r3, #22
 8004da4:	d101      	bne.n	8004daa <__sflush_r+0xb2>
 8004da6:	602f      	str	r7, [r5, #0]
 8004da8:	e7b2      	b.n	8004d10 <__sflush_r+0x18>
 8004daa:	89a3      	ldrh	r3, [r4, #12]
 8004dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004db0:	81a3      	strh	r3, [r4, #12]
 8004db2:	e7ae      	b.n	8004d12 <__sflush_r+0x1a>
 8004db4:	690f      	ldr	r7, [r1, #16]
 8004db6:	2f00      	cmp	r7, #0
 8004db8:	d0aa      	beq.n	8004d10 <__sflush_r+0x18>
 8004dba:	0793      	lsls	r3, r2, #30
 8004dbc:	bf18      	it	ne
 8004dbe:	2300      	movne	r3, #0
 8004dc0:	680e      	ldr	r6, [r1, #0]
 8004dc2:	bf08      	it	eq
 8004dc4:	694b      	ldreq	r3, [r1, #20]
 8004dc6:	1bf6      	subs	r6, r6, r7
 8004dc8:	600f      	str	r7, [r1, #0]
 8004dca:	608b      	str	r3, [r1, #8]
 8004dcc:	2e00      	cmp	r6, #0
 8004dce:	dd9f      	ble.n	8004d10 <__sflush_r+0x18>
 8004dd0:	4633      	mov	r3, r6
 8004dd2:	463a      	mov	r2, r7
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	6a21      	ldr	r1, [r4, #32]
 8004dd8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004ddc:	47e0      	blx	ip
 8004dde:	2800      	cmp	r0, #0
 8004de0:	dc06      	bgt.n	8004df0 <__sflush_r+0xf8>
 8004de2:	89a3      	ldrh	r3, [r4, #12]
 8004de4:	f04f 30ff 	mov.w	r0, #4294967295
 8004de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dec:	81a3      	strh	r3, [r4, #12]
 8004dee:	e790      	b.n	8004d12 <__sflush_r+0x1a>
 8004df0:	4407      	add	r7, r0
 8004df2:	1a36      	subs	r6, r6, r0
 8004df4:	e7ea      	b.n	8004dcc <__sflush_r+0xd4>
 8004df6:	bf00      	nop
 8004df8:	20400001 	.word	0x20400001

08004dfc <_fflush_r>:
 8004dfc:	b538      	push	{r3, r4, r5, lr}
 8004dfe:	690b      	ldr	r3, [r1, #16]
 8004e00:	4605      	mov	r5, r0
 8004e02:	460c      	mov	r4, r1
 8004e04:	b913      	cbnz	r3, 8004e0c <_fflush_r+0x10>
 8004e06:	2500      	movs	r5, #0
 8004e08:	4628      	mov	r0, r5
 8004e0a:	bd38      	pop	{r3, r4, r5, pc}
 8004e0c:	b118      	cbz	r0, 8004e16 <_fflush_r+0x1a>
 8004e0e:	6983      	ldr	r3, [r0, #24]
 8004e10:	b90b      	cbnz	r3, 8004e16 <_fflush_r+0x1a>
 8004e12:	f000 f887 	bl	8004f24 <__sinit>
 8004e16:	4b14      	ldr	r3, [pc, #80]	; (8004e68 <_fflush_r+0x6c>)
 8004e18:	429c      	cmp	r4, r3
 8004e1a:	d11b      	bne.n	8004e54 <_fflush_r+0x58>
 8004e1c:	686c      	ldr	r4, [r5, #4]
 8004e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d0ef      	beq.n	8004e06 <_fflush_r+0xa>
 8004e26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e28:	07d0      	lsls	r0, r2, #31
 8004e2a:	d404      	bmi.n	8004e36 <_fflush_r+0x3a>
 8004e2c:	0599      	lsls	r1, r3, #22
 8004e2e:	d402      	bmi.n	8004e36 <_fflush_r+0x3a>
 8004e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e32:	f000 f915 	bl	8005060 <__retarget_lock_acquire_recursive>
 8004e36:	4628      	mov	r0, r5
 8004e38:	4621      	mov	r1, r4
 8004e3a:	f7ff ff5d 	bl	8004cf8 <__sflush_r>
 8004e3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e40:	4605      	mov	r5, r0
 8004e42:	07da      	lsls	r2, r3, #31
 8004e44:	d4e0      	bmi.n	8004e08 <_fflush_r+0xc>
 8004e46:	89a3      	ldrh	r3, [r4, #12]
 8004e48:	059b      	lsls	r3, r3, #22
 8004e4a:	d4dd      	bmi.n	8004e08 <_fflush_r+0xc>
 8004e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e4e:	f000 f908 	bl	8005062 <__retarget_lock_release_recursive>
 8004e52:	e7d9      	b.n	8004e08 <_fflush_r+0xc>
 8004e54:	4b05      	ldr	r3, [pc, #20]	; (8004e6c <_fflush_r+0x70>)
 8004e56:	429c      	cmp	r4, r3
 8004e58:	d101      	bne.n	8004e5e <_fflush_r+0x62>
 8004e5a:	68ac      	ldr	r4, [r5, #8]
 8004e5c:	e7df      	b.n	8004e1e <_fflush_r+0x22>
 8004e5e:	4b04      	ldr	r3, [pc, #16]	; (8004e70 <_fflush_r+0x74>)
 8004e60:	429c      	cmp	r4, r3
 8004e62:	bf08      	it	eq
 8004e64:	68ec      	ldreq	r4, [r5, #12]
 8004e66:	e7da      	b.n	8004e1e <_fflush_r+0x22>
 8004e68:	0800677c 	.word	0x0800677c
 8004e6c:	0800679c 	.word	0x0800679c
 8004e70:	0800675c 	.word	0x0800675c

08004e74 <std>:
 8004e74:	2300      	movs	r3, #0
 8004e76:	b510      	push	{r4, lr}
 8004e78:	4604      	mov	r4, r0
 8004e7a:	e9c0 3300 	strd	r3, r3, [r0]
 8004e7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e82:	6083      	str	r3, [r0, #8]
 8004e84:	8181      	strh	r1, [r0, #12]
 8004e86:	6643      	str	r3, [r0, #100]	; 0x64
 8004e88:	81c2      	strh	r2, [r0, #14]
 8004e8a:	6183      	str	r3, [r0, #24]
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	2208      	movs	r2, #8
 8004e90:	305c      	adds	r0, #92	; 0x5c
 8004e92:	f7ff fcef 	bl	8004874 <memset>
 8004e96:	4b05      	ldr	r3, [pc, #20]	; (8004eac <std+0x38>)
 8004e98:	6224      	str	r4, [r4, #32]
 8004e9a:	6263      	str	r3, [r4, #36]	; 0x24
 8004e9c:	4b04      	ldr	r3, [pc, #16]	; (8004eb0 <std+0x3c>)
 8004e9e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ea0:	4b04      	ldr	r3, [pc, #16]	; (8004eb4 <std+0x40>)
 8004ea2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ea4:	4b04      	ldr	r3, [pc, #16]	; (8004eb8 <std+0x44>)
 8004ea6:	6323      	str	r3, [r4, #48]	; 0x30
 8004ea8:	bd10      	pop	{r4, pc}
 8004eaa:	bf00      	nop
 8004eac:	08005725 	.word	0x08005725
 8004eb0:	08005747 	.word	0x08005747
 8004eb4:	0800577f 	.word	0x0800577f
 8004eb8:	080057a3 	.word	0x080057a3

08004ebc <_cleanup_r>:
 8004ebc:	4901      	ldr	r1, [pc, #4]	; (8004ec4 <_cleanup_r+0x8>)
 8004ebe:	f000 b8af 	b.w	8005020 <_fwalk_reent>
 8004ec2:	bf00      	nop
 8004ec4:	08004dfd 	.word	0x08004dfd

08004ec8 <__sfmoreglue>:
 8004ec8:	2268      	movs	r2, #104	; 0x68
 8004eca:	b570      	push	{r4, r5, r6, lr}
 8004ecc:	1e4d      	subs	r5, r1, #1
 8004ece:	4355      	muls	r5, r2
 8004ed0:	460e      	mov	r6, r1
 8004ed2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004ed6:	f7ff fd3d 	bl	8004954 <_malloc_r>
 8004eda:	4604      	mov	r4, r0
 8004edc:	b140      	cbz	r0, 8004ef0 <__sfmoreglue+0x28>
 8004ede:	2100      	movs	r1, #0
 8004ee0:	e9c0 1600 	strd	r1, r6, [r0]
 8004ee4:	300c      	adds	r0, #12
 8004ee6:	60a0      	str	r0, [r4, #8]
 8004ee8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004eec:	f7ff fcc2 	bl	8004874 <memset>
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	bd70      	pop	{r4, r5, r6, pc}

08004ef4 <__sfp_lock_acquire>:
 8004ef4:	4801      	ldr	r0, [pc, #4]	; (8004efc <__sfp_lock_acquire+0x8>)
 8004ef6:	f000 b8b3 	b.w	8005060 <__retarget_lock_acquire_recursive>
 8004efa:	bf00      	nop
 8004efc:	20000571 	.word	0x20000571

08004f00 <__sfp_lock_release>:
 8004f00:	4801      	ldr	r0, [pc, #4]	; (8004f08 <__sfp_lock_release+0x8>)
 8004f02:	f000 b8ae 	b.w	8005062 <__retarget_lock_release_recursive>
 8004f06:	bf00      	nop
 8004f08:	20000571 	.word	0x20000571

08004f0c <__sinit_lock_acquire>:
 8004f0c:	4801      	ldr	r0, [pc, #4]	; (8004f14 <__sinit_lock_acquire+0x8>)
 8004f0e:	f000 b8a7 	b.w	8005060 <__retarget_lock_acquire_recursive>
 8004f12:	bf00      	nop
 8004f14:	20000572 	.word	0x20000572

08004f18 <__sinit_lock_release>:
 8004f18:	4801      	ldr	r0, [pc, #4]	; (8004f20 <__sinit_lock_release+0x8>)
 8004f1a:	f000 b8a2 	b.w	8005062 <__retarget_lock_release_recursive>
 8004f1e:	bf00      	nop
 8004f20:	20000572 	.word	0x20000572

08004f24 <__sinit>:
 8004f24:	b510      	push	{r4, lr}
 8004f26:	4604      	mov	r4, r0
 8004f28:	f7ff fff0 	bl	8004f0c <__sinit_lock_acquire>
 8004f2c:	69a3      	ldr	r3, [r4, #24]
 8004f2e:	b11b      	cbz	r3, 8004f38 <__sinit+0x14>
 8004f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f34:	f7ff bff0 	b.w	8004f18 <__sinit_lock_release>
 8004f38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004f3c:	6523      	str	r3, [r4, #80]	; 0x50
 8004f3e:	4b13      	ldr	r3, [pc, #76]	; (8004f8c <__sinit+0x68>)
 8004f40:	4a13      	ldr	r2, [pc, #76]	; (8004f90 <__sinit+0x6c>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	62a2      	str	r2, [r4, #40]	; 0x28
 8004f46:	42a3      	cmp	r3, r4
 8004f48:	bf08      	it	eq
 8004f4a:	2301      	moveq	r3, #1
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	bf08      	it	eq
 8004f50:	61a3      	streq	r3, [r4, #24]
 8004f52:	f000 f81f 	bl	8004f94 <__sfp>
 8004f56:	6060      	str	r0, [r4, #4]
 8004f58:	4620      	mov	r0, r4
 8004f5a:	f000 f81b 	bl	8004f94 <__sfp>
 8004f5e:	60a0      	str	r0, [r4, #8]
 8004f60:	4620      	mov	r0, r4
 8004f62:	f000 f817 	bl	8004f94 <__sfp>
 8004f66:	2200      	movs	r2, #0
 8004f68:	2104      	movs	r1, #4
 8004f6a:	60e0      	str	r0, [r4, #12]
 8004f6c:	6860      	ldr	r0, [r4, #4]
 8004f6e:	f7ff ff81 	bl	8004e74 <std>
 8004f72:	2201      	movs	r2, #1
 8004f74:	2109      	movs	r1, #9
 8004f76:	68a0      	ldr	r0, [r4, #8]
 8004f78:	f7ff ff7c 	bl	8004e74 <std>
 8004f7c:	2202      	movs	r2, #2
 8004f7e:	2112      	movs	r1, #18
 8004f80:	68e0      	ldr	r0, [r4, #12]
 8004f82:	f7ff ff77 	bl	8004e74 <std>
 8004f86:	2301      	movs	r3, #1
 8004f88:	61a3      	str	r3, [r4, #24]
 8004f8a:	e7d1      	b.n	8004f30 <__sinit+0xc>
 8004f8c:	08006758 	.word	0x08006758
 8004f90:	08004ebd 	.word	0x08004ebd

08004f94 <__sfp>:
 8004f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f96:	4607      	mov	r7, r0
 8004f98:	f7ff ffac 	bl	8004ef4 <__sfp_lock_acquire>
 8004f9c:	4b1e      	ldr	r3, [pc, #120]	; (8005018 <__sfp+0x84>)
 8004f9e:	681e      	ldr	r6, [r3, #0]
 8004fa0:	69b3      	ldr	r3, [r6, #24]
 8004fa2:	b913      	cbnz	r3, 8004faa <__sfp+0x16>
 8004fa4:	4630      	mov	r0, r6
 8004fa6:	f7ff ffbd 	bl	8004f24 <__sinit>
 8004faa:	3648      	adds	r6, #72	; 0x48
 8004fac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	d503      	bpl.n	8004fbc <__sfp+0x28>
 8004fb4:	6833      	ldr	r3, [r6, #0]
 8004fb6:	b30b      	cbz	r3, 8004ffc <__sfp+0x68>
 8004fb8:	6836      	ldr	r6, [r6, #0]
 8004fba:	e7f7      	b.n	8004fac <__sfp+0x18>
 8004fbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004fc0:	b9d5      	cbnz	r5, 8004ff8 <__sfp+0x64>
 8004fc2:	4b16      	ldr	r3, [pc, #88]	; (800501c <__sfp+0x88>)
 8004fc4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004fc8:	60e3      	str	r3, [r4, #12]
 8004fca:	6665      	str	r5, [r4, #100]	; 0x64
 8004fcc:	f000 f847 	bl	800505e <__retarget_lock_init_recursive>
 8004fd0:	f7ff ff96 	bl	8004f00 <__sfp_lock_release>
 8004fd4:	2208      	movs	r2, #8
 8004fd6:	4629      	mov	r1, r5
 8004fd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004fdc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004fe0:	6025      	str	r5, [r4, #0]
 8004fe2:	61a5      	str	r5, [r4, #24]
 8004fe4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004fe8:	f7ff fc44 	bl	8004874 <memset>
 8004fec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ff0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ff8:	3468      	adds	r4, #104	; 0x68
 8004ffa:	e7d9      	b.n	8004fb0 <__sfp+0x1c>
 8004ffc:	2104      	movs	r1, #4
 8004ffe:	4638      	mov	r0, r7
 8005000:	f7ff ff62 	bl	8004ec8 <__sfmoreglue>
 8005004:	4604      	mov	r4, r0
 8005006:	6030      	str	r0, [r6, #0]
 8005008:	2800      	cmp	r0, #0
 800500a:	d1d5      	bne.n	8004fb8 <__sfp+0x24>
 800500c:	f7ff ff78 	bl	8004f00 <__sfp_lock_release>
 8005010:	230c      	movs	r3, #12
 8005012:	603b      	str	r3, [r7, #0]
 8005014:	e7ee      	b.n	8004ff4 <__sfp+0x60>
 8005016:	bf00      	nop
 8005018:	08006758 	.word	0x08006758
 800501c:	ffff0001 	.word	0xffff0001

08005020 <_fwalk_reent>:
 8005020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005024:	4606      	mov	r6, r0
 8005026:	4688      	mov	r8, r1
 8005028:	2700      	movs	r7, #0
 800502a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800502e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005032:	f1b9 0901 	subs.w	r9, r9, #1
 8005036:	d505      	bpl.n	8005044 <_fwalk_reent+0x24>
 8005038:	6824      	ldr	r4, [r4, #0]
 800503a:	2c00      	cmp	r4, #0
 800503c:	d1f7      	bne.n	800502e <_fwalk_reent+0xe>
 800503e:	4638      	mov	r0, r7
 8005040:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005044:	89ab      	ldrh	r3, [r5, #12]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d907      	bls.n	800505a <_fwalk_reent+0x3a>
 800504a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800504e:	3301      	adds	r3, #1
 8005050:	d003      	beq.n	800505a <_fwalk_reent+0x3a>
 8005052:	4629      	mov	r1, r5
 8005054:	4630      	mov	r0, r6
 8005056:	47c0      	blx	r8
 8005058:	4307      	orrs	r7, r0
 800505a:	3568      	adds	r5, #104	; 0x68
 800505c:	e7e9      	b.n	8005032 <_fwalk_reent+0x12>

0800505e <__retarget_lock_init_recursive>:
 800505e:	4770      	bx	lr

08005060 <__retarget_lock_acquire_recursive>:
 8005060:	4770      	bx	lr

08005062 <__retarget_lock_release_recursive>:
 8005062:	4770      	bx	lr

08005064 <__swhatbuf_r>:
 8005064:	b570      	push	{r4, r5, r6, lr}
 8005066:	460e      	mov	r6, r1
 8005068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800506c:	4614      	mov	r4, r2
 800506e:	2900      	cmp	r1, #0
 8005070:	461d      	mov	r5, r3
 8005072:	b096      	sub	sp, #88	; 0x58
 8005074:	da08      	bge.n	8005088 <__swhatbuf_r+0x24>
 8005076:	2200      	movs	r2, #0
 8005078:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800507c:	602a      	str	r2, [r5, #0]
 800507e:	061a      	lsls	r2, r3, #24
 8005080:	d410      	bmi.n	80050a4 <__swhatbuf_r+0x40>
 8005082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005086:	e00e      	b.n	80050a6 <__swhatbuf_r+0x42>
 8005088:	466a      	mov	r2, sp
 800508a:	f000 fbb1 	bl	80057f0 <_fstat_r>
 800508e:	2800      	cmp	r0, #0
 8005090:	dbf1      	blt.n	8005076 <__swhatbuf_r+0x12>
 8005092:	9a01      	ldr	r2, [sp, #4]
 8005094:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005098:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800509c:	425a      	negs	r2, r3
 800509e:	415a      	adcs	r2, r3
 80050a0:	602a      	str	r2, [r5, #0]
 80050a2:	e7ee      	b.n	8005082 <__swhatbuf_r+0x1e>
 80050a4:	2340      	movs	r3, #64	; 0x40
 80050a6:	2000      	movs	r0, #0
 80050a8:	6023      	str	r3, [r4, #0]
 80050aa:	b016      	add	sp, #88	; 0x58
 80050ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080050b0 <__smakebuf_r>:
 80050b0:	898b      	ldrh	r3, [r1, #12]
 80050b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80050b4:	079d      	lsls	r5, r3, #30
 80050b6:	4606      	mov	r6, r0
 80050b8:	460c      	mov	r4, r1
 80050ba:	d507      	bpl.n	80050cc <__smakebuf_r+0x1c>
 80050bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80050c0:	6023      	str	r3, [r4, #0]
 80050c2:	6123      	str	r3, [r4, #16]
 80050c4:	2301      	movs	r3, #1
 80050c6:	6163      	str	r3, [r4, #20]
 80050c8:	b002      	add	sp, #8
 80050ca:	bd70      	pop	{r4, r5, r6, pc}
 80050cc:	466a      	mov	r2, sp
 80050ce:	ab01      	add	r3, sp, #4
 80050d0:	f7ff ffc8 	bl	8005064 <__swhatbuf_r>
 80050d4:	9900      	ldr	r1, [sp, #0]
 80050d6:	4605      	mov	r5, r0
 80050d8:	4630      	mov	r0, r6
 80050da:	f7ff fc3b 	bl	8004954 <_malloc_r>
 80050de:	b948      	cbnz	r0, 80050f4 <__smakebuf_r+0x44>
 80050e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050e4:	059a      	lsls	r2, r3, #22
 80050e6:	d4ef      	bmi.n	80050c8 <__smakebuf_r+0x18>
 80050e8:	f023 0303 	bic.w	r3, r3, #3
 80050ec:	f043 0302 	orr.w	r3, r3, #2
 80050f0:	81a3      	strh	r3, [r4, #12]
 80050f2:	e7e3      	b.n	80050bc <__smakebuf_r+0xc>
 80050f4:	4b0d      	ldr	r3, [pc, #52]	; (800512c <__smakebuf_r+0x7c>)
 80050f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80050f8:	89a3      	ldrh	r3, [r4, #12]
 80050fa:	6020      	str	r0, [r4, #0]
 80050fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005100:	81a3      	strh	r3, [r4, #12]
 8005102:	9b00      	ldr	r3, [sp, #0]
 8005104:	6120      	str	r0, [r4, #16]
 8005106:	6163      	str	r3, [r4, #20]
 8005108:	9b01      	ldr	r3, [sp, #4]
 800510a:	b15b      	cbz	r3, 8005124 <__smakebuf_r+0x74>
 800510c:	4630      	mov	r0, r6
 800510e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005112:	f000 fb7f 	bl	8005814 <_isatty_r>
 8005116:	b128      	cbz	r0, 8005124 <__smakebuf_r+0x74>
 8005118:	89a3      	ldrh	r3, [r4, #12]
 800511a:	f023 0303 	bic.w	r3, r3, #3
 800511e:	f043 0301 	orr.w	r3, r3, #1
 8005122:	81a3      	strh	r3, [r4, #12]
 8005124:	89a0      	ldrh	r0, [r4, #12]
 8005126:	4305      	orrs	r5, r0
 8005128:	81a5      	strh	r5, [r4, #12]
 800512a:	e7cd      	b.n	80050c8 <__smakebuf_r+0x18>
 800512c:	08004ebd 	.word	0x08004ebd

08005130 <__malloc_lock>:
 8005130:	4801      	ldr	r0, [pc, #4]	; (8005138 <__malloc_lock+0x8>)
 8005132:	f7ff bf95 	b.w	8005060 <__retarget_lock_acquire_recursive>
 8005136:	bf00      	nop
 8005138:	20000570 	.word	0x20000570

0800513c <__malloc_unlock>:
 800513c:	4801      	ldr	r0, [pc, #4]	; (8005144 <__malloc_unlock+0x8>)
 800513e:	f7ff bf90 	b.w	8005062 <__retarget_lock_release_recursive>
 8005142:	bf00      	nop
 8005144:	20000570 	.word	0x20000570

08005148 <__sfputc_r>:
 8005148:	6893      	ldr	r3, [r2, #8]
 800514a:	b410      	push	{r4}
 800514c:	3b01      	subs	r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	6093      	str	r3, [r2, #8]
 8005152:	da07      	bge.n	8005164 <__sfputc_r+0x1c>
 8005154:	6994      	ldr	r4, [r2, #24]
 8005156:	42a3      	cmp	r3, r4
 8005158:	db01      	blt.n	800515e <__sfputc_r+0x16>
 800515a:	290a      	cmp	r1, #10
 800515c:	d102      	bne.n	8005164 <__sfputc_r+0x1c>
 800515e:	bc10      	pop	{r4}
 8005160:	f7ff bd0a 	b.w	8004b78 <__swbuf_r>
 8005164:	6813      	ldr	r3, [r2, #0]
 8005166:	1c58      	adds	r0, r3, #1
 8005168:	6010      	str	r0, [r2, #0]
 800516a:	7019      	strb	r1, [r3, #0]
 800516c:	4608      	mov	r0, r1
 800516e:	bc10      	pop	{r4}
 8005170:	4770      	bx	lr

08005172 <__sfputs_r>:
 8005172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005174:	4606      	mov	r6, r0
 8005176:	460f      	mov	r7, r1
 8005178:	4614      	mov	r4, r2
 800517a:	18d5      	adds	r5, r2, r3
 800517c:	42ac      	cmp	r4, r5
 800517e:	d101      	bne.n	8005184 <__sfputs_r+0x12>
 8005180:	2000      	movs	r0, #0
 8005182:	e007      	b.n	8005194 <__sfputs_r+0x22>
 8005184:	463a      	mov	r2, r7
 8005186:	4630      	mov	r0, r6
 8005188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800518c:	f7ff ffdc 	bl	8005148 <__sfputc_r>
 8005190:	1c43      	adds	r3, r0, #1
 8005192:	d1f3      	bne.n	800517c <__sfputs_r+0xa>
 8005194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005198 <_vfiprintf_r>:
 8005198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800519c:	460d      	mov	r5, r1
 800519e:	4614      	mov	r4, r2
 80051a0:	4698      	mov	r8, r3
 80051a2:	4606      	mov	r6, r0
 80051a4:	b09d      	sub	sp, #116	; 0x74
 80051a6:	b118      	cbz	r0, 80051b0 <_vfiprintf_r+0x18>
 80051a8:	6983      	ldr	r3, [r0, #24]
 80051aa:	b90b      	cbnz	r3, 80051b0 <_vfiprintf_r+0x18>
 80051ac:	f7ff feba 	bl	8004f24 <__sinit>
 80051b0:	4b89      	ldr	r3, [pc, #548]	; (80053d8 <_vfiprintf_r+0x240>)
 80051b2:	429d      	cmp	r5, r3
 80051b4:	d11b      	bne.n	80051ee <_vfiprintf_r+0x56>
 80051b6:	6875      	ldr	r5, [r6, #4]
 80051b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051ba:	07d9      	lsls	r1, r3, #31
 80051bc:	d405      	bmi.n	80051ca <_vfiprintf_r+0x32>
 80051be:	89ab      	ldrh	r3, [r5, #12]
 80051c0:	059a      	lsls	r2, r3, #22
 80051c2:	d402      	bmi.n	80051ca <_vfiprintf_r+0x32>
 80051c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051c6:	f7ff ff4b 	bl	8005060 <__retarget_lock_acquire_recursive>
 80051ca:	89ab      	ldrh	r3, [r5, #12]
 80051cc:	071b      	lsls	r3, r3, #28
 80051ce:	d501      	bpl.n	80051d4 <_vfiprintf_r+0x3c>
 80051d0:	692b      	ldr	r3, [r5, #16]
 80051d2:	b9eb      	cbnz	r3, 8005210 <_vfiprintf_r+0x78>
 80051d4:	4629      	mov	r1, r5
 80051d6:	4630      	mov	r0, r6
 80051d8:	f7ff fd20 	bl	8004c1c <__swsetup_r>
 80051dc:	b1c0      	cbz	r0, 8005210 <_vfiprintf_r+0x78>
 80051de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051e0:	07dc      	lsls	r4, r3, #31
 80051e2:	d50e      	bpl.n	8005202 <_vfiprintf_r+0x6a>
 80051e4:	f04f 30ff 	mov.w	r0, #4294967295
 80051e8:	b01d      	add	sp, #116	; 0x74
 80051ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ee:	4b7b      	ldr	r3, [pc, #492]	; (80053dc <_vfiprintf_r+0x244>)
 80051f0:	429d      	cmp	r5, r3
 80051f2:	d101      	bne.n	80051f8 <_vfiprintf_r+0x60>
 80051f4:	68b5      	ldr	r5, [r6, #8]
 80051f6:	e7df      	b.n	80051b8 <_vfiprintf_r+0x20>
 80051f8:	4b79      	ldr	r3, [pc, #484]	; (80053e0 <_vfiprintf_r+0x248>)
 80051fa:	429d      	cmp	r5, r3
 80051fc:	bf08      	it	eq
 80051fe:	68f5      	ldreq	r5, [r6, #12]
 8005200:	e7da      	b.n	80051b8 <_vfiprintf_r+0x20>
 8005202:	89ab      	ldrh	r3, [r5, #12]
 8005204:	0598      	lsls	r0, r3, #22
 8005206:	d4ed      	bmi.n	80051e4 <_vfiprintf_r+0x4c>
 8005208:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800520a:	f7ff ff2a 	bl	8005062 <__retarget_lock_release_recursive>
 800520e:	e7e9      	b.n	80051e4 <_vfiprintf_r+0x4c>
 8005210:	2300      	movs	r3, #0
 8005212:	9309      	str	r3, [sp, #36]	; 0x24
 8005214:	2320      	movs	r3, #32
 8005216:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800521a:	2330      	movs	r3, #48	; 0x30
 800521c:	f04f 0901 	mov.w	r9, #1
 8005220:	f8cd 800c 	str.w	r8, [sp, #12]
 8005224:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80053e4 <_vfiprintf_r+0x24c>
 8005228:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800522c:	4623      	mov	r3, r4
 800522e:	469a      	mov	sl, r3
 8005230:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005234:	b10a      	cbz	r2, 800523a <_vfiprintf_r+0xa2>
 8005236:	2a25      	cmp	r2, #37	; 0x25
 8005238:	d1f9      	bne.n	800522e <_vfiprintf_r+0x96>
 800523a:	ebba 0b04 	subs.w	fp, sl, r4
 800523e:	d00b      	beq.n	8005258 <_vfiprintf_r+0xc0>
 8005240:	465b      	mov	r3, fp
 8005242:	4622      	mov	r2, r4
 8005244:	4629      	mov	r1, r5
 8005246:	4630      	mov	r0, r6
 8005248:	f7ff ff93 	bl	8005172 <__sfputs_r>
 800524c:	3001      	adds	r0, #1
 800524e:	f000 80aa 	beq.w	80053a6 <_vfiprintf_r+0x20e>
 8005252:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005254:	445a      	add	r2, fp
 8005256:	9209      	str	r2, [sp, #36]	; 0x24
 8005258:	f89a 3000 	ldrb.w	r3, [sl]
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 80a2 	beq.w	80053a6 <_vfiprintf_r+0x20e>
 8005262:	2300      	movs	r3, #0
 8005264:	f04f 32ff 	mov.w	r2, #4294967295
 8005268:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800526c:	f10a 0a01 	add.w	sl, sl, #1
 8005270:	9304      	str	r3, [sp, #16]
 8005272:	9307      	str	r3, [sp, #28]
 8005274:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005278:	931a      	str	r3, [sp, #104]	; 0x68
 800527a:	4654      	mov	r4, sl
 800527c:	2205      	movs	r2, #5
 800527e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005282:	4858      	ldr	r0, [pc, #352]	; (80053e4 <_vfiprintf_r+0x24c>)
 8005284:	f000 fae8 	bl	8005858 <memchr>
 8005288:	9a04      	ldr	r2, [sp, #16]
 800528a:	b9d8      	cbnz	r0, 80052c4 <_vfiprintf_r+0x12c>
 800528c:	06d1      	lsls	r1, r2, #27
 800528e:	bf44      	itt	mi
 8005290:	2320      	movmi	r3, #32
 8005292:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005296:	0713      	lsls	r3, r2, #28
 8005298:	bf44      	itt	mi
 800529a:	232b      	movmi	r3, #43	; 0x2b
 800529c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052a0:	f89a 3000 	ldrb.w	r3, [sl]
 80052a4:	2b2a      	cmp	r3, #42	; 0x2a
 80052a6:	d015      	beq.n	80052d4 <_vfiprintf_r+0x13c>
 80052a8:	4654      	mov	r4, sl
 80052aa:	2000      	movs	r0, #0
 80052ac:	f04f 0c0a 	mov.w	ip, #10
 80052b0:	9a07      	ldr	r2, [sp, #28]
 80052b2:	4621      	mov	r1, r4
 80052b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052b8:	3b30      	subs	r3, #48	; 0x30
 80052ba:	2b09      	cmp	r3, #9
 80052bc:	d94e      	bls.n	800535c <_vfiprintf_r+0x1c4>
 80052be:	b1b0      	cbz	r0, 80052ee <_vfiprintf_r+0x156>
 80052c0:	9207      	str	r2, [sp, #28]
 80052c2:	e014      	b.n	80052ee <_vfiprintf_r+0x156>
 80052c4:	eba0 0308 	sub.w	r3, r0, r8
 80052c8:	fa09 f303 	lsl.w	r3, r9, r3
 80052cc:	4313      	orrs	r3, r2
 80052ce:	46a2      	mov	sl, r4
 80052d0:	9304      	str	r3, [sp, #16]
 80052d2:	e7d2      	b.n	800527a <_vfiprintf_r+0xe2>
 80052d4:	9b03      	ldr	r3, [sp, #12]
 80052d6:	1d19      	adds	r1, r3, #4
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	9103      	str	r1, [sp, #12]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	bfbb      	ittet	lt
 80052e0:	425b      	neglt	r3, r3
 80052e2:	f042 0202 	orrlt.w	r2, r2, #2
 80052e6:	9307      	strge	r3, [sp, #28]
 80052e8:	9307      	strlt	r3, [sp, #28]
 80052ea:	bfb8      	it	lt
 80052ec:	9204      	strlt	r2, [sp, #16]
 80052ee:	7823      	ldrb	r3, [r4, #0]
 80052f0:	2b2e      	cmp	r3, #46	; 0x2e
 80052f2:	d10c      	bne.n	800530e <_vfiprintf_r+0x176>
 80052f4:	7863      	ldrb	r3, [r4, #1]
 80052f6:	2b2a      	cmp	r3, #42	; 0x2a
 80052f8:	d135      	bne.n	8005366 <_vfiprintf_r+0x1ce>
 80052fa:	9b03      	ldr	r3, [sp, #12]
 80052fc:	3402      	adds	r4, #2
 80052fe:	1d1a      	adds	r2, r3, #4
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	9203      	str	r2, [sp, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	bfb8      	it	lt
 8005308:	f04f 33ff 	movlt.w	r3, #4294967295
 800530c:	9305      	str	r3, [sp, #20]
 800530e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80053e8 <_vfiprintf_r+0x250>
 8005312:	2203      	movs	r2, #3
 8005314:	4650      	mov	r0, sl
 8005316:	7821      	ldrb	r1, [r4, #0]
 8005318:	f000 fa9e 	bl	8005858 <memchr>
 800531c:	b140      	cbz	r0, 8005330 <_vfiprintf_r+0x198>
 800531e:	2340      	movs	r3, #64	; 0x40
 8005320:	eba0 000a 	sub.w	r0, r0, sl
 8005324:	fa03 f000 	lsl.w	r0, r3, r0
 8005328:	9b04      	ldr	r3, [sp, #16]
 800532a:	3401      	adds	r4, #1
 800532c:	4303      	orrs	r3, r0
 800532e:	9304      	str	r3, [sp, #16]
 8005330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005334:	2206      	movs	r2, #6
 8005336:	482d      	ldr	r0, [pc, #180]	; (80053ec <_vfiprintf_r+0x254>)
 8005338:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800533c:	f000 fa8c 	bl	8005858 <memchr>
 8005340:	2800      	cmp	r0, #0
 8005342:	d03f      	beq.n	80053c4 <_vfiprintf_r+0x22c>
 8005344:	4b2a      	ldr	r3, [pc, #168]	; (80053f0 <_vfiprintf_r+0x258>)
 8005346:	bb1b      	cbnz	r3, 8005390 <_vfiprintf_r+0x1f8>
 8005348:	9b03      	ldr	r3, [sp, #12]
 800534a:	3307      	adds	r3, #7
 800534c:	f023 0307 	bic.w	r3, r3, #7
 8005350:	3308      	adds	r3, #8
 8005352:	9303      	str	r3, [sp, #12]
 8005354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005356:	443b      	add	r3, r7
 8005358:	9309      	str	r3, [sp, #36]	; 0x24
 800535a:	e767      	b.n	800522c <_vfiprintf_r+0x94>
 800535c:	460c      	mov	r4, r1
 800535e:	2001      	movs	r0, #1
 8005360:	fb0c 3202 	mla	r2, ip, r2, r3
 8005364:	e7a5      	b.n	80052b2 <_vfiprintf_r+0x11a>
 8005366:	2300      	movs	r3, #0
 8005368:	f04f 0c0a 	mov.w	ip, #10
 800536c:	4619      	mov	r1, r3
 800536e:	3401      	adds	r4, #1
 8005370:	9305      	str	r3, [sp, #20]
 8005372:	4620      	mov	r0, r4
 8005374:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005378:	3a30      	subs	r2, #48	; 0x30
 800537a:	2a09      	cmp	r2, #9
 800537c:	d903      	bls.n	8005386 <_vfiprintf_r+0x1ee>
 800537e:	2b00      	cmp	r3, #0
 8005380:	d0c5      	beq.n	800530e <_vfiprintf_r+0x176>
 8005382:	9105      	str	r1, [sp, #20]
 8005384:	e7c3      	b.n	800530e <_vfiprintf_r+0x176>
 8005386:	4604      	mov	r4, r0
 8005388:	2301      	movs	r3, #1
 800538a:	fb0c 2101 	mla	r1, ip, r1, r2
 800538e:	e7f0      	b.n	8005372 <_vfiprintf_r+0x1da>
 8005390:	ab03      	add	r3, sp, #12
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	462a      	mov	r2, r5
 8005396:	4630      	mov	r0, r6
 8005398:	4b16      	ldr	r3, [pc, #88]	; (80053f4 <_vfiprintf_r+0x25c>)
 800539a:	a904      	add	r1, sp, #16
 800539c:	f3af 8000 	nop.w
 80053a0:	4607      	mov	r7, r0
 80053a2:	1c78      	adds	r0, r7, #1
 80053a4:	d1d6      	bne.n	8005354 <_vfiprintf_r+0x1bc>
 80053a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053a8:	07d9      	lsls	r1, r3, #31
 80053aa:	d405      	bmi.n	80053b8 <_vfiprintf_r+0x220>
 80053ac:	89ab      	ldrh	r3, [r5, #12]
 80053ae:	059a      	lsls	r2, r3, #22
 80053b0:	d402      	bmi.n	80053b8 <_vfiprintf_r+0x220>
 80053b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053b4:	f7ff fe55 	bl	8005062 <__retarget_lock_release_recursive>
 80053b8:	89ab      	ldrh	r3, [r5, #12]
 80053ba:	065b      	lsls	r3, r3, #25
 80053bc:	f53f af12 	bmi.w	80051e4 <_vfiprintf_r+0x4c>
 80053c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053c2:	e711      	b.n	80051e8 <_vfiprintf_r+0x50>
 80053c4:	ab03      	add	r3, sp, #12
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	462a      	mov	r2, r5
 80053ca:	4630      	mov	r0, r6
 80053cc:	4b09      	ldr	r3, [pc, #36]	; (80053f4 <_vfiprintf_r+0x25c>)
 80053ce:	a904      	add	r1, sp, #16
 80053d0:	f000 f882 	bl	80054d8 <_printf_i>
 80053d4:	e7e4      	b.n	80053a0 <_vfiprintf_r+0x208>
 80053d6:	bf00      	nop
 80053d8:	0800677c 	.word	0x0800677c
 80053dc:	0800679c 	.word	0x0800679c
 80053e0:	0800675c 	.word	0x0800675c
 80053e4:	080067bc 	.word	0x080067bc
 80053e8:	080067c2 	.word	0x080067c2
 80053ec:	080067c6 	.word	0x080067c6
 80053f0:	00000000 	.word	0x00000000
 80053f4:	08005173 	.word	0x08005173

080053f8 <_printf_common>:
 80053f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053fc:	4616      	mov	r6, r2
 80053fe:	4699      	mov	r9, r3
 8005400:	688a      	ldr	r2, [r1, #8]
 8005402:	690b      	ldr	r3, [r1, #16]
 8005404:	4607      	mov	r7, r0
 8005406:	4293      	cmp	r3, r2
 8005408:	bfb8      	it	lt
 800540a:	4613      	movlt	r3, r2
 800540c:	6033      	str	r3, [r6, #0]
 800540e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005412:	460c      	mov	r4, r1
 8005414:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005418:	b10a      	cbz	r2, 800541e <_printf_common+0x26>
 800541a:	3301      	adds	r3, #1
 800541c:	6033      	str	r3, [r6, #0]
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	0699      	lsls	r1, r3, #26
 8005422:	bf42      	ittt	mi
 8005424:	6833      	ldrmi	r3, [r6, #0]
 8005426:	3302      	addmi	r3, #2
 8005428:	6033      	strmi	r3, [r6, #0]
 800542a:	6825      	ldr	r5, [r4, #0]
 800542c:	f015 0506 	ands.w	r5, r5, #6
 8005430:	d106      	bne.n	8005440 <_printf_common+0x48>
 8005432:	f104 0a19 	add.w	sl, r4, #25
 8005436:	68e3      	ldr	r3, [r4, #12]
 8005438:	6832      	ldr	r2, [r6, #0]
 800543a:	1a9b      	subs	r3, r3, r2
 800543c:	42ab      	cmp	r3, r5
 800543e:	dc28      	bgt.n	8005492 <_printf_common+0x9a>
 8005440:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005444:	1e13      	subs	r3, r2, #0
 8005446:	6822      	ldr	r2, [r4, #0]
 8005448:	bf18      	it	ne
 800544a:	2301      	movne	r3, #1
 800544c:	0692      	lsls	r2, r2, #26
 800544e:	d42d      	bmi.n	80054ac <_printf_common+0xb4>
 8005450:	4649      	mov	r1, r9
 8005452:	4638      	mov	r0, r7
 8005454:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005458:	47c0      	blx	r8
 800545a:	3001      	adds	r0, #1
 800545c:	d020      	beq.n	80054a0 <_printf_common+0xa8>
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	68e5      	ldr	r5, [r4, #12]
 8005462:	f003 0306 	and.w	r3, r3, #6
 8005466:	2b04      	cmp	r3, #4
 8005468:	bf18      	it	ne
 800546a:	2500      	movne	r5, #0
 800546c:	6832      	ldr	r2, [r6, #0]
 800546e:	f04f 0600 	mov.w	r6, #0
 8005472:	68a3      	ldr	r3, [r4, #8]
 8005474:	bf08      	it	eq
 8005476:	1aad      	subeq	r5, r5, r2
 8005478:	6922      	ldr	r2, [r4, #16]
 800547a:	bf08      	it	eq
 800547c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005480:	4293      	cmp	r3, r2
 8005482:	bfc4      	itt	gt
 8005484:	1a9b      	subgt	r3, r3, r2
 8005486:	18ed      	addgt	r5, r5, r3
 8005488:	341a      	adds	r4, #26
 800548a:	42b5      	cmp	r5, r6
 800548c:	d11a      	bne.n	80054c4 <_printf_common+0xcc>
 800548e:	2000      	movs	r0, #0
 8005490:	e008      	b.n	80054a4 <_printf_common+0xac>
 8005492:	2301      	movs	r3, #1
 8005494:	4652      	mov	r2, sl
 8005496:	4649      	mov	r1, r9
 8005498:	4638      	mov	r0, r7
 800549a:	47c0      	blx	r8
 800549c:	3001      	adds	r0, #1
 800549e:	d103      	bne.n	80054a8 <_printf_common+0xb0>
 80054a0:	f04f 30ff 	mov.w	r0, #4294967295
 80054a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a8:	3501      	adds	r5, #1
 80054aa:	e7c4      	b.n	8005436 <_printf_common+0x3e>
 80054ac:	2030      	movs	r0, #48	; 0x30
 80054ae:	18e1      	adds	r1, r4, r3
 80054b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054b4:	1c5a      	adds	r2, r3, #1
 80054b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054ba:	4422      	add	r2, r4
 80054bc:	3302      	adds	r3, #2
 80054be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054c2:	e7c5      	b.n	8005450 <_printf_common+0x58>
 80054c4:	2301      	movs	r3, #1
 80054c6:	4622      	mov	r2, r4
 80054c8:	4649      	mov	r1, r9
 80054ca:	4638      	mov	r0, r7
 80054cc:	47c0      	blx	r8
 80054ce:	3001      	adds	r0, #1
 80054d0:	d0e6      	beq.n	80054a0 <_printf_common+0xa8>
 80054d2:	3601      	adds	r6, #1
 80054d4:	e7d9      	b.n	800548a <_printf_common+0x92>
	...

080054d8 <_printf_i>:
 80054d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054dc:	7e0f      	ldrb	r7, [r1, #24]
 80054de:	4691      	mov	r9, r2
 80054e0:	2f78      	cmp	r7, #120	; 0x78
 80054e2:	4680      	mov	r8, r0
 80054e4:	460c      	mov	r4, r1
 80054e6:	469a      	mov	sl, r3
 80054e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054ee:	d807      	bhi.n	8005500 <_printf_i+0x28>
 80054f0:	2f62      	cmp	r7, #98	; 0x62
 80054f2:	d80a      	bhi.n	800550a <_printf_i+0x32>
 80054f4:	2f00      	cmp	r7, #0
 80054f6:	f000 80d9 	beq.w	80056ac <_printf_i+0x1d4>
 80054fa:	2f58      	cmp	r7, #88	; 0x58
 80054fc:	f000 80a4 	beq.w	8005648 <_printf_i+0x170>
 8005500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005504:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005508:	e03a      	b.n	8005580 <_printf_i+0xa8>
 800550a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800550e:	2b15      	cmp	r3, #21
 8005510:	d8f6      	bhi.n	8005500 <_printf_i+0x28>
 8005512:	a101      	add	r1, pc, #4	; (adr r1, 8005518 <_printf_i+0x40>)
 8005514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005518:	08005571 	.word	0x08005571
 800551c:	08005585 	.word	0x08005585
 8005520:	08005501 	.word	0x08005501
 8005524:	08005501 	.word	0x08005501
 8005528:	08005501 	.word	0x08005501
 800552c:	08005501 	.word	0x08005501
 8005530:	08005585 	.word	0x08005585
 8005534:	08005501 	.word	0x08005501
 8005538:	08005501 	.word	0x08005501
 800553c:	08005501 	.word	0x08005501
 8005540:	08005501 	.word	0x08005501
 8005544:	08005693 	.word	0x08005693
 8005548:	080055b5 	.word	0x080055b5
 800554c:	08005675 	.word	0x08005675
 8005550:	08005501 	.word	0x08005501
 8005554:	08005501 	.word	0x08005501
 8005558:	080056b5 	.word	0x080056b5
 800555c:	08005501 	.word	0x08005501
 8005560:	080055b5 	.word	0x080055b5
 8005564:	08005501 	.word	0x08005501
 8005568:	08005501 	.word	0x08005501
 800556c:	0800567d 	.word	0x0800567d
 8005570:	682b      	ldr	r3, [r5, #0]
 8005572:	1d1a      	adds	r2, r3, #4
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	602a      	str	r2, [r5, #0]
 8005578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800557c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005580:	2301      	movs	r3, #1
 8005582:	e0a4      	b.n	80056ce <_printf_i+0x1f6>
 8005584:	6820      	ldr	r0, [r4, #0]
 8005586:	6829      	ldr	r1, [r5, #0]
 8005588:	0606      	lsls	r6, r0, #24
 800558a:	f101 0304 	add.w	r3, r1, #4
 800558e:	d50a      	bpl.n	80055a6 <_printf_i+0xce>
 8005590:	680e      	ldr	r6, [r1, #0]
 8005592:	602b      	str	r3, [r5, #0]
 8005594:	2e00      	cmp	r6, #0
 8005596:	da03      	bge.n	80055a0 <_printf_i+0xc8>
 8005598:	232d      	movs	r3, #45	; 0x2d
 800559a:	4276      	negs	r6, r6
 800559c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055a0:	230a      	movs	r3, #10
 80055a2:	485e      	ldr	r0, [pc, #376]	; (800571c <_printf_i+0x244>)
 80055a4:	e019      	b.n	80055da <_printf_i+0x102>
 80055a6:	680e      	ldr	r6, [r1, #0]
 80055a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055ac:	602b      	str	r3, [r5, #0]
 80055ae:	bf18      	it	ne
 80055b0:	b236      	sxthne	r6, r6
 80055b2:	e7ef      	b.n	8005594 <_printf_i+0xbc>
 80055b4:	682b      	ldr	r3, [r5, #0]
 80055b6:	6820      	ldr	r0, [r4, #0]
 80055b8:	1d19      	adds	r1, r3, #4
 80055ba:	6029      	str	r1, [r5, #0]
 80055bc:	0601      	lsls	r1, r0, #24
 80055be:	d501      	bpl.n	80055c4 <_printf_i+0xec>
 80055c0:	681e      	ldr	r6, [r3, #0]
 80055c2:	e002      	b.n	80055ca <_printf_i+0xf2>
 80055c4:	0646      	lsls	r6, r0, #25
 80055c6:	d5fb      	bpl.n	80055c0 <_printf_i+0xe8>
 80055c8:	881e      	ldrh	r6, [r3, #0]
 80055ca:	2f6f      	cmp	r7, #111	; 0x6f
 80055cc:	bf0c      	ite	eq
 80055ce:	2308      	moveq	r3, #8
 80055d0:	230a      	movne	r3, #10
 80055d2:	4852      	ldr	r0, [pc, #328]	; (800571c <_printf_i+0x244>)
 80055d4:	2100      	movs	r1, #0
 80055d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055da:	6865      	ldr	r5, [r4, #4]
 80055dc:	2d00      	cmp	r5, #0
 80055de:	bfa8      	it	ge
 80055e0:	6821      	ldrge	r1, [r4, #0]
 80055e2:	60a5      	str	r5, [r4, #8]
 80055e4:	bfa4      	itt	ge
 80055e6:	f021 0104 	bicge.w	r1, r1, #4
 80055ea:	6021      	strge	r1, [r4, #0]
 80055ec:	b90e      	cbnz	r6, 80055f2 <_printf_i+0x11a>
 80055ee:	2d00      	cmp	r5, #0
 80055f0:	d04d      	beq.n	800568e <_printf_i+0x1b6>
 80055f2:	4615      	mov	r5, r2
 80055f4:	fbb6 f1f3 	udiv	r1, r6, r3
 80055f8:	fb03 6711 	mls	r7, r3, r1, r6
 80055fc:	5dc7      	ldrb	r7, [r0, r7]
 80055fe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005602:	4637      	mov	r7, r6
 8005604:	42bb      	cmp	r3, r7
 8005606:	460e      	mov	r6, r1
 8005608:	d9f4      	bls.n	80055f4 <_printf_i+0x11c>
 800560a:	2b08      	cmp	r3, #8
 800560c:	d10b      	bne.n	8005626 <_printf_i+0x14e>
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	07de      	lsls	r6, r3, #31
 8005612:	d508      	bpl.n	8005626 <_printf_i+0x14e>
 8005614:	6923      	ldr	r3, [r4, #16]
 8005616:	6861      	ldr	r1, [r4, #4]
 8005618:	4299      	cmp	r1, r3
 800561a:	bfde      	ittt	le
 800561c:	2330      	movle	r3, #48	; 0x30
 800561e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005622:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005626:	1b52      	subs	r2, r2, r5
 8005628:	6122      	str	r2, [r4, #16]
 800562a:	464b      	mov	r3, r9
 800562c:	4621      	mov	r1, r4
 800562e:	4640      	mov	r0, r8
 8005630:	f8cd a000 	str.w	sl, [sp]
 8005634:	aa03      	add	r2, sp, #12
 8005636:	f7ff fedf 	bl	80053f8 <_printf_common>
 800563a:	3001      	adds	r0, #1
 800563c:	d14c      	bne.n	80056d8 <_printf_i+0x200>
 800563e:	f04f 30ff 	mov.w	r0, #4294967295
 8005642:	b004      	add	sp, #16
 8005644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005648:	4834      	ldr	r0, [pc, #208]	; (800571c <_printf_i+0x244>)
 800564a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800564e:	6829      	ldr	r1, [r5, #0]
 8005650:	6823      	ldr	r3, [r4, #0]
 8005652:	f851 6b04 	ldr.w	r6, [r1], #4
 8005656:	6029      	str	r1, [r5, #0]
 8005658:	061d      	lsls	r5, r3, #24
 800565a:	d514      	bpl.n	8005686 <_printf_i+0x1ae>
 800565c:	07df      	lsls	r7, r3, #31
 800565e:	bf44      	itt	mi
 8005660:	f043 0320 	orrmi.w	r3, r3, #32
 8005664:	6023      	strmi	r3, [r4, #0]
 8005666:	b91e      	cbnz	r6, 8005670 <_printf_i+0x198>
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	f023 0320 	bic.w	r3, r3, #32
 800566e:	6023      	str	r3, [r4, #0]
 8005670:	2310      	movs	r3, #16
 8005672:	e7af      	b.n	80055d4 <_printf_i+0xfc>
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	f043 0320 	orr.w	r3, r3, #32
 800567a:	6023      	str	r3, [r4, #0]
 800567c:	2378      	movs	r3, #120	; 0x78
 800567e:	4828      	ldr	r0, [pc, #160]	; (8005720 <_printf_i+0x248>)
 8005680:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005684:	e7e3      	b.n	800564e <_printf_i+0x176>
 8005686:	0659      	lsls	r1, r3, #25
 8005688:	bf48      	it	mi
 800568a:	b2b6      	uxthmi	r6, r6
 800568c:	e7e6      	b.n	800565c <_printf_i+0x184>
 800568e:	4615      	mov	r5, r2
 8005690:	e7bb      	b.n	800560a <_printf_i+0x132>
 8005692:	682b      	ldr	r3, [r5, #0]
 8005694:	6826      	ldr	r6, [r4, #0]
 8005696:	1d18      	adds	r0, r3, #4
 8005698:	6961      	ldr	r1, [r4, #20]
 800569a:	6028      	str	r0, [r5, #0]
 800569c:	0635      	lsls	r5, r6, #24
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	d501      	bpl.n	80056a6 <_printf_i+0x1ce>
 80056a2:	6019      	str	r1, [r3, #0]
 80056a4:	e002      	b.n	80056ac <_printf_i+0x1d4>
 80056a6:	0670      	lsls	r0, r6, #25
 80056a8:	d5fb      	bpl.n	80056a2 <_printf_i+0x1ca>
 80056aa:	8019      	strh	r1, [r3, #0]
 80056ac:	2300      	movs	r3, #0
 80056ae:	4615      	mov	r5, r2
 80056b0:	6123      	str	r3, [r4, #16]
 80056b2:	e7ba      	b.n	800562a <_printf_i+0x152>
 80056b4:	682b      	ldr	r3, [r5, #0]
 80056b6:	2100      	movs	r1, #0
 80056b8:	1d1a      	adds	r2, r3, #4
 80056ba:	602a      	str	r2, [r5, #0]
 80056bc:	681d      	ldr	r5, [r3, #0]
 80056be:	6862      	ldr	r2, [r4, #4]
 80056c0:	4628      	mov	r0, r5
 80056c2:	f000 f8c9 	bl	8005858 <memchr>
 80056c6:	b108      	cbz	r0, 80056cc <_printf_i+0x1f4>
 80056c8:	1b40      	subs	r0, r0, r5
 80056ca:	6060      	str	r0, [r4, #4]
 80056cc:	6863      	ldr	r3, [r4, #4]
 80056ce:	6123      	str	r3, [r4, #16]
 80056d0:	2300      	movs	r3, #0
 80056d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056d6:	e7a8      	b.n	800562a <_printf_i+0x152>
 80056d8:	462a      	mov	r2, r5
 80056da:	4649      	mov	r1, r9
 80056dc:	4640      	mov	r0, r8
 80056de:	6923      	ldr	r3, [r4, #16]
 80056e0:	47d0      	blx	sl
 80056e2:	3001      	adds	r0, #1
 80056e4:	d0ab      	beq.n	800563e <_printf_i+0x166>
 80056e6:	6823      	ldr	r3, [r4, #0]
 80056e8:	079b      	lsls	r3, r3, #30
 80056ea:	d413      	bmi.n	8005714 <_printf_i+0x23c>
 80056ec:	68e0      	ldr	r0, [r4, #12]
 80056ee:	9b03      	ldr	r3, [sp, #12]
 80056f0:	4298      	cmp	r0, r3
 80056f2:	bfb8      	it	lt
 80056f4:	4618      	movlt	r0, r3
 80056f6:	e7a4      	b.n	8005642 <_printf_i+0x16a>
 80056f8:	2301      	movs	r3, #1
 80056fa:	4632      	mov	r2, r6
 80056fc:	4649      	mov	r1, r9
 80056fe:	4640      	mov	r0, r8
 8005700:	47d0      	blx	sl
 8005702:	3001      	adds	r0, #1
 8005704:	d09b      	beq.n	800563e <_printf_i+0x166>
 8005706:	3501      	adds	r5, #1
 8005708:	68e3      	ldr	r3, [r4, #12]
 800570a:	9903      	ldr	r1, [sp, #12]
 800570c:	1a5b      	subs	r3, r3, r1
 800570e:	42ab      	cmp	r3, r5
 8005710:	dcf2      	bgt.n	80056f8 <_printf_i+0x220>
 8005712:	e7eb      	b.n	80056ec <_printf_i+0x214>
 8005714:	2500      	movs	r5, #0
 8005716:	f104 0619 	add.w	r6, r4, #25
 800571a:	e7f5      	b.n	8005708 <_printf_i+0x230>
 800571c:	080067cd 	.word	0x080067cd
 8005720:	080067de 	.word	0x080067de

08005724 <__sread>:
 8005724:	b510      	push	{r4, lr}
 8005726:	460c      	mov	r4, r1
 8005728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800572c:	f000 f8a2 	bl	8005874 <_read_r>
 8005730:	2800      	cmp	r0, #0
 8005732:	bfab      	itete	ge
 8005734:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005736:	89a3      	ldrhlt	r3, [r4, #12]
 8005738:	181b      	addge	r3, r3, r0
 800573a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800573e:	bfac      	ite	ge
 8005740:	6563      	strge	r3, [r4, #84]	; 0x54
 8005742:	81a3      	strhlt	r3, [r4, #12]
 8005744:	bd10      	pop	{r4, pc}

08005746 <__swrite>:
 8005746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800574a:	461f      	mov	r7, r3
 800574c:	898b      	ldrh	r3, [r1, #12]
 800574e:	4605      	mov	r5, r0
 8005750:	05db      	lsls	r3, r3, #23
 8005752:	460c      	mov	r4, r1
 8005754:	4616      	mov	r6, r2
 8005756:	d505      	bpl.n	8005764 <__swrite+0x1e>
 8005758:	2302      	movs	r3, #2
 800575a:	2200      	movs	r2, #0
 800575c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005760:	f000 f868 	bl	8005834 <_lseek_r>
 8005764:	89a3      	ldrh	r3, [r4, #12]
 8005766:	4632      	mov	r2, r6
 8005768:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800576c:	81a3      	strh	r3, [r4, #12]
 800576e:	4628      	mov	r0, r5
 8005770:	463b      	mov	r3, r7
 8005772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800577a:	f000 b817 	b.w	80057ac <_write_r>

0800577e <__sseek>:
 800577e:	b510      	push	{r4, lr}
 8005780:	460c      	mov	r4, r1
 8005782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005786:	f000 f855 	bl	8005834 <_lseek_r>
 800578a:	1c43      	adds	r3, r0, #1
 800578c:	89a3      	ldrh	r3, [r4, #12]
 800578e:	bf15      	itete	ne
 8005790:	6560      	strne	r0, [r4, #84]	; 0x54
 8005792:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005796:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800579a:	81a3      	strheq	r3, [r4, #12]
 800579c:	bf18      	it	ne
 800579e:	81a3      	strhne	r3, [r4, #12]
 80057a0:	bd10      	pop	{r4, pc}

080057a2 <__sclose>:
 80057a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057a6:	f000 b813 	b.w	80057d0 <_close_r>
	...

080057ac <_write_r>:
 80057ac:	b538      	push	{r3, r4, r5, lr}
 80057ae:	4604      	mov	r4, r0
 80057b0:	4608      	mov	r0, r1
 80057b2:	4611      	mov	r1, r2
 80057b4:	2200      	movs	r2, #0
 80057b6:	4d05      	ldr	r5, [pc, #20]	; (80057cc <_write_r+0x20>)
 80057b8:	602a      	str	r2, [r5, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	f7fb fe1c 	bl	80013f8 <_write>
 80057c0:	1c43      	adds	r3, r0, #1
 80057c2:	d102      	bne.n	80057ca <_write_r+0x1e>
 80057c4:	682b      	ldr	r3, [r5, #0]
 80057c6:	b103      	cbz	r3, 80057ca <_write_r+0x1e>
 80057c8:	6023      	str	r3, [r4, #0]
 80057ca:	bd38      	pop	{r3, r4, r5, pc}
 80057cc:	20000574 	.word	0x20000574

080057d0 <_close_r>:
 80057d0:	b538      	push	{r3, r4, r5, lr}
 80057d2:	2300      	movs	r3, #0
 80057d4:	4d05      	ldr	r5, [pc, #20]	; (80057ec <_close_r+0x1c>)
 80057d6:	4604      	mov	r4, r0
 80057d8:	4608      	mov	r0, r1
 80057da:	602b      	str	r3, [r5, #0]
 80057dc:	f7fb ff57 	bl	800168e <_close>
 80057e0:	1c43      	adds	r3, r0, #1
 80057e2:	d102      	bne.n	80057ea <_close_r+0x1a>
 80057e4:	682b      	ldr	r3, [r5, #0]
 80057e6:	b103      	cbz	r3, 80057ea <_close_r+0x1a>
 80057e8:	6023      	str	r3, [r4, #0]
 80057ea:	bd38      	pop	{r3, r4, r5, pc}
 80057ec:	20000574 	.word	0x20000574

080057f0 <_fstat_r>:
 80057f0:	b538      	push	{r3, r4, r5, lr}
 80057f2:	2300      	movs	r3, #0
 80057f4:	4d06      	ldr	r5, [pc, #24]	; (8005810 <_fstat_r+0x20>)
 80057f6:	4604      	mov	r4, r0
 80057f8:	4608      	mov	r0, r1
 80057fa:	4611      	mov	r1, r2
 80057fc:	602b      	str	r3, [r5, #0]
 80057fe:	f7fb ff51 	bl	80016a4 <_fstat>
 8005802:	1c43      	adds	r3, r0, #1
 8005804:	d102      	bne.n	800580c <_fstat_r+0x1c>
 8005806:	682b      	ldr	r3, [r5, #0]
 8005808:	b103      	cbz	r3, 800580c <_fstat_r+0x1c>
 800580a:	6023      	str	r3, [r4, #0]
 800580c:	bd38      	pop	{r3, r4, r5, pc}
 800580e:	bf00      	nop
 8005810:	20000574 	.word	0x20000574

08005814 <_isatty_r>:
 8005814:	b538      	push	{r3, r4, r5, lr}
 8005816:	2300      	movs	r3, #0
 8005818:	4d05      	ldr	r5, [pc, #20]	; (8005830 <_isatty_r+0x1c>)
 800581a:	4604      	mov	r4, r0
 800581c:	4608      	mov	r0, r1
 800581e:	602b      	str	r3, [r5, #0]
 8005820:	f7fb ff4f 	bl	80016c2 <_isatty>
 8005824:	1c43      	adds	r3, r0, #1
 8005826:	d102      	bne.n	800582e <_isatty_r+0x1a>
 8005828:	682b      	ldr	r3, [r5, #0]
 800582a:	b103      	cbz	r3, 800582e <_isatty_r+0x1a>
 800582c:	6023      	str	r3, [r4, #0]
 800582e:	bd38      	pop	{r3, r4, r5, pc}
 8005830:	20000574 	.word	0x20000574

08005834 <_lseek_r>:
 8005834:	b538      	push	{r3, r4, r5, lr}
 8005836:	4604      	mov	r4, r0
 8005838:	4608      	mov	r0, r1
 800583a:	4611      	mov	r1, r2
 800583c:	2200      	movs	r2, #0
 800583e:	4d05      	ldr	r5, [pc, #20]	; (8005854 <_lseek_r+0x20>)
 8005840:	602a      	str	r2, [r5, #0]
 8005842:	461a      	mov	r2, r3
 8005844:	f7fb ff47 	bl	80016d6 <_lseek>
 8005848:	1c43      	adds	r3, r0, #1
 800584a:	d102      	bne.n	8005852 <_lseek_r+0x1e>
 800584c:	682b      	ldr	r3, [r5, #0]
 800584e:	b103      	cbz	r3, 8005852 <_lseek_r+0x1e>
 8005850:	6023      	str	r3, [r4, #0]
 8005852:	bd38      	pop	{r3, r4, r5, pc}
 8005854:	20000574 	.word	0x20000574

08005858 <memchr>:
 8005858:	4603      	mov	r3, r0
 800585a:	b510      	push	{r4, lr}
 800585c:	b2c9      	uxtb	r1, r1
 800585e:	4402      	add	r2, r0
 8005860:	4293      	cmp	r3, r2
 8005862:	4618      	mov	r0, r3
 8005864:	d101      	bne.n	800586a <memchr+0x12>
 8005866:	2000      	movs	r0, #0
 8005868:	e003      	b.n	8005872 <memchr+0x1a>
 800586a:	7804      	ldrb	r4, [r0, #0]
 800586c:	3301      	adds	r3, #1
 800586e:	428c      	cmp	r4, r1
 8005870:	d1f6      	bne.n	8005860 <memchr+0x8>
 8005872:	bd10      	pop	{r4, pc}

08005874 <_read_r>:
 8005874:	b538      	push	{r3, r4, r5, lr}
 8005876:	4604      	mov	r4, r0
 8005878:	4608      	mov	r0, r1
 800587a:	4611      	mov	r1, r2
 800587c:	2200      	movs	r2, #0
 800587e:	4d05      	ldr	r5, [pc, #20]	; (8005894 <_read_r+0x20>)
 8005880:	602a      	str	r2, [r5, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	f7fb fee6 	bl	8001654 <_read>
 8005888:	1c43      	adds	r3, r0, #1
 800588a:	d102      	bne.n	8005892 <_read_r+0x1e>
 800588c:	682b      	ldr	r3, [r5, #0]
 800588e:	b103      	cbz	r3, 8005892 <_read_r+0x1e>
 8005890:	6023      	str	r3, [r4, #0]
 8005892:	bd38      	pop	{r3, r4, r5, pc}
 8005894:	20000574 	.word	0x20000574

08005898 <powf>:
 8005898:	b570      	push	{r4, r5, r6, lr}
 800589a:	460c      	mov	r4, r1
 800589c:	4606      	mov	r6, r0
 800589e:	f000 f849 	bl	8005934 <__ieee754_powf>
 80058a2:	4621      	mov	r1, r4
 80058a4:	4605      	mov	r5, r0
 80058a6:	4620      	mov	r0, r4
 80058a8:	f7fb fa9a 	bl	8000de0 <__aeabi_fcmpun>
 80058ac:	bb68      	cbnz	r0, 800590a <powf+0x72>
 80058ae:	2100      	movs	r1, #0
 80058b0:	4630      	mov	r0, r6
 80058b2:	f7fb fa63 	bl	8000d7c <__aeabi_fcmpeq>
 80058b6:	b190      	cbz	r0, 80058de <powf+0x46>
 80058b8:	2100      	movs	r1, #0
 80058ba:	4620      	mov	r0, r4
 80058bc:	f7fb fa5e 	bl	8000d7c <__aeabi_fcmpeq>
 80058c0:	2800      	cmp	r0, #0
 80058c2:	d133      	bne.n	800592c <powf+0x94>
 80058c4:	4620      	mov	r0, r4
 80058c6:	f000 fc0e 	bl	80060e6 <finitef>
 80058ca:	b1f0      	cbz	r0, 800590a <powf+0x72>
 80058cc:	2100      	movs	r1, #0
 80058ce:	4620      	mov	r0, r4
 80058d0:	f7fb fa5e 	bl	8000d90 <__aeabi_fcmplt>
 80058d4:	b1c8      	cbz	r0, 800590a <powf+0x72>
 80058d6:	f7fe ff93 	bl	8004800 <__errno>
 80058da:	2322      	movs	r3, #34	; 0x22
 80058dc:	e014      	b.n	8005908 <powf+0x70>
 80058de:	4628      	mov	r0, r5
 80058e0:	f000 fc01 	bl	80060e6 <finitef>
 80058e4:	b998      	cbnz	r0, 800590e <powf+0x76>
 80058e6:	4630      	mov	r0, r6
 80058e8:	f000 fbfd 	bl	80060e6 <finitef>
 80058ec:	b178      	cbz	r0, 800590e <powf+0x76>
 80058ee:	4620      	mov	r0, r4
 80058f0:	f000 fbf9 	bl	80060e6 <finitef>
 80058f4:	b158      	cbz	r0, 800590e <powf+0x76>
 80058f6:	4629      	mov	r1, r5
 80058f8:	4628      	mov	r0, r5
 80058fa:	f7fb fa71 	bl	8000de0 <__aeabi_fcmpun>
 80058fe:	2800      	cmp	r0, #0
 8005900:	d0e9      	beq.n	80058d6 <powf+0x3e>
 8005902:	f7fe ff7d 	bl	8004800 <__errno>
 8005906:	2321      	movs	r3, #33	; 0x21
 8005908:	6003      	str	r3, [r0, #0]
 800590a:	4628      	mov	r0, r5
 800590c:	bd70      	pop	{r4, r5, r6, pc}
 800590e:	2100      	movs	r1, #0
 8005910:	4628      	mov	r0, r5
 8005912:	f7fb fa33 	bl	8000d7c <__aeabi_fcmpeq>
 8005916:	2800      	cmp	r0, #0
 8005918:	d0f7      	beq.n	800590a <powf+0x72>
 800591a:	4630      	mov	r0, r6
 800591c:	f000 fbe3 	bl	80060e6 <finitef>
 8005920:	2800      	cmp	r0, #0
 8005922:	d0f2      	beq.n	800590a <powf+0x72>
 8005924:	4620      	mov	r0, r4
 8005926:	f000 fbde 	bl	80060e6 <finitef>
 800592a:	e7d3      	b.n	80058d4 <powf+0x3c>
 800592c:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 8005930:	e7eb      	b.n	800590a <powf+0x72>
	...

08005934 <__ieee754_powf>:
 8005934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005938:	f031 4a00 	bics.w	sl, r1, #2147483648	; 0x80000000
 800593c:	4681      	mov	r9, r0
 800593e:	460f      	mov	r7, r1
 8005940:	4680      	mov	r8, r0
 8005942:	460c      	mov	r4, r1
 8005944:	b087      	sub	sp, #28
 8005946:	d10d      	bne.n	8005964 <__ieee754_powf+0x30>
 8005948:	f480 0880 	eor.w	r8, r0, #4194304	; 0x400000
 800594c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8005950:	f518 0f00 	cmn.w	r8, #8388608	; 0x800000
 8005954:	f240 8338 	bls.w	8005fc8 <__ieee754_powf+0x694>
 8005958:	4639      	mov	r1, r7
 800595a:	4648      	mov	r0, r9
 800595c:	f7fa ff72 	bl	8000844 <__addsf3>
 8005960:	4601      	mov	r1, r0
 8005962:	e040      	b.n	80059e6 <__ieee754_powf+0xb2>
 8005964:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8005968:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800596c:	dcf4      	bgt.n	8005958 <__ieee754_powf+0x24>
 800596e:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 8005972:	dd08      	ble.n	8005986 <__ieee754_powf+0x52>
 8005974:	f1b0 5f7e 	cmp.w	r0, #1065353216	; 0x3f800000
 8005978:	d1ee      	bne.n	8005958 <__ieee754_powf+0x24>
 800597a:	f481 0480 	eor.w	r4, r1, #4194304	; 0x400000
 800597e:	0064      	lsls	r4, r4, #1
 8005980:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8005984:	e7e6      	b.n	8005954 <__ieee754_powf+0x20>
 8005986:	2800      	cmp	r0, #0
 8005988:	da20      	bge.n	80059cc <__ieee754_powf+0x98>
 800598a:	f1ba 4f97 	cmp.w	sl, #1266679808	; 0x4b800000
 800598e:	da2e      	bge.n	80059ee <__ieee754_powf+0xba>
 8005990:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 8005994:	f2c0 831d 	blt.w	8005fd2 <__ieee754_powf+0x69e>
 8005998:	ea4f 53ea 	mov.w	r3, sl, asr #23
 800599c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80059a0:	fa4a f503 	asr.w	r5, sl, r3
 80059a4:	fa05 f303 	lsl.w	r3, r5, r3
 80059a8:	4553      	cmp	r3, sl
 80059aa:	f040 8312 	bne.w	8005fd2 <__ieee754_powf+0x69e>
 80059ae:	f005 0501 	and.w	r5, r5, #1
 80059b2:	f1c5 0502 	rsb	r5, r5, #2
 80059b6:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 80059ba:	d120      	bne.n	80059fe <__ieee754_powf+0xca>
 80059bc:	2c00      	cmp	r4, #0
 80059be:	4649      	mov	r1, r9
 80059c0:	da11      	bge.n	80059e6 <__ieee754_powf+0xb2>
 80059c2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80059c6:	f7fb f8f9 	bl	8000bbc <__aeabi_fdiv>
 80059ca:	e7c9      	b.n	8005960 <__ieee754_powf+0x2c>
 80059cc:	2500      	movs	r5, #0
 80059ce:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 80059d2:	d1f0      	bne.n	80059b6 <__ieee754_powf+0x82>
 80059d4:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 80059d8:	f000 82f6 	beq.w	8005fc8 <__ieee754_powf+0x694>
 80059dc:	dd09      	ble.n	80059f2 <__ieee754_powf+0xbe>
 80059de:	2c00      	cmp	r4, #0
 80059e0:	f2c0 82f5 	blt.w	8005fce <__ieee754_powf+0x69a>
 80059e4:	4639      	mov	r1, r7
 80059e6:	4608      	mov	r0, r1
 80059e8:	b007      	add	sp, #28
 80059ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ee:	2502      	movs	r5, #2
 80059f0:	e7ed      	b.n	80059ce <__ieee754_powf+0x9a>
 80059f2:	2c00      	cmp	r4, #0
 80059f4:	f280 82eb 	bge.w	8005fce <__ieee754_powf+0x69a>
 80059f8:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 80059fc:	e7f3      	b.n	80059e6 <__ieee754_powf+0xb2>
 80059fe:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8005a02:	d104      	bne.n	8005a0e <__ieee754_powf+0xda>
 8005a04:	4649      	mov	r1, r9
 8005a06:	4648      	mov	r0, r9
 8005a08:	f7fb f824 	bl	8000a54 <__aeabi_fmul>
 8005a0c:	e7a8      	b.n	8005960 <__ieee754_powf+0x2c>
 8005a0e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8005a12:	4648      	mov	r0, r9
 8005a14:	d107      	bne.n	8005a26 <__ieee754_powf+0xf2>
 8005a16:	f1b8 0f00 	cmp.w	r8, #0
 8005a1a:	db04      	blt.n	8005a26 <__ieee754_powf+0xf2>
 8005a1c:	b007      	add	sp, #28
 8005a1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a22:	f000 baef 	b.w	8006004 <__ieee754_sqrtf>
 8005a26:	f000 fb5b 	bl	80060e0 <fabsf>
 8005a2a:	4601      	mov	r1, r0
 8005a2c:	b126      	cbz	r6, 8005a38 <__ieee754_powf+0x104>
 8005a2e:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8005a32:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8005a36:	d118      	bne.n	8005a6a <__ieee754_powf+0x136>
 8005a38:	2c00      	cmp	r4, #0
 8005a3a:	da04      	bge.n	8005a46 <__ieee754_powf+0x112>
 8005a3c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005a40:	f7fb f8bc 	bl	8000bbc <__aeabi_fdiv>
 8005a44:	4601      	mov	r1, r0
 8005a46:	f1b8 0f00 	cmp.w	r8, #0
 8005a4a:	dacc      	bge.n	80059e6 <__ieee754_powf+0xb2>
 8005a4c:	f1a6 567e 	sub.w	r6, r6, #1065353216	; 0x3f800000
 8005a50:	ea56 0305 	orrs.w	r3, r6, r5
 8005a54:	d104      	bne.n	8005a60 <__ieee754_powf+0x12c>
 8005a56:	4608      	mov	r0, r1
 8005a58:	f7fa fef2 	bl	8000840 <__aeabi_fsub>
 8005a5c:	4601      	mov	r1, r0
 8005a5e:	e7b2      	b.n	80059c6 <__ieee754_powf+0x92>
 8005a60:	2d01      	cmp	r5, #1
 8005a62:	d1c0      	bne.n	80059e6 <__ieee754_powf+0xb2>
 8005a64:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 8005a68:	e77a      	b.n	8005960 <__ieee754_powf+0x2c>
 8005a6a:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	9302      	str	r3, [sp, #8]
 8005a72:	432b      	orrs	r3, r5
 8005a74:	d101      	bne.n	8005a7a <__ieee754_powf+0x146>
 8005a76:	4649      	mov	r1, r9
 8005a78:	e7ed      	b.n	8005a56 <__ieee754_powf+0x122>
 8005a7a:	f1ba 4f9a 	cmp.w	sl, #1291845632	; 0x4d000000
 8005a7e:	f340 809f 	ble.w	8005bc0 <__ieee754_powf+0x28c>
 8005a82:	4b48      	ldr	r3, [pc, #288]	; (8005ba4 <__ieee754_powf+0x270>)
 8005a84:	429e      	cmp	r6, r3
 8005a86:	dc07      	bgt.n	8005a98 <__ieee754_powf+0x164>
 8005a88:	2c00      	cmp	r4, #0
 8005a8a:	da0a      	bge.n	8005aa2 <__ieee754_powf+0x16e>
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	b007      	add	sp, #28
 8005a90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a94:	f000 bb20 	b.w	80060d8 <__math_oflowf>
 8005a98:	4b43      	ldr	r3, [pc, #268]	; (8005ba8 <__ieee754_powf+0x274>)
 8005a9a:	429e      	cmp	r6, r3
 8005a9c:	dd07      	ble.n	8005aae <__ieee754_powf+0x17a>
 8005a9e:	2c00      	cmp	r4, #0
 8005aa0:	dcf4      	bgt.n	8005a8c <__ieee754_powf+0x158>
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	b007      	add	sp, #28
 8005aa6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aaa:	f000 bb11 	b.w	80060d0 <__math_uflowf>
 8005aae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005ab2:	f7fa fec5 	bl	8000840 <__aeabi_fsub>
 8005ab6:	493d      	ldr	r1, [pc, #244]	; (8005bac <__ieee754_powf+0x278>)
 8005ab8:	4606      	mov	r6, r0
 8005aba:	f7fa ffcb 	bl	8000a54 <__aeabi_fmul>
 8005abe:	493c      	ldr	r1, [pc, #240]	; (8005bb0 <__ieee754_powf+0x27c>)
 8005ac0:	4680      	mov	r8, r0
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	f7fa ffc6 	bl	8000a54 <__aeabi_fmul>
 8005ac8:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8005acc:	4681      	mov	r9, r0
 8005ace:	4630      	mov	r0, r6
 8005ad0:	f7fa ffc0 	bl	8000a54 <__aeabi_fmul>
 8005ad4:	4601      	mov	r1, r0
 8005ad6:	4837      	ldr	r0, [pc, #220]	; (8005bb4 <__ieee754_powf+0x280>)
 8005ad8:	f7fa feb2 	bl	8000840 <__aeabi_fsub>
 8005adc:	4631      	mov	r1, r6
 8005ade:	f7fa ffb9 	bl	8000a54 <__aeabi_fmul>
 8005ae2:	4601      	mov	r1, r0
 8005ae4:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8005ae8:	f7fa feaa 	bl	8000840 <__aeabi_fsub>
 8005aec:	4631      	mov	r1, r6
 8005aee:	4682      	mov	sl, r0
 8005af0:	4630      	mov	r0, r6
 8005af2:	f7fa ffaf 	bl	8000a54 <__aeabi_fmul>
 8005af6:	4601      	mov	r1, r0
 8005af8:	4650      	mov	r0, sl
 8005afa:	f7fa ffab 	bl	8000a54 <__aeabi_fmul>
 8005afe:	492e      	ldr	r1, [pc, #184]	; (8005bb8 <__ieee754_powf+0x284>)
 8005b00:	f7fa ffa8 	bl	8000a54 <__aeabi_fmul>
 8005b04:	4601      	mov	r1, r0
 8005b06:	4648      	mov	r0, r9
 8005b08:	f7fa fe9a 	bl	8000840 <__aeabi_fsub>
 8005b0c:	4601      	mov	r1, r0
 8005b0e:	4606      	mov	r6, r0
 8005b10:	4640      	mov	r0, r8
 8005b12:	f7fa fe97 	bl	8000844 <__addsf3>
 8005b16:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8005b1a:	f029 090f 	bic.w	r9, r9, #15
 8005b1e:	4641      	mov	r1, r8
 8005b20:	4648      	mov	r0, r9
 8005b22:	f7fa fe8d 	bl	8000840 <__aeabi_fsub>
 8005b26:	4601      	mov	r1, r0
 8005b28:	4630      	mov	r0, r6
 8005b2a:	f7fa fe89 	bl	8000840 <__aeabi_fsub>
 8005b2e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8005b32:	9b02      	ldr	r3, [sp, #8]
 8005b34:	3d01      	subs	r5, #1
 8005b36:	f024 040f 	bic.w	r4, r4, #15
 8005b3a:	432b      	orrs	r3, r5
 8005b3c:	4606      	mov	r6, r0
 8005b3e:	4621      	mov	r1, r4
 8005b40:	4638      	mov	r0, r7
 8005b42:	bf14      	ite	ne
 8005b44:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 8005b48:	4d1c      	ldreq	r5, [pc, #112]	; (8005bbc <__ieee754_powf+0x288>)
 8005b4a:	f7fa fe79 	bl	8000840 <__aeabi_fsub>
 8005b4e:	4649      	mov	r1, r9
 8005b50:	f7fa ff80 	bl	8000a54 <__aeabi_fmul>
 8005b54:	4639      	mov	r1, r7
 8005b56:	4680      	mov	r8, r0
 8005b58:	4630      	mov	r0, r6
 8005b5a:	f7fa ff7b 	bl	8000a54 <__aeabi_fmul>
 8005b5e:	4601      	mov	r1, r0
 8005b60:	4640      	mov	r0, r8
 8005b62:	f7fa fe6f 	bl	8000844 <__addsf3>
 8005b66:	4621      	mov	r1, r4
 8005b68:	4606      	mov	r6, r0
 8005b6a:	4648      	mov	r0, r9
 8005b6c:	f7fa ff72 	bl	8000a54 <__aeabi_fmul>
 8005b70:	4601      	mov	r1, r0
 8005b72:	4607      	mov	r7, r0
 8005b74:	4681      	mov	r9, r0
 8005b76:	4630      	mov	r0, r6
 8005b78:	f7fa fe64 	bl	8000844 <__addsf3>
 8005b7c:	2800      	cmp	r0, #0
 8005b7e:	4682      	mov	sl, r0
 8005b80:	4680      	mov	r8, r0
 8005b82:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8005b86:	f340 8201 	ble.w	8005f8c <__ieee754_powf+0x658>
 8005b8a:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 8005b8e:	f340 814f 	ble.w	8005e30 <__ieee754_powf+0x4fc>
 8005b92:	2100      	movs	r1, #0
 8005b94:	4628      	mov	r0, r5
 8005b96:	f7fb f8fb 	bl	8000d90 <__aeabi_fcmplt>
 8005b9a:	3800      	subs	r0, #0
 8005b9c:	bf18      	it	ne
 8005b9e:	2001      	movne	r0, #1
 8005ba0:	e775      	b.n	8005a8e <__ieee754_powf+0x15a>
 8005ba2:	bf00      	nop
 8005ba4:	3f7ffff3 	.word	0x3f7ffff3
 8005ba8:	3f800007 	.word	0x3f800007
 8005bac:	3fb8aa00 	.word	0x3fb8aa00
 8005bb0:	36eca570 	.word	0x36eca570
 8005bb4:	3eaaaaab 	.word	0x3eaaaaab
 8005bb8:	3fb8aa3b 	.word	0x3fb8aa3b
 8005bbc:	bf800000 	.word	0xbf800000
 8005bc0:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8005bc4:	f040 8111 	bne.w	8005dea <__ieee754_powf+0x4b6>
 8005bc8:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 8005bcc:	f7fa ff42 	bl	8000a54 <__aeabi_fmul>
 8005bd0:	f06f 0217 	mvn.w	r2, #23
 8005bd4:	4606      	mov	r6, r0
 8005bd6:	15f3      	asrs	r3, r6, #23
 8005bd8:	3b7f      	subs	r3, #127	; 0x7f
 8005bda:	4413      	add	r3, r2
 8005bdc:	9301      	str	r3, [sp, #4]
 8005bde:	4b85      	ldr	r3, [pc, #532]	; (8005df4 <__ieee754_powf+0x4c0>)
 8005be0:	f3c6 0016 	ubfx	r0, r6, #0, #23
 8005be4:	4298      	cmp	r0, r3
 8005be6:	f040 567e 	orr.w	r6, r0, #1065353216	; 0x3f800000
 8005bea:	dd08      	ble.n	8005bfe <__ieee754_powf+0x2ca>
 8005bec:	4b82      	ldr	r3, [pc, #520]	; (8005df8 <__ieee754_powf+0x4c4>)
 8005bee:	4298      	cmp	r0, r3
 8005bf0:	f340 80fd 	ble.w	8005dee <__ieee754_powf+0x4ba>
 8005bf4:	9b01      	ldr	r3, [sp, #4]
 8005bf6:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	9301      	str	r3, [sp, #4]
 8005bfe:	2300      	movs	r3, #0
 8005c00:	9300      	str	r3, [sp, #0]
 8005c02:	9900      	ldr	r1, [sp, #0]
 8005c04:	4a7d      	ldr	r2, [pc, #500]	; (8005dfc <__ieee754_powf+0x4c8>)
 8005c06:	4630      	mov	r0, r6
 8005c08:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005c0c:	9603      	str	r6, [sp, #12]
 8005c0e:	4611      	mov	r1, r2
 8005c10:	9205      	str	r2, [sp, #20]
 8005c12:	f7fa fe15 	bl	8000840 <__aeabi_fsub>
 8005c16:	9a05      	ldr	r2, [sp, #20]
 8005c18:	9b03      	ldr	r3, [sp, #12]
 8005c1a:	4683      	mov	fp, r0
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	4610      	mov	r0, r2
 8005c20:	9203      	str	r2, [sp, #12]
 8005c22:	9304      	str	r3, [sp, #16]
 8005c24:	f7fa fe0e 	bl	8000844 <__addsf3>
 8005c28:	4601      	mov	r1, r0
 8005c2a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005c2e:	f7fa ffc5 	bl	8000bbc <__aeabi_fdiv>
 8005c32:	4682      	mov	sl, r0
 8005c34:	4601      	mov	r1, r0
 8005c36:	4658      	mov	r0, fp
 8005c38:	f7fa ff0c 	bl	8000a54 <__aeabi_fmul>
 8005c3c:	1076      	asrs	r6, r6, #1
 8005c3e:	9b00      	ldr	r3, [sp, #0]
 8005c40:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8005c44:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8005c48:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 8005c4c:	f029 090f 	bic.w	r9, r9, #15
 8005c50:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 8005c54:	4680      	mov	r8, r0
 8005c56:	4631      	mov	r1, r6
 8005c58:	4648      	mov	r0, r9
 8005c5a:	f7fa fefb 	bl	8000a54 <__aeabi_fmul>
 8005c5e:	4601      	mov	r1, r0
 8005c60:	4658      	mov	r0, fp
 8005c62:	f7fa fded 	bl	8000840 <__aeabi_fsub>
 8005c66:	9a03      	ldr	r2, [sp, #12]
 8005c68:	4683      	mov	fp, r0
 8005c6a:	4611      	mov	r1, r2
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	f7fa fde7 	bl	8000840 <__aeabi_fsub>
 8005c72:	9b04      	ldr	r3, [sp, #16]
 8005c74:	4601      	mov	r1, r0
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fa fde2 	bl	8000840 <__aeabi_fsub>
 8005c7c:	4649      	mov	r1, r9
 8005c7e:	f7fa fee9 	bl	8000a54 <__aeabi_fmul>
 8005c82:	4601      	mov	r1, r0
 8005c84:	4658      	mov	r0, fp
 8005c86:	f7fa fddb 	bl	8000840 <__aeabi_fsub>
 8005c8a:	4651      	mov	r1, sl
 8005c8c:	f7fa fee2 	bl	8000a54 <__aeabi_fmul>
 8005c90:	4641      	mov	r1, r8
 8005c92:	4682      	mov	sl, r0
 8005c94:	4640      	mov	r0, r8
 8005c96:	f7fa fedd 	bl	8000a54 <__aeabi_fmul>
 8005c9a:	4606      	mov	r6, r0
 8005c9c:	4958      	ldr	r1, [pc, #352]	; (8005e00 <__ieee754_powf+0x4cc>)
 8005c9e:	f7fa fed9 	bl	8000a54 <__aeabi_fmul>
 8005ca2:	4958      	ldr	r1, [pc, #352]	; (8005e04 <__ieee754_powf+0x4d0>)
 8005ca4:	f7fa fdce 	bl	8000844 <__addsf3>
 8005ca8:	4631      	mov	r1, r6
 8005caa:	f7fa fed3 	bl	8000a54 <__aeabi_fmul>
 8005cae:	4956      	ldr	r1, [pc, #344]	; (8005e08 <__ieee754_powf+0x4d4>)
 8005cb0:	f7fa fdc8 	bl	8000844 <__addsf3>
 8005cb4:	4631      	mov	r1, r6
 8005cb6:	f7fa fecd 	bl	8000a54 <__aeabi_fmul>
 8005cba:	4954      	ldr	r1, [pc, #336]	; (8005e0c <__ieee754_powf+0x4d8>)
 8005cbc:	f7fa fdc2 	bl	8000844 <__addsf3>
 8005cc0:	4631      	mov	r1, r6
 8005cc2:	f7fa fec7 	bl	8000a54 <__aeabi_fmul>
 8005cc6:	4952      	ldr	r1, [pc, #328]	; (8005e10 <__ieee754_powf+0x4dc>)
 8005cc8:	f7fa fdbc 	bl	8000844 <__addsf3>
 8005ccc:	4631      	mov	r1, r6
 8005cce:	f7fa fec1 	bl	8000a54 <__aeabi_fmul>
 8005cd2:	4950      	ldr	r1, [pc, #320]	; (8005e14 <__ieee754_powf+0x4e0>)
 8005cd4:	f7fa fdb6 	bl	8000844 <__addsf3>
 8005cd8:	4631      	mov	r1, r6
 8005cda:	4683      	mov	fp, r0
 8005cdc:	4630      	mov	r0, r6
 8005cde:	f7fa feb9 	bl	8000a54 <__aeabi_fmul>
 8005ce2:	4601      	mov	r1, r0
 8005ce4:	4658      	mov	r0, fp
 8005ce6:	f7fa feb5 	bl	8000a54 <__aeabi_fmul>
 8005cea:	4606      	mov	r6, r0
 8005cec:	4649      	mov	r1, r9
 8005cee:	4640      	mov	r0, r8
 8005cf0:	f7fa fda8 	bl	8000844 <__addsf3>
 8005cf4:	4651      	mov	r1, sl
 8005cf6:	f7fa fead 	bl	8000a54 <__aeabi_fmul>
 8005cfa:	4631      	mov	r1, r6
 8005cfc:	f7fa fda2 	bl	8000844 <__addsf3>
 8005d00:	4649      	mov	r1, r9
 8005d02:	4683      	mov	fp, r0
 8005d04:	4648      	mov	r0, r9
 8005d06:	f7fa fea5 	bl	8000a54 <__aeabi_fmul>
 8005d0a:	4943      	ldr	r1, [pc, #268]	; (8005e18 <__ieee754_powf+0x4e4>)
 8005d0c:	9003      	str	r0, [sp, #12]
 8005d0e:	f7fa fd99 	bl	8000844 <__addsf3>
 8005d12:	4659      	mov	r1, fp
 8005d14:	f7fa fd96 	bl	8000844 <__addsf3>
 8005d18:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 8005d1c:	f026 060f 	bic.w	r6, r6, #15
 8005d20:	4631      	mov	r1, r6
 8005d22:	4648      	mov	r0, r9
 8005d24:	f7fa fe96 	bl	8000a54 <__aeabi_fmul>
 8005d28:	493b      	ldr	r1, [pc, #236]	; (8005e18 <__ieee754_powf+0x4e4>)
 8005d2a:	4681      	mov	r9, r0
 8005d2c:	4630      	mov	r0, r6
 8005d2e:	f7fa fd87 	bl	8000840 <__aeabi_fsub>
 8005d32:	9b03      	ldr	r3, [sp, #12]
 8005d34:	4619      	mov	r1, r3
 8005d36:	f7fa fd83 	bl	8000840 <__aeabi_fsub>
 8005d3a:	4601      	mov	r1, r0
 8005d3c:	4658      	mov	r0, fp
 8005d3e:	f7fa fd7f 	bl	8000840 <__aeabi_fsub>
 8005d42:	4641      	mov	r1, r8
 8005d44:	f7fa fe86 	bl	8000a54 <__aeabi_fmul>
 8005d48:	4631      	mov	r1, r6
 8005d4a:	4680      	mov	r8, r0
 8005d4c:	4650      	mov	r0, sl
 8005d4e:	f7fa fe81 	bl	8000a54 <__aeabi_fmul>
 8005d52:	4601      	mov	r1, r0
 8005d54:	4640      	mov	r0, r8
 8005d56:	f7fa fd75 	bl	8000844 <__addsf3>
 8005d5a:	4682      	mov	sl, r0
 8005d5c:	4601      	mov	r1, r0
 8005d5e:	4648      	mov	r0, r9
 8005d60:	f7fa fd70 	bl	8000844 <__addsf3>
 8005d64:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 8005d68:	f026 060f 	bic.w	r6, r6, #15
 8005d6c:	4630      	mov	r0, r6
 8005d6e:	492b      	ldr	r1, [pc, #172]	; (8005e1c <__ieee754_powf+0x4e8>)
 8005d70:	f7fa fe70 	bl	8000a54 <__aeabi_fmul>
 8005d74:	4649      	mov	r1, r9
 8005d76:	4680      	mov	r8, r0
 8005d78:	4630      	mov	r0, r6
 8005d7a:	f7fa fd61 	bl	8000840 <__aeabi_fsub>
 8005d7e:	4601      	mov	r1, r0
 8005d80:	4650      	mov	r0, sl
 8005d82:	f7fa fd5d 	bl	8000840 <__aeabi_fsub>
 8005d86:	4926      	ldr	r1, [pc, #152]	; (8005e20 <__ieee754_powf+0x4ec>)
 8005d88:	f7fa fe64 	bl	8000a54 <__aeabi_fmul>
 8005d8c:	4925      	ldr	r1, [pc, #148]	; (8005e24 <__ieee754_powf+0x4f0>)
 8005d8e:	4681      	mov	r9, r0
 8005d90:	4630      	mov	r0, r6
 8005d92:	f7fa fe5f 	bl	8000a54 <__aeabi_fmul>
 8005d96:	4601      	mov	r1, r0
 8005d98:	4648      	mov	r0, r9
 8005d9a:	f7fa fd53 	bl	8000844 <__addsf3>
 8005d9e:	4b22      	ldr	r3, [pc, #136]	; (8005e28 <__ieee754_powf+0x4f4>)
 8005da0:	9a00      	ldr	r2, [sp, #0]
 8005da2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005da6:	f7fa fd4d 	bl	8000844 <__addsf3>
 8005daa:	4606      	mov	r6, r0
 8005dac:	9801      	ldr	r0, [sp, #4]
 8005dae:	f7fa fdfd 	bl	80009ac <__aeabi_i2f>
 8005db2:	4682      	mov	sl, r0
 8005db4:	4b1d      	ldr	r3, [pc, #116]	; (8005e2c <__ieee754_powf+0x4f8>)
 8005db6:	9a00      	ldr	r2, [sp, #0]
 8005db8:	4631      	mov	r1, r6
 8005dba:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8005dbe:	4640      	mov	r0, r8
 8005dc0:	f7fa fd40 	bl	8000844 <__addsf3>
 8005dc4:	4659      	mov	r1, fp
 8005dc6:	f7fa fd3d 	bl	8000844 <__addsf3>
 8005dca:	4651      	mov	r1, sl
 8005dcc:	f7fa fd3a 	bl	8000844 <__addsf3>
 8005dd0:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8005dd4:	f029 090f 	bic.w	r9, r9, #15
 8005dd8:	4651      	mov	r1, sl
 8005dda:	4648      	mov	r0, r9
 8005ddc:	f7fa fd30 	bl	8000840 <__aeabi_fsub>
 8005de0:	4659      	mov	r1, fp
 8005de2:	f7fa fd2d 	bl	8000840 <__aeabi_fsub>
 8005de6:	4641      	mov	r1, r8
 8005de8:	e69b      	b.n	8005b22 <__ieee754_powf+0x1ee>
 8005dea:	2200      	movs	r2, #0
 8005dec:	e6f3      	b.n	8005bd6 <__ieee754_powf+0x2a2>
 8005dee:	2301      	movs	r3, #1
 8005df0:	e706      	b.n	8005c00 <__ieee754_powf+0x2cc>
 8005df2:	bf00      	nop
 8005df4:	001cc471 	.word	0x001cc471
 8005df8:	005db3d6 	.word	0x005db3d6
 8005dfc:	080067f0 	.word	0x080067f0
 8005e00:	3e53f142 	.word	0x3e53f142
 8005e04:	3e6c3255 	.word	0x3e6c3255
 8005e08:	3e8ba305 	.word	0x3e8ba305
 8005e0c:	3eaaaaab 	.word	0x3eaaaaab
 8005e10:	3edb6db7 	.word	0x3edb6db7
 8005e14:	3f19999a 	.word	0x3f19999a
 8005e18:	40400000 	.word	0x40400000
 8005e1c:	3f763800 	.word	0x3f763800
 8005e20:	3f76384f 	.word	0x3f76384f
 8005e24:	369dc3a0 	.word	0x369dc3a0
 8005e28:	08006800 	.word	0x08006800
 8005e2c:	080067f8 	.word	0x080067f8
 8005e30:	f040 80c2 	bne.w	8005fb8 <__ieee754_powf+0x684>
 8005e34:	4968      	ldr	r1, [pc, #416]	; (8005fd8 <__ieee754_powf+0x6a4>)
 8005e36:	4630      	mov	r0, r6
 8005e38:	f7fa fd04 	bl	8000844 <__addsf3>
 8005e3c:	4639      	mov	r1, r7
 8005e3e:	4681      	mov	r9, r0
 8005e40:	4650      	mov	r0, sl
 8005e42:	f7fa fcfd 	bl	8000840 <__aeabi_fsub>
 8005e46:	4601      	mov	r1, r0
 8005e48:	4648      	mov	r0, r9
 8005e4a:	f7fa ffbf 	bl	8000dcc <__aeabi_fcmpgt>
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	f47f ae9f 	bne.w	8005b92 <__ieee754_powf+0x25e>
 8005e54:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005e58:	15e4      	asrs	r4, r4, #23
 8005e5a:	3c7e      	subs	r4, #126	; 0x7e
 8005e5c:	4123      	asrs	r3, r4
 8005e5e:	4443      	add	r3, r8
 8005e60:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005e64:	495d      	ldr	r1, [pc, #372]	; (8005fdc <__ieee754_powf+0x6a8>)
 8005e66:	3a7f      	subs	r2, #127	; 0x7f
 8005e68:	f3c3 0416 	ubfx	r4, r3, #0, #23
 8005e6c:	4111      	asrs	r1, r2
 8005e6e:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 8005e72:	f1c2 0217 	rsb	r2, r2, #23
 8005e76:	4114      	asrs	r4, r2
 8005e78:	f1b8 0f00 	cmp.w	r8, #0
 8005e7c:	4638      	mov	r0, r7
 8005e7e:	ea23 0101 	bic.w	r1, r3, r1
 8005e82:	bfb8      	it	lt
 8005e84:	4264      	neglt	r4, r4
 8005e86:	f7fa fcdb 	bl	8000840 <__aeabi_fsub>
 8005e8a:	4681      	mov	r9, r0
 8005e8c:	4631      	mov	r1, r6
 8005e8e:	4648      	mov	r0, r9
 8005e90:	f7fa fcd8 	bl	8000844 <__addsf3>
 8005e94:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 8005e98:	f027 070f 	bic.w	r7, r7, #15
 8005e9c:	4638      	mov	r0, r7
 8005e9e:	4950      	ldr	r1, [pc, #320]	; (8005fe0 <__ieee754_powf+0x6ac>)
 8005ea0:	f7fa fdd8 	bl	8000a54 <__aeabi_fmul>
 8005ea4:	4649      	mov	r1, r9
 8005ea6:	4680      	mov	r8, r0
 8005ea8:	4638      	mov	r0, r7
 8005eaa:	f7fa fcc9 	bl	8000840 <__aeabi_fsub>
 8005eae:	4601      	mov	r1, r0
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	f7fa fcc5 	bl	8000840 <__aeabi_fsub>
 8005eb6:	494b      	ldr	r1, [pc, #300]	; (8005fe4 <__ieee754_powf+0x6b0>)
 8005eb8:	f7fa fdcc 	bl	8000a54 <__aeabi_fmul>
 8005ebc:	494a      	ldr	r1, [pc, #296]	; (8005fe8 <__ieee754_powf+0x6b4>)
 8005ebe:	4606      	mov	r6, r0
 8005ec0:	4638      	mov	r0, r7
 8005ec2:	f7fa fdc7 	bl	8000a54 <__aeabi_fmul>
 8005ec6:	4601      	mov	r1, r0
 8005ec8:	4630      	mov	r0, r6
 8005eca:	f7fa fcbb 	bl	8000844 <__addsf3>
 8005ece:	4607      	mov	r7, r0
 8005ed0:	4601      	mov	r1, r0
 8005ed2:	4640      	mov	r0, r8
 8005ed4:	f7fa fcb6 	bl	8000844 <__addsf3>
 8005ed8:	4641      	mov	r1, r8
 8005eda:	4606      	mov	r6, r0
 8005edc:	f7fa fcb0 	bl	8000840 <__aeabi_fsub>
 8005ee0:	4601      	mov	r1, r0
 8005ee2:	4638      	mov	r0, r7
 8005ee4:	f7fa fcac 	bl	8000840 <__aeabi_fsub>
 8005ee8:	4631      	mov	r1, r6
 8005eea:	4680      	mov	r8, r0
 8005eec:	4630      	mov	r0, r6
 8005eee:	f7fa fdb1 	bl	8000a54 <__aeabi_fmul>
 8005ef2:	4607      	mov	r7, r0
 8005ef4:	493d      	ldr	r1, [pc, #244]	; (8005fec <__ieee754_powf+0x6b8>)
 8005ef6:	f7fa fdad 	bl	8000a54 <__aeabi_fmul>
 8005efa:	493d      	ldr	r1, [pc, #244]	; (8005ff0 <__ieee754_powf+0x6bc>)
 8005efc:	f7fa fca0 	bl	8000840 <__aeabi_fsub>
 8005f00:	4639      	mov	r1, r7
 8005f02:	f7fa fda7 	bl	8000a54 <__aeabi_fmul>
 8005f06:	493b      	ldr	r1, [pc, #236]	; (8005ff4 <__ieee754_powf+0x6c0>)
 8005f08:	f7fa fc9c 	bl	8000844 <__addsf3>
 8005f0c:	4639      	mov	r1, r7
 8005f0e:	f7fa fda1 	bl	8000a54 <__aeabi_fmul>
 8005f12:	4939      	ldr	r1, [pc, #228]	; (8005ff8 <__ieee754_powf+0x6c4>)
 8005f14:	f7fa fc94 	bl	8000840 <__aeabi_fsub>
 8005f18:	4639      	mov	r1, r7
 8005f1a:	f7fa fd9b 	bl	8000a54 <__aeabi_fmul>
 8005f1e:	4937      	ldr	r1, [pc, #220]	; (8005ffc <__ieee754_powf+0x6c8>)
 8005f20:	f7fa fc90 	bl	8000844 <__addsf3>
 8005f24:	4639      	mov	r1, r7
 8005f26:	f7fa fd95 	bl	8000a54 <__aeabi_fmul>
 8005f2a:	4601      	mov	r1, r0
 8005f2c:	4630      	mov	r0, r6
 8005f2e:	f7fa fc87 	bl	8000840 <__aeabi_fsub>
 8005f32:	4607      	mov	r7, r0
 8005f34:	4601      	mov	r1, r0
 8005f36:	4630      	mov	r0, r6
 8005f38:	f7fa fd8c 	bl	8000a54 <__aeabi_fmul>
 8005f3c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005f40:	4681      	mov	r9, r0
 8005f42:	4638      	mov	r0, r7
 8005f44:	f7fa fc7c 	bl	8000840 <__aeabi_fsub>
 8005f48:	4601      	mov	r1, r0
 8005f4a:	4648      	mov	r0, r9
 8005f4c:	f7fa fe36 	bl	8000bbc <__aeabi_fdiv>
 8005f50:	4641      	mov	r1, r8
 8005f52:	4607      	mov	r7, r0
 8005f54:	4630      	mov	r0, r6
 8005f56:	f7fa fd7d 	bl	8000a54 <__aeabi_fmul>
 8005f5a:	4641      	mov	r1, r8
 8005f5c:	f7fa fc72 	bl	8000844 <__addsf3>
 8005f60:	4601      	mov	r1, r0
 8005f62:	4638      	mov	r0, r7
 8005f64:	f7fa fc6c 	bl	8000840 <__aeabi_fsub>
 8005f68:	4631      	mov	r1, r6
 8005f6a:	f7fa fc69 	bl	8000840 <__aeabi_fsub>
 8005f6e:	4601      	mov	r1, r0
 8005f70:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005f74:	f7fa fc64 	bl	8000840 <__aeabi_fsub>
 8005f78:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8005f7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f80:	da20      	bge.n	8005fc4 <__ieee754_powf+0x690>
 8005f82:	4621      	mov	r1, r4
 8005f84:	f000 f8b8 	bl	80060f8 <scalbnf>
 8005f88:	4629      	mov	r1, r5
 8005f8a:	e53d      	b.n	8005a08 <__ieee754_powf+0xd4>
 8005f8c:	4b1c      	ldr	r3, [pc, #112]	; (8006000 <__ieee754_powf+0x6cc>)
 8005f8e:	429c      	cmp	r4, r3
 8005f90:	dd07      	ble.n	8005fa2 <__ieee754_powf+0x66e>
 8005f92:	2100      	movs	r1, #0
 8005f94:	4628      	mov	r0, r5
 8005f96:	f7fa fefb 	bl	8000d90 <__aeabi_fcmplt>
 8005f9a:	3800      	subs	r0, #0
 8005f9c:	bf18      	it	ne
 8005f9e:	2001      	movne	r0, #1
 8005fa0:	e580      	b.n	8005aa4 <__ieee754_powf+0x170>
 8005fa2:	d109      	bne.n	8005fb8 <__ieee754_powf+0x684>
 8005fa4:	4639      	mov	r1, r7
 8005fa6:	f7fa fc4b 	bl	8000840 <__aeabi_fsub>
 8005faa:	4631      	mov	r1, r6
 8005fac:	f7fa ff04 	bl	8000db8 <__aeabi_fcmpge>
 8005fb0:	2800      	cmp	r0, #0
 8005fb2:	f43f af4f 	beq.w	8005e54 <__ieee754_powf+0x520>
 8005fb6:	e7ec      	b.n	8005f92 <__ieee754_powf+0x65e>
 8005fb8:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8005fbc:	f73f af4a 	bgt.w	8005e54 <__ieee754_powf+0x520>
 8005fc0:	2400      	movs	r4, #0
 8005fc2:	e763      	b.n	8005e8c <__ieee754_powf+0x558>
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	e7df      	b.n	8005f88 <__ieee754_powf+0x654>
 8005fc8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005fcc:	e50b      	b.n	80059e6 <__ieee754_powf+0xb2>
 8005fce:	2100      	movs	r1, #0
 8005fd0:	e509      	b.n	80059e6 <__ieee754_powf+0xb2>
 8005fd2:	2500      	movs	r5, #0
 8005fd4:	e4ef      	b.n	80059b6 <__ieee754_powf+0x82>
 8005fd6:	bf00      	nop
 8005fd8:	3338aa3c 	.word	0x3338aa3c
 8005fdc:	007fffff 	.word	0x007fffff
 8005fe0:	3f317200 	.word	0x3f317200
 8005fe4:	3f317218 	.word	0x3f317218
 8005fe8:	35bfbe8c 	.word	0x35bfbe8c
 8005fec:	3331bb4c 	.word	0x3331bb4c
 8005ff0:	35ddea0e 	.word	0x35ddea0e
 8005ff4:	388ab355 	.word	0x388ab355
 8005ff8:	3b360b61 	.word	0x3b360b61
 8005ffc:	3e2aaaab 	.word	0x3e2aaaab
 8006000:	43160000 	.word	0x43160000

08006004 <__ieee754_sqrtf>:
 8006004:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8006008:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800600c:	b570      	push	{r4, r5, r6, lr}
 800600e:	4603      	mov	r3, r0
 8006010:	4604      	mov	r4, r0
 8006012:	d309      	bcc.n	8006028 <__ieee754_sqrtf+0x24>
 8006014:	4601      	mov	r1, r0
 8006016:	f7fa fd1d 	bl	8000a54 <__aeabi_fmul>
 800601a:	4601      	mov	r1, r0
 800601c:	4620      	mov	r0, r4
 800601e:	f7fa fc11 	bl	8000844 <__addsf3>
 8006022:	4604      	mov	r4, r0
 8006024:	4620      	mov	r0, r4
 8006026:	bd70      	pop	{r4, r5, r6, pc}
 8006028:	2a00      	cmp	r2, #0
 800602a:	d0fb      	beq.n	8006024 <__ieee754_sqrtf+0x20>
 800602c:	2800      	cmp	r0, #0
 800602e:	da06      	bge.n	800603e <__ieee754_sqrtf+0x3a>
 8006030:	4601      	mov	r1, r0
 8006032:	f7fa fc05 	bl	8000840 <__aeabi_fsub>
 8006036:	4601      	mov	r1, r0
 8006038:	f7fa fdc0 	bl	8000bbc <__aeabi_fdiv>
 800603c:	e7f1      	b.n	8006022 <__ieee754_sqrtf+0x1e>
 800603e:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8006042:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8006046:	d029      	beq.n	800609c <__ieee754_sqrtf+0x98>
 8006048:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800604c:	07cb      	lsls	r3, r1, #31
 800604e:	f04f 0300 	mov.w	r3, #0
 8006052:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8006056:	f04f 0419 	mov.w	r4, #25
 800605a:	461e      	mov	r6, r3
 800605c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8006060:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006064:	bf58      	it	pl
 8006066:	0052      	lslpl	r2, r2, #1
 8006068:	1040      	asrs	r0, r0, #1
 800606a:	0052      	lsls	r2, r2, #1
 800606c:	1875      	adds	r5, r6, r1
 800606e:	4295      	cmp	r5, r2
 8006070:	bfde      	ittt	le
 8006072:	186e      	addle	r6, r5, r1
 8006074:	1b52      	suble	r2, r2, r5
 8006076:	185b      	addle	r3, r3, r1
 8006078:	3c01      	subs	r4, #1
 800607a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800607e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006082:	d1f3      	bne.n	800606c <__ieee754_sqrtf+0x68>
 8006084:	b112      	cbz	r2, 800608c <__ieee754_sqrtf+0x88>
 8006086:	3301      	adds	r3, #1
 8006088:	f023 0301 	bic.w	r3, r3, #1
 800608c:	105c      	asrs	r4, r3, #1
 800608e:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8006092:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8006096:	e7c5      	b.n	8006024 <__ieee754_sqrtf+0x20>
 8006098:	005b      	lsls	r3, r3, #1
 800609a:	3201      	adds	r2, #1
 800609c:	0218      	lsls	r0, r3, #8
 800609e:	d5fb      	bpl.n	8006098 <__ieee754_sqrtf+0x94>
 80060a0:	3a01      	subs	r2, #1
 80060a2:	1a89      	subs	r1, r1, r2
 80060a4:	e7d0      	b.n	8006048 <__ieee754_sqrtf+0x44>

080060a6 <with_errnof>:
 80060a6:	b538      	push	{r3, r4, r5, lr}
 80060a8:	4604      	mov	r4, r0
 80060aa:	460d      	mov	r5, r1
 80060ac:	f7fe fba8 	bl	8004800 <__errno>
 80060b0:	6005      	str	r5, [r0, #0]
 80060b2:	4620      	mov	r0, r4
 80060b4:	bd38      	pop	{r3, r4, r5, pc}

080060b6 <xflowf>:
 80060b6:	b508      	push	{r3, lr}
 80060b8:	b140      	cbz	r0, 80060cc <xflowf+0x16>
 80060ba:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 80060be:	f7fa fcc9 	bl	8000a54 <__aeabi_fmul>
 80060c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80060c6:	2122      	movs	r1, #34	; 0x22
 80060c8:	f7ff bfed 	b.w	80060a6 <with_errnof>
 80060cc:	4608      	mov	r0, r1
 80060ce:	e7f6      	b.n	80060be <xflowf+0x8>

080060d0 <__math_uflowf>:
 80060d0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 80060d4:	f7ff bfef 	b.w	80060b6 <xflowf>

080060d8 <__math_oflowf>:
 80060d8:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 80060dc:	f7ff bfeb 	b.w	80060b6 <xflowf>

080060e0 <fabsf>:
 80060e0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80060e4:	4770      	bx	lr

080060e6 <finitef>:
 80060e6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80060ea:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80060ee:	bfac      	ite	ge
 80060f0:	2000      	movge	r0, #0
 80060f2:	2001      	movlt	r0, #1
 80060f4:	4770      	bx	lr
	...

080060f8 <scalbnf>:
 80060f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80060fc:	b538      	push	{r3, r4, r5, lr}
 80060fe:	4603      	mov	r3, r0
 8006100:	460d      	mov	r5, r1
 8006102:	4604      	mov	r4, r0
 8006104:	d02a      	beq.n	800615c <scalbnf+0x64>
 8006106:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800610a:	d304      	bcc.n	8006116 <scalbnf+0x1e>
 800610c:	4601      	mov	r1, r0
 800610e:	f7fa fb99 	bl	8000844 <__addsf3>
 8006112:	4603      	mov	r3, r0
 8006114:	e022      	b.n	800615c <scalbnf+0x64>
 8006116:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800611a:	d117      	bne.n	800614c <scalbnf+0x54>
 800611c:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8006120:	f7fa fc98 	bl	8000a54 <__aeabi_fmul>
 8006124:	4a17      	ldr	r2, [pc, #92]	; (8006184 <scalbnf+0x8c>)
 8006126:	4603      	mov	r3, r0
 8006128:	4295      	cmp	r5, r2
 800612a:	db0b      	blt.n	8006144 <scalbnf+0x4c>
 800612c:	4604      	mov	r4, r0
 800612e:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8006132:	3a19      	subs	r2, #25
 8006134:	442a      	add	r2, r5
 8006136:	2afe      	cmp	r2, #254	; 0xfe
 8006138:	dd0a      	ble.n	8006150 <scalbnf+0x58>
 800613a:	4913      	ldr	r1, [pc, #76]	; (8006188 <scalbnf+0x90>)
 800613c:	4618      	mov	r0, r3
 800613e:	f361 001e 	bfi	r0, r1, #0, #31
 8006142:	e000      	b.n	8006146 <scalbnf+0x4e>
 8006144:	4911      	ldr	r1, [pc, #68]	; (800618c <scalbnf+0x94>)
 8006146:	f7fa fc85 	bl	8000a54 <__aeabi_fmul>
 800614a:	e7e2      	b.n	8006112 <scalbnf+0x1a>
 800614c:	0dd2      	lsrs	r2, r2, #23
 800614e:	e7f1      	b.n	8006134 <scalbnf+0x3c>
 8006150:	2a00      	cmp	r2, #0
 8006152:	dd05      	ble.n	8006160 <scalbnf+0x68>
 8006154:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 8006158:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 800615c:	4618      	mov	r0, r3
 800615e:	bd38      	pop	{r3, r4, r5, pc}
 8006160:	f112 0f16 	cmn.w	r2, #22
 8006164:	da05      	bge.n	8006172 <scalbnf+0x7a>
 8006166:	f24c 3250 	movw	r2, #50000	; 0xc350
 800616a:	4295      	cmp	r5, r2
 800616c:	dce5      	bgt.n	800613a <scalbnf+0x42>
 800616e:	4907      	ldr	r1, [pc, #28]	; (800618c <scalbnf+0x94>)
 8006170:	e7e4      	b.n	800613c <scalbnf+0x44>
 8006172:	3219      	adds	r2, #25
 8006174:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8006178:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800617c:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8006180:	e7e1      	b.n	8006146 <scalbnf+0x4e>
 8006182:	bf00      	nop
 8006184:	ffff3cb0 	.word	0xffff3cb0
 8006188:	7149f2ca 	.word	0x7149f2ca
 800618c:	0da24260 	.word	0x0da24260

08006190 <_init>:
 8006190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006192:	bf00      	nop
 8006194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006196:	bc08      	pop	{r3}
 8006198:	469e      	mov	lr, r3
 800619a:	4770      	bx	lr

0800619c <_fini>:
 800619c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619e:	bf00      	nop
 80061a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061a2:	bc08      	pop	{r3}
 80061a4:	469e      	mov	lr, r3
 80061a6:	4770      	bx	lr
