
pseudo_parallel_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a4  08003808  08003808  00013808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eac  08003eac  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003eac  08003eac  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003eac  08003eac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eac  08003eac  00013eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eb0  08003eb0  00013eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000070  08003f24  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08003f24  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000062e4  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ff  00000000  00000000  0002637d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  00027d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000760  00000000  00000000  00028588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001802a  00000000  00000000  00028ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ea9  00000000  00000000  00040d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083953  00000000  00000000  00049bbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cd50e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d8  00000000  00000000  000cd560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080037f0 	.word	0x080037f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080037f0 	.word	0x080037f0

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 faa4 	bl	8000b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f809 	bl	8000626 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 f876 	bl	8000704 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000618:	f000 f84a 	bl	80006b0 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  init();
 800061c:	f002 f84c 	bl	80026b8 <init>
  while (1)
  {
	  loop();
 8000620:	f002 f87e 	bl	8002720 <loop>
 8000624:	e7fc      	b.n	8000620 <main+0x18>

08000626 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	b090      	sub	sp, #64	; 0x40
 800062a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062c:	f107 0318 	add.w	r3, r7, #24
 8000630:	2228      	movs	r2, #40	; 0x28
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f002 f8b3 	bl	80027a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000648:	2301      	movs	r3, #1
 800064a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000650:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000656:	2301      	movs	r3, #1
 8000658:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000662:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000664:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000668:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 0318 	add.w	r3, r7, #24
 800066e:	4618      	mov	r0, r3
 8000670:	f000 fd54 	bl	800111c <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800067a:	f000 f8a5 	bl	80007c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2302      	movs	r3, #2
 8000684:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2102      	movs	r1, #2
 8000698:	4618      	mov	r0, r3
 800069a:	f000 ffc1 	bl	8001620 <HAL_RCC_ClockConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006a4:	f000 f890 	bl	80007c8 <Error_Handler>
  }
}
 80006a8:	bf00      	nop
 80006aa:	3740      	adds	r7, #64	; 0x40
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006b6:	4a12      	ldr	r2, [pc, #72]	; (8000700 <MX_USART1_UART_Init+0x50>)
 80006b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006e8:	f001 f932 	bl	8001950 <HAL_HalfDuplex_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006f2:	f000 f869 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	2000008c 	.word	0x2000008c
 8000700:	40013800 	.word	0x40013800

08000704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 0310 	add.w	r3, r7, #16
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000718:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <MX_GPIO_Init+0x90>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a1d      	ldr	r2, [pc, #116]	; (8000794 <MX_GPIO_Init+0x90>)
 800071e:	f043 0310 	orr.w	r3, r3, #16
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <MX_GPIO_Init+0x90>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f003 0310 	and.w	r3, r3, #16
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000730:	4b18      	ldr	r3, [pc, #96]	; (8000794 <MX_GPIO_Init+0x90>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	4a17      	ldr	r2, [pc, #92]	; (8000794 <MX_GPIO_Init+0x90>)
 8000736:	f043 0320 	orr.w	r3, r3, #32
 800073a:	6193      	str	r3, [r2, #24]
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <MX_GPIO_Init+0x90>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f003 0320 	and.w	r3, r3, #32
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_GPIO_Init+0x90>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	4a11      	ldr	r2, [pc, #68]	; (8000794 <MX_GPIO_Init+0x90>)
 800074e:	f043 0304 	orr.w	r3, r3, #4
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_GPIO_Init+0x90>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f003 0304 	and.w	r3, r3, #4
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000766:	480c      	ldr	r0, [pc, #48]	; (8000798 <MX_GPIO_Init+0x94>)
 8000768:	f000 fcc0 	bl	80010ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800076c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000772:	2301      	movs	r3, #1
 8000774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2302      	movs	r3, #2
 800077c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077e:	f107 0310 	add.w	r3, r7, #16
 8000782:	4619      	mov	r1, r3
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_GPIO_Init+0x94>)
 8000786:	f000 fb2d 	bl	8000de4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800078a:	bf00      	nop
 800078c:	3720      	adds	r7, #32
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40021000 	.word	0x40021000
 8000798:	40011000 	.word	0x40011000

0800079c <_write>:

/* USER CODE BEGIN 4 */
int _write(int fd,char*data,int len){
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)data, len, HAL_MAX_DELAY);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	f04f 33ff 	mov.w	r3, #4294967295
 80007b0:	68b9      	ldr	r1, [r7, #8]
 80007b2:	4804      	ldr	r0, [pc, #16]	; (80007c4 <_write+0x28>)
 80007b4:	f001 f921 	bl	80019fa <HAL_UART_Transmit>
	return len;
 80007b8:	687b      	ldr	r3, [r7, #4]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	2000008c 	.word	0x2000008c

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <Error_Handler+0x8>
	...

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <HAL_MspInit+0x40>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	4a0d      	ldr	r2, [pc, #52]	; (8000814 <HAL_MspInit+0x40>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6193      	str	r3, [r2, #24]
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <HAL_MspInit+0x40>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <HAL_MspInit+0x40>)
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	4a07      	ldr	r2, [pc, #28]	; (8000814 <HAL_MspInit+0x40>)
 80007f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fc:	61d3      	str	r3, [r2, #28]
 80007fe:	4b05      	ldr	r3, [pc, #20]	; (8000814 <HAL_MspInit+0x40>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	40021000 	.word	0x40021000

08000818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b088      	sub	sp, #32
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 0310 	add.w	r3, r7, #16
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a16      	ldr	r2, [pc, #88]	; (800088c <HAL_UART_MspInit+0x74>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d124      	bne.n	8000882 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <HAL_UART_MspInit+0x78>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a14      	ldr	r2, [pc, #80]	; (8000890 <HAL_UART_MspInit+0x78>)
 800083e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <HAL_UART_MspInit+0x78>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <HAL_UART_MspInit+0x78>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <HAL_UART_MspInit+0x78>)
 8000856:	f043 0304 	orr.w	r3, r3, #4
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <HAL_UART_MspInit+0x78>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f003 0304 	and.w	r3, r3, #4
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800086c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800086e:	2312      	movs	r3, #18
 8000870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000872:	2303      	movs	r3, #3
 8000874:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 0310 	add.w	r3, r7, #16
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <HAL_UART_MspInit+0x7c>)
 800087e:	f000 fab1 	bl	8000de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000882:	bf00      	nop
 8000884:	3720      	adds	r7, #32
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40013800 	.word	0x40013800
 8000890:	40021000 	.word	0x40021000
 8000894:	40010800 	.word	0x40010800

08000898 <dumpExceptionRegister>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void dumpExceptionRegister(uint32_t *pSP, uint32_t offset) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
	printf(" MSP = %p\n", pSP + offset);
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	4619      	mov	r1, r3
 80008ac:	482a      	ldr	r0, [pc, #168]	; (8000958 <dumpExceptionRegister+0xc0>)
 80008ae:	f002 f85b 	bl	8002968 <iprintf>
	printf("  R0 = 0x%lx\n", pSP[0 + offset]);  // May have argument of function
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	4413      	add	r3, r2
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4619      	mov	r1, r3
 80008be:	4827      	ldr	r0, [pc, #156]	; (800095c <dumpExceptionRegister+0xc4>)
 80008c0:	f002 f852 	bl	8002968 <iprintf>
	printf("  R1 = 0x%lx\n", pSP[1 + offset]);  // May have argument of function
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	3301      	adds	r3, #1
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	4413      	add	r3, r2
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4619      	mov	r1, r3
 80008d2:	4823      	ldr	r0, [pc, #140]	; (8000960 <dumpExceptionRegister+0xc8>)
 80008d4:	f002 f848 	bl	8002968 <iprintf>
	printf("  R2 = 0x%lx\n", pSP[2 + offset]);  // May have argument of function
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	3302      	adds	r3, #2
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	4413      	add	r3, r2
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	481f      	ldr	r0, [pc, #124]	; (8000964 <dumpExceptionRegister+0xcc>)
 80008e8:	f002 f83e 	bl	8002968 <iprintf>
	printf("  R3 = 0x%lx\n", pSP[3 + offset]);  // May have argument of function
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	3303      	adds	r3, #3
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4619      	mov	r1, r3
 80008fa:	481b      	ldr	r0, [pc, #108]	; (8000968 <dumpExceptionRegister+0xd0>)
 80008fc:	f002 f834 	bl	8002968 <iprintf>
	printf(" R12 = 0x%lx\n", pSP[4 + offset]); // IP holds an intermediate value of a calculation
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	3304      	adds	r3, #4
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	4817      	ldr	r0, [pc, #92]	; (800096c <dumpExceptionRegister+0xd4>)
 8000910:	f002 f82a 	bl	8002968 <iprintf>
	printf("  LR = 0x%lx\n", pSP[5 + offset]); // Address of the next instruction before the exception
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	3305      	adds	r3, #5
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4619      	mov	r1, r3
 8000922:	4813      	ldr	r0, [pc, #76]	; (8000970 <dumpExceptionRegister+0xd8>)
 8000924:	f002 f820 	bl	8002968 <iprintf>
	printf("  PC = 0x%lx\n", pSP[6 + offset]); // CPU was executing the instruction at PC
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	3306      	adds	r3, #6
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	4413      	add	r3, r2
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4619      	mov	r1, r3
 8000936:	480f      	ldr	r0, [pc, #60]	; (8000974 <dumpExceptionRegister+0xdc>)
 8000938:	f002 f816 	bl	8002968 <iprintf>
	printf("xPSR = 0x%lx\n", pSP[7 + offset]); // Status of system before execution at PC completes
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	3307      	adds	r3, #7
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4619      	mov	r1, r3
 800094a:	480b      	ldr	r0, [pc, #44]	; (8000978 <dumpExceptionRegister+0xe0>)
 800094c:	f002 f80c 	bl	8002968 <iprintf>
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	08003808 	.word	0x08003808
 800095c:	08003814 	.word	0x08003814
 8000960:	08003824 	.word	0x08003824
 8000964:	08003834 	.word	0x08003834
 8000968:	08003844 	.word	0x08003844
 800096c:	08003854 	.word	0x08003854
 8000970:	08003864 	.word	0x08003864
 8000974:	08003874 	.word	0x08003874
 8000978:	08003884 	.word	0x08003884

0800097c <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000980:	e7fe      	b.n	8000980 <NMI_Handler+0x4>
	...

08000984 <HardFault_Handler>:
/**
 * @brief This function handles Hard fault interrupt.
 */
__attribute__((naked)) void HardFault_Handler(void) {
	/* USER CODE BEGIN HardFault_IRQn 0 */
	printf("Hard fault\n");
 8000984:	4809      	ldr	r0, [pc, #36]	; (80009ac <HardFault_Handler+0x28>)
 8000986:	f002 f875 	bl	8002a74 <puts>

	uint32_t *pSP;
	__asm volatile("TST LR, 4");
 800098a:	f01e 0f04 	tst.w	lr, #4
	__asm volatile("ITE EQ");
 800098e:	bf0c      	ite	eq
	__asm volatile("MRSEQ R0, MSP");
 8000990:	f3ef 8008 	mrseq	r0, MSP
	__asm volatile("MRSNE R0, PSP");
 8000994:	f3ef 8009 	mrsne	r0, PSP
	__asm volatile("MRS R0, MSP");
 8000998:	f3ef 8008 	mrs	r0, MSP
	__asm volatile("MOV %0,R0":"=r"(pSP));
 800099c:	4603      	mov	r3, r0
 800099e:	461c      	mov	r4, r3
	dumpExceptionRegister(pSP, 4);
 80009a0:	2104      	movs	r1, #4
 80009a2:	4620      	mov	r0, r4
 80009a4:	f7ff ff78 	bl	8000898 <dumpExceptionRegister>

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80009a8:	e7fe      	b.n	80009a8 <HardFault_Handler+0x24>
 80009aa:	bf00      	nop
 80009ac:	08003894 	.word	0x08003894

080009b0 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80009b4:	e7fe      	b.n	80009b4 <MemManage_Handler+0x4>

080009b6 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80009ba:	e7fe      	b.n	80009ba <BusFault_Handler+0x4>

080009bc <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80009c0:	e7fe      	b.n	80009c0 <UsageFault_Handler+0x4>

080009c2 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr

080009ce <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr

080009da <PendSV_Handler>:
 */
__attribute__((naked)) void PendSV_Handler(void) {
	/* USER CODE BEGIN PendSV_IRQn 0 */

	/*save LR back to main, must do this firstly*/
	__asm volatile("PUSH {LR}");
 80009da:	b500      	push	{lr}

	task_PendSVHandler();
 80009dc:	f001 fae8 	bl	8001fb0 <task_PendSVHandler>

	/* exit */
	__asm volatile("POP {LR}");
 80009e0:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 80009e4:	4770      	bx	lr
	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80009e6:	bf00      	nop

080009e8 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */
	task_SysTickHandler();
 80009ec:	f001 faca 	bl	8001f84 <task_SysTickHandler>
	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80009f0:	f000 f8f8 	bl	8000be4 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	e00a      	b.n	8000a20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a0a:	f3af 8000 	nop.w
 8000a0e:	4601      	mov	r1, r0
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	1c5a      	adds	r2, r3, #1
 8000a14:	60ba      	str	r2, [r7, #8]
 8000a16:	b2ca      	uxtb	r2, r1
 8000a18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697a      	ldr	r2, [r7, #20]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	dbf0      	blt.n	8000a0a <_read+0x12>
  }

  return len;
 8000a28:	687b      	ldr	r3, [r7, #4]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a58:	605a      	str	r2, [r3, #4]
  return 0;
 8000a5a:	2300      	movs	r3, #0
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr

08000a66 <_isatty>:

int _isatty(int file)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a6e:	2301      	movs	r3, #1
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr

08000a7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	b085      	sub	sp, #20
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	60f8      	str	r0, [r7, #12]
 8000a82:	60b9      	str	r1, [r7, #8]
 8000a84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a86:	2300      	movs	r3, #0
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr
	...

08000a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a9c:	4a14      	ldr	r2, [pc, #80]	; (8000af0 <_sbrk+0x5c>)
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <_sbrk+0x60>)
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa8:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <_sbrk+0x64>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d102      	bne.n	8000ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <_sbrk+0x64>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	; (8000afc <_sbrk+0x68>)
 8000ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <_sbrk+0x64>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d207      	bcs.n	8000ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac4:	f001 fe32 	bl	800272c <__errno>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	220c      	movs	r2, #12
 8000acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad2:	e009      	b.n	8000ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ada:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <_sbrk+0x64>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	4a05      	ldr	r2, [pc, #20]	; (8000af8 <_sbrk+0x64>)
 8000ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20005000 	.word	0x20005000
 8000af4:	00000400 	.word	0x00000400
 8000af8:	200000d0 	.word	0x200000d0
 8000afc:	20000178 	.word	0x20000178

08000b00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr

08000b0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b0c:	480c      	ldr	r0, [pc, #48]	; (8000b40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b0e:	490d      	ldr	r1, [pc, #52]	; (8000b44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b10:	4a0d      	ldr	r2, [pc, #52]	; (8000b48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b24:	4c0a      	ldr	r4, [pc, #40]	; (8000b50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b32:	f7ff ffe5 	bl	8000b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b36:	f001 fdff 	bl	8002738 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b3a:	f7ff fd65 	bl	8000608 <main>
  bx lr
 8000b3e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b48:	08003eb4 	.word	0x08003eb4
  ldr r2, =_sbss
 8000b4c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b50:	20000178 	.word	0x20000178

08000b54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC1_2_IRQHandler>
	...

08000b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_Init+0x28>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <HAL_Init+0x28>)
 8000b62:	f043 0310 	orr.w	r3, r3, #16
 8000b66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b68:	2003      	movs	r0, #3
 8000b6a:	f000 f907 	bl	8000d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f000 f808 	bl	8000b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b74:	f7ff fe2e 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40022000 	.word	0x40022000

08000b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_InitTick+0x54>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_InitTick+0x58>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	4619      	mov	r1, r3
 8000b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f911 	bl	8000dca <HAL_SYSTICK_Config>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e00e      	b.n	8000bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b0f      	cmp	r3, #15
 8000bb6:	d80a      	bhi.n	8000bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	f000 f8e7 	bl	8000d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc4:	4a06      	ldr	r2, [pc, #24]	; (8000be0 <HAL_InitTick+0x5c>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e000      	b.n	8000bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000000 	.word	0x20000000
 8000bdc:	20000008 	.word	0x20000008
 8000be0:	20000004 	.word	0x20000004

08000be4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <HAL_IncTick+0x1c>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <HAL_IncTick+0x20>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4a03      	ldr	r2, [pc, #12]	; (8000c04 <HAL_IncTick+0x20>)
 8000bf6:	6013      	str	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	20000008 	.word	0x20000008
 8000c04:	200000d4 	.word	0x200000d4

08000c08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c0c:	4b02      	ldr	r3, [pc, #8]	; (8000c18 <HAL_GetTick+0x10>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	200000d4 	.word	0x200000d4

08000c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4e:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	60d3      	str	r3, [r2, #12]
}
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <__NVIC_GetPriorityGrouping+0x18>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	0a1b      	lsrs	r3, r3, #8
 8000c6e:	f003 0307 	and.w	r3, r3, #7
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	6039      	str	r1, [r7, #0]
 8000c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db0a      	blt.n	8000caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	490c      	ldr	r1, [pc, #48]	; (8000ccc <__NVIC_SetPriority+0x4c>)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	0112      	lsls	r2, r2, #4
 8000ca0:	b2d2      	uxtb	r2, r2
 8000ca2:	440b      	add	r3, r1
 8000ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca8:	e00a      	b.n	8000cc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	4908      	ldr	r1, [pc, #32]	; (8000cd0 <__NVIC_SetPriority+0x50>)
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	f003 030f 	and.w	r3, r3, #15
 8000cb6:	3b04      	subs	r3, #4
 8000cb8:	0112      	lsls	r2, r2, #4
 8000cba:	b2d2      	uxtb	r2, r2
 8000cbc:	440b      	add	r3, r1
 8000cbe:	761a      	strb	r2, [r3, #24]
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000e100 	.word	0xe000e100
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b089      	sub	sp, #36	; 0x24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	f1c3 0307 	rsb	r3, r3, #7
 8000cee:	2b04      	cmp	r3, #4
 8000cf0:	bf28      	it	cs
 8000cf2:	2304      	movcs	r3, #4
 8000cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	2b06      	cmp	r3, #6
 8000cfc:	d902      	bls.n	8000d04 <NVIC_EncodePriority+0x30>
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3b03      	subs	r3, #3
 8000d02:	e000      	b.n	8000d06 <NVIC_EncodePriority+0x32>
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	f04f 32ff 	mov.w	r2, #4294967295
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43da      	mvns	r2, r3
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	401a      	ands	r2, r3
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	fa01 f303 	lsl.w	r3, r1, r3
 8000d26:	43d9      	mvns	r1, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d2c:	4313      	orrs	r3, r2
         );
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3724      	adds	r7, #36	; 0x24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d48:	d301      	bcc.n	8000d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00f      	b.n	8000d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <SysTick_Config+0x40>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d56:	210f      	movs	r1, #15
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	f7ff ff90 	bl	8000c80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <SysTick_Config+0x40>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d66:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <SysTick_Config+0x40>)
 8000d68:	2207      	movs	r2, #7
 8000d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	e000e010 	.word	0xe000e010

08000d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff ff49 	bl	8000c1c <__NVIC_SetPriorityGrouping>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b086      	sub	sp, #24
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000da4:	f7ff ff5e 	bl	8000c64 <__NVIC_GetPriorityGrouping>
 8000da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	68b9      	ldr	r1, [r7, #8]
 8000dae:	6978      	ldr	r0, [r7, #20]
 8000db0:	f7ff ff90 	bl	8000cd4 <NVIC_EncodePriority>
 8000db4:	4602      	mov	r2, r0
 8000db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff5f 	bl	8000c80 <__NVIC_SetPriority>
}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ffb0 	bl	8000d38 <SysTick_Config>
 8000dd8:	4603      	mov	r3, r0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b08b      	sub	sp, #44	; 0x2c
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000df2:	2300      	movs	r3, #0
 8000df4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df6:	e169      	b.n	80010cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	69fa      	ldr	r2, [r7, #28]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	f040 8158 	bne.w	80010c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	4a9a      	ldr	r2, [pc, #616]	; (8001084 <HAL_GPIO_Init+0x2a0>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d05e      	beq.n	8000ede <HAL_GPIO_Init+0xfa>
 8000e20:	4a98      	ldr	r2, [pc, #608]	; (8001084 <HAL_GPIO_Init+0x2a0>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d875      	bhi.n	8000f12 <HAL_GPIO_Init+0x12e>
 8000e26:	4a98      	ldr	r2, [pc, #608]	; (8001088 <HAL_GPIO_Init+0x2a4>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d058      	beq.n	8000ede <HAL_GPIO_Init+0xfa>
 8000e2c:	4a96      	ldr	r2, [pc, #600]	; (8001088 <HAL_GPIO_Init+0x2a4>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d86f      	bhi.n	8000f12 <HAL_GPIO_Init+0x12e>
 8000e32:	4a96      	ldr	r2, [pc, #600]	; (800108c <HAL_GPIO_Init+0x2a8>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d052      	beq.n	8000ede <HAL_GPIO_Init+0xfa>
 8000e38:	4a94      	ldr	r2, [pc, #592]	; (800108c <HAL_GPIO_Init+0x2a8>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d869      	bhi.n	8000f12 <HAL_GPIO_Init+0x12e>
 8000e3e:	4a94      	ldr	r2, [pc, #592]	; (8001090 <HAL_GPIO_Init+0x2ac>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d04c      	beq.n	8000ede <HAL_GPIO_Init+0xfa>
 8000e44:	4a92      	ldr	r2, [pc, #584]	; (8001090 <HAL_GPIO_Init+0x2ac>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d863      	bhi.n	8000f12 <HAL_GPIO_Init+0x12e>
 8000e4a:	4a92      	ldr	r2, [pc, #584]	; (8001094 <HAL_GPIO_Init+0x2b0>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d046      	beq.n	8000ede <HAL_GPIO_Init+0xfa>
 8000e50:	4a90      	ldr	r2, [pc, #576]	; (8001094 <HAL_GPIO_Init+0x2b0>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d85d      	bhi.n	8000f12 <HAL_GPIO_Init+0x12e>
 8000e56:	2b12      	cmp	r3, #18
 8000e58:	d82a      	bhi.n	8000eb0 <HAL_GPIO_Init+0xcc>
 8000e5a:	2b12      	cmp	r3, #18
 8000e5c:	d859      	bhi.n	8000f12 <HAL_GPIO_Init+0x12e>
 8000e5e:	a201      	add	r2, pc, #4	; (adr r2, 8000e64 <HAL_GPIO_Init+0x80>)
 8000e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e64:	08000edf 	.word	0x08000edf
 8000e68:	08000eb9 	.word	0x08000eb9
 8000e6c:	08000ecb 	.word	0x08000ecb
 8000e70:	08000f0d 	.word	0x08000f0d
 8000e74:	08000f13 	.word	0x08000f13
 8000e78:	08000f13 	.word	0x08000f13
 8000e7c:	08000f13 	.word	0x08000f13
 8000e80:	08000f13 	.word	0x08000f13
 8000e84:	08000f13 	.word	0x08000f13
 8000e88:	08000f13 	.word	0x08000f13
 8000e8c:	08000f13 	.word	0x08000f13
 8000e90:	08000f13 	.word	0x08000f13
 8000e94:	08000f13 	.word	0x08000f13
 8000e98:	08000f13 	.word	0x08000f13
 8000e9c:	08000f13 	.word	0x08000f13
 8000ea0:	08000f13 	.word	0x08000f13
 8000ea4:	08000f13 	.word	0x08000f13
 8000ea8:	08000ec1 	.word	0x08000ec1
 8000eac:	08000ed5 	.word	0x08000ed5
 8000eb0:	4a79      	ldr	r2, [pc, #484]	; (8001098 <HAL_GPIO_Init+0x2b4>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d013      	beq.n	8000ede <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000eb6:	e02c      	b.n	8000f12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	623b      	str	r3, [r7, #32]
          break;
 8000ebe:	e029      	b.n	8000f14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	623b      	str	r3, [r7, #32]
          break;
 8000ec8:	e024      	b.n	8000f14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	3308      	adds	r3, #8
 8000ed0:	623b      	str	r3, [r7, #32]
          break;
 8000ed2:	e01f      	b.n	8000f14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	330c      	adds	r3, #12
 8000eda:	623b      	str	r3, [r7, #32]
          break;
 8000edc:	e01a      	b.n	8000f14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d102      	bne.n	8000eec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ee6:	2304      	movs	r3, #4
 8000ee8:	623b      	str	r3, [r7, #32]
          break;
 8000eea:	e013      	b.n	8000f14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d105      	bne.n	8000f00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ef4:	2308      	movs	r3, #8
 8000ef6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	69fa      	ldr	r2, [r7, #28]
 8000efc:	611a      	str	r2, [r3, #16]
          break;
 8000efe:	e009      	b.n	8000f14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f00:	2308      	movs	r3, #8
 8000f02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	69fa      	ldr	r2, [r7, #28]
 8000f08:	615a      	str	r2, [r3, #20]
          break;
 8000f0a:	e003      	b.n	8000f14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
          break;
 8000f10:	e000      	b.n	8000f14 <HAL_GPIO_Init+0x130>
          break;
 8000f12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	2bff      	cmp	r3, #255	; 0xff
 8000f18:	d801      	bhi.n	8000f1e <HAL_GPIO_Init+0x13a>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	e001      	b.n	8000f22 <HAL_GPIO_Init+0x13e>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	3304      	adds	r3, #4
 8000f22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	2bff      	cmp	r3, #255	; 0xff
 8000f28:	d802      	bhi.n	8000f30 <HAL_GPIO_Init+0x14c>
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	e002      	b.n	8000f36 <HAL_GPIO_Init+0x152>
 8000f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f32:	3b08      	subs	r3, #8
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	210f      	movs	r1, #15
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	401a      	ands	r2, r3
 8000f48:	6a39      	ldr	r1, [r7, #32]
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f50:	431a      	orrs	r2, r3
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f000 80b1 	beq.w	80010c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f64:	4b4d      	ldr	r3, [pc, #308]	; (800109c <HAL_GPIO_Init+0x2b8>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	4a4c      	ldr	r2, [pc, #304]	; (800109c <HAL_GPIO_Init+0x2b8>)
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	6193      	str	r3, [r2, #24]
 8000f70:	4b4a      	ldr	r3, [pc, #296]	; (800109c <HAL_GPIO_Init+0x2b8>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f7c:	4a48      	ldr	r2, [pc, #288]	; (80010a0 <HAL_GPIO_Init+0x2bc>)
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f80:	089b      	lsrs	r3, r3, #2
 8000f82:	3302      	adds	r3, #2
 8000f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	220f      	movs	r2, #15
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a40      	ldr	r2, [pc, #256]	; (80010a4 <HAL_GPIO_Init+0x2c0>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d013      	beq.n	8000fd0 <HAL_GPIO_Init+0x1ec>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a3f      	ldr	r2, [pc, #252]	; (80010a8 <HAL_GPIO_Init+0x2c4>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d00d      	beq.n	8000fcc <HAL_GPIO_Init+0x1e8>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a3e      	ldr	r2, [pc, #248]	; (80010ac <HAL_GPIO_Init+0x2c8>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d007      	beq.n	8000fc8 <HAL_GPIO_Init+0x1e4>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a3d      	ldr	r2, [pc, #244]	; (80010b0 <HAL_GPIO_Init+0x2cc>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d101      	bne.n	8000fc4 <HAL_GPIO_Init+0x1e0>
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e006      	b.n	8000fd2 <HAL_GPIO_Init+0x1ee>
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	e004      	b.n	8000fd2 <HAL_GPIO_Init+0x1ee>
 8000fc8:	2302      	movs	r3, #2
 8000fca:	e002      	b.n	8000fd2 <HAL_GPIO_Init+0x1ee>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e000      	b.n	8000fd2 <HAL_GPIO_Init+0x1ee>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fd4:	f002 0203 	and.w	r2, r2, #3
 8000fd8:	0092      	lsls	r2, r2, #2
 8000fda:	4093      	lsls	r3, r2
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fe2:	492f      	ldr	r1, [pc, #188]	; (80010a0 <HAL_GPIO_Init+0x2bc>)
 8000fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	3302      	adds	r3, #2
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d006      	beq.n	800100a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ffc:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	492c      	ldr	r1, [pc, #176]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	600b      	str	r3, [r1, #0]
 8001008:	e006      	b.n	8001018 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800100a:	4b2a      	ldr	r3, [pc, #168]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	43db      	mvns	r3, r3
 8001012:	4928      	ldr	r1, [pc, #160]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 8001014:	4013      	ands	r3, r2
 8001016:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d006      	beq.n	8001032 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001024:	4b23      	ldr	r3, [pc, #140]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	4922      	ldr	r1, [pc, #136]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	604b      	str	r3, [r1, #4]
 8001030:	e006      	b.n	8001040 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001032:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	43db      	mvns	r3, r3
 800103a:	491e      	ldr	r1, [pc, #120]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 800103c:	4013      	ands	r3, r2
 800103e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d006      	beq.n	800105a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800104c:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	4918      	ldr	r1, [pc, #96]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	608b      	str	r3, [r1, #8]
 8001058:	e006      	b.n	8001068 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 800105c:	689a      	ldr	r2, [r3, #8]
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	43db      	mvns	r3, r3
 8001062:	4914      	ldr	r1, [pc, #80]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 8001064:	4013      	ands	r3, r2
 8001066:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d021      	beq.n	80010b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001074:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 8001076:	68da      	ldr	r2, [r3, #12]
 8001078:	490e      	ldr	r1, [pc, #56]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	60cb      	str	r3, [r1, #12]
 8001080:	e021      	b.n	80010c6 <HAL_GPIO_Init+0x2e2>
 8001082:	bf00      	nop
 8001084:	10320000 	.word	0x10320000
 8001088:	10310000 	.word	0x10310000
 800108c:	10220000 	.word	0x10220000
 8001090:	10210000 	.word	0x10210000
 8001094:	10120000 	.word	0x10120000
 8001098:	10110000 	.word	0x10110000
 800109c:	40021000 	.word	0x40021000
 80010a0:	40010000 	.word	0x40010000
 80010a4:	40010800 	.word	0x40010800
 80010a8:	40010c00 	.word	0x40010c00
 80010ac:	40011000 	.word	0x40011000
 80010b0:	40011400 	.word	0x40011400
 80010b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <HAL_GPIO_Init+0x304>)
 80010ba:	68da      	ldr	r2, [r3, #12]
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	43db      	mvns	r3, r3
 80010c0:	4909      	ldr	r1, [pc, #36]	; (80010e8 <HAL_GPIO_Init+0x304>)
 80010c2:	4013      	ands	r3, r2
 80010c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c8:	3301      	adds	r3, #1
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	fa22 f303 	lsr.w	r3, r2, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f47f ae8e 	bne.w	8000df8 <HAL_GPIO_Init+0x14>
  }
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	372c      	adds	r7, #44	; 0x2c
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	40010400 	.word	0x40010400

080010ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	807b      	strh	r3, [r7, #2]
 80010f8:	4613      	mov	r3, r2
 80010fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010fc:	787b      	ldrb	r3, [r7, #1]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001102:	887a      	ldrh	r2, [r7, #2]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001108:	e003      	b.n	8001112 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800110a:	887b      	ldrh	r3, [r7, #2]
 800110c:	041a      	lsls	r2, r3, #16
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	611a      	str	r2, [r3, #16]
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e272      	b.n	8001614 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 8087 	beq.w	800124a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800113c:	4b92      	ldr	r3, [pc, #584]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 030c 	and.w	r3, r3, #12
 8001144:	2b04      	cmp	r3, #4
 8001146:	d00c      	beq.n	8001162 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001148:	4b8f      	ldr	r3, [pc, #572]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 030c 	and.w	r3, r3, #12
 8001150:	2b08      	cmp	r3, #8
 8001152:	d112      	bne.n	800117a <HAL_RCC_OscConfig+0x5e>
 8001154:	4b8c      	ldr	r3, [pc, #560]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800115c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001160:	d10b      	bne.n	800117a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001162:	4b89      	ldr	r3, [pc, #548]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d06c      	beq.n	8001248 <HAL_RCC_OscConfig+0x12c>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d168      	bne.n	8001248 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e24c      	b.n	8001614 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001182:	d106      	bne.n	8001192 <HAL_RCC_OscConfig+0x76>
 8001184:	4b80      	ldr	r3, [pc, #512]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a7f      	ldr	r2, [pc, #508]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 800118a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	e02e      	b.n	80011f0 <HAL_RCC_OscConfig+0xd4>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10c      	bne.n	80011b4 <HAL_RCC_OscConfig+0x98>
 800119a:	4b7b      	ldr	r3, [pc, #492]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a7a      	ldr	r2, [pc, #488]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	4b78      	ldr	r3, [pc, #480]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a77      	ldr	r2, [pc, #476]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	e01d      	b.n	80011f0 <HAL_RCC_OscConfig+0xd4>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011bc:	d10c      	bne.n	80011d8 <HAL_RCC_OscConfig+0xbc>
 80011be:	4b72      	ldr	r3, [pc, #456]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a71      	ldr	r2, [pc, #452]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	4b6f      	ldr	r3, [pc, #444]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a6e      	ldr	r2, [pc, #440]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	e00b      	b.n	80011f0 <HAL_RCC_OscConfig+0xd4>
 80011d8:	4b6b      	ldr	r3, [pc, #428]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a6a      	ldr	r2, [pc, #424]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	4b68      	ldr	r3, [pc, #416]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a67      	ldr	r2, [pc, #412]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d013      	beq.n	8001220 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f8:	f7ff fd06 	bl	8000c08 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001200:	f7ff fd02 	bl	8000c08 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b64      	cmp	r3, #100	; 0x64
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e200      	b.n	8001614 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001212:	4b5d      	ldr	r3, [pc, #372]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0f0      	beq.n	8001200 <HAL_RCC_OscConfig+0xe4>
 800121e:	e014      	b.n	800124a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001220:	f7ff fcf2 	bl	8000c08 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001228:	f7ff fcee 	bl	8000c08 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b64      	cmp	r3, #100	; 0x64
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e1ec      	b.n	8001614 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800123a:	4b53      	ldr	r3, [pc, #332]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f0      	bne.n	8001228 <HAL_RCC_OscConfig+0x10c>
 8001246:	e000      	b.n	800124a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d063      	beq.n	800131e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001256:	4b4c      	ldr	r3, [pc, #304]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f003 030c 	and.w	r3, r3, #12
 800125e:	2b00      	cmp	r3, #0
 8001260:	d00b      	beq.n	800127a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001262:	4b49      	ldr	r3, [pc, #292]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 030c 	and.w	r3, r3, #12
 800126a:	2b08      	cmp	r3, #8
 800126c:	d11c      	bne.n	80012a8 <HAL_RCC_OscConfig+0x18c>
 800126e:	4b46      	ldr	r3, [pc, #280]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d116      	bne.n	80012a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800127a:	4b43      	ldr	r3, [pc, #268]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d005      	beq.n	8001292 <HAL_RCC_OscConfig+0x176>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d001      	beq.n	8001292 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e1c0      	b.n	8001614 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001292:	4b3d      	ldr	r3, [pc, #244]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	4939      	ldr	r1, [pc, #228]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a6:	e03a      	b.n	800131e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d020      	beq.n	80012f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012b0:	4b36      	ldr	r3, [pc, #216]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b6:	f7ff fca7 	bl	8000c08 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012be:	f7ff fca3 	bl	8000c08 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e1a1      	b.n	8001614 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d0:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0f0      	beq.n	80012be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012dc:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	4927      	ldr	r1, [pc, #156]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	600b      	str	r3, [r1, #0]
 80012f0:	e015      	b.n	800131e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012f2:	4b26      	ldr	r3, [pc, #152]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f8:	f7ff fc86 	bl	8000c08 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001300:	f7ff fc82 	bl	8000c08 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e180      	b.n	8001614 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001312:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f0      	bne.n	8001300 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	2b00      	cmp	r3, #0
 8001328:	d03a      	beq.n	80013a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d019      	beq.n	8001366 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <HAL_RCC_OscConfig+0x274>)
 8001334:	2201      	movs	r2, #1
 8001336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001338:	f7ff fc66 	bl	8000c08 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001340:	f7ff fc62 	bl	8000c08 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e160      	b.n	8001614 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001352:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f0      	beq.n	8001340 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800135e:	2001      	movs	r0, #1
 8001360:	f000 fad8 	bl	8001914 <RCC_Delay>
 8001364:	e01c      	b.n	80013a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <HAL_RCC_OscConfig+0x274>)
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136c:	f7ff fc4c 	bl	8000c08 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001372:	e00f      	b.n	8001394 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001374:	f7ff fc48 	bl	8000c08 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d908      	bls.n	8001394 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e146      	b.n	8001614 <HAL_RCC_OscConfig+0x4f8>
 8001386:	bf00      	nop
 8001388:	40021000 	.word	0x40021000
 800138c:	42420000 	.word	0x42420000
 8001390:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001394:	4b92      	ldr	r3, [pc, #584]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 8001396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1e9      	bne.n	8001374 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f000 80a6 	beq.w	80014fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ae:	2300      	movs	r3, #0
 80013b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013b2:	4b8b      	ldr	r3, [pc, #556]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10d      	bne.n	80013da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	4b88      	ldr	r3, [pc, #544]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	4a87      	ldr	r2, [pc, #540]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 80013c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c8:	61d3      	str	r3, [r2, #28]
 80013ca:	4b85      	ldr	r3, [pc, #532]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013d6:	2301      	movs	r3, #1
 80013d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013da:	4b82      	ldr	r3, [pc, #520]	; (80015e4 <HAL_RCC_OscConfig+0x4c8>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d118      	bne.n	8001418 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013e6:	4b7f      	ldr	r3, [pc, #508]	; (80015e4 <HAL_RCC_OscConfig+0x4c8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a7e      	ldr	r2, [pc, #504]	; (80015e4 <HAL_RCC_OscConfig+0x4c8>)
 80013ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013f2:	f7ff fc09 	bl	8000c08 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013fa:	f7ff fc05 	bl	8000c08 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b64      	cmp	r3, #100	; 0x64
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e103      	b.n	8001614 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140c:	4b75      	ldr	r3, [pc, #468]	; (80015e4 <HAL_RCC_OscConfig+0x4c8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0f0      	beq.n	80013fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d106      	bne.n	800142e <HAL_RCC_OscConfig+0x312>
 8001420:	4b6f      	ldr	r3, [pc, #444]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	4a6e      	ldr	r2, [pc, #440]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	6213      	str	r3, [r2, #32]
 800142c:	e02d      	b.n	800148a <HAL_RCC_OscConfig+0x36e>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d10c      	bne.n	8001450 <HAL_RCC_OscConfig+0x334>
 8001436:	4b6a      	ldr	r3, [pc, #424]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	4a69      	ldr	r2, [pc, #420]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 800143c:	f023 0301 	bic.w	r3, r3, #1
 8001440:	6213      	str	r3, [r2, #32]
 8001442:	4b67      	ldr	r3, [pc, #412]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	4a66      	ldr	r2, [pc, #408]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 8001448:	f023 0304 	bic.w	r3, r3, #4
 800144c:	6213      	str	r3, [r2, #32]
 800144e:	e01c      	b.n	800148a <HAL_RCC_OscConfig+0x36e>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	2b05      	cmp	r3, #5
 8001456:	d10c      	bne.n	8001472 <HAL_RCC_OscConfig+0x356>
 8001458:	4b61      	ldr	r3, [pc, #388]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	4a60      	ldr	r2, [pc, #384]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 800145e:	f043 0304 	orr.w	r3, r3, #4
 8001462:	6213      	str	r3, [r2, #32]
 8001464:	4b5e      	ldr	r3, [pc, #376]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	4a5d      	ldr	r2, [pc, #372]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	6213      	str	r3, [r2, #32]
 8001470:	e00b      	b.n	800148a <HAL_RCC_OscConfig+0x36e>
 8001472:	4b5b      	ldr	r3, [pc, #364]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 8001474:	6a1b      	ldr	r3, [r3, #32]
 8001476:	4a5a      	ldr	r2, [pc, #360]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 8001478:	f023 0301 	bic.w	r3, r3, #1
 800147c:	6213      	str	r3, [r2, #32]
 800147e:	4b58      	ldr	r3, [pc, #352]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	4a57      	ldr	r2, [pc, #348]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 8001484:	f023 0304 	bic.w	r3, r3, #4
 8001488:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d015      	beq.n	80014be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001492:	f7ff fbb9 	bl	8000c08 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001498:	e00a      	b.n	80014b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800149a:	f7ff fbb5 	bl	8000c08 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e0b1      	b.n	8001614 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b0:	4b4b      	ldr	r3, [pc, #300]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0ee      	beq.n	800149a <HAL_RCC_OscConfig+0x37e>
 80014bc:	e014      	b.n	80014e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014be:	f7ff fba3 	bl	8000c08 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c4:	e00a      	b.n	80014dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014c6:	f7ff fb9f 	bl	8000c08 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e09b      	b.n	8001614 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014dc:	4b40      	ldr	r3, [pc, #256]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1ee      	bne.n	80014c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014e8:	7dfb      	ldrb	r3, [r7, #23]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d105      	bne.n	80014fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ee:	4b3c      	ldr	r3, [pc, #240]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	4a3b      	ldr	r2, [pc, #236]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 80014f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 8087 	beq.w	8001612 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001504:	4b36      	ldr	r3, [pc, #216]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 030c 	and.w	r3, r3, #12
 800150c:	2b08      	cmp	r3, #8
 800150e:	d061      	beq.n	80015d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d146      	bne.n	80015a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001518:	4b33      	ldr	r3, [pc, #204]	; (80015e8 <HAL_RCC_OscConfig+0x4cc>)
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151e:	f7ff fb73 	bl	8000c08 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001526:	f7ff fb6f 	bl	8000c08 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e06d      	b.n	8001614 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001538:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1f0      	bne.n	8001526 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800154c:	d108      	bne.n	8001560 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800154e:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	4921      	ldr	r1, [pc, #132]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 800155c:	4313      	orrs	r3, r2
 800155e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001560:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a19      	ldr	r1, [r3, #32]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001570:	430b      	orrs	r3, r1
 8001572:	491b      	ldr	r1, [pc, #108]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 8001574:	4313      	orrs	r3, r2
 8001576:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <HAL_RCC_OscConfig+0x4cc>)
 800157a:	2201      	movs	r2, #1
 800157c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157e:	f7ff fb43 	bl	8000c08 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001586:	f7ff fb3f 	bl	8000c08 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e03d      	b.n	8001614 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f0      	beq.n	8001586 <HAL_RCC_OscConfig+0x46a>
 80015a4:	e035      	b.n	8001612 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <HAL_RCC_OscConfig+0x4cc>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff fb2c 	bl	8000c08 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b4:	f7ff fb28 	bl	8000c08 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e026      	b.n	8001614 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_RCC_OscConfig+0x4c4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x498>
 80015d2:	e01e      	b.n	8001612 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69db      	ldr	r3, [r3, #28]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d107      	bne.n	80015ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e019      	b.n	8001614 <HAL_RCC_OscConfig+0x4f8>
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40007000 	.word	0x40007000
 80015e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <HAL_RCC_OscConfig+0x500>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d106      	bne.n	800160e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800160a:	429a      	cmp	r2, r3
 800160c:	d001      	beq.n	8001612 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40021000 	.word	0x40021000

08001620 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d101      	bne.n	8001634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e0d0      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001634:	4b6a      	ldr	r3, [pc, #424]	; (80017e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d910      	bls.n	8001664 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001642:	4b67      	ldr	r3, [pc, #412]	; (80017e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f023 0207 	bic.w	r2, r3, #7
 800164a:	4965      	ldr	r1, [pc, #404]	; (80017e0 <HAL_RCC_ClockConfig+0x1c0>)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	4313      	orrs	r3, r2
 8001650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001652:	4b63      	ldr	r3, [pc, #396]	; (80017e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d001      	beq.n	8001664 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e0b8      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d020      	beq.n	80016b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800167c:	4b59      	ldr	r3, [pc, #356]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	4a58      	ldr	r2, [pc, #352]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001682:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001686:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001694:	4b53      	ldr	r3, [pc, #332]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	4a52      	ldr	r2, [pc, #328]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 800169a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800169e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a0:	4b50      	ldr	r3, [pc, #320]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	494d      	ldr	r1, [pc, #308]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d040      	beq.n	8001740 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d107      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c6:	4b47      	ldr	r3, [pc, #284]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d115      	bne.n	80016fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e07f      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d107      	bne.n	80016ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016de:	4b41      	ldr	r3, [pc, #260]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d109      	bne.n	80016fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e073      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ee:	4b3d      	ldr	r3, [pc, #244]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e06b      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016fe:	4b39      	ldr	r3, [pc, #228]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f023 0203 	bic.w	r2, r3, #3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	4936      	ldr	r1, [pc, #216]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 800170c:	4313      	orrs	r3, r2
 800170e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001710:	f7ff fa7a 	bl	8000c08 <HAL_GetTick>
 8001714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001716:	e00a      	b.n	800172e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001718:	f7ff fa76 	bl	8000c08 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	f241 3288 	movw	r2, #5000	; 0x1388
 8001726:	4293      	cmp	r3, r2
 8001728:	d901      	bls.n	800172e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e053      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172e:	4b2d      	ldr	r3, [pc, #180]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f003 020c 	and.w	r2, r3, #12
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	429a      	cmp	r2, r3
 800173e:	d1eb      	bne.n	8001718 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001740:	4b27      	ldr	r3, [pc, #156]	; (80017e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d210      	bcs.n	8001770 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174e:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f023 0207 	bic.w	r2, r3, #7
 8001756:	4922      	ldr	r1, [pc, #136]	; (80017e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	4313      	orrs	r3, r2
 800175c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800175e:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d001      	beq.n	8001770 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e032      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d008      	beq.n	800178e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800177c:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	4916      	ldr	r1, [pc, #88]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 800178a:	4313      	orrs	r3, r2
 800178c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	2b00      	cmp	r3, #0
 8001798:	d009      	beq.n	80017ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800179a:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	490e      	ldr	r1, [pc, #56]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017ae:	f000 f821 	bl	80017f4 <HAL_RCC_GetSysClockFreq>
 80017b2:	4602      	mov	r2, r0
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	091b      	lsrs	r3, r3, #4
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	490a      	ldr	r1, [pc, #40]	; (80017e8 <HAL_RCC_ClockConfig+0x1c8>)
 80017c0:	5ccb      	ldrb	r3, [r1, r3]
 80017c2:	fa22 f303 	lsr.w	r3, r2, r3
 80017c6:	4a09      	ldr	r2, [pc, #36]	; (80017ec <HAL_RCC_ClockConfig+0x1cc>)
 80017c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_RCC_ClockConfig+0x1d0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff f9d8 	bl	8000b84 <HAL_InitTick>

  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40022000 	.word	0x40022000
 80017e4:	40021000 	.word	0x40021000
 80017e8:	08003dc8 	.word	0x08003dc8
 80017ec:	20000000 	.word	0x20000000
 80017f0:	20000004 	.word	0x20000004

080017f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017f4:	b490      	push	{r4, r7}
 80017f6:	b08a      	sub	sp, #40	; 0x28
 80017f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017fa:	4b29      	ldr	r3, [pc, #164]	; (80018a0 <HAL_RCC_GetSysClockFreq+0xac>)
 80017fc:	1d3c      	adds	r4, r7, #4
 80017fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001800:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001804:	f240 2301 	movw	r3, #513	; 0x201
 8001808:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
 8001812:	2300      	movs	r3, #0
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800181a:	2300      	movs	r3, #0
 800181c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800181e:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	2b04      	cmp	r3, #4
 800182c:	d002      	beq.n	8001834 <HAL_RCC_GetSysClockFreq+0x40>
 800182e:	2b08      	cmp	r3, #8
 8001830:	d003      	beq.n	800183a <HAL_RCC_GetSysClockFreq+0x46>
 8001832:	e02b      	b.n	800188c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001834:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001836:	623b      	str	r3, [r7, #32]
      break;
 8001838:	e02b      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	0c9b      	lsrs	r3, r3, #18
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	3328      	adds	r3, #40	; 0x28
 8001844:	443b      	add	r3, r7
 8001846:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800184a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d012      	beq.n	800187c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	0c5b      	lsrs	r3, r3, #17
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	3328      	adds	r3, #40	; 0x28
 8001862:	443b      	add	r3, r7
 8001864:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001868:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	4a0e      	ldr	r2, [pc, #56]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800186e:	fb03 f202 	mul.w	r2, r3, r2
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	fbb2 f3f3 	udiv	r3, r2, r3
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
 800187a:	e004      	b.n	8001886 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	4a0b      	ldr	r2, [pc, #44]	; (80018ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001880:	fb02 f303 	mul.w	r3, r2, r3
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	623b      	str	r3, [r7, #32]
      break;
 800188a:	e002      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800188e:	623b      	str	r3, [r7, #32]
      break;
 8001890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001892:	6a3b      	ldr	r3, [r7, #32]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3728      	adds	r7, #40	; 0x28
 8001898:	46bd      	mov	sp, r7
 800189a:	bc90      	pop	{r4, r7}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	080038a0 	.word	0x080038a0
 80018a4:	40021000 	.word	0x40021000
 80018a8:	007a1200 	.word	0x007a1200
 80018ac:	003d0900 	.word	0x003d0900

080018b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018b4:	4b02      	ldr	r3, [pc, #8]	; (80018c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	20000000 	.word	0x20000000

080018c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018c8:	f7ff fff2 	bl	80018b0 <HAL_RCC_GetHCLKFreq>
 80018cc:	4602      	mov	r2, r0
 80018ce:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	0a1b      	lsrs	r3, r3, #8
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	4903      	ldr	r1, [pc, #12]	; (80018e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018da:	5ccb      	ldrb	r3, [r1, r3]
 80018dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40021000 	.word	0x40021000
 80018e8:	08003dd8 	.word	0x08003dd8

080018ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018f0:	f7ff ffde 	bl	80018b0 <HAL_RCC_GetHCLKFreq>
 80018f4:	4602      	mov	r2, r0
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <HAL_RCC_GetPCLK2Freq+0x20>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	0adb      	lsrs	r3, r3, #11
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	4903      	ldr	r1, [pc, #12]	; (8001910 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001902:	5ccb      	ldrb	r3, [r1, r3]
 8001904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001908:	4618      	mov	r0, r3
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40021000 	.word	0x40021000
 8001910:	08003dd8 	.word	0x08003dd8

08001914 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <RCC_Delay+0x34>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a0a      	ldr	r2, [pc, #40]	; (800194c <RCC_Delay+0x38>)
 8001922:	fba2 2303 	umull	r2, r3, r2, r3
 8001926:	0a5b      	lsrs	r3, r3, #9
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	fb02 f303 	mul.w	r3, r2, r3
 800192e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001930:	bf00      	nop
  }
  while (Delay --);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	1e5a      	subs	r2, r3, #1
 8001936:	60fa      	str	r2, [r7, #12]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1f9      	bne.n	8001930 <RCC_Delay+0x1c>
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	20000000 	.word	0x20000000
 800194c:	10624dd3 	.word	0x10624dd3

08001950 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e047      	b.n	80019f2 <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d106      	bne.n	800197c <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7fe ff4e 	bl	8000818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2224      	movs	r2, #36	; 0x24
 8001980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68da      	ldr	r2, [r3, #12]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001992:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 f90d 	bl	8001bb4 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	691a      	ldr	r2, [r3, #16]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	695a      	ldr	r2, [r3, #20]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80019b8:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	695a      	ldr	r2, [r3, #20]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f042 0208 	orr.w	r2, r2, #8
 80019c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68da      	ldr	r2, [r3, #12]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2220      	movs	r2, #32
 80019e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2220      	movs	r2, #32
 80019ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b08a      	sub	sp, #40	; 0x28
 80019fe:	af02      	add	r7, sp, #8
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	603b      	str	r3, [r7, #0]
 8001a06:	4613      	mov	r3, r2
 8001a08:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b20      	cmp	r3, #32
 8001a18:	d17c      	bne.n	8001b14 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <HAL_UART_Transmit+0x2c>
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e075      	b.n	8001b16 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d101      	bne.n	8001a38 <HAL_UART_Transmit+0x3e>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e06e      	b.n	8001b16 <HAL_UART_Transmit+0x11c>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2221      	movs	r2, #33	; 0x21
 8001a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a4e:	f7ff f8db 	bl	8000c08 <HAL_GetTick>
 8001a52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	88fa      	ldrh	r2, [r7, #6]
 8001a58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	88fa      	ldrh	r2, [r7, #6]
 8001a5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a68:	d108      	bne.n	8001a7c <HAL_UART_Transmit+0x82>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d104      	bne.n	8001a7c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	61bb      	str	r3, [r7, #24]
 8001a7a:	e003      	b.n	8001a84 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001a8c:	e02a      	b.n	8001ae4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	2200      	movs	r2, #0
 8001a96:	2180      	movs	r1, #128	; 0x80
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f000 f840 	bl	8001b1e <UART_WaitOnFlagUntilTimeout>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e036      	b.n	8001b16 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10b      	bne.n	8001ac6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001abc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	61bb      	str	r3, [r7, #24]
 8001ac4:	e007      	b.n	8001ad6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	781a      	ldrb	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1cf      	bne.n	8001a8e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	2200      	movs	r2, #0
 8001af6:	2140      	movs	r1, #64	; 0x40
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f000 f810 	bl	8001b1e <UART_WaitOnFlagUntilTimeout>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e006      	b.n	8001b16 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	e000      	b.n	8001b16 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001b14:	2302      	movs	r3, #2
  }
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b084      	sub	sp, #16
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	60f8      	str	r0, [r7, #12]
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	603b      	str	r3, [r7, #0]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b2e:	e02c      	b.n	8001b8a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b36:	d028      	beq.n	8001b8a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d007      	beq.n	8001b4e <UART_WaitOnFlagUntilTimeout+0x30>
 8001b3e:	f7ff f863 	bl	8000c08 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d21d      	bcs.n	8001b8a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68da      	ldr	r2, [r3, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001b5c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695a      	ldr	r2, [r3, #20]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0201 	bic.w	r2, r2, #1
 8001b6c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2220      	movs	r2, #32
 8001b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2220      	movs	r2, #32
 8001b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e00f      	b.n	8001baa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	4013      	ands	r3, r2
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	bf0c      	ite	eq
 8001b9a:	2301      	moveq	r3, #1
 8001b9c:	2300      	movne	r3, #0
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d0c3      	beq.n	8001b30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001bee:	f023 030c 	bic.w	r3, r3, #12
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6812      	ldr	r2, [r2, #0]
 8001bf6:	68b9      	ldr	r1, [r7, #8]
 8001bf8:	430b      	orrs	r3, r1
 8001bfa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	699a      	ldr	r2, [r3, #24]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a2c      	ldr	r2, [pc, #176]	; (8001cc8 <UART_SetConfig+0x114>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d103      	bne.n	8001c24 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001c1c:	f7ff fe66 	bl	80018ec <HAL_RCC_GetPCLK2Freq>
 8001c20:	60f8      	str	r0, [r7, #12]
 8001c22:	e002      	b.n	8001c2a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001c24:	f7ff fe4e 	bl	80018c4 <HAL_RCC_GetPCLK1Freq>
 8001c28:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	009a      	lsls	r2, r3, #2
 8001c34:	441a      	add	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c40:	4a22      	ldr	r2, [pc, #136]	; (8001ccc <UART_SetConfig+0x118>)
 8001c42:	fba2 2303 	umull	r2, r3, r2, r3
 8001c46:	095b      	lsrs	r3, r3, #5
 8001c48:	0119      	lsls	r1, r3, #4
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	009a      	lsls	r2, r3, #2
 8001c54:	441a      	add	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c60:	4b1a      	ldr	r3, [pc, #104]	; (8001ccc <UART_SetConfig+0x118>)
 8001c62:	fba3 0302 	umull	r0, r3, r3, r2
 8001c66:	095b      	lsrs	r3, r3, #5
 8001c68:	2064      	movs	r0, #100	; 0x64
 8001c6a:	fb00 f303 	mul.w	r3, r0, r3
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	011b      	lsls	r3, r3, #4
 8001c72:	3332      	adds	r3, #50	; 0x32
 8001c74:	4a15      	ldr	r2, [pc, #84]	; (8001ccc <UART_SetConfig+0x118>)
 8001c76:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c80:	4419      	add	r1, r3
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	009a      	lsls	r2, r3, #2
 8001c8c:	441a      	add	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c98:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <UART_SetConfig+0x118>)
 8001c9a:	fba3 0302 	umull	r0, r3, r3, r2
 8001c9e:	095b      	lsrs	r3, r3, #5
 8001ca0:	2064      	movs	r0, #100	; 0x64
 8001ca2:	fb00 f303 	mul.w	r3, r0, r3
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	011b      	lsls	r3, r3, #4
 8001caa:	3332      	adds	r3, #50	; 0x32
 8001cac:	4a07      	ldr	r2, [pc, #28]	; (8001ccc <UART_SetConfig+0x118>)
 8001cae:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb2:	095b      	lsrs	r3, r3, #5
 8001cb4:	f003 020f 	and.w	r2, r3, #15
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	440a      	add	r2, r1
 8001cbe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001cc0:	bf00      	nop
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40013800 	.word	0x40013800
 8001ccc:	51eb851f 	.word	0x51eb851f

08001cd0 <_isPSP>:




/********************LOCAL FUNCTIONS***************************/
static int _isPSP(){
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
	int control_reg;
	__asm volatile("MRS %0, CONTROL": "=r"(control_reg));
 8001cd6:	f3ef 8314 	mrs	r3, CONTROL
 8001cda:	607b      	str	r3, [r7, #4]
	/**
	 * If control register 2nd bit is set then PSP
	 * Else not PSP
	 */
	return control_reg & (1<2);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f003 0301 	and.w	r3, r3, #1
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <_console>:

static void _console(ConsoleState state,const char* func_name, const char* msg,...){
 8001cec:	b40c      	push	{r2, r3}
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	6039      	str	r1, [r7, #0]
 8001cf8:	71fb      	strb	r3, [r7, #7]
	int8_t priority;
	if(_isPSP()){
 8001cfa:	f7ff ffe9 	bl	8001cd0 <_isPSP>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d007      	beq.n	8001d14 <_console+0x28>
		priority = current_task->priority;
 8001d04:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <_console+0x98>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	7b5b      	ldrb	r3, [r3, #13]
 8001d0a:	73fb      	strb	r3, [r7, #15]
		current_task->priority = -1;
 8001d0c:	4b1d      	ldr	r3, [pc, #116]	; (8001d84 <_console+0x98>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	22ff      	movs	r2, #255	; 0xff
 8001d12:	735a      	strb	r2, [r3, #13]
	}

	//TODO make naked and show all registers
	if(state==TASK_CONSOLE_ERROR){
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d104      	bne.n	8001d24 <_console+0x38>
		printf("TASK|%s> ERROR :",func_name);
 8001d1a:	6839      	ldr	r1, [r7, #0]
 8001d1c:	481a      	ldr	r0, [pc, #104]	; (8001d88 <_console+0x9c>)
 8001d1e:	f000 fe23 	bl	8002968 <iprintf>
 8001d22:	e013      	b.n	8001d4c <_console+0x60>
	}else if(state==TASK_CONSOLE_INFO){
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d104      	bne.n	8001d34 <_console+0x48>
		printf("TASK|%s> INFO : ",func_name);
 8001d2a:	6839      	ldr	r1, [r7, #0]
 8001d2c:	4817      	ldr	r0, [pc, #92]	; (8001d8c <_console+0xa0>)
 8001d2e:	f000 fe1b 	bl	8002968 <iprintf>
 8001d32:	e00b      	b.n	8001d4c <_console+0x60>
	}else if(state == TASK_CONSOLE_WARNING){
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d104      	bne.n	8001d44 <_console+0x58>
		printf("TASK|%s> WARNING : ",func_name);
 8001d3a:	6839      	ldr	r1, [r7, #0]
 8001d3c:	4814      	ldr	r0, [pc, #80]	; (8001d90 <_console+0xa4>)
 8001d3e:	f000 fe13 	bl	8002968 <iprintf>
 8001d42:	e003      	b.n	8001d4c <_console+0x60>
	}else{
		printf("TASK|%s: ",func_name);
 8001d44:	6839      	ldr	r1, [r7, #0]
 8001d46:	4813      	ldr	r0, [pc, #76]	; (8001d94 <_console+0xa8>)
 8001d48:	f000 fe0e 	bl	8002968 <iprintf>
	}
	va_list args;
	va_start(args, msg);
 8001d4c:	f107 031c 	add.w	r3, r7, #28
 8001d50:	60bb      	str	r3, [r7, #8]
	vprintf(msg, args);
 8001d52:	68b9      	ldr	r1, [r7, #8]
 8001d54:	69b8      	ldr	r0, [r7, #24]
 8001d56:	f000 fea5 	bl	8002aa4 <viprintf>
    va_end(args);

    if(_isPSP() && (priority!=-1))
 8001d5a:	f7ff ffb9 	bl	8001cd0 <_isPSP>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <_console+0x8a>
 8001d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d6c:	d003      	beq.n	8001d76 <_console+0x8a>
    	current_task->priority = 0;
 8001d6e:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <_console+0x98>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2200      	movs	r2, #0
 8001d74:	735a      	strb	r2, [r3, #13]
}
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d80:	b002      	add	sp, #8
 8001d82:	4770      	bx	lr
 8001d84:	20000148 	.word	0x20000148
 8001d88:	080038b0 	.word	0x080038b0
 8001d8c:	080038c4 	.word	0x080038c4
 8001d90:	080038d8 	.word	0x080038d8
 8001d94:	080038ec 	.word	0x080038ec

08001d98 <_task_getCurrentPSP>:

uint32_t _task_getCurrentPSP(){
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
	return current_task->psp;
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <_task_getCurrentPSP+0x14>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	20000148 	.word	0x20000148

08001db0 <_task_saveCurrentPSP>:

void _task_saveCurrentPSP(uint32_t psp) {
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	current_task->psp = psp;
 8001db8:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <_task_saveCurrentPSP+0x1c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000148 	.word	0x20000148

08001dd0 <_task_restartCurrentTask>:

void _task_restartCurrentTask(){
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
	/* Calculate PSP */
	uint32_t *psp = (uint32_t*)current_task->stack_start;
 8001dd6:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <_task_restartCurrentTask+0x64>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	607b      	str	r3, [r7, #4]

	/* fill dummy stack frame */
	*(--psp) = 0x01000000u; 					// Dummy xPSR, just enable Thumb State bit;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3b04      	subs	r3, #4
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dea:	601a      	str	r2, [r3, #0]
	*(--psp) = (uint32_t) current_task->handler;// PC
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <_task_restartCurrentTask+0x64>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3b04      	subs	r3, #4
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	601a      	str	r2, [r3, #0]
	*(--psp) = 0xFFFFFFFDu; 					// LR with EXC_RETURN to return to Thread using PSP
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3b04      	subs	r3, #4
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f06f 0202 	mvn.w	r2, #2
 8001e08:	601a      	str	r2, [r3, #0]
	psp-=(16-3);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3b34      	subs	r3, #52	; 0x34
 8001e0e:	607b      	str	r3, [r7, #4]

	/* Add task */
	current_task->state = TASK_RUNNING;
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <_task_restartCurrentTask+0x64>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2200      	movs	r2, #0
 8001e16:	731a      	strb	r2, [r3, #12]
	current_task->wait_tick = 0;
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <_task_restartCurrentTask+0x64>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	611a      	str	r2, [r3, #16]
	current_task->psp = (uint32_t)psp;
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <_task_restartCurrentTask+0x64>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	609a      	str	r2, [r3, #8]
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20000148 	.word	0x20000148

08001e38 <_task_deleteCurrentTask>:

void _task_deleteCurrentTask(){
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
	current_task->psp = 0;
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <_task_deleteCurrentTask+0x3c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
	current_task->id = 0;
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <_task_deleteCurrentTask+0x3c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
	current_task->handler = 0;
 8001e4c:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <_task_deleteCurrentTask+0x3c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2200      	movs	r2, #0
 8001e52:	605a      	str	r2, [r3, #4]
	current_task->state = TASK_BLOCKED;
 8001e54:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <_task_deleteCurrentTask+0x3c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2202      	movs	r2, #2
 8001e5a:	731a      	strb	r2, [r3, #12]
	free(current_task->stack);
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <_task_deleteCurrentTask+0x3c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 fc94 	bl	8002790 <free>
	current_task->stack = NULL;
 8001e68:	4b02      	ldr	r3, [pc, #8]	; (8001e74 <_task_deleteCurrentTask+0x3c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	61da      	str	r2, [r3, #28]
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000148 	.word	0x20000148

08001e78 <_task_selectNextTask>:

void _task_selectNextTask(){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
	/* Task is set to highest priority */
	if(current_task->priority==-1)// same task should run
 8001e7e:	4b2b      	ldr	r3, [pc, #172]	; (8001f2c <_task_selectNextTask+0xb4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f993 300d 	ldrsb.w	r3, [r3, #13]
 8001e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8a:	d04a      	beq.n	8001f22 <_task_selectNextTask+0xaa>
		return;

	int i = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	607b      	str	r3, [r7, #4]
	for(;i<TASK_MAX_NUMBER;i++){
 8001e90:	e03b      	b.n	8001f0a <_task_selectNextTask+0x92>
		current_task = current_task->next_task;
 8001e92:	4b26      	ldr	r3, [pc, #152]	; (8001f2c <_task_selectNextTask+0xb4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	4a24      	ldr	r2, [pc, #144]	; (8001f2c <_task_selectNextTask+0xb4>)
 8001e9a:	6013      	str	r3, [r2, #0]
		if(current_task->id==0xFFFFFFFF)// Idle task
 8001e9c:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <_task_selectNextTask+0xb4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea6:	d026      	beq.n	8001ef6 <_task_selectNextTask+0x7e>
			continue;

		if(current_task->psp==0)		//Empty task
 8001ea8:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <_task_selectNextTask+0xb4>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d023      	beq.n	8001efa <_task_selectNextTask+0x82>
			continue;

		/*check ticks */
		if(current_task->wait_tick>global_ticks)
 8001eb2:	4b1e      	ldr	r3, [pc, #120]	; (8001f2c <_task_selectNextTask+0xb4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	691a      	ldr	r2, [r3, #16]
 8001eb8:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <_task_selectNextTask+0xb8>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d81e      	bhi.n	8001efe <_task_selectNextTask+0x86>
			continue;

		if(current_task->state==TASK_RESTART)
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <_task_selectNextTask+0xb4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	7b1b      	ldrb	r3, [r3, #12]
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d102      	bne.n	8001ed0 <_task_selectNextTask+0x58>
			_task_restartCurrentTask();
 8001eca:	f7ff ff81 	bl	8001dd0 <_task_restartCurrentTask>
 8001ece:	e019      	b.n	8001f04 <_task_selectNextTask+0x8c>
		else if(current_task->state==TASK_DELETE){
 8001ed0:	4b16      	ldr	r3, [pc, #88]	; (8001f2c <_task_selectNextTask+0xb4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	7b1b      	ldrb	r3, [r3, #12]
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d102      	bne.n	8001ee0 <_task_selectNextTask+0x68>
			_task_deleteCurrentTask();
 8001eda:	f7ff ffad 	bl	8001e38 <_task_deleteCurrentTask>
			continue;
 8001ede:	e011      	b.n	8001f04 <_task_selectNextTask+0x8c>
		}else if(current_task->state==TASK_BLOCKED)
 8001ee0:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <_task_selectNextTask+0xb4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	7b1b      	ldrb	r3, [r3, #12]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d00b      	beq.n	8001f02 <_task_selectNextTask+0x8a>
			continue;
		else if(current_task->state == TASK_RUNNING)
 8001eea:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <_task_selectNextTask+0xb4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	7b1b      	ldrb	r3, [r3, #12]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00e      	beq.n	8001f12 <_task_selectNextTask+0x9a>
 8001ef4:	e006      	b.n	8001f04 <_task_selectNextTask+0x8c>
			continue;
 8001ef6:	bf00      	nop
 8001ef8:	e004      	b.n	8001f04 <_task_selectNextTask+0x8c>
			continue;
 8001efa:	bf00      	nop
 8001efc:	e002      	b.n	8001f04 <_task_selectNextTask+0x8c>
			continue;
 8001efe:	bf00      	nop
 8001f00:	e000      	b.n	8001f04 <_task_selectNextTask+0x8c>
			continue;
 8001f02:	bf00      	nop
	for(;i<TASK_MAX_NUMBER;i++){
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3301      	adds	r3, #1
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	ddc0      	ble.n	8001e92 <_task_selectNextTask+0x1a>
 8001f10:	e000      	b.n	8001f14 <_task_selectNextTask+0x9c>
			break;
 8001f12:	bf00      	nop
	}

	if(i>=TASK_MAX_NUMBER)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	dd04      	ble.n	8001f24 <_task_selectNextTask+0xac>
		current_task = &task[0];// NO task is running then run idle task
 8001f1a:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <_task_selectNextTask+0xb4>)
 8001f1c:	4a05      	ldr	r2, [pc, #20]	; (8001f34 <_task_selectNextTask+0xbc>)
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	e000      	b.n	8001f24 <_task_selectNextTask+0xac>
		return;
 8001f22:	bf00      	nop
}
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000148 	.word	0x20000148
 8001f30:	2000014c 	.word	0x2000014c
 8001f34:	200000dc 	.word	0x200000dc

08001f38 <_task_switchTask>:

__attribute__((naked)) void _task_switchTask() {
	__asm volatile(
 8001f38:	b500      	push	{lr}
 8001f3a:	f3ef 8009 	mrs	r0, PSP
 8001f3e:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001f42:	f7ff ff35 	bl	8001db0 <_task_saveCurrentPSP>
 8001f46:	f7ff ff97 	bl	8001e78 <_task_selectNextTask>
 8001f4a:	f7ff ff25 	bl	8001d98 <_task_getCurrentPSP>
 8001f4e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001f52:	f380 8809 	msr	PSP, r0
 8001f56:	f85d eb04 	ldr.w	lr, [sp], #4
 8001f5a:	4770      	bx	lr

			/* exit */
			"POP {LR}\n\t"
			"BX LR\n\t"
	);
}
 8001f5c:	bf00      	nop
	...

08001f60 <_task_privilegeReschedule>:

void _task_privilegeReschedule(){
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
	/* Enable pendSV exception */
	*(uint32_t*) 0xE000ED04 |= (0x1 << 28);
 8001f64:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <_task_privilegeReschedule+0x18>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a03      	ldr	r2, [pc, #12]	; (8001f78 <_task_privilegeReschedule+0x18>)
 8001f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	6013      	str	r3, [r2, #0]
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr
 8001f78:	e000ed04 	.word	0xe000ed04

08001f7c <_task_idle_main>:
void _task_unprivilegeReschedule(){
	/* call Supervisor exception to get Privileged access */
	__asm volatile("SVC #255");
}

void _task_idle_main(void) {
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
	while(1) {
		__asm volatile("NOP");
 8001f80:	bf00      	nop
 8001f82:	e7fd      	b.n	8001f80 <_task_idle_main+0x4>

08001f84 <task_SysTickHandler>:
	}
}

/*********************HANDLER**********************************/
void task_SysTickHandler(){
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
	if(!scheduler_started)
 8001f88:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <task_SysTickHandler+0x24>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d009      	beq.n	8001fa4 <task_SysTickHandler+0x20>
		return;
	global_ticks++;
 8001f90:	4b06      	ldr	r3, [pc, #24]	; (8001fac <task_SysTickHandler+0x28>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	3301      	adds	r3, #1
 8001f96:	4a05      	ldr	r2, [pc, #20]	; (8001fac <task_SysTickHandler+0x28>)
 8001f98:	6013      	str	r3, [r2, #0]

	if(global_ticks%1!=0)
 8001f9a:	4b04      	ldr	r3, [pc, #16]	; (8001fac <task_SysTickHandler+0x28>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
		return;
	_task_privilegeReschedule();
 8001f9e:	f7ff ffdf 	bl	8001f60 <_task_privilegeReschedule>
 8001fa2:	e000      	b.n	8001fa6 <task_SysTickHandler+0x22>
		return;
 8001fa4:	bf00      	nop
}
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000150 	.word	0x20000150
 8001fac:	2000014c 	.word	0x2000014c

08001fb0 <task_PendSVHandler>:

__attribute__((naked)) void task_PendSVHandler(void){
	/*save LR back to main, must do this firstly*/
	__asm volatile("PUSH {LR}");
 8001fb0:	b500      	push	{lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fb2:	f3ef 8310 	mrs	r3, PRIMASK
 8001fb6:	461c      	mov	r4, r3
  return(result);
 8001fb8:	4623      	mov	r3, r4

	uint32_t interrupt_enabled = !__get_PRIMASK();
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	bf0c      	ite	eq
 8001fbe:	2301      	moveq	r3, #1
 8001fc0:	2300      	movne	r3, #0
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc6:	b672      	cpsid	i
}
 8001fc8:	bf00      	nop
	__disable_irq();

	_task_switchTask();
 8001fca:	f7ff ffb5 	bl	8001f38 <_task_switchTask>

	if(interrupt_enabled)
 8001fce:	2c00      	cmp	r4, #0
 8001fd0:	d001      	beq.n	8001fd6 <task_PendSVHandler+0x26>
  __ASM volatile ("cpsie i" : : : "memory");
 8001fd2:	b662      	cpsie	i
}
 8001fd4:	bf00      	nop
		__enable_irq();

	/* exit */
	__asm volatile("POP {LR}");
 8001fd6:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 8001fda:	4770      	bx	lr
}
 8001fdc:	bf00      	nop
	...

08001fe0 <task_init>:
 * This sets the total stack size and main stack pointer
 * @param msp 				: Main stack pointer
 * @param total_stack_size	: Total stack size
 * @param main_stack_size	: Size of main stack
 */
void task_init() {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8001fea:	607b      	str	r3, [r7, #4]
  return(result);
 8001fec:	687b      	ldr	r3, [r7, #4]
	uint32_t interrupt_enabled = !__get_PRIMASK();
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	bf0c      	ite	eq
 8001ff2:	2301      	moveq	r3, #1
 8001ff4:	2300      	movne	r3, #0
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ffa:	b672      	cpsid	i
}
 8001ffc:	bf00      	nop
	__disable_irq();


	for(int i=0;i<TASK_MAX_NUMBER;i++){
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	e03a      	b.n	800207a <task_init+0x9a>
		task[i].psp = 0;
 8002004:	492c      	ldr	r1, [pc, #176]	; (80020b8 <task_init+0xd8>)
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4613      	mov	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4413      	add	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	3308      	adds	r3, #8
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
		task[i].stack = NULL;// Stack is not allocated
 8002018:	4927      	ldr	r1, [pc, #156]	; (80020b8 <task_init+0xd8>)
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4613      	mov	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4413      	add	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	331c      	adds	r3, #28
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
		task[i].next_task = &task[(i+1)%TASK_MAX_NUMBER];
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1c59      	adds	r1, r3, #1
 8002030:	4b22      	ldr	r3, [pc, #136]	; (80020bc <task_init+0xdc>)
 8002032:	fb83 3201 	smull	r3, r2, r3, r1
 8002036:	17cb      	asrs	r3, r1, #31
 8002038:	1ad2      	subs	r2, r2, r3
 800203a:	4613      	mov	r3, r2
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	4413      	add	r3, r2
 8002040:	1aca      	subs	r2, r1, r3
 8002042:	4613      	mov	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4413      	add	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4a1b      	ldr	r2, [pc, #108]	; (80020b8 <task_init+0xd8>)
 800204c:	1899      	adds	r1, r3, r2
 800204e:	481a      	ldr	r0, [pc, #104]	; (80020b8 <task_init+0xd8>)
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4613      	mov	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4403      	add	r3, r0
 800205c:	3320      	adds	r3, #32
 800205e:	6019      	str	r1, [r3, #0]
		task[i].priority = 0;
 8002060:	4915      	ldr	r1, [pc, #84]	; (80020b8 <task_init+0xd8>)
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4613      	mov	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4413      	add	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	330d      	adds	r3, #13
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<TASK_MAX_NUMBER;i++){
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	3301      	adds	r3, #1
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2b02      	cmp	r3, #2
 800207e:	ddc1      	ble.n	8002004 <task_init+0x24>
	}
	current_task = &task[0];
 8002080:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <task_init+0xe0>)
 8002082:	4a0d      	ldr	r2, [pc, #52]	; (80020b8 <task_init+0xd8>)
 8002084:	601a      	str	r2, [r3, #0]

	stack_tracker = 0;
 8002086:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <task_init+0xe4>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
	global_ticks = 0;
 800208c:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <task_init+0xe8>)
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
	scheduler_started = 0;
 8002092:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <task_init+0xec>)
 8002094:	2200      	movs	r2, #0
 8002096:	701a      	strb	r2, [r3, #0]


	if(interrupt_enabled)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <task_init+0xc2>
  __ASM volatile ("cpsie i" : : : "memory");
 800209e:	b662      	cpsie	i
}
 80020a0:	bf00      	nop
		__enable_irq();

	/* Add idle task which run when there is no any task to run*/
	task_add(0xFFFFFFFF, _task_idle_main, 100);
 80020a2:	2264      	movs	r2, #100	; 0x64
 80020a4:	490a      	ldr	r1, [pc, #40]	; (80020d0 <task_init+0xf0>)
 80020a6:	f04f 30ff 	mov.w	r0, #4294967295
 80020aa:	f000 f813 	bl	80020d4 <task_add>
}
 80020ae:	bf00      	nop
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	200000dc 	.word	0x200000dc
 80020bc:	55555556 	.word	0x55555556
 80020c0:	20000148 	.word	0x20000148
 80020c4:	200000d8 	.word	0x200000d8
 80020c8:	2000014c 	.word	0x2000014c
 80020cc:	20000150 	.word	0x20000150
 80020d0:	08001f7d 	.word	0x08001f7d

080020d4 <task_add>:
 * @param handler		: Main function
 * @param stack_size	: Size provided for it
 * @return				: 1 => Successfully task added
 *						: 0 => Failed to add task
 */
int task_add(uint32_t id,void (*handler)(void),uint32_t stack_size){
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08e      	sub	sp, #56	; 0x38
 80020d8:	af02      	add	r7, sp, #8
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020e0:	f3ef 8310 	mrs	r3, PRIMASK
 80020e4:	617b      	str	r3, [r7, #20]
  return(result);
 80020e6:	697b      	ldr	r3, [r7, #20]
	uint32_t interrupt_enabled = !__get_PRIMASK();
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bf0c      	ite	eq
 80020ec:	2301      	moveq	r3, #1
 80020ee:	2300      	movne	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80020f4:	b672      	cpsid	i
}
 80020f6:	bf00      	nop
		__disable_irq();


	int8_t priority;
	if(_isPSP()){
 80020f8:	f7ff fdea 	bl	8001cd0 <_isPSP>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d008      	beq.n	8002114 <task_add+0x40>
		priority = current_task->priority;
 8002102:	4ba3      	ldr	r3, [pc, #652]	; (8002390 <task_add+0x2bc>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	7b5b      	ldrb	r3, [r3, #13]
 8002108:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		current_task->priority = -1;
 800210c:	4ba0      	ldr	r3, [pc, #640]	; (8002390 <task_add+0x2bc>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	22ff      	movs	r2, #255	; 0xff
 8002112:	735a      	strb	r2, [r3, #13]
	}

	/*Search for empty slot index*/
	int idx = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	62bb      	str	r3, [r7, #40]	; 0x28
	for(;idx<TASK_MAX_NUMBER;idx++)
 8002118:	e00d      	b.n	8002136 <task_add+0x62>
		if(task[idx].psp==0)
 800211a:	499e      	ldr	r1, [pc, #632]	; (8002394 <task_add+0x2c0>)
 800211c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	3308      	adds	r3, #8
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d006      	beq.n	800213e <task_add+0x6a>
	for(;idx<TASK_MAX_NUMBER;idx++)
 8002130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002132:	3301      	adds	r3, #1
 8002134:	62bb      	str	r3, [r7, #40]	; 0x28
 8002136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002138:	2b02      	cmp	r3, #2
 800213a:	ddee      	ble.n	800211a <task_add+0x46>
 800213c:	e000      	b.n	8002140 <task_add+0x6c>
			break;
 800213e:	bf00      	nop

	for(int i = 0;i<TASK_MAX_NUMBER;i++){
 8002140:	2300      	movs	r3, #0
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
 8002144:	e02c      	b.n	80021a0 <task_add+0xcc>
		/* ID already exist */
		if(task[i].psp!=0 && task[i].id == id){
 8002146:	4993      	ldr	r1, [pc, #588]	; (8002394 <task_add+0x2c0>)
 8002148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800214a:	4613      	mov	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4413      	add	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	3308      	adds	r3, #8
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d01e      	beq.n	800219a <task_add+0xc6>
 800215c:	498d      	ldr	r1, [pc, #564]	; (8002394 <task_add+0x2c0>)
 800215e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002160:	4613      	mov	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4413      	add	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	429a      	cmp	r2, r3
 8002170:	d113      	bne.n	800219a <task_add+0xc6>
			_console(TASK_CONSOLE_ERROR,__func__, "Handler %p addition failed. ID %d is already associated with handler %p.\n",handler,id,task[i].handler);
 8002172:	4988      	ldr	r1, [pc, #544]	; (8002394 <task_add+0x2c0>)
 8002174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002176:	4613      	mov	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	4413      	add	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	3304      	adds	r3, #4
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	9301      	str	r3, [sp, #4]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	4a82      	ldr	r2, [pc, #520]	; (8002398 <task_add+0x2c4>)
 800218e:	4983      	ldr	r1, [pc, #524]	; (800239c <task_add+0x2c8>)
 8002190:	2000      	movs	r0, #0
 8002192:	f7ff fdab 	bl	8001cec <_console>
			return 0;
 8002196:	2300      	movs	r3, #0
 8002198:	e0f6      	b.n	8002388 <task_add+0x2b4>
	for(int i = 0;i<TASK_MAX_NUMBER;i++){
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	3301      	adds	r3, #1
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	ddcf      	ble.n	8002146 <task_add+0x72>
		}
	}

	for(int i = 0;i<TASK_MAX_NUMBER;i++){
 80021a6:	2300      	movs	r3, #0
 80021a8:	623b      	str	r3, [r7, #32]
 80021aa:	e02a      	b.n	8002202 <task_add+0x12e>
		/* Handler already exist */
		if(task[i].psp!=0 && task[i].handler == handler){
 80021ac:	4979      	ldr	r1, [pc, #484]	; (8002394 <task_add+0x2c0>)
 80021ae:	6a3a      	ldr	r2, [r7, #32]
 80021b0:	4613      	mov	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	3308      	adds	r3, #8
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d01c      	beq.n	80021fc <task_add+0x128>
 80021c2:	4974      	ldr	r1, [pc, #464]	; (8002394 <task_add+0x2c0>)
 80021c4:	6a3a      	ldr	r2, [r7, #32]
 80021c6:	4613      	mov	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	4413      	add	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	440b      	add	r3, r1
 80021d0:	3304      	adds	r3, #4
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d110      	bne.n	80021fc <task_add+0x128>
			_console(TASK_CONSOLE_ERROR,__func__, "Handler %p addition failed. Handler already in slots, associated with ID %d.\n",handler,task[i].id);
 80021da:	496e      	ldr	r1, [pc, #440]	; (8002394 <task_add+0x2c0>)
 80021dc:	6a3a      	ldr	r2, [r7, #32]
 80021de:	4613      	mov	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	4413      	add	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	4a6c      	ldr	r2, [pc, #432]	; (80023a0 <task_add+0x2cc>)
 80021f0:	496a      	ldr	r1, [pc, #424]	; (800239c <task_add+0x2c8>)
 80021f2:	2000      	movs	r0, #0
 80021f4:	f7ff fd7a 	bl	8001cec <_console>
			return 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	e0c5      	b.n	8002388 <task_add+0x2b4>
	for(int i = 0;i<TASK_MAX_NUMBER;i++){
 80021fc:	6a3b      	ldr	r3, [r7, #32]
 80021fe:	3301      	adds	r3, #1
 8002200:	623b      	str	r3, [r7, #32]
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	2b02      	cmp	r3, #2
 8002206:	ddd1      	ble.n	80021ac <task_add+0xd8>
		}
	}

	if(idx>=TASK_MAX_NUMBER){
 8002208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220a:	2b02      	cmp	r3, #2
 800220c:	dd09      	ble.n	8002222 <task_add+0x14e>
		/* All slots are full */
		_console(TASK_CONSOLE_ERROR,__func__, "Handler %p addition failed. All %d slots are full.\n",handler,TASK_MAX_NUMBER);
 800220e:	2303      	movs	r3, #3
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	4a63      	ldr	r2, [pc, #396]	; (80023a4 <task_add+0x2d0>)
 8002216:	4961      	ldr	r1, [pc, #388]	; (800239c <task_add+0x2c8>)
 8002218:	2000      	movs	r0, #0
 800221a:	f7ff fd67 	bl	8001cec <_console>
		return 0;
 800221e:	2300      	movs	r3, #0
 8002220:	e0b2      	b.n	8002388 <task_add+0x2b4>
	}

	/* Memory Allocation */
	task[idx].stack = (uint32_t*) malloc(stack_size/4+1);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	089b      	lsrs	r3, r3, #2
 8002226:	3301      	adds	r3, #1
 8002228:	4618      	mov	r0, r3
 800222a:	f000 faa9 	bl	8002780 <malloc>
 800222e:	4603      	mov	r3, r0
 8002230:	4618      	mov	r0, r3
 8002232:	4958      	ldr	r1, [pc, #352]	; (8002394 <task_add+0x2c0>)
 8002234:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002236:	4613      	mov	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4413      	add	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	440b      	add	r3, r1
 8002240:	331c      	adds	r3, #28
 8002242:	6018      	str	r0, [r3, #0]
	if(task[idx].stack == NULL){
 8002244:	4953      	ldr	r1, [pc, #332]	; (8002394 <task_add+0x2c0>)
 8002246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002248:	4613      	mov	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	4413      	add	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	331c      	adds	r3, #28
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d107      	bne.n	800226a <task_add+0x196>
		/* Out of stack */
		_console(TASK_CONSOLE_ERROR,__func__, "Handler %p addition failed. Not Enough heap to make stack.\n",handler);
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	4a52      	ldr	r2, [pc, #328]	; (80023a8 <task_add+0x2d4>)
 800225e:	494f      	ldr	r1, [pc, #316]	; (800239c <task_add+0x2c8>)
 8002260:	2000      	movs	r0, #0
 8002262:	f7ff fd43 	bl	8001cec <_console>
		return 0;
 8002266:	2300      	movs	r3, #0
 8002268:	e08e      	b.n	8002388 <task_add+0x2b4>
	}

	/* Calculate PSP */
	stack_tracker += stack_size;
 800226a:	4b50      	ldr	r3, [pc, #320]	; (80023ac <task_add+0x2d8>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4413      	add	r3, r2
 8002272:	4a4e      	ldr	r2, [pc, #312]	; (80023ac <task_add+0x2d8>)
 8002274:	6013      	str	r3, [r2, #0]
	uint32_t *psp = &task[idx].stack[stack_size/4];
 8002276:	4947      	ldr	r1, [pc, #284]	; (8002394 <task_add+0x2c0>)
 8002278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800227a:	4613      	mov	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4413      	add	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	440b      	add	r3, r1
 8002284:	331c      	adds	r3, #28
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f023 0303 	bic.w	r3, r3, #3
 800228e:	4413      	add	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
	task[idx].stack_start = (uint32_t)psp;
 8002292:	69b9      	ldr	r1, [r7, #24]
 8002294:	483f      	ldr	r0, [pc, #252]	; (8002394 <task_add+0x2c0>)
 8002296:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002298:	4613      	mov	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4413      	add	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4403      	add	r3, r0
 80022a2:	3318      	adds	r3, #24
 80022a4:	6019      	str	r1, [r3, #0]

	/* fill dummy stack frame */
	*(--psp) = 0x01000000u; 		// Dummy xPSR, just enable Thumb State bit;
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	3b04      	subs	r3, #4
 80022aa:	61bb      	str	r3, [r7, #24]
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022b2:	601a      	str	r2, [r3, #0]
	*(--psp) = (uint32_t) (handler);// PC
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	3b04      	subs	r3, #4
 80022b8:	61bb      	str	r3, [r7, #24]
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	601a      	str	r2, [r3, #0]
	*(--psp) = 0xFFFFFFFDu; 		// LR with EXC_RETURN to return to Thread using PSP
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	3b04      	subs	r3, #4
 80022c4:	61bb      	str	r3, [r7, #24]
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	f06f 0202 	mvn.w	r2, #2
 80022cc:	601a      	str	r2, [r3, #0]
	psp-=(16-3);
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	3b34      	subs	r3, #52	; 0x34
 80022d2:	61bb      	str	r3, [r7, #24]

	/* Add task */
	task[idx].id = id;
 80022d4:	492f      	ldr	r1, [pc, #188]	; (8002394 <task_add+0x2c0>)
 80022d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022d8:	4613      	mov	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4413      	add	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	601a      	str	r2, [r3, #0]
	task[idx].handler = handler;
 80022e6:	492b      	ldr	r1, [pc, #172]	; (8002394 <task_add+0x2c0>)
 80022e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022ea:	4613      	mov	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4413      	add	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	3304      	adds	r3, #4
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	601a      	str	r2, [r3, #0]
	task[idx].state = TASK_RUNNING;
 80022fa:	4926      	ldr	r1, [pc, #152]	; (8002394 <task_add+0x2c0>)
 80022fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022fe:	4613      	mov	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	330c      	adds	r3, #12
 800230a:	2200      	movs	r2, #0
 800230c:	701a      	strb	r2, [r3, #0]
	task[idx].stack_size = stack_size;
 800230e:	4921      	ldr	r1, [pc, #132]	; (8002394 <task_add+0x2c0>)
 8002310:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002312:	4613      	mov	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	3314      	adds	r3, #20
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	601a      	str	r2, [r3, #0]
	task[idx].wait_tick = 0;
 8002322:	491c      	ldr	r1, [pc, #112]	; (8002394 <task_add+0x2c0>)
 8002324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002326:	4613      	mov	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4413      	add	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	3310      	adds	r3, #16
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
	task[idx].psp = (uint32_t)psp;
 8002336:	69b9      	ldr	r1, [r7, #24]
 8002338:	4816      	ldr	r0, [pc, #88]	; (8002394 <task_add+0x2c0>)
 800233a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800233c:	4613      	mov	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4413      	add	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4403      	add	r3, r0
 8002346:	3308      	adds	r3, #8
 8002348:	6019      	str	r1, [r3, #0]

	if(idx!=0)	//Skip the idle task
 800234a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234c:	2b00      	cmp	r3, #0
 800234e:	d007      	beq.n	8002360 <task_add+0x28c>
		_console(TASK_CONSOLE_INFO,__func__, "Handler %p is added successfully with id %d.\n",handler,id);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	4a16      	ldr	r2, [pc, #88]	; (80023b0 <task_add+0x2dc>)
 8002358:	4910      	ldr	r1, [pc, #64]	; (800239c <task_add+0x2c8>)
 800235a:	2001      	movs	r0, #1
 800235c:	f7ff fcc6 	bl	8001cec <_console>

    if(_isPSP() && (priority!=-1)){
 8002360:	f7ff fcb6 	bl	8001cd0 <_isPSP>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d008      	beq.n	800237c <task_add+0x2a8>
 800236a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800236e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002372:	d003      	beq.n	800237c <task_add+0x2a8>
    	current_task->priority = 0;
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <task_add+0x2bc>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2200      	movs	r2, #0
 800237a:	735a      	strb	r2, [r3, #13]
    }

	if(interrupt_enabled)
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <task_add+0x2b2>
  __ASM volatile ("cpsie i" : : : "memory");
 8002382:	b662      	cpsie	i
}
 8002384:	bf00      	nop
		__enable_irq();

	return 1;
 8002386:	2301      	movs	r3, #1
}
 8002388:	4618      	mov	r0, r3
 800238a:	3730      	adds	r7, #48	; 0x30
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20000148 	.word	0x20000148
 8002394:	200000dc 	.word	0x200000dc
 8002398:	080038f8 	.word	0x080038f8
 800239c:	08003de0 	.word	0x08003de0
 80023a0:	08003944 	.word	0x08003944
 80023a4:	08003994 	.word	0x08003994
 80023a8:	080039c8 	.word	0x080039c8
 80023ac:	200000d8 	.word	0x200000d8
 80023b0:	08003a04 	.word	0x08003a04

080023b4 <task_delay>:

/**
 * This delay the task
 * @param ticks	: time in ticks
 */
void task_delay(uint32_t ticks){
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
	current_task->wait_tick = global_ticks+ticks;
 80023bc:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <task_delay+0x34>)
 80023be:	6819      	ldr	r1, [r3, #0]
 80023c0:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <task_delay+0x38>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	440a      	add	r2, r1
 80023c8:	611a      	str	r2, [r3, #16]
	while(current_task->wait_tick>global_ticks);
 80023ca:	bf00      	nop
 80023cc:	4b07      	ldr	r3, [pc, #28]	; (80023ec <task_delay+0x38>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691a      	ldr	r2, [r3, #16]
 80023d2:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <task_delay+0x34>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d8f8      	bhi.n	80023cc <task_delay+0x18>
}
 80023da:	bf00      	nop
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	2000014c 	.word	0x2000014c
 80023ec:	20000148 	.word	0x20000148

080023f0 <task_startScheduler>:

/**
 * This starts the scheduler from main
 */
void task_startScheduler(){
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023f6:	f3ef 8310 	mrs	r3, PRIMASK
 80023fa:	607b      	str	r3, [r7, #4]
  return(result);
 80023fc:	687b      	ldr	r3, [r7, #4]
	uint32_t interrupt_enabled = !__get_PRIMASK();
 80023fe:	2b00      	cmp	r3, #0
 8002400:	bf0c      	ite	eq
 8002402:	2301      	moveq	r3, #1
 8002404:	2300      	movne	r3, #0
 8002406:	b2db      	uxtb	r3, r3
 8002408:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800240a:	b672      	cpsid	i
}
 800240c:	bf00      	nop
	__disable_irq();

	/* prepare PSP of the first task */
	__asm volatile("BL _task_getCurrentPSP");	// return PSP in R0
 800240e:	f7ff fcc3 	bl	8001d98 <_task_getCurrentPSP>
	__asm volatile("MSR PSP, R0");		// set PSP
 8002412:	f380 8809 	msr	PSP, r0

	/* change to use PSP */
	__asm volatile("MRS R0, CONTROL");
 8002416:	f3ef 8014 	mrs	r0, CONTROL
	__asm volatile("ORR R0, R0, #2");	// set bit[1] SPSEL
 800241a:	f040 0002 	orr.w	r0, r0, #2
	__asm volatile("MSR CONTROL, R0");
 800241e:	f380 8814 	msr	CONTROL, r0

	if(interrupt_enabled)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <task_startScheduler+0x3c>
  __ASM volatile ("cpsie i" : : : "memory");
 8002428:	b662      	cpsie	i
}
 800242a:	bf00      	nop
		__enable_irq();

	/* Move to Unprivileged level */
	__asm volatile("MRS R0, CONTROL");
 800242c:	f3ef 8014 	mrs	r0, CONTROL
	__asm volatile("ORR R0, R0, #1");	// Set bit[0] nPRIV
 8002430:	f040 0001 	orr.w	r0, r0, #1
	__asm volatile("MSR CONTROL, R0");
 8002434:	f380 8814 	msr	CONTROL, r0



	/* get the handler of the first task by tracing back from PSP which is at R4 slot */
	void (*handler)() = (void (*))((uint32_t*)current_task->psp)[8+6];
 8002438:	4b07      	ldr	r3, [pc, #28]	; (8002458 <task_startScheduler+0x68>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	3338      	adds	r3, #56	; 0x38
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	60bb      	str	r3, [r7, #8]
	scheduler_started = 1;
 8002444:	4b05      	ldr	r3, [pc, #20]	; (800245c <task_startScheduler+0x6c>)
 8002446:	2201      	movs	r2, #1
 8002448:	701a      	strb	r2, [r3, #0]
	/* execute the handler */
	handler();
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	4798      	blx	r3
}
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000148 	.word	0x20000148
 800245c:	20000150 	.word	0x20000150

08002460 <task_printf>:

/**
 * This is printf for task
 */
void task_printf(char* msg,...){
 8002460:	b40f      	push	{r0, r1, r2, r3}
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
	int8_t priority;
	if(_isPSP()){
 8002468:	f7ff fc32 	bl	8001cd0 <_isPSP>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d007      	beq.n	8002482 <task_printf+0x22>
		priority = current_task->priority;
 8002472:	4b12      	ldr	r3, [pc, #72]	; (80024bc <task_printf+0x5c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	7b5b      	ldrb	r3, [r3, #13]
 8002478:	71fb      	strb	r3, [r7, #7]
		current_task->priority = -1;
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <task_printf+0x5c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	22ff      	movs	r2, #255	; 0xff
 8002480:	735a      	strb	r2, [r3, #13]
	}

	va_list args;
	va_start(args, msg);
 8002482:	f107 0314 	add.w	r3, r7, #20
 8002486:	603b      	str	r3, [r7, #0]
	vprintf(msg, args);
 8002488:	6839      	ldr	r1, [r7, #0]
 800248a:	6938      	ldr	r0, [r7, #16]
 800248c:	f000 fb0a 	bl	8002aa4 <viprintf>
    va_end(args);

    if(_isPSP() && (priority!=-1))
 8002490:	f7ff fc1e 	bl	8001cd0 <_isPSP>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d008      	beq.n	80024ac <task_printf+0x4c>
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a2:	d003      	beq.n	80024ac <task_printf+0x4c>
    	current_task->priority = 0;
 80024a4:	4b05      	ldr	r3, [pc, #20]	; (80024bc <task_printf+0x5c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2200      	movs	r2, #0
 80024aa:	735a      	strb	r2, [r3, #13]
}
 80024ac:	bf00      	nop
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80024b6:	b004      	add	sp, #16
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20000148 	.word	0x20000148

080024c0 <task_createSemaphore>:
/**
 * Create semaphore
 * @param type		: Semaphore type BINARY or MUTEX
 * @return			: TaskSemaphore
 */
TaskSemaphore task_createSemaphore(TaskSemaphoreType type){
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	70fb      	strb	r3, [r7, #3]
	TaskSemaphore taskSemaphore = {.type = type};
 80024cc:	f107 0308 	add.w	r3, r7, #8
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	78fb      	ldrb	r3, [r7, #3]
 80024d8:	72bb      	strb	r3, [r7, #10]
	return taskSemaphore;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	461a      	mov	r2, r3
 80024de:	f107 0308 	add.w	r3, r7, #8
 80024e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80024e6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr

080024f4 <task_takeSemaphore>:
 * If semaphore is binary this task will wait for other task to give semaphore
 * If semaphore is mutex then only this task will run until this task give semaphore
 *
 * @param semaphore		: Task semaphore
 */
void task_takeSemaphore(TaskSemaphore* semaphore){
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af02      	add	r7, sp, #8
 80024fa:	6078      	str	r0, [r7, #4]
	_console(TASK_CONSOLE_INFO,__func__, "Handler %p associated with id %d took semaphore.\n",current_task->handler,current_task->id);
 80024fc:	4b18      	ldr	r3, [pc, #96]	; (8002560 <task_takeSemaphore+0x6c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	4b17      	ldr	r3, [pc, #92]	; (8002560 <task_takeSemaphore+0x6c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	4613      	mov	r3, r2
 800250c:	4a15      	ldr	r2, [pc, #84]	; (8002564 <task_takeSemaphore+0x70>)
 800250e:	4916      	ldr	r1, [pc, #88]	; (8002568 <task_takeSemaphore+0x74>)
 8002510:	2001      	movs	r0, #1
 8002512:	f7ff fbeb 	bl	8001cec <_console>
	semaphore->take = 1;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	705a      	strb	r2, [r3, #1]
	semaphore->task = current_task;
 800251c:	4b10      	ldr	r3, [pc, #64]	; (8002560 <task_takeSemaphore+0x6c>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	605a      	str	r2, [r3, #4]
	if(semaphore->type==TASK_SEMAPHORE_BINARY){
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	789b      	ldrb	r3, [r3, #2]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d106      	bne.n	800253a <task_takeSemaphore+0x46>
		while(semaphore->take);
 800252c:	bf00      	nop
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	785b      	ldrb	r3, [r3, #1]
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1fa      	bne.n	800252e <task_takeSemaphore+0x3a>
	}else if(semaphore->type==TASK_SEMAPHORE_MUTEX){
		semaphore->prevPriority = current_task->priority;
		current_task->priority = -1;
	}
}
 8002538:	e00d      	b.n	8002556 <task_takeSemaphore+0x62>
	}else if(semaphore->type==TASK_SEMAPHORE_MUTEX){
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	789b      	ldrb	r3, [r3, #2]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d109      	bne.n	8002556 <task_takeSemaphore+0x62>
		semaphore->prevPriority = current_task->priority;
 8002542:	4b07      	ldr	r3, [pc, #28]	; (8002560 <task_takeSemaphore+0x6c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f993 200d 	ldrsb.w	r2, [r3, #13]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	701a      	strb	r2, [r3, #0]
		current_task->priority = -1;
 800254e:	4b04      	ldr	r3, [pc, #16]	; (8002560 <task_takeSemaphore+0x6c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	22ff      	movs	r2, #255	; 0xff
 8002554:	735a      	strb	r2, [r3, #13]
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000148 	.word	0x20000148
 8002564:	08003cb0 	.word	0x08003cb0
 8002568:	08003dec 	.word	0x08003dec

0800256c <task_giveSemaphore>:

/**
 * Give semaphore
 * @param semaphore		: Task semaphore
 */
void task_giveSemaphore(TaskSemaphore* semaphore){
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af02      	add	r7, sp, #8
 8002572:	6078      	str	r0, [r7, #4]
	if(semaphore->type==TASK_SEMAPHORE_MUTEX){
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	789b      	ldrb	r3, [r3, #2]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d121      	bne.n	80025c0 <task_giveSemaphore+0x54>
		if(semaphore->task==current_task){
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <task_giveSemaphore+0x84>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d109      	bne.n	800259c <task_giveSemaphore+0x30>
			semaphore->take = 0;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	705a      	strb	r2, [r3, #1]
			semaphore->task->priority=semaphore->prevPriority;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	f992 2000 	ldrsb.w	r2, [r2]
 8002598:	735a      	strb	r2, [r3, #13]
 800259a:	e014      	b.n	80025c6 <task_giveSemaphore+0x5a>
		}else{
			_console(TASK_CONSOLE_ERROR,__func__, "Handler %p associated with id %d can't give mutex semaphore of handler %p.\n",current_task->handler,current_task->id,semaphore->task->handler);
 800259c:	4b14      	ldr	r3, [pc, #80]	; (80025f0 <task_giveSemaphore+0x84>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6859      	ldr	r1, [r3, #4]
 80025a2:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <task_giveSemaphore+0x84>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6852      	ldr	r2, [r2, #4]
 80025ac:	6852      	ldr	r2, [r2, #4]
 80025ae:	9201      	str	r2, [sp, #4]
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	460b      	mov	r3, r1
 80025b4:	4a0f      	ldr	r2, [pc, #60]	; (80025f4 <task_giveSemaphore+0x88>)
 80025b6:	4910      	ldr	r1, [pc, #64]	; (80025f8 <task_giveSemaphore+0x8c>)
 80025b8:	2000      	movs	r0, #0
 80025ba:	f7ff fb97 	bl	8001cec <_console>
			return;
 80025be:	e013      	b.n	80025e8 <task_giveSemaphore+0x7c>
		}
	}else{
		semaphore->take = 0;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	705a      	strb	r2, [r3, #1]
	}
	_console(TASK_CONSOLE_INFO,__func__, "Handler %p associated with id %d gave semaphore of handler %p.\n",current_task->handler,current_task->id,semaphore->task->handler);
 80025c6:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <task_giveSemaphore+0x84>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6859      	ldr	r1, [r3, #4]
 80025cc:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <task_giveSemaphore+0x84>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6852      	ldr	r2, [r2, #4]
 80025d6:	6852      	ldr	r2, [r2, #4]
 80025d8:	9201      	str	r2, [sp, #4]
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	460b      	mov	r3, r1
 80025de:	4a07      	ldr	r2, [pc, #28]	; (80025fc <task_giveSemaphore+0x90>)
 80025e0:	4905      	ldr	r1, [pc, #20]	; (80025f8 <task_giveSemaphore+0x8c>)
 80025e2:	2001      	movs	r0, #1
 80025e4:	f7ff fb82 	bl	8001cec <_console>

}
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000148 	.word	0x20000148
 80025f4:	08003ce4 	.word	0x08003ce4
 80025f8:	08003e00 	.word	0x08003e00
 80025fc:	08003d30 	.word	0x08003d30

08002600 <task1>:
uint32_t count2;
float fp = 0;

TaskSemaphore semaphore;

void task1() {
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
	task_printf("Task1 starting\n");
 8002604:	4809      	ldr	r0, [pc, #36]	; (800262c <task1+0x2c>)
 8002606:	f7ff ff2b 	bl	8002460 <task_printf>
	count1 = 0;
 800260a:	4b09      	ldr	r3, [pc, #36]	; (8002630 <task1+0x30>)
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
	while (1) {
		task_printf("I am task1\n");
 8002610:	4808      	ldr	r0, [pc, #32]	; (8002634 <task1+0x34>)
 8002612:	f7ff ff25 	bl	8002460 <task_printf>
		count1++;
 8002616:	4b06      	ldr	r3, [pc, #24]	; (8002630 <task1+0x30>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	3301      	adds	r3, #1
 800261c:	4a04      	ldr	r2, [pc, #16]	; (8002630 <task1+0x30>)
 800261e:	6013      	str	r3, [r2, #0]
//		if(count1==4)
//			task_takeSemaphore(&semaphore);
//			task_delete(1);

		task_delay(500);
 8002620:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002624:	f7ff fec6 	bl	80023b4 <task_delay>
		task_printf("I am task1\n");
 8002628:	e7f2      	b.n	8002610 <task1+0x10>
 800262a:	bf00      	nop
 800262c:	08003d70 	.word	0x08003d70
 8002630:	20000154 	.word	0x20000154
 8002634:	08003d80 	.word	0x08003d80

08002638 <task2>:
	}
}

void task2() {
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
	task_printf("Task2 starting\n");
 800263c:	4818      	ldr	r0, [pc, #96]	; (80026a0 <task2+0x68>)
 800263e:	f7ff ff0f 	bl	8002460 <task_printf>
	count2 = 0;
 8002642:	4b18      	ldr	r3, [pc, #96]	; (80026a4 <task2+0x6c>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
	while (1) {
		count2++;
 8002648:	4b16      	ldr	r3, [pc, #88]	; (80026a4 <task2+0x6c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	3301      	adds	r3, #1
 800264e:	4a15      	ldr	r2, [pc, #84]	; (80026a4 <task2+0x6c>)
 8002650:	6013      	str	r3, [r2, #0]
		fp = (float)count2/100.0f;
 8002652:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <task2+0x6c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7fd fe2e 	bl	80002b8 <__aeabi_ui2f>
 800265c:	4603      	mov	r3, r0
 800265e:	4912      	ldr	r1, [pc, #72]	; (80026a8 <task2+0x70>)
 8002660:	4618      	mov	r0, r3
 8002662:	f7fd ff35 	bl	80004d0 <__aeabi_fdiv>
 8002666:	4603      	mov	r3, r0
 8002668:	461a      	mov	r2, r3
 800266a:	4b10      	ldr	r3, [pc, #64]	; (80026ac <task2+0x74>)
 800266c:	601a      	str	r2, [r3, #0]
		task_printf("I am task2 %d\n",count2);
 800266e:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <task2+0x6c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4619      	mov	r1, r3
 8002674:	480e      	ldr	r0, [pc, #56]	; (80026b0 <task2+0x78>)
 8002676:	f7ff fef3 	bl	8002460 <task_printf>


		if(count2==4)
 800267a:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <task2+0x6c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b04      	cmp	r3, #4
 8002680:	d102      	bne.n	8002688 <task2+0x50>
			task_takeSemaphore(&semaphore);
 8002682:	480c      	ldr	r0, [pc, #48]	; (80026b4 <task2+0x7c>)
 8002684:	f7ff ff36 	bl	80024f4 <task_takeSemaphore>
//			task_restart(2);
//			task_deleteSelf();
//			task_enableHighestPriority();
//			task_pause(1);
		if(count2==8)
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <task2+0x6c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b08      	cmp	r3, #8
 800268e:	d102      	bne.n	8002696 <task2+0x5e>
			task_giveSemaphore(&semaphore);
 8002690:	4808      	ldr	r0, [pc, #32]	; (80026b4 <task2+0x7c>)
 8002692:	f7ff ff6b 	bl	800256c <task_giveSemaphore>
//			task_resume(1);
//			task_disableHighestPriority();

		task_delay(1000);
 8002696:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800269a:	f7ff fe8b 	bl	80023b4 <task_delay>
		count2++;
 800269e:	e7d3      	b.n	8002648 <task2+0x10>
 80026a0:	08003d8c 	.word	0x08003d8c
 80026a4:	20000158 	.word	0x20000158
 80026a8:	42c80000 	.word	0x42c80000
 80026ac:	2000015c 	.word	0x2000015c
 80026b0:	08003d9c 	.word	0x08003d9c
 80026b4:	20000160 	.word	0x20000160

080026b8 <init>:
	}
}

void init() {
 80026b8:	b590      	push	{r4, r7, lr}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
	printf("Initiating....\n");
 80026be:	4813      	ldr	r0, [pc, #76]	; (800270c <init+0x54>)
 80026c0:	f000 f9d8 	bl	8002a74 <puts>

	semaphore = task_createSemaphore(TASK_SEMAPHORE_MUTEX);
 80026c4:	4c12      	ldr	r4, [pc, #72]	; (8002710 <init+0x58>)
 80026c6:	463b      	mov	r3, r7
 80026c8:	2101      	movs	r1, #1
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fef8 	bl	80024c0 <task_createSemaphore>
 80026d0:	4622      	mov	r2, r4
 80026d2:	463b      	mov	r3, r7
 80026d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80026d8:	e882 0003 	stmia.w	r2, {r0, r1}

	task_init();
 80026dc:	f7ff fc80 	bl	8001fe0 <task_init>
	task_add(1, task1, 2*1024);
 80026e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026e4:	490b      	ldr	r1, [pc, #44]	; (8002714 <init+0x5c>)
 80026e6:	2001      	movs	r0, #1
 80026e8:	f7ff fcf4 	bl	80020d4 <task_add>
	task_add(2, task2, 2*1024);
 80026ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026f0:	4909      	ldr	r1, [pc, #36]	; (8002718 <init+0x60>)
 80026f2:	2002      	movs	r0, #2
 80026f4:	f7ff fcee 	bl	80020d4 <task_add>

	task_startScheduler();
 80026f8:	f7ff fe7a 	bl	80023f0 <task_startScheduler>

	printf("I am here\n");
 80026fc:	4807      	ldr	r0, [pc, #28]	; (800271c <init+0x64>)
 80026fe:	f000 f9b9 	bl	8002a74 <puts>
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	bd90      	pop	{r4, r7, pc}
 800270a:	bf00      	nop
 800270c:	08003dac 	.word	0x08003dac
 8002710:	20000160 	.word	0x20000160
 8002714:	08002601 	.word	0x08002601
 8002718:	08002639 	.word	0x08002639
 800271c:	08003dbc 	.word	0x08003dbc

08002720 <loop>:

void loop() {
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0

}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <__errno>:
 800272c:	4b01      	ldr	r3, [pc, #4]	; (8002734 <__errno+0x8>)
 800272e:	6818      	ldr	r0, [r3, #0]
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	2000000c 	.word	0x2000000c

08002738 <__libc_init_array>:
 8002738:	b570      	push	{r4, r5, r6, lr}
 800273a:	2600      	movs	r6, #0
 800273c:	4d0c      	ldr	r5, [pc, #48]	; (8002770 <__libc_init_array+0x38>)
 800273e:	4c0d      	ldr	r4, [pc, #52]	; (8002774 <__libc_init_array+0x3c>)
 8002740:	1b64      	subs	r4, r4, r5
 8002742:	10a4      	asrs	r4, r4, #2
 8002744:	42a6      	cmp	r6, r4
 8002746:	d109      	bne.n	800275c <__libc_init_array+0x24>
 8002748:	f001 f852 	bl	80037f0 <_init>
 800274c:	2600      	movs	r6, #0
 800274e:	4d0a      	ldr	r5, [pc, #40]	; (8002778 <__libc_init_array+0x40>)
 8002750:	4c0a      	ldr	r4, [pc, #40]	; (800277c <__libc_init_array+0x44>)
 8002752:	1b64      	subs	r4, r4, r5
 8002754:	10a4      	asrs	r4, r4, #2
 8002756:	42a6      	cmp	r6, r4
 8002758:	d105      	bne.n	8002766 <__libc_init_array+0x2e>
 800275a:	bd70      	pop	{r4, r5, r6, pc}
 800275c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002760:	4798      	blx	r3
 8002762:	3601      	adds	r6, #1
 8002764:	e7ee      	b.n	8002744 <__libc_init_array+0xc>
 8002766:	f855 3b04 	ldr.w	r3, [r5], #4
 800276a:	4798      	blx	r3
 800276c:	3601      	adds	r6, #1
 800276e:	e7f2      	b.n	8002756 <__libc_init_array+0x1e>
 8002770:	08003eac 	.word	0x08003eac
 8002774:	08003eac 	.word	0x08003eac
 8002778:	08003eac 	.word	0x08003eac
 800277c:	08003eb0 	.word	0x08003eb0

08002780 <malloc>:
 8002780:	4b02      	ldr	r3, [pc, #8]	; (800278c <malloc+0xc>)
 8002782:	4601      	mov	r1, r0
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	f000 b87b 	b.w	8002880 <_malloc_r>
 800278a:	bf00      	nop
 800278c:	2000000c 	.word	0x2000000c

08002790 <free>:
 8002790:	4b02      	ldr	r3, [pc, #8]	; (800279c <free+0xc>)
 8002792:	4601      	mov	r1, r0
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	f000 b80b 	b.w	80027b0 <_free_r>
 800279a:	bf00      	nop
 800279c:	2000000c 	.word	0x2000000c

080027a0 <memset>:
 80027a0:	4603      	mov	r3, r0
 80027a2:	4402      	add	r2, r0
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d100      	bne.n	80027aa <memset+0xa>
 80027a8:	4770      	bx	lr
 80027aa:	f803 1b01 	strb.w	r1, [r3], #1
 80027ae:	e7f9      	b.n	80027a4 <memset+0x4>

080027b0 <_free_r>:
 80027b0:	b538      	push	{r3, r4, r5, lr}
 80027b2:	4605      	mov	r5, r0
 80027b4:	2900      	cmp	r1, #0
 80027b6:	d040      	beq.n	800283a <_free_r+0x8a>
 80027b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027bc:	1f0c      	subs	r4, r1, #4
 80027be:	2b00      	cmp	r3, #0
 80027c0:	bfb8      	it	lt
 80027c2:	18e4      	addlt	r4, r4, r3
 80027c4:	f000 fc60 	bl	8003088 <__malloc_lock>
 80027c8:	4a1c      	ldr	r2, [pc, #112]	; (800283c <_free_r+0x8c>)
 80027ca:	6813      	ldr	r3, [r2, #0]
 80027cc:	b933      	cbnz	r3, 80027dc <_free_r+0x2c>
 80027ce:	6063      	str	r3, [r4, #4]
 80027d0:	6014      	str	r4, [r2, #0]
 80027d2:	4628      	mov	r0, r5
 80027d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027d8:	f000 bc5c 	b.w	8003094 <__malloc_unlock>
 80027dc:	42a3      	cmp	r3, r4
 80027de:	d908      	bls.n	80027f2 <_free_r+0x42>
 80027e0:	6820      	ldr	r0, [r4, #0]
 80027e2:	1821      	adds	r1, r4, r0
 80027e4:	428b      	cmp	r3, r1
 80027e6:	bf01      	itttt	eq
 80027e8:	6819      	ldreq	r1, [r3, #0]
 80027ea:	685b      	ldreq	r3, [r3, #4]
 80027ec:	1809      	addeq	r1, r1, r0
 80027ee:	6021      	streq	r1, [r4, #0]
 80027f0:	e7ed      	b.n	80027ce <_free_r+0x1e>
 80027f2:	461a      	mov	r2, r3
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	b10b      	cbz	r3, 80027fc <_free_r+0x4c>
 80027f8:	42a3      	cmp	r3, r4
 80027fa:	d9fa      	bls.n	80027f2 <_free_r+0x42>
 80027fc:	6811      	ldr	r1, [r2, #0]
 80027fe:	1850      	adds	r0, r2, r1
 8002800:	42a0      	cmp	r0, r4
 8002802:	d10b      	bne.n	800281c <_free_r+0x6c>
 8002804:	6820      	ldr	r0, [r4, #0]
 8002806:	4401      	add	r1, r0
 8002808:	1850      	adds	r0, r2, r1
 800280a:	4283      	cmp	r3, r0
 800280c:	6011      	str	r1, [r2, #0]
 800280e:	d1e0      	bne.n	80027d2 <_free_r+0x22>
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	4401      	add	r1, r0
 8002816:	6011      	str	r1, [r2, #0]
 8002818:	6053      	str	r3, [r2, #4]
 800281a:	e7da      	b.n	80027d2 <_free_r+0x22>
 800281c:	d902      	bls.n	8002824 <_free_r+0x74>
 800281e:	230c      	movs	r3, #12
 8002820:	602b      	str	r3, [r5, #0]
 8002822:	e7d6      	b.n	80027d2 <_free_r+0x22>
 8002824:	6820      	ldr	r0, [r4, #0]
 8002826:	1821      	adds	r1, r4, r0
 8002828:	428b      	cmp	r3, r1
 800282a:	bf01      	itttt	eq
 800282c:	6819      	ldreq	r1, [r3, #0]
 800282e:	685b      	ldreq	r3, [r3, #4]
 8002830:	1809      	addeq	r1, r1, r0
 8002832:	6021      	streq	r1, [r4, #0]
 8002834:	6063      	str	r3, [r4, #4]
 8002836:	6054      	str	r4, [r2, #4]
 8002838:	e7cb      	b.n	80027d2 <_free_r+0x22>
 800283a:	bd38      	pop	{r3, r4, r5, pc}
 800283c:	20000168 	.word	0x20000168

08002840 <sbrk_aligned>:
 8002840:	b570      	push	{r4, r5, r6, lr}
 8002842:	4e0e      	ldr	r6, [pc, #56]	; (800287c <sbrk_aligned+0x3c>)
 8002844:	460c      	mov	r4, r1
 8002846:	6831      	ldr	r1, [r6, #0]
 8002848:	4605      	mov	r5, r0
 800284a:	b911      	cbnz	r1, 8002852 <sbrk_aligned+0x12>
 800284c:	f000 f91a 	bl	8002a84 <_sbrk_r>
 8002850:	6030      	str	r0, [r6, #0]
 8002852:	4621      	mov	r1, r4
 8002854:	4628      	mov	r0, r5
 8002856:	f000 f915 	bl	8002a84 <_sbrk_r>
 800285a:	1c43      	adds	r3, r0, #1
 800285c:	d00a      	beq.n	8002874 <sbrk_aligned+0x34>
 800285e:	1cc4      	adds	r4, r0, #3
 8002860:	f024 0403 	bic.w	r4, r4, #3
 8002864:	42a0      	cmp	r0, r4
 8002866:	d007      	beq.n	8002878 <sbrk_aligned+0x38>
 8002868:	1a21      	subs	r1, r4, r0
 800286a:	4628      	mov	r0, r5
 800286c:	f000 f90a 	bl	8002a84 <_sbrk_r>
 8002870:	3001      	adds	r0, #1
 8002872:	d101      	bne.n	8002878 <sbrk_aligned+0x38>
 8002874:	f04f 34ff 	mov.w	r4, #4294967295
 8002878:	4620      	mov	r0, r4
 800287a:	bd70      	pop	{r4, r5, r6, pc}
 800287c:	2000016c 	.word	0x2000016c

08002880 <_malloc_r>:
 8002880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002884:	1ccd      	adds	r5, r1, #3
 8002886:	f025 0503 	bic.w	r5, r5, #3
 800288a:	3508      	adds	r5, #8
 800288c:	2d0c      	cmp	r5, #12
 800288e:	bf38      	it	cc
 8002890:	250c      	movcc	r5, #12
 8002892:	2d00      	cmp	r5, #0
 8002894:	4607      	mov	r7, r0
 8002896:	db01      	blt.n	800289c <_malloc_r+0x1c>
 8002898:	42a9      	cmp	r1, r5
 800289a:	d905      	bls.n	80028a8 <_malloc_r+0x28>
 800289c:	230c      	movs	r3, #12
 800289e:	2600      	movs	r6, #0
 80028a0:	603b      	str	r3, [r7, #0]
 80028a2:	4630      	mov	r0, r6
 80028a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028a8:	4e2e      	ldr	r6, [pc, #184]	; (8002964 <_malloc_r+0xe4>)
 80028aa:	f000 fbed 	bl	8003088 <__malloc_lock>
 80028ae:	6833      	ldr	r3, [r6, #0]
 80028b0:	461c      	mov	r4, r3
 80028b2:	bb34      	cbnz	r4, 8002902 <_malloc_r+0x82>
 80028b4:	4629      	mov	r1, r5
 80028b6:	4638      	mov	r0, r7
 80028b8:	f7ff ffc2 	bl	8002840 <sbrk_aligned>
 80028bc:	1c43      	adds	r3, r0, #1
 80028be:	4604      	mov	r4, r0
 80028c0:	d14d      	bne.n	800295e <_malloc_r+0xde>
 80028c2:	6834      	ldr	r4, [r6, #0]
 80028c4:	4626      	mov	r6, r4
 80028c6:	2e00      	cmp	r6, #0
 80028c8:	d140      	bne.n	800294c <_malloc_r+0xcc>
 80028ca:	6823      	ldr	r3, [r4, #0]
 80028cc:	4631      	mov	r1, r6
 80028ce:	4638      	mov	r0, r7
 80028d0:	eb04 0803 	add.w	r8, r4, r3
 80028d4:	f000 f8d6 	bl	8002a84 <_sbrk_r>
 80028d8:	4580      	cmp	r8, r0
 80028da:	d13a      	bne.n	8002952 <_malloc_r+0xd2>
 80028dc:	6821      	ldr	r1, [r4, #0]
 80028de:	3503      	adds	r5, #3
 80028e0:	1a6d      	subs	r5, r5, r1
 80028e2:	f025 0503 	bic.w	r5, r5, #3
 80028e6:	3508      	adds	r5, #8
 80028e8:	2d0c      	cmp	r5, #12
 80028ea:	bf38      	it	cc
 80028ec:	250c      	movcc	r5, #12
 80028ee:	4638      	mov	r0, r7
 80028f0:	4629      	mov	r1, r5
 80028f2:	f7ff ffa5 	bl	8002840 <sbrk_aligned>
 80028f6:	3001      	adds	r0, #1
 80028f8:	d02b      	beq.n	8002952 <_malloc_r+0xd2>
 80028fa:	6823      	ldr	r3, [r4, #0]
 80028fc:	442b      	add	r3, r5
 80028fe:	6023      	str	r3, [r4, #0]
 8002900:	e00e      	b.n	8002920 <_malloc_r+0xa0>
 8002902:	6822      	ldr	r2, [r4, #0]
 8002904:	1b52      	subs	r2, r2, r5
 8002906:	d41e      	bmi.n	8002946 <_malloc_r+0xc6>
 8002908:	2a0b      	cmp	r2, #11
 800290a:	d916      	bls.n	800293a <_malloc_r+0xba>
 800290c:	1961      	adds	r1, r4, r5
 800290e:	42a3      	cmp	r3, r4
 8002910:	6025      	str	r5, [r4, #0]
 8002912:	bf18      	it	ne
 8002914:	6059      	strne	r1, [r3, #4]
 8002916:	6863      	ldr	r3, [r4, #4]
 8002918:	bf08      	it	eq
 800291a:	6031      	streq	r1, [r6, #0]
 800291c:	5162      	str	r2, [r4, r5]
 800291e:	604b      	str	r3, [r1, #4]
 8002920:	4638      	mov	r0, r7
 8002922:	f104 060b 	add.w	r6, r4, #11
 8002926:	f000 fbb5 	bl	8003094 <__malloc_unlock>
 800292a:	f026 0607 	bic.w	r6, r6, #7
 800292e:	1d23      	adds	r3, r4, #4
 8002930:	1af2      	subs	r2, r6, r3
 8002932:	d0b6      	beq.n	80028a2 <_malloc_r+0x22>
 8002934:	1b9b      	subs	r3, r3, r6
 8002936:	50a3      	str	r3, [r4, r2]
 8002938:	e7b3      	b.n	80028a2 <_malloc_r+0x22>
 800293a:	6862      	ldr	r2, [r4, #4]
 800293c:	42a3      	cmp	r3, r4
 800293e:	bf0c      	ite	eq
 8002940:	6032      	streq	r2, [r6, #0]
 8002942:	605a      	strne	r2, [r3, #4]
 8002944:	e7ec      	b.n	8002920 <_malloc_r+0xa0>
 8002946:	4623      	mov	r3, r4
 8002948:	6864      	ldr	r4, [r4, #4]
 800294a:	e7b2      	b.n	80028b2 <_malloc_r+0x32>
 800294c:	4634      	mov	r4, r6
 800294e:	6876      	ldr	r6, [r6, #4]
 8002950:	e7b9      	b.n	80028c6 <_malloc_r+0x46>
 8002952:	230c      	movs	r3, #12
 8002954:	4638      	mov	r0, r7
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	f000 fb9c 	bl	8003094 <__malloc_unlock>
 800295c:	e7a1      	b.n	80028a2 <_malloc_r+0x22>
 800295e:	6025      	str	r5, [r4, #0]
 8002960:	e7de      	b.n	8002920 <_malloc_r+0xa0>
 8002962:	bf00      	nop
 8002964:	20000168 	.word	0x20000168

08002968 <iprintf>:
 8002968:	b40f      	push	{r0, r1, r2, r3}
 800296a:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <iprintf+0x2c>)
 800296c:	b513      	push	{r0, r1, r4, lr}
 800296e:	681c      	ldr	r4, [r3, #0]
 8002970:	b124      	cbz	r4, 800297c <iprintf+0x14>
 8002972:	69a3      	ldr	r3, [r4, #24]
 8002974:	b913      	cbnz	r3, 800297c <iprintf+0x14>
 8002976:	4620      	mov	r0, r4
 8002978:	f000 fa80 	bl	8002e7c <__sinit>
 800297c:	ab05      	add	r3, sp, #20
 800297e:	4620      	mov	r0, r4
 8002980:	9a04      	ldr	r2, [sp, #16]
 8002982:	68a1      	ldr	r1, [r4, #8]
 8002984:	9301      	str	r3, [sp, #4]
 8002986:	f000 fbb3 	bl	80030f0 <_vfiprintf_r>
 800298a:	b002      	add	sp, #8
 800298c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002990:	b004      	add	sp, #16
 8002992:	4770      	bx	lr
 8002994:	2000000c 	.word	0x2000000c

08002998 <_puts_r>:
 8002998:	b570      	push	{r4, r5, r6, lr}
 800299a:	460e      	mov	r6, r1
 800299c:	4605      	mov	r5, r0
 800299e:	b118      	cbz	r0, 80029a8 <_puts_r+0x10>
 80029a0:	6983      	ldr	r3, [r0, #24]
 80029a2:	b90b      	cbnz	r3, 80029a8 <_puts_r+0x10>
 80029a4:	f000 fa6a 	bl	8002e7c <__sinit>
 80029a8:	69ab      	ldr	r3, [r5, #24]
 80029aa:	68ac      	ldr	r4, [r5, #8]
 80029ac:	b913      	cbnz	r3, 80029b4 <_puts_r+0x1c>
 80029ae:	4628      	mov	r0, r5
 80029b0:	f000 fa64 	bl	8002e7c <__sinit>
 80029b4:	4b2c      	ldr	r3, [pc, #176]	; (8002a68 <_puts_r+0xd0>)
 80029b6:	429c      	cmp	r4, r3
 80029b8:	d120      	bne.n	80029fc <_puts_r+0x64>
 80029ba:	686c      	ldr	r4, [r5, #4]
 80029bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029be:	07db      	lsls	r3, r3, #31
 80029c0:	d405      	bmi.n	80029ce <_puts_r+0x36>
 80029c2:	89a3      	ldrh	r3, [r4, #12]
 80029c4:	0598      	lsls	r0, r3, #22
 80029c6:	d402      	bmi.n	80029ce <_puts_r+0x36>
 80029c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029ca:	f000 faf5 	bl	8002fb8 <__retarget_lock_acquire_recursive>
 80029ce:	89a3      	ldrh	r3, [r4, #12]
 80029d0:	0719      	lsls	r1, r3, #28
 80029d2:	d51d      	bpl.n	8002a10 <_puts_r+0x78>
 80029d4:	6923      	ldr	r3, [r4, #16]
 80029d6:	b1db      	cbz	r3, 8002a10 <_puts_r+0x78>
 80029d8:	3e01      	subs	r6, #1
 80029da:	68a3      	ldr	r3, [r4, #8]
 80029dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80029e0:	3b01      	subs	r3, #1
 80029e2:	60a3      	str	r3, [r4, #8]
 80029e4:	bb39      	cbnz	r1, 8002a36 <_puts_r+0x9e>
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	da38      	bge.n	8002a5c <_puts_r+0xc4>
 80029ea:	4622      	mov	r2, r4
 80029ec:	210a      	movs	r1, #10
 80029ee:	4628      	mov	r0, r5
 80029f0:	f000 f86e 	bl	8002ad0 <__swbuf_r>
 80029f4:	3001      	adds	r0, #1
 80029f6:	d011      	beq.n	8002a1c <_puts_r+0x84>
 80029f8:	250a      	movs	r5, #10
 80029fa:	e011      	b.n	8002a20 <_puts_r+0x88>
 80029fc:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <_puts_r+0xd4>)
 80029fe:	429c      	cmp	r4, r3
 8002a00:	d101      	bne.n	8002a06 <_puts_r+0x6e>
 8002a02:	68ac      	ldr	r4, [r5, #8]
 8002a04:	e7da      	b.n	80029bc <_puts_r+0x24>
 8002a06:	4b1a      	ldr	r3, [pc, #104]	; (8002a70 <_puts_r+0xd8>)
 8002a08:	429c      	cmp	r4, r3
 8002a0a:	bf08      	it	eq
 8002a0c:	68ec      	ldreq	r4, [r5, #12]
 8002a0e:	e7d5      	b.n	80029bc <_puts_r+0x24>
 8002a10:	4621      	mov	r1, r4
 8002a12:	4628      	mov	r0, r5
 8002a14:	f000 f8ae 	bl	8002b74 <__swsetup_r>
 8002a18:	2800      	cmp	r0, #0
 8002a1a:	d0dd      	beq.n	80029d8 <_puts_r+0x40>
 8002a1c:	f04f 35ff 	mov.w	r5, #4294967295
 8002a20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a22:	07da      	lsls	r2, r3, #31
 8002a24:	d405      	bmi.n	8002a32 <_puts_r+0x9a>
 8002a26:	89a3      	ldrh	r3, [r4, #12]
 8002a28:	059b      	lsls	r3, r3, #22
 8002a2a:	d402      	bmi.n	8002a32 <_puts_r+0x9a>
 8002a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a2e:	f000 fac4 	bl	8002fba <__retarget_lock_release_recursive>
 8002a32:	4628      	mov	r0, r5
 8002a34:	bd70      	pop	{r4, r5, r6, pc}
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	da04      	bge.n	8002a44 <_puts_r+0xac>
 8002a3a:	69a2      	ldr	r2, [r4, #24]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	dc06      	bgt.n	8002a4e <_puts_r+0xb6>
 8002a40:	290a      	cmp	r1, #10
 8002a42:	d004      	beq.n	8002a4e <_puts_r+0xb6>
 8002a44:	6823      	ldr	r3, [r4, #0]
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	6022      	str	r2, [r4, #0]
 8002a4a:	7019      	strb	r1, [r3, #0]
 8002a4c:	e7c5      	b.n	80029da <_puts_r+0x42>
 8002a4e:	4622      	mov	r2, r4
 8002a50:	4628      	mov	r0, r5
 8002a52:	f000 f83d 	bl	8002ad0 <__swbuf_r>
 8002a56:	3001      	adds	r0, #1
 8002a58:	d1bf      	bne.n	80029da <_puts_r+0x42>
 8002a5a:	e7df      	b.n	8002a1c <_puts_r+0x84>
 8002a5c:	250a      	movs	r5, #10
 8002a5e:	6823      	ldr	r3, [r4, #0]
 8002a60:	1c5a      	adds	r2, r3, #1
 8002a62:	6022      	str	r2, [r4, #0]
 8002a64:	701d      	strb	r5, [r3, #0]
 8002a66:	e7db      	b.n	8002a20 <_puts_r+0x88>
 8002a68:	08003e38 	.word	0x08003e38
 8002a6c:	08003e58 	.word	0x08003e58
 8002a70:	08003e18 	.word	0x08003e18

08002a74 <puts>:
 8002a74:	4b02      	ldr	r3, [pc, #8]	; (8002a80 <puts+0xc>)
 8002a76:	4601      	mov	r1, r0
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	f7ff bf8d 	b.w	8002998 <_puts_r>
 8002a7e:	bf00      	nop
 8002a80:	2000000c 	.word	0x2000000c

08002a84 <_sbrk_r>:
 8002a84:	b538      	push	{r3, r4, r5, lr}
 8002a86:	2300      	movs	r3, #0
 8002a88:	4d05      	ldr	r5, [pc, #20]	; (8002aa0 <_sbrk_r+0x1c>)
 8002a8a:	4604      	mov	r4, r0
 8002a8c:	4608      	mov	r0, r1
 8002a8e:	602b      	str	r3, [r5, #0]
 8002a90:	f7fe f800 	bl	8000a94 <_sbrk>
 8002a94:	1c43      	adds	r3, r0, #1
 8002a96:	d102      	bne.n	8002a9e <_sbrk_r+0x1a>
 8002a98:	682b      	ldr	r3, [r5, #0]
 8002a9a:	b103      	cbz	r3, 8002a9e <_sbrk_r+0x1a>
 8002a9c:	6023      	str	r3, [r4, #0]
 8002a9e:	bd38      	pop	{r3, r4, r5, pc}
 8002aa0:	20000174 	.word	0x20000174

08002aa4 <viprintf>:
 8002aa4:	4b09      	ldr	r3, [pc, #36]	; (8002acc <viprintf+0x28>)
 8002aa6:	b570      	push	{r4, r5, r6, lr}
 8002aa8:	681c      	ldr	r4, [r3, #0]
 8002aaa:	4605      	mov	r5, r0
 8002aac:	460e      	mov	r6, r1
 8002aae:	b124      	cbz	r4, 8002aba <viprintf+0x16>
 8002ab0:	69a3      	ldr	r3, [r4, #24]
 8002ab2:	b913      	cbnz	r3, 8002aba <viprintf+0x16>
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	f000 f9e1 	bl	8002e7c <__sinit>
 8002aba:	4633      	mov	r3, r6
 8002abc:	462a      	mov	r2, r5
 8002abe:	4620      	mov	r0, r4
 8002ac0:	68a1      	ldr	r1, [r4, #8]
 8002ac2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002ac6:	f000 bb13 	b.w	80030f0 <_vfiprintf_r>
 8002aca:	bf00      	nop
 8002acc:	2000000c 	.word	0x2000000c

08002ad0 <__swbuf_r>:
 8002ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad2:	460e      	mov	r6, r1
 8002ad4:	4614      	mov	r4, r2
 8002ad6:	4605      	mov	r5, r0
 8002ad8:	b118      	cbz	r0, 8002ae2 <__swbuf_r+0x12>
 8002ada:	6983      	ldr	r3, [r0, #24]
 8002adc:	b90b      	cbnz	r3, 8002ae2 <__swbuf_r+0x12>
 8002ade:	f000 f9cd 	bl	8002e7c <__sinit>
 8002ae2:	4b21      	ldr	r3, [pc, #132]	; (8002b68 <__swbuf_r+0x98>)
 8002ae4:	429c      	cmp	r4, r3
 8002ae6:	d12b      	bne.n	8002b40 <__swbuf_r+0x70>
 8002ae8:	686c      	ldr	r4, [r5, #4]
 8002aea:	69a3      	ldr	r3, [r4, #24]
 8002aec:	60a3      	str	r3, [r4, #8]
 8002aee:	89a3      	ldrh	r3, [r4, #12]
 8002af0:	071a      	lsls	r2, r3, #28
 8002af2:	d52f      	bpl.n	8002b54 <__swbuf_r+0x84>
 8002af4:	6923      	ldr	r3, [r4, #16]
 8002af6:	b36b      	cbz	r3, 8002b54 <__swbuf_r+0x84>
 8002af8:	6923      	ldr	r3, [r4, #16]
 8002afa:	6820      	ldr	r0, [r4, #0]
 8002afc:	b2f6      	uxtb	r6, r6
 8002afe:	1ac0      	subs	r0, r0, r3
 8002b00:	6963      	ldr	r3, [r4, #20]
 8002b02:	4637      	mov	r7, r6
 8002b04:	4283      	cmp	r3, r0
 8002b06:	dc04      	bgt.n	8002b12 <__swbuf_r+0x42>
 8002b08:	4621      	mov	r1, r4
 8002b0a:	4628      	mov	r0, r5
 8002b0c:	f000 f922 	bl	8002d54 <_fflush_r>
 8002b10:	bb30      	cbnz	r0, 8002b60 <__swbuf_r+0x90>
 8002b12:	68a3      	ldr	r3, [r4, #8]
 8002b14:	3001      	adds	r0, #1
 8002b16:	3b01      	subs	r3, #1
 8002b18:	60a3      	str	r3, [r4, #8]
 8002b1a:	6823      	ldr	r3, [r4, #0]
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	6022      	str	r2, [r4, #0]
 8002b20:	701e      	strb	r6, [r3, #0]
 8002b22:	6963      	ldr	r3, [r4, #20]
 8002b24:	4283      	cmp	r3, r0
 8002b26:	d004      	beq.n	8002b32 <__swbuf_r+0x62>
 8002b28:	89a3      	ldrh	r3, [r4, #12]
 8002b2a:	07db      	lsls	r3, r3, #31
 8002b2c:	d506      	bpl.n	8002b3c <__swbuf_r+0x6c>
 8002b2e:	2e0a      	cmp	r6, #10
 8002b30:	d104      	bne.n	8002b3c <__swbuf_r+0x6c>
 8002b32:	4621      	mov	r1, r4
 8002b34:	4628      	mov	r0, r5
 8002b36:	f000 f90d 	bl	8002d54 <_fflush_r>
 8002b3a:	b988      	cbnz	r0, 8002b60 <__swbuf_r+0x90>
 8002b3c:	4638      	mov	r0, r7
 8002b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b40:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <__swbuf_r+0x9c>)
 8002b42:	429c      	cmp	r4, r3
 8002b44:	d101      	bne.n	8002b4a <__swbuf_r+0x7a>
 8002b46:	68ac      	ldr	r4, [r5, #8]
 8002b48:	e7cf      	b.n	8002aea <__swbuf_r+0x1a>
 8002b4a:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <__swbuf_r+0xa0>)
 8002b4c:	429c      	cmp	r4, r3
 8002b4e:	bf08      	it	eq
 8002b50:	68ec      	ldreq	r4, [r5, #12]
 8002b52:	e7ca      	b.n	8002aea <__swbuf_r+0x1a>
 8002b54:	4621      	mov	r1, r4
 8002b56:	4628      	mov	r0, r5
 8002b58:	f000 f80c 	bl	8002b74 <__swsetup_r>
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	d0cb      	beq.n	8002af8 <__swbuf_r+0x28>
 8002b60:	f04f 37ff 	mov.w	r7, #4294967295
 8002b64:	e7ea      	b.n	8002b3c <__swbuf_r+0x6c>
 8002b66:	bf00      	nop
 8002b68:	08003e38 	.word	0x08003e38
 8002b6c:	08003e58 	.word	0x08003e58
 8002b70:	08003e18 	.word	0x08003e18

08002b74 <__swsetup_r>:
 8002b74:	4b32      	ldr	r3, [pc, #200]	; (8002c40 <__swsetup_r+0xcc>)
 8002b76:	b570      	push	{r4, r5, r6, lr}
 8002b78:	681d      	ldr	r5, [r3, #0]
 8002b7a:	4606      	mov	r6, r0
 8002b7c:	460c      	mov	r4, r1
 8002b7e:	b125      	cbz	r5, 8002b8a <__swsetup_r+0x16>
 8002b80:	69ab      	ldr	r3, [r5, #24]
 8002b82:	b913      	cbnz	r3, 8002b8a <__swsetup_r+0x16>
 8002b84:	4628      	mov	r0, r5
 8002b86:	f000 f979 	bl	8002e7c <__sinit>
 8002b8a:	4b2e      	ldr	r3, [pc, #184]	; (8002c44 <__swsetup_r+0xd0>)
 8002b8c:	429c      	cmp	r4, r3
 8002b8e:	d10f      	bne.n	8002bb0 <__swsetup_r+0x3c>
 8002b90:	686c      	ldr	r4, [r5, #4]
 8002b92:	89a3      	ldrh	r3, [r4, #12]
 8002b94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b98:	0719      	lsls	r1, r3, #28
 8002b9a:	d42c      	bmi.n	8002bf6 <__swsetup_r+0x82>
 8002b9c:	06dd      	lsls	r5, r3, #27
 8002b9e:	d411      	bmi.n	8002bc4 <__swsetup_r+0x50>
 8002ba0:	2309      	movs	r3, #9
 8002ba2:	6033      	str	r3, [r6, #0]
 8002ba4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bac:	81a3      	strh	r3, [r4, #12]
 8002bae:	e03e      	b.n	8002c2e <__swsetup_r+0xba>
 8002bb0:	4b25      	ldr	r3, [pc, #148]	; (8002c48 <__swsetup_r+0xd4>)
 8002bb2:	429c      	cmp	r4, r3
 8002bb4:	d101      	bne.n	8002bba <__swsetup_r+0x46>
 8002bb6:	68ac      	ldr	r4, [r5, #8]
 8002bb8:	e7eb      	b.n	8002b92 <__swsetup_r+0x1e>
 8002bba:	4b24      	ldr	r3, [pc, #144]	; (8002c4c <__swsetup_r+0xd8>)
 8002bbc:	429c      	cmp	r4, r3
 8002bbe:	bf08      	it	eq
 8002bc0:	68ec      	ldreq	r4, [r5, #12]
 8002bc2:	e7e6      	b.n	8002b92 <__swsetup_r+0x1e>
 8002bc4:	0758      	lsls	r0, r3, #29
 8002bc6:	d512      	bpl.n	8002bee <__swsetup_r+0x7a>
 8002bc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002bca:	b141      	cbz	r1, 8002bde <__swsetup_r+0x6a>
 8002bcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002bd0:	4299      	cmp	r1, r3
 8002bd2:	d002      	beq.n	8002bda <__swsetup_r+0x66>
 8002bd4:	4630      	mov	r0, r6
 8002bd6:	f7ff fdeb 	bl	80027b0 <_free_r>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	6363      	str	r3, [r4, #52]	; 0x34
 8002bde:	89a3      	ldrh	r3, [r4, #12]
 8002be0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002be4:	81a3      	strh	r3, [r4, #12]
 8002be6:	2300      	movs	r3, #0
 8002be8:	6063      	str	r3, [r4, #4]
 8002bea:	6923      	ldr	r3, [r4, #16]
 8002bec:	6023      	str	r3, [r4, #0]
 8002bee:	89a3      	ldrh	r3, [r4, #12]
 8002bf0:	f043 0308 	orr.w	r3, r3, #8
 8002bf4:	81a3      	strh	r3, [r4, #12]
 8002bf6:	6923      	ldr	r3, [r4, #16]
 8002bf8:	b94b      	cbnz	r3, 8002c0e <__swsetup_r+0x9a>
 8002bfa:	89a3      	ldrh	r3, [r4, #12]
 8002bfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c04:	d003      	beq.n	8002c0e <__swsetup_r+0x9a>
 8002c06:	4621      	mov	r1, r4
 8002c08:	4630      	mov	r0, r6
 8002c0a:	f000 f9fd 	bl	8003008 <__smakebuf_r>
 8002c0e:	89a0      	ldrh	r0, [r4, #12]
 8002c10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002c14:	f010 0301 	ands.w	r3, r0, #1
 8002c18:	d00a      	beq.n	8002c30 <__swsetup_r+0xbc>
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60a3      	str	r3, [r4, #8]
 8002c1e:	6963      	ldr	r3, [r4, #20]
 8002c20:	425b      	negs	r3, r3
 8002c22:	61a3      	str	r3, [r4, #24]
 8002c24:	6923      	ldr	r3, [r4, #16]
 8002c26:	b943      	cbnz	r3, 8002c3a <__swsetup_r+0xc6>
 8002c28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002c2c:	d1ba      	bne.n	8002ba4 <__swsetup_r+0x30>
 8002c2e:	bd70      	pop	{r4, r5, r6, pc}
 8002c30:	0781      	lsls	r1, r0, #30
 8002c32:	bf58      	it	pl
 8002c34:	6963      	ldrpl	r3, [r4, #20]
 8002c36:	60a3      	str	r3, [r4, #8]
 8002c38:	e7f4      	b.n	8002c24 <__swsetup_r+0xb0>
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	e7f7      	b.n	8002c2e <__swsetup_r+0xba>
 8002c3e:	bf00      	nop
 8002c40:	2000000c 	.word	0x2000000c
 8002c44:	08003e38 	.word	0x08003e38
 8002c48:	08003e58 	.word	0x08003e58
 8002c4c:	08003e18 	.word	0x08003e18

08002c50 <__sflush_r>:
 8002c50:	898a      	ldrh	r2, [r1, #12]
 8002c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c54:	4605      	mov	r5, r0
 8002c56:	0710      	lsls	r0, r2, #28
 8002c58:	460c      	mov	r4, r1
 8002c5a:	d457      	bmi.n	8002d0c <__sflush_r+0xbc>
 8002c5c:	684b      	ldr	r3, [r1, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	dc04      	bgt.n	8002c6c <__sflush_r+0x1c>
 8002c62:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	dc01      	bgt.n	8002c6c <__sflush_r+0x1c>
 8002c68:	2000      	movs	r0, #0
 8002c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c6e:	2e00      	cmp	r6, #0
 8002c70:	d0fa      	beq.n	8002c68 <__sflush_r+0x18>
 8002c72:	2300      	movs	r3, #0
 8002c74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002c78:	682f      	ldr	r7, [r5, #0]
 8002c7a:	602b      	str	r3, [r5, #0]
 8002c7c:	d032      	beq.n	8002ce4 <__sflush_r+0x94>
 8002c7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002c80:	89a3      	ldrh	r3, [r4, #12]
 8002c82:	075a      	lsls	r2, r3, #29
 8002c84:	d505      	bpl.n	8002c92 <__sflush_r+0x42>
 8002c86:	6863      	ldr	r3, [r4, #4]
 8002c88:	1ac0      	subs	r0, r0, r3
 8002c8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c8c:	b10b      	cbz	r3, 8002c92 <__sflush_r+0x42>
 8002c8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c90:	1ac0      	subs	r0, r0, r3
 8002c92:	2300      	movs	r3, #0
 8002c94:	4602      	mov	r2, r0
 8002c96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c98:	4628      	mov	r0, r5
 8002c9a:	6a21      	ldr	r1, [r4, #32]
 8002c9c:	47b0      	blx	r6
 8002c9e:	1c43      	adds	r3, r0, #1
 8002ca0:	89a3      	ldrh	r3, [r4, #12]
 8002ca2:	d106      	bne.n	8002cb2 <__sflush_r+0x62>
 8002ca4:	6829      	ldr	r1, [r5, #0]
 8002ca6:	291d      	cmp	r1, #29
 8002ca8:	d82c      	bhi.n	8002d04 <__sflush_r+0xb4>
 8002caa:	4a29      	ldr	r2, [pc, #164]	; (8002d50 <__sflush_r+0x100>)
 8002cac:	40ca      	lsrs	r2, r1
 8002cae:	07d6      	lsls	r6, r2, #31
 8002cb0:	d528      	bpl.n	8002d04 <__sflush_r+0xb4>
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	6062      	str	r2, [r4, #4]
 8002cb6:	6922      	ldr	r2, [r4, #16]
 8002cb8:	04d9      	lsls	r1, r3, #19
 8002cba:	6022      	str	r2, [r4, #0]
 8002cbc:	d504      	bpl.n	8002cc8 <__sflush_r+0x78>
 8002cbe:	1c42      	adds	r2, r0, #1
 8002cc0:	d101      	bne.n	8002cc6 <__sflush_r+0x76>
 8002cc2:	682b      	ldr	r3, [r5, #0]
 8002cc4:	b903      	cbnz	r3, 8002cc8 <__sflush_r+0x78>
 8002cc6:	6560      	str	r0, [r4, #84]	; 0x54
 8002cc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002cca:	602f      	str	r7, [r5, #0]
 8002ccc:	2900      	cmp	r1, #0
 8002cce:	d0cb      	beq.n	8002c68 <__sflush_r+0x18>
 8002cd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002cd4:	4299      	cmp	r1, r3
 8002cd6:	d002      	beq.n	8002cde <__sflush_r+0x8e>
 8002cd8:	4628      	mov	r0, r5
 8002cda:	f7ff fd69 	bl	80027b0 <_free_r>
 8002cde:	2000      	movs	r0, #0
 8002ce0:	6360      	str	r0, [r4, #52]	; 0x34
 8002ce2:	e7c2      	b.n	8002c6a <__sflush_r+0x1a>
 8002ce4:	6a21      	ldr	r1, [r4, #32]
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	4628      	mov	r0, r5
 8002cea:	47b0      	blx	r6
 8002cec:	1c41      	adds	r1, r0, #1
 8002cee:	d1c7      	bne.n	8002c80 <__sflush_r+0x30>
 8002cf0:	682b      	ldr	r3, [r5, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0c4      	beq.n	8002c80 <__sflush_r+0x30>
 8002cf6:	2b1d      	cmp	r3, #29
 8002cf8:	d001      	beq.n	8002cfe <__sflush_r+0xae>
 8002cfa:	2b16      	cmp	r3, #22
 8002cfc:	d101      	bne.n	8002d02 <__sflush_r+0xb2>
 8002cfe:	602f      	str	r7, [r5, #0]
 8002d00:	e7b2      	b.n	8002c68 <__sflush_r+0x18>
 8002d02:	89a3      	ldrh	r3, [r4, #12]
 8002d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d08:	81a3      	strh	r3, [r4, #12]
 8002d0a:	e7ae      	b.n	8002c6a <__sflush_r+0x1a>
 8002d0c:	690f      	ldr	r7, [r1, #16]
 8002d0e:	2f00      	cmp	r7, #0
 8002d10:	d0aa      	beq.n	8002c68 <__sflush_r+0x18>
 8002d12:	0793      	lsls	r3, r2, #30
 8002d14:	bf18      	it	ne
 8002d16:	2300      	movne	r3, #0
 8002d18:	680e      	ldr	r6, [r1, #0]
 8002d1a:	bf08      	it	eq
 8002d1c:	694b      	ldreq	r3, [r1, #20]
 8002d1e:	1bf6      	subs	r6, r6, r7
 8002d20:	600f      	str	r7, [r1, #0]
 8002d22:	608b      	str	r3, [r1, #8]
 8002d24:	2e00      	cmp	r6, #0
 8002d26:	dd9f      	ble.n	8002c68 <__sflush_r+0x18>
 8002d28:	4633      	mov	r3, r6
 8002d2a:	463a      	mov	r2, r7
 8002d2c:	4628      	mov	r0, r5
 8002d2e:	6a21      	ldr	r1, [r4, #32]
 8002d30:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002d34:	47e0      	blx	ip
 8002d36:	2800      	cmp	r0, #0
 8002d38:	dc06      	bgt.n	8002d48 <__sflush_r+0xf8>
 8002d3a:	89a3      	ldrh	r3, [r4, #12]
 8002d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d44:	81a3      	strh	r3, [r4, #12]
 8002d46:	e790      	b.n	8002c6a <__sflush_r+0x1a>
 8002d48:	4407      	add	r7, r0
 8002d4a:	1a36      	subs	r6, r6, r0
 8002d4c:	e7ea      	b.n	8002d24 <__sflush_r+0xd4>
 8002d4e:	bf00      	nop
 8002d50:	20400001 	.word	0x20400001

08002d54 <_fflush_r>:
 8002d54:	b538      	push	{r3, r4, r5, lr}
 8002d56:	690b      	ldr	r3, [r1, #16]
 8002d58:	4605      	mov	r5, r0
 8002d5a:	460c      	mov	r4, r1
 8002d5c:	b913      	cbnz	r3, 8002d64 <_fflush_r+0x10>
 8002d5e:	2500      	movs	r5, #0
 8002d60:	4628      	mov	r0, r5
 8002d62:	bd38      	pop	{r3, r4, r5, pc}
 8002d64:	b118      	cbz	r0, 8002d6e <_fflush_r+0x1a>
 8002d66:	6983      	ldr	r3, [r0, #24]
 8002d68:	b90b      	cbnz	r3, 8002d6e <_fflush_r+0x1a>
 8002d6a:	f000 f887 	bl	8002e7c <__sinit>
 8002d6e:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <_fflush_r+0x6c>)
 8002d70:	429c      	cmp	r4, r3
 8002d72:	d11b      	bne.n	8002dac <_fflush_r+0x58>
 8002d74:	686c      	ldr	r4, [r5, #4]
 8002d76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0ef      	beq.n	8002d5e <_fflush_r+0xa>
 8002d7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002d80:	07d0      	lsls	r0, r2, #31
 8002d82:	d404      	bmi.n	8002d8e <_fflush_r+0x3a>
 8002d84:	0599      	lsls	r1, r3, #22
 8002d86:	d402      	bmi.n	8002d8e <_fflush_r+0x3a>
 8002d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d8a:	f000 f915 	bl	8002fb8 <__retarget_lock_acquire_recursive>
 8002d8e:	4628      	mov	r0, r5
 8002d90:	4621      	mov	r1, r4
 8002d92:	f7ff ff5d 	bl	8002c50 <__sflush_r>
 8002d96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d98:	4605      	mov	r5, r0
 8002d9a:	07da      	lsls	r2, r3, #31
 8002d9c:	d4e0      	bmi.n	8002d60 <_fflush_r+0xc>
 8002d9e:	89a3      	ldrh	r3, [r4, #12]
 8002da0:	059b      	lsls	r3, r3, #22
 8002da2:	d4dd      	bmi.n	8002d60 <_fflush_r+0xc>
 8002da4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002da6:	f000 f908 	bl	8002fba <__retarget_lock_release_recursive>
 8002daa:	e7d9      	b.n	8002d60 <_fflush_r+0xc>
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <_fflush_r+0x70>)
 8002dae:	429c      	cmp	r4, r3
 8002db0:	d101      	bne.n	8002db6 <_fflush_r+0x62>
 8002db2:	68ac      	ldr	r4, [r5, #8]
 8002db4:	e7df      	b.n	8002d76 <_fflush_r+0x22>
 8002db6:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <_fflush_r+0x74>)
 8002db8:	429c      	cmp	r4, r3
 8002dba:	bf08      	it	eq
 8002dbc:	68ec      	ldreq	r4, [r5, #12]
 8002dbe:	e7da      	b.n	8002d76 <_fflush_r+0x22>
 8002dc0:	08003e38 	.word	0x08003e38
 8002dc4:	08003e58 	.word	0x08003e58
 8002dc8:	08003e18 	.word	0x08003e18

08002dcc <std>:
 8002dcc:	2300      	movs	r3, #0
 8002dce:	b510      	push	{r4, lr}
 8002dd0:	4604      	mov	r4, r0
 8002dd2:	e9c0 3300 	strd	r3, r3, [r0]
 8002dd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002dda:	6083      	str	r3, [r0, #8]
 8002ddc:	8181      	strh	r1, [r0, #12]
 8002dde:	6643      	str	r3, [r0, #100]	; 0x64
 8002de0:	81c2      	strh	r2, [r0, #14]
 8002de2:	6183      	str	r3, [r0, #24]
 8002de4:	4619      	mov	r1, r3
 8002de6:	2208      	movs	r2, #8
 8002de8:	305c      	adds	r0, #92	; 0x5c
 8002dea:	f7ff fcd9 	bl	80027a0 <memset>
 8002dee:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <std+0x38>)
 8002df0:	6224      	str	r4, [r4, #32]
 8002df2:	6263      	str	r3, [r4, #36]	; 0x24
 8002df4:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <std+0x3c>)
 8002df6:	62a3      	str	r3, [r4, #40]	; 0x28
 8002df8:	4b04      	ldr	r3, [pc, #16]	; (8002e0c <std+0x40>)
 8002dfa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002dfc:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <std+0x44>)
 8002dfe:	6323      	str	r3, [r4, #48]	; 0x30
 8002e00:	bd10      	pop	{r4, pc}
 8002e02:	bf00      	nop
 8002e04:	0800367d 	.word	0x0800367d
 8002e08:	0800369f 	.word	0x0800369f
 8002e0c:	080036d7 	.word	0x080036d7
 8002e10:	080036fb 	.word	0x080036fb

08002e14 <_cleanup_r>:
 8002e14:	4901      	ldr	r1, [pc, #4]	; (8002e1c <_cleanup_r+0x8>)
 8002e16:	f000 b8af 	b.w	8002f78 <_fwalk_reent>
 8002e1a:	bf00      	nop
 8002e1c:	08002d55 	.word	0x08002d55

08002e20 <__sfmoreglue>:
 8002e20:	2268      	movs	r2, #104	; 0x68
 8002e22:	b570      	push	{r4, r5, r6, lr}
 8002e24:	1e4d      	subs	r5, r1, #1
 8002e26:	4355      	muls	r5, r2
 8002e28:	460e      	mov	r6, r1
 8002e2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002e2e:	f7ff fd27 	bl	8002880 <_malloc_r>
 8002e32:	4604      	mov	r4, r0
 8002e34:	b140      	cbz	r0, 8002e48 <__sfmoreglue+0x28>
 8002e36:	2100      	movs	r1, #0
 8002e38:	e9c0 1600 	strd	r1, r6, [r0]
 8002e3c:	300c      	adds	r0, #12
 8002e3e:	60a0      	str	r0, [r4, #8]
 8002e40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002e44:	f7ff fcac 	bl	80027a0 <memset>
 8002e48:	4620      	mov	r0, r4
 8002e4a:	bd70      	pop	{r4, r5, r6, pc}

08002e4c <__sfp_lock_acquire>:
 8002e4c:	4801      	ldr	r0, [pc, #4]	; (8002e54 <__sfp_lock_acquire+0x8>)
 8002e4e:	f000 b8b3 	b.w	8002fb8 <__retarget_lock_acquire_recursive>
 8002e52:	bf00      	nop
 8002e54:	20000171 	.word	0x20000171

08002e58 <__sfp_lock_release>:
 8002e58:	4801      	ldr	r0, [pc, #4]	; (8002e60 <__sfp_lock_release+0x8>)
 8002e5a:	f000 b8ae 	b.w	8002fba <__retarget_lock_release_recursive>
 8002e5e:	bf00      	nop
 8002e60:	20000171 	.word	0x20000171

08002e64 <__sinit_lock_acquire>:
 8002e64:	4801      	ldr	r0, [pc, #4]	; (8002e6c <__sinit_lock_acquire+0x8>)
 8002e66:	f000 b8a7 	b.w	8002fb8 <__retarget_lock_acquire_recursive>
 8002e6a:	bf00      	nop
 8002e6c:	20000172 	.word	0x20000172

08002e70 <__sinit_lock_release>:
 8002e70:	4801      	ldr	r0, [pc, #4]	; (8002e78 <__sinit_lock_release+0x8>)
 8002e72:	f000 b8a2 	b.w	8002fba <__retarget_lock_release_recursive>
 8002e76:	bf00      	nop
 8002e78:	20000172 	.word	0x20000172

08002e7c <__sinit>:
 8002e7c:	b510      	push	{r4, lr}
 8002e7e:	4604      	mov	r4, r0
 8002e80:	f7ff fff0 	bl	8002e64 <__sinit_lock_acquire>
 8002e84:	69a3      	ldr	r3, [r4, #24]
 8002e86:	b11b      	cbz	r3, 8002e90 <__sinit+0x14>
 8002e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e8c:	f7ff bff0 	b.w	8002e70 <__sinit_lock_release>
 8002e90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002e94:	6523      	str	r3, [r4, #80]	; 0x50
 8002e96:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <__sinit+0x68>)
 8002e98:	4a13      	ldr	r2, [pc, #76]	; (8002ee8 <__sinit+0x6c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8002e9e:	42a3      	cmp	r3, r4
 8002ea0:	bf08      	it	eq
 8002ea2:	2301      	moveq	r3, #1
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	bf08      	it	eq
 8002ea8:	61a3      	streq	r3, [r4, #24]
 8002eaa:	f000 f81f 	bl	8002eec <__sfp>
 8002eae:	6060      	str	r0, [r4, #4]
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	f000 f81b 	bl	8002eec <__sfp>
 8002eb6:	60a0      	str	r0, [r4, #8]
 8002eb8:	4620      	mov	r0, r4
 8002eba:	f000 f817 	bl	8002eec <__sfp>
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2104      	movs	r1, #4
 8002ec2:	60e0      	str	r0, [r4, #12]
 8002ec4:	6860      	ldr	r0, [r4, #4]
 8002ec6:	f7ff ff81 	bl	8002dcc <std>
 8002eca:	2201      	movs	r2, #1
 8002ecc:	2109      	movs	r1, #9
 8002ece:	68a0      	ldr	r0, [r4, #8]
 8002ed0:	f7ff ff7c 	bl	8002dcc <std>
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	2112      	movs	r1, #18
 8002ed8:	68e0      	ldr	r0, [r4, #12]
 8002eda:	f7ff ff77 	bl	8002dcc <std>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	61a3      	str	r3, [r4, #24]
 8002ee2:	e7d1      	b.n	8002e88 <__sinit+0xc>
 8002ee4:	08003e14 	.word	0x08003e14
 8002ee8:	08002e15 	.word	0x08002e15

08002eec <__sfp>:
 8002eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eee:	4607      	mov	r7, r0
 8002ef0:	f7ff ffac 	bl	8002e4c <__sfp_lock_acquire>
 8002ef4:	4b1e      	ldr	r3, [pc, #120]	; (8002f70 <__sfp+0x84>)
 8002ef6:	681e      	ldr	r6, [r3, #0]
 8002ef8:	69b3      	ldr	r3, [r6, #24]
 8002efa:	b913      	cbnz	r3, 8002f02 <__sfp+0x16>
 8002efc:	4630      	mov	r0, r6
 8002efe:	f7ff ffbd 	bl	8002e7c <__sinit>
 8002f02:	3648      	adds	r6, #72	; 0x48
 8002f04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	d503      	bpl.n	8002f14 <__sfp+0x28>
 8002f0c:	6833      	ldr	r3, [r6, #0]
 8002f0e:	b30b      	cbz	r3, 8002f54 <__sfp+0x68>
 8002f10:	6836      	ldr	r6, [r6, #0]
 8002f12:	e7f7      	b.n	8002f04 <__sfp+0x18>
 8002f14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002f18:	b9d5      	cbnz	r5, 8002f50 <__sfp+0x64>
 8002f1a:	4b16      	ldr	r3, [pc, #88]	; (8002f74 <__sfp+0x88>)
 8002f1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002f20:	60e3      	str	r3, [r4, #12]
 8002f22:	6665      	str	r5, [r4, #100]	; 0x64
 8002f24:	f000 f847 	bl	8002fb6 <__retarget_lock_init_recursive>
 8002f28:	f7ff ff96 	bl	8002e58 <__sfp_lock_release>
 8002f2c:	2208      	movs	r2, #8
 8002f2e:	4629      	mov	r1, r5
 8002f30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002f34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002f38:	6025      	str	r5, [r4, #0]
 8002f3a:	61a5      	str	r5, [r4, #24]
 8002f3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002f40:	f7ff fc2e 	bl	80027a0 <memset>
 8002f44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002f48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f50:	3468      	adds	r4, #104	; 0x68
 8002f52:	e7d9      	b.n	8002f08 <__sfp+0x1c>
 8002f54:	2104      	movs	r1, #4
 8002f56:	4638      	mov	r0, r7
 8002f58:	f7ff ff62 	bl	8002e20 <__sfmoreglue>
 8002f5c:	4604      	mov	r4, r0
 8002f5e:	6030      	str	r0, [r6, #0]
 8002f60:	2800      	cmp	r0, #0
 8002f62:	d1d5      	bne.n	8002f10 <__sfp+0x24>
 8002f64:	f7ff ff78 	bl	8002e58 <__sfp_lock_release>
 8002f68:	230c      	movs	r3, #12
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	e7ee      	b.n	8002f4c <__sfp+0x60>
 8002f6e:	bf00      	nop
 8002f70:	08003e14 	.word	0x08003e14
 8002f74:	ffff0001 	.word	0xffff0001

08002f78 <_fwalk_reent>:
 8002f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f7c:	4606      	mov	r6, r0
 8002f7e:	4688      	mov	r8, r1
 8002f80:	2700      	movs	r7, #0
 8002f82:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002f86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002f8a:	f1b9 0901 	subs.w	r9, r9, #1
 8002f8e:	d505      	bpl.n	8002f9c <_fwalk_reent+0x24>
 8002f90:	6824      	ldr	r4, [r4, #0]
 8002f92:	2c00      	cmp	r4, #0
 8002f94:	d1f7      	bne.n	8002f86 <_fwalk_reent+0xe>
 8002f96:	4638      	mov	r0, r7
 8002f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f9c:	89ab      	ldrh	r3, [r5, #12]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d907      	bls.n	8002fb2 <_fwalk_reent+0x3a>
 8002fa2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	d003      	beq.n	8002fb2 <_fwalk_reent+0x3a>
 8002faa:	4629      	mov	r1, r5
 8002fac:	4630      	mov	r0, r6
 8002fae:	47c0      	blx	r8
 8002fb0:	4307      	orrs	r7, r0
 8002fb2:	3568      	adds	r5, #104	; 0x68
 8002fb4:	e7e9      	b.n	8002f8a <_fwalk_reent+0x12>

08002fb6 <__retarget_lock_init_recursive>:
 8002fb6:	4770      	bx	lr

08002fb8 <__retarget_lock_acquire_recursive>:
 8002fb8:	4770      	bx	lr

08002fba <__retarget_lock_release_recursive>:
 8002fba:	4770      	bx	lr

08002fbc <__swhatbuf_r>:
 8002fbc:	b570      	push	{r4, r5, r6, lr}
 8002fbe:	460e      	mov	r6, r1
 8002fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fc4:	4614      	mov	r4, r2
 8002fc6:	2900      	cmp	r1, #0
 8002fc8:	461d      	mov	r5, r3
 8002fca:	b096      	sub	sp, #88	; 0x58
 8002fcc:	da08      	bge.n	8002fe0 <__swhatbuf_r+0x24>
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002fd4:	602a      	str	r2, [r5, #0]
 8002fd6:	061a      	lsls	r2, r3, #24
 8002fd8:	d410      	bmi.n	8002ffc <__swhatbuf_r+0x40>
 8002fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fde:	e00e      	b.n	8002ffe <__swhatbuf_r+0x42>
 8002fe0:	466a      	mov	r2, sp
 8002fe2:	f000 fbb1 	bl	8003748 <_fstat_r>
 8002fe6:	2800      	cmp	r0, #0
 8002fe8:	dbf1      	blt.n	8002fce <__swhatbuf_r+0x12>
 8002fea:	9a01      	ldr	r2, [sp, #4]
 8002fec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002ff0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002ff4:	425a      	negs	r2, r3
 8002ff6:	415a      	adcs	r2, r3
 8002ff8:	602a      	str	r2, [r5, #0]
 8002ffa:	e7ee      	b.n	8002fda <__swhatbuf_r+0x1e>
 8002ffc:	2340      	movs	r3, #64	; 0x40
 8002ffe:	2000      	movs	r0, #0
 8003000:	6023      	str	r3, [r4, #0]
 8003002:	b016      	add	sp, #88	; 0x58
 8003004:	bd70      	pop	{r4, r5, r6, pc}
	...

08003008 <__smakebuf_r>:
 8003008:	898b      	ldrh	r3, [r1, #12]
 800300a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800300c:	079d      	lsls	r5, r3, #30
 800300e:	4606      	mov	r6, r0
 8003010:	460c      	mov	r4, r1
 8003012:	d507      	bpl.n	8003024 <__smakebuf_r+0x1c>
 8003014:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003018:	6023      	str	r3, [r4, #0]
 800301a:	6123      	str	r3, [r4, #16]
 800301c:	2301      	movs	r3, #1
 800301e:	6163      	str	r3, [r4, #20]
 8003020:	b002      	add	sp, #8
 8003022:	bd70      	pop	{r4, r5, r6, pc}
 8003024:	466a      	mov	r2, sp
 8003026:	ab01      	add	r3, sp, #4
 8003028:	f7ff ffc8 	bl	8002fbc <__swhatbuf_r>
 800302c:	9900      	ldr	r1, [sp, #0]
 800302e:	4605      	mov	r5, r0
 8003030:	4630      	mov	r0, r6
 8003032:	f7ff fc25 	bl	8002880 <_malloc_r>
 8003036:	b948      	cbnz	r0, 800304c <__smakebuf_r+0x44>
 8003038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800303c:	059a      	lsls	r2, r3, #22
 800303e:	d4ef      	bmi.n	8003020 <__smakebuf_r+0x18>
 8003040:	f023 0303 	bic.w	r3, r3, #3
 8003044:	f043 0302 	orr.w	r3, r3, #2
 8003048:	81a3      	strh	r3, [r4, #12]
 800304a:	e7e3      	b.n	8003014 <__smakebuf_r+0xc>
 800304c:	4b0d      	ldr	r3, [pc, #52]	; (8003084 <__smakebuf_r+0x7c>)
 800304e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003050:	89a3      	ldrh	r3, [r4, #12]
 8003052:	6020      	str	r0, [r4, #0]
 8003054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003058:	81a3      	strh	r3, [r4, #12]
 800305a:	9b00      	ldr	r3, [sp, #0]
 800305c:	6120      	str	r0, [r4, #16]
 800305e:	6163      	str	r3, [r4, #20]
 8003060:	9b01      	ldr	r3, [sp, #4]
 8003062:	b15b      	cbz	r3, 800307c <__smakebuf_r+0x74>
 8003064:	4630      	mov	r0, r6
 8003066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800306a:	f000 fb7f 	bl	800376c <_isatty_r>
 800306e:	b128      	cbz	r0, 800307c <__smakebuf_r+0x74>
 8003070:	89a3      	ldrh	r3, [r4, #12]
 8003072:	f023 0303 	bic.w	r3, r3, #3
 8003076:	f043 0301 	orr.w	r3, r3, #1
 800307a:	81a3      	strh	r3, [r4, #12]
 800307c:	89a0      	ldrh	r0, [r4, #12]
 800307e:	4305      	orrs	r5, r0
 8003080:	81a5      	strh	r5, [r4, #12]
 8003082:	e7cd      	b.n	8003020 <__smakebuf_r+0x18>
 8003084:	08002e15 	.word	0x08002e15

08003088 <__malloc_lock>:
 8003088:	4801      	ldr	r0, [pc, #4]	; (8003090 <__malloc_lock+0x8>)
 800308a:	f7ff bf95 	b.w	8002fb8 <__retarget_lock_acquire_recursive>
 800308e:	bf00      	nop
 8003090:	20000170 	.word	0x20000170

08003094 <__malloc_unlock>:
 8003094:	4801      	ldr	r0, [pc, #4]	; (800309c <__malloc_unlock+0x8>)
 8003096:	f7ff bf90 	b.w	8002fba <__retarget_lock_release_recursive>
 800309a:	bf00      	nop
 800309c:	20000170 	.word	0x20000170

080030a0 <__sfputc_r>:
 80030a0:	6893      	ldr	r3, [r2, #8]
 80030a2:	b410      	push	{r4}
 80030a4:	3b01      	subs	r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	6093      	str	r3, [r2, #8]
 80030aa:	da07      	bge.n	80030bc <__sfputc_r+0x1c>
 80030ac:	6994      	ldr	r4, [r2, #24]
 80030ae:	42a3      	cmp	r3, r4
 80030b0:	db01      	blt.n	80030b6 <__sfputc_r+0x16>
 80030b2:	290a      	cmp	r1, #10
 80030b4:	d102      	bne.n	80030bc <__sfputc_r+0x1c>
 80030b6:	bc10      	pop	{r4}
 80030b8:	f7ff bd0a 	b.w	8002ad0 <__swbuf_r>
 80030bc:	6813      	ldr	r3, [r2, #0]
 80030be:	1c58      	adds	r0, r3, #1
 80030c0:	6010      	str	r0, [r2, #0]
 80030c2:	7019      	strb	r1, [r3, #0]
 80030c4:	4608      	mov	r0, r1
 80030c6:	bc10      	pop	{r4}
 80030c8:	4770      	bx	lr

080030ca <__sfputs_r>:
 80030ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030cc:	4606      	mov	r6, r0
 80030ce:	460f      	mov	r7, r1
 80030d0:	4614      	mov	r4, r2
 80030d2:	18d5      	adds	r5, r2, r3
 80030d4:	42ac      	cmp	r4, r5
 80030d6:	d101      	bne.n	80030dc <__sfputs_r+0x12>
 80030d8:	2000      	movs	r0, #0
 80030da:	e007      	b.n	80030ec <__sfputs_r+0x22>
 80030dc:	463a      	mov	r2, r7
 80030de:	4630      	mov	r0, r6
 80030e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030e4:	f7ff ffdc 	bl	80030a0 <__sfputc_r>
 80030e8:	1c43      	adds	r3, r0, #1
 80030ea:	d1f3      	bne.n	80030d4 <__sfputs_r+0xa>
 80030ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080030f0 <_vfiprintf_r>:
 80030f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030f4:	460d      	mov	r5, r1
 80030f6:	4614      	mov	r4, r2
 80030f8:	4698      	mov	r8, r3
 80030fa:	4606      	mov	r6, r0
 80030fc:	b09d      	sub	sp, #116	; 0x74
 80030fe:	b118      	cbz	r0, 8003108 <_vfiprintf_r+0x18>
 8003100:	6983      	ldr	r3, [r0, #24]
 8003102:	b90b      	cbnz	r3, 8003108 <_vfiprintf_r+0x18>
 8003104:	f7ff feba 	bl	8002e7c <__sinit>
 8003108:	4b89      	ldr	r3, [pc, #548]	; (8003330 <_vfiprintf_r+0x240>)
 800310a:	429d      	cmp	r5, r3
 800310c:	d11b      	bne.n	8003146 <_vfiprintf_r+0x56>
 800310e:	6875      	ldr	r5, [r6, #4]
 8003110:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003112:	07d9      	lsls	r1, r3, #31
 8003114:	d405      	bmi.n	8003122 <_vfiprintf_r+0x32>
 8003116:	89ab      	ldrh	r3, [r5, #12]
 8003118:	059a      	lsls	r2, r3, #22
 800311a:	d402      	bmi.n	8003122 <_vfiprintf_r+0x32>
 800311c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800311e:	f7ff ff4b 	bl	8002fb8 <__retarget_lock_acquire_recursive>
 8003122:	89ab      	ldrh	r3, [r5, #12]
 8003124:	071b      	lsls	r3, r3, #28
 8003126:	d501      	bpl.n	800312c <_vfiprintf_r+0x3c>
 8003128:	692b      	ldr	r3, [r5, #16]
 800312a:	b9eb      	cbnz	r3, 8003168 <_vfiprintf_r+0x78>
 800312c:	4629      	mov	r1, r5
 800312e:	4630      	mov	r0, r6
 8003130:	f7ff fd20 	bl	8002b74 <__swsetup_r>
 8003134:	b1c0      	cbz	r0, 8003168 <_vfiprintf_r+0x78>
 8003136:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003138:	07dc      	lsls	r4, r3, #31
 800313a:	d50e      	bpl.n	800315a <_vfiprintf_r+0x6a>
 800313c:	f04f 30ff 	mov.w	r0, #4294967295
 8003140:	b01d      	add	sp, #116	; 0x74
 8003142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003146:	4b7b      	ldr	r3, [pc, #492]	; (8003334 <_vfiprintf_r+0x244>)
 8003148:	429d      	cmp	r5, r3
 800314a:	d101      	bne.n	8003150 <_vfiprintf_r+0x60>
 800314c:	68b5      	ldr	r5, [r6, #8]
 800314e:	e7df      	b.n	8003110 <_vfiprintf_r+0x20>
 8003150:	4b79      	ldr	r3, [pc, #484]	; (8003338 <_vfiprintf_r+0x248>)
 8003152:	429d      	cmp	r5, r3
 8003154:	bf08      	it	eq
 8003156:	68f5      	ldreq	r5, [r6, #12]
 8003158:	e7da      	b.n	8003110 <_vfiprintf_r+0x20>
 800315a:	89ab      	ldrh	r3, [r5, #12]
 800315c:	0598      	lsls	r0, r3, #22
 800315e:	d4ed      	bmi.n	800313c <_vfiprintf_r+0x4c>
 8003160:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003162:	f7ff ff2a 	bl	8002fba <__retarget_lock_release_recursive>
 8003166:	e7e9      	b.n	800313c <_vfiprintf_r+0x4c>
 8003168:	2300      	movs	r3, #0
 800316a:	9309      	str	r3, [sp, #36]	; 0x24
 800316c:	2320      	movs	r3, #32
 800316e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003172:	2330      	movs	r3, #48	; 0x30
 8003174:	f04f 0901 	mov.w	r9, #1
 8003178:	f8cd 800c 	str.w	r8, [sp, #12]
 800317c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800333c <_vfiprintf_r+0x24c>
 8003180:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003184:	4623      	mov	r3, r4
 8003186:	469a      	mov	sl, r3
 8003188:	f813 2b01 	ldrb.w	r2, [r3], #1
 800318c:	b10a      	cbz	r2, 8003192 <_vfiprintf_r+0xa2>
 800318e:	2a25      	cmp	r2, #37	; 0x25
 8003190:	d1f9      	bne.n	8003186 <_vfiprintf_r+0x96>
 8003192:	ebba 0b04 	subs.w	fp, sl, r4
 8003196:	d00b      	beq.n	80031b0 <_vfiprintf_r+0xc0>
 8003198:	465b      	mov	r3, fp
 800319a:	4622      	mov	r2, r4
 800319c:	4629      	mov	r1, r5
 800319e:	4630      	mov	r0, r6
 80031a0:	f7ff ff93 	bl	80030ca <__sfputs_r>
 80031a4:	3001      	adds	r0, #1
 80031a6:	f000 80aa 	beq.w	80032fe <_vfiprintf_r+0x20e>
 80031aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80031ac:	445a      	add	r2, fp
 80031ae:	9209      	str	r2, [sp, #36]	; 0x24
 80031b0:	f89a 3000 	ldrb.w	r3, [sl]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 80a2 	beq.w	80032fe <_vfiprintf_r+0x20e>
 80031ba:	2300      	movs	r3, #0
 80031bc:	f04f 32ff 	mov.w	r2, #4294967295
 80031c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031c4:	f10a 0a01 	add.w	sl, sl, #1
 80031c8:	9304      	str	r3, [sp, #16]
 80031ca:	9307      	str	r3, [sp, #28]
 80031cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80031d0:	931a      	str	r3, [sp, #104]	; 0x68
 80031d2:	4654      	mov	r4, sl
 80031d4:	2205      	movs	r2, #5
 80031d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031da:	4858      	ldr	r0, [pc, #352]	; (800333c <_vfiprintf_r+0x24c>)
 80031dc:	f000 fae8 	bl	80037b0 <memchr>
 80031e0:	9a04      	ldr	r2, [sp, #16]
 80031e2:	b9d8      	cbnz	r0, 800321c <_vfiprintf_r+0x12c>
 80031e4:	06d1      	lsls	r1, r2, #27
 80031e6:	bf44      	itt	mi
 80031e8:	2320      	movmi	r3, #32
 80031ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031ee:	0713      	lsls	r3, r2, #28
 80031f0:	bf44      	itt	mi
 80031f2:	232b      	movmi	r3, #43	; 0x2b
 80031f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031f8:	f89a 3000 	ldrb.w	r3, [sl]
 80031fc:	2b2a      	cmp	r3, #42	; 0x2a
 80031fe:	d015      	beq.n	800322c <_vfiprintf_r+0x13c>
 8003200:	4654      	mov	r4, sl
 8003202:	2000      	movs	r0, #0
 8003204:	f04f 0c0a 	mov.w	ip, #10
 8003208:	9a07      	ldr	r2, [sp, #28]
 800320a:	4621      	mov	r1, r4
 800320c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003210:	3b30      	subs	r3, #48	; 0x30
 8003212:	2b09      	cmp	r3, #9
 8003214:	d94e      	bls.n	80032b4 <_vfiprintf_r+0x1c4>
 8003216:	b1b0      	cbz	r0, 8003246 <_vfiprintf_r+0x156>
 8003218:	9207      	str	r2, [sp, #28]
 800321a:	e014      	b.n	8003246 <_vfiprintf_r+0x156>
 800321c:	eba0 0308 	sub.w	r3, r0, r8
 8003220:	fa09 f303 	lsl.w	r3, r9, r3
 8003224:	4313      	orrs	r3, r2
 8003226:	46a2      	mov	sl, r4
 8003228:	9304      	str	r3, [sp, #16]
 800322a:	e7d2      	b.n	80031d2 <_vfiprintf_r+0xe2>
 800322c:	9b03      	ldr	r3, [sp, #12]
 800322e:	1d19      	adds	r1, r3, #4
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	9103      	str	r1, [sp, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	bfbb      	ittet	lt
 8003238:	425b      	neglt	r3, r3
 800323a:	f042 0202 	orrlt.w	r2, r2, #2
 800323e:	9307      	strge	r3, [sp, #28]
 8003240:	9307      	strlt	r3, [sp, #28]
 8003242:	bfb8      	it	lt
 8003244:	9204      	strlt	r2, [sp, #16]
 8003246:	7823      	ldrb	r3, [r4, #0]
 8003248:	2b2e      	cmp	r3, #46	; 0x2e
 800324a:	d10c      	bne.n	8003266 <_vfiprintf_r+0x176>
 800324c:	7863      	ldrb	r3, [r4, #1]
 800324e:	2b2a      	cmp	r3, #42	; 0x2a
 8003250:	d135      	bne.n	80032be <_vfiprintf_r+0x1ce>
 8003252:	9b03      	ldr	r3, [sp, #12]
 8003254:	3402      	adds	r4, #2
 8003256:	1d1a      	adds	r2, r3, #4
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	9203      	str	r2, [sp, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	bfb8      	it	lt
 8003260:	f04f 33ff 	movlt.w	r3, #4294967295
 8003264:	9305      	str	r3, [sp, #20]
 8003266:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003340 <_vfiprintf_r+0x250>
 800326a:	2203      	movs	r2, #3
 800326c:	4650      	mov	r0, sl
 800326e:	7821      	ldrb	r1, [r4, #0]
 8003270:	f000 fa9e 	bl	80037b0 <memchr>
 8003274:	b140      	cbz	r0, 8003288 <_vfiprintf_r+0x198>
 8003276:	2340      	movs	r3, #64	; 0x40
 8003278:	eba0 000a 	sub.w	r0, r0, sl
 800327c:	fa03 f000 	lsl.w	r0, r3, r0
 8003280:	9b04      	ldr	r3, [sp, #16]
 8003282:	3401      	adds	r4, #1
 8003284:	4303      	orrs	r3, r0
 8003286:	9304      	str	r3, [sp, #16]
 8003288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800328c:	2206      	movs	r2, #6
 800328e:	482d      	ldr	r0, [pc, #180]	; (8003344 <_vfiprintf_r+0x254>)
 8003290:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003294:	f000 fa8c 	bl	80037b0 <memchr>
 8003298:	2800      	cmp	r0, #0
 800329a:	d03f      	beq.n	800331c <_vfiprintf_r+0x22c>
 800329c:	4b2a      	ldr	r3, [pc, #168]	; (8003348 <_vfiprintf_r+0x258>)
 800329e:	bb1b      	cbnz	r3, 80032e8 <_vfiprintf_r+0x1f8>
 80032a0:	9b03      	ldr	r3, [sp, #12]
 80032a2:	3307      	adds	r3, #7
 80032a4:	f023 0307 	bic.w	r3, r3, #7
 80032a8:	3308      	adds	r3, #8
 80032aa:	9303      	str	r3, [sp, #12]
 80032ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032ae:	443b      	add	r3, r7
 80032b0:	9309      	str	r3, [sp, #36]	; 0x24
 80032b2:	e767      	b.n	8003184 <_vfiprintf_r+0x94>
 80032b4:	460c      	mov	r4, r1
 80032b6:	2001      	movs	r0, #1
 80032b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80032bc:	e7a5      	b.n	800320a <_vfiprintf_r+0x11a>
 80032be:	2300      	movs	r3, #0
 80032c0:	f04f 0c0a 	mov.w	ip, #10
 80032c4:	4619      	mov	r1, r3
 80032c6:	3401      	adds	r4, #1
 80032c8:	9305      	str	r3, [sp, #20]
 80032ca:	4620      	mov	r0, r4
 80032cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032d0:	3a30      	subs	r2, #48	; 0x30
 80032d2:	2a09      	cmp	r2, #9
 80032d4:	d903      	bls.n	80032de <_vfiprintf_r+0x1ee>
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0c5      	beq.n	8003266 <_vfiprintf_r+0x176>
 80032da:	9105      	str	r1, [sp, #20]
 80032dc:	e7c3      	b.n	8003266 <_vfiprintf_r+0x176>
 80032de:	4604      	mov	r4, r0
 80032e0:	2301      	movs	r3, #1
 80032e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80032e6:	e7f0      	b.n	80032ca <_vfiprintf_r+0x1da>
 80032e8:	ab03      	add	r3, sp, #12
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	462a      	mov	r2, r5
 80032ee:	4630      	mov	r0, r6
 80032f0:	4b16      	ldr	r3, [pc, #88]	; (800334c <_vfiprintf_r+0x25c>)
 80032f2:	a904      	add	r1, sp, #16
 80032f4:	f3af 8000 	nop.w
 80032f8:	4607      	mov	r7, r0
 80032fa:	1c78      	adds	r0, r7, #1
 80032fc:	d1d6      	bne.n	80032ac <_vfiprintf_r+0x1bc>
 80032fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003300:	07d9      	lsls	r1, r3, #31
 8003302:	d405      	bmi.n	8003310 <_vfiprintf_r+0x220>
 8003304:	89ab      	ldrh	r3, [r5, #12]
 8003306:	059a      	lsls	r2, r3, #22
 8003308:	d402      	bmi.n	8003310 <_vfiprintf_r+0x220>
 800330a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800330c:	f7ff fe55 	bl	8002fba <__retarget_lock_release_recursive>
 8003310:	89ab      	ldrh	r3, [r5, #12]
 8003312:	065b      	lsls	r3, r3, #25
 8003314:	f53f af12 	bmi.w	800313c <_vfiprintf_r+0x4c>
 8003318:	9809      	ldr	r0, [sp, #36]	; 0x24
 800331a:	e711      	b.n	8003140 <_vfiprintf_r+0x50>
 800331c:	ab03      	add	r3, sp, #12
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	462a      	mov	r2, r5
 8003322:	4630      	mov	r0, r6
 8003324:	4b09      	ldr	r3, [pc, #36]	; (800334c <_vfiprintf_r+0x25c>)
 8003326:	a904      	add	r1, sp, #16
 8003328:	f000 f882 	bl	8003430 <_printf_i>
 800332c:	e7e4      	b.n	80032f8 <_vfiprintf_r+0x208>
 800332e:	bf00      	nop
 8003330:	08003e38 	.word	0x08003e38
 8003334:	08003e58 	.word	0x08003e58
 8003338:	08003e18 	.word	0x08003e18
 800333c:	08003e78 	.word	0x08003e78
 8003340:	08003e7e 	.word	0x08003e7e
 8003344:	08003e82 	.word	0x08003e82
 8003348:	00000000 	.word	0x00000000
 800334c:	080030cb 	.word	0x080030cb

08003350 <_printf_common>:
 8003350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003354:	4616      	mov	r6, r2
 8003356:	4699      	mov	r9, r3
 8003358:	688a      	ldr	r2, [r1, #8]
 800335a:	690b      	ldr	r3, [r1, #16]
 800335c:	4607      	mov	r7, r0
 800335e:	4293      	cmp	r3, r2
 8003360:	bfb8      	it	lt
 8003362:	4613      	movlt	r3, r2
 8003364:	6033      	str	r3, [r6, #0]
 8003366:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800336a:	460c      	mov	r4, r1
 800336c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003370:	b10a      	cbz	r2, 8003376 <_printf_common+0x26>
 8003372:	3301      	adds	r3, #1
 8003374:	6033      	str	r3, [r6, #0]
 8003376:	6823      	ldr	r3, [r4, #0]
 8003378:	0699      	lsls	r1, r3, #26
 800337a:	bf42      	ittt	mi
 800337c:	6833      	ldrmi	r3, [r6, #0]
 800337e:	3302      	addmi	r3, #2
 8003380:	6033      	strmi	r3, [r6, #0]
 8003382:	6825      	ldr	r5, [r4, #0]
 8003384:	f015 0506 	ands.w	r5, r5, #6
 8003388:	d106      	bne.n	8003398 <_printf_common+0x48>
 800338a:	f104 0a19 	add.w	sl, r4, #25
 800338e:	68e3      	ldr	r3, [r4, #12]
 8003390:	6832      	ldr	r2, [r6, #0]
 8003392:	1a9b      	subs	r3, r3, r2
 8003394:	42ab      	cmp	r3, r5
 8003396:	dc28      	bgt.n	80033ea <_printf_common+0x9a>
 8003398:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800339c:	1e13      	subs	r3, r2, #0
 800339e:	6822      	ldr	r2, [r4, #0]
 80033a0:	bf18      	it	ne
 80033a2:	2301      	movne	r3, #1
 80033a4:	0692      	lsls	r2, r2, #26
 80033a6:	d42d      	bmi.n	8003404 <_printf_common+0xb4>
 80033a8:	4649      	mov	r1, r9
 80033aa:	4638      	mov	r0, r7
 80033ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033b0:	47c0      	blx	r8
 80033b2:	3001      	adds	r0, #1
 80033b4:	d020      	beq.n	80033f8 <_printf_common+0xa8>
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	68e5      	ldr	r5, [r4, #12]
 80033ba:	f003 0306 	and.w	r3, r3, #6
 80033be:	2b04      	cmp	r3, #4
 80033c0:	bf18      	it	ne
 80033c2:	2500      	movne	r5, #0
 80033c4:	6832      	ldr	r2, [r6, #0]
 80033c6:	f04f 0600 	mov.w	r6, #0
 80033ca:	68a3      	ldr	r3, [r4, #8]
 80033cc:	bf08      	it	eq
 80033ce:	1aad      	subeq	r5, r5, r2
 80033d0:	6922      	ldr	r2, [r4, #16]
 80033d2:	bf08      	it	eq
 80033d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033d8:	4293      	cmp	r3, r2
 80033da:	bfc4      	itt	gt
 80033dc:	1a9b      	subgt	r3, r3, r2
 80033de:	18ed      	addgt	r5, r5, r3
 80033e0:	341a      	adds	r4, #26
 80033e2:	42b5      	cmp	r5, r6
 80033e4:	d11a      	bne.n	800341c <_printf_common+0xcc>
 80033e6:	2000      	movs	r0, #0
 80033e8:	e008      	b.n	80033fc <_printf_common+0xac>
 80033ea:	2301      	movs	r3, #1
 80033ec:	4652      	mov	r2, sl
 80033ee:	4649      	mov	r1, r9
 80033f0:	4638      	mov	r0, r7
 80033f2:	47c0      	blx	r8
 80033f4:	3001      	adds	r0, #1
 80033f6:	d103      	bne.n	8003400 <_printf_common+0xb0>
 80033f8:	f04f 30ff 	mov.w	r0, #4294967295
 80033fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003400:	3501      	adds	r5, #1
 8003402:	e7c4      	b.n	800338e <_printf_common+0x3e>
 8003404:	2030      	movs	r0, #48	; 0x30
 8003406:	18e1      	adds	r1, r4, r3
 8003408:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800340c:	1c5a      	adds	r2, r3, #1
 800340e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003412:	4422      	add	r2, r4
 8003414:	3302      	adds	r3, #2
 8003416:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800341a:	e7c5      	b.n	80033a8 <_printf_common+0x58>
 800341c:	2301      	movs	r3, #1
 800341e:	4622      	mov	r2, r4
 8003420:	4649      	mov	r1, r9
 8003422:	4638      	mov	r0, r7
 8003424:	47c0      	blx	r8
 8003426:	3001      	adds	r0, #1
 8003428:	d0e6      	beq.n	80033f8 <_printf_common+0xa8>
 800342a:	3601      	adds	r6, #1
 800342c:	e7d9      	b.n	80033e2 <_printf_common+0x92>
	...

08003430 <_printf_i>:
 8003430:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003434:	7e0f      	ldrb	r7, [r1, #24]
 8003436:	4691      	mov	r9, r2
 8003438:	2f78      	cmp	r7, #120	; 0x78
 800343a:	4680      	mov	r8, r0
 800343c:	460c      	mov	r4, r1
 800343e:	469a      	mov	sl, r3
 8003440:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003442:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003446:	d807      	bhi.n	8003458 <_printf_i+0x28>
 8003448:	2f62      	cmp	r7, #98	; 0x62
 800344a:	d80a      	bhi.n	8003462 <_printf_i+0x32>
 800344c:	2f00      	cmp	r7, #0
 800344e:	f000 80d9 	beq.w	8003604 <_printf_i+0x1d4>
 8003452:	2f58      	cmp	r7, #88	; 0x58
 8003454:	f000 80a4 	beq.w	80035a0 <_printf_i+0x170>
 8003458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800345c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003460:	e03a      	b.n	80034d8 <_printf_i+0xa8>
 8003462:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003466:	2b15      	cmp	r3, #21
 8003468:	d8f6      	bhi.n	8003458 <_printf_i+0x28>
 800346a:	a101      	add	r1, pc, #4	; (adr r1, 8003470 <_printf_i+0x40>)
 800346c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003470:	080034c9 	.word	0x080034c9
 8003474:	080034dd 	.word	0x080034dd
 8003478:	08003459 	.word	0x08003459
 800347c:	08003459 	.word	0x08003459
 8003480:	08003459 	.word	0x08003459
 8003484:	08003459 	.word	0x08003459
 8003488:	080034dd 	.word	0x080034dd
 800348c:	08003459 	.word	0x08003459
 8003490:	08003459 	.word	0x08003459
 8003494:	08003459 	.word	0x08003459
 8003498:	08003459 	.word	0x08003459
 800349c:	080035eb 	.word	0x080035eb
 80034a0:	0800350d 	.word	0x0800350d
 80034a4:	080035cd 	.word	0x080035cd
 80034a8:	08003459 	.word	0x08003459
 80034ac:	08003459 	.word	0x08003459
 80034b0:	0800360d 	.word	0x0800360d
 80034b4:	08003459 	.word	0x08003459
 80034b8:	0800350d 	.word	0x0800350d
 80034bc:	08003459 	.word	0x08003459
 80034c0:	08003459 	.word	0x08003459
 80034c4:	080035d5 	.word	0x080035d5
 80034c8:	682b      	ldr	r3, [r5, #0]
 80034ca:	1d1a      	adds	r2, r3, #4
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	602a      	str	r2, [r5, #0]
 80034d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034d8:	2301      	movs	r3, #1
 80034da:	e0a4      	b.n	8003626 <_printf_i+0x1f6>
 80034dc:	6820      	ldr	r0, [r4, #0]
 80034de:	6829      	ldr	r1, [r5, #0]
 80034e0:	0606      	lsls	r6, r0, #24
 80034e2:	f101 0304 	add.w	r3, r1, #4
 80034e6:	d50a      	bpl.n	80034fe <_printf_i+0xce>
 80034e8:	680e      	ldr	r6, [r1, #0]
 80034ea:	602b      	str	r3, [r5, #0]
 80034ec:	2e00      	cmp	r6, #0
 80034ee:	da03      	bge.n	80034f8 <_printf_i+0xc8>
 80034f0:	232d      	movs	r3, #45	; 0x2d
 80034f2:	4276      	negs	r6, r6
 80034f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034f8:	230a      	movs	r3, #10
 80034fa:	485e      	ldr	r0, [pc, #376]	; (8003674 <_printf_i+0x244>)
 80034fc:	e019      	b.n	8003532 <_printf_i+0x102>
 80034fe:	680e      	ldr	r6, [r1, #0]
 8003500:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003504:	602b      	str	r3, [r5, #0]
 8003506:	bf18      	it	ne
 8003508:	b236      	sxthne	r6, r6
 800350a:	e7ef      	b.n	80034ec <_printf_i+0xbc>
 800350c:	682b      	ldr	r3, [r5, #0]
 800350e:	6820      	ldr	r0, [r4, #0]
 8003510:	1d19      	adds	r1, r3, #4
 8003512:	6029      	str	r1, [r5, #0]
 8003514:	0601      	lsls	r1, r0, #24
 8003516:	d501      	bpl.n	800351c <_printf_i+0xec>
 8003518:	681e      	ldr	r6, [r3, #0]
 800351a:	e002      	b.n	8003522 <_printf_i+0xf2>
 800351c:	0646      	lsls	r6, r0, #25
 800351e:	d5fb      	bpl.n	8003518 <_printf_i+0xe8>
 8003520:	881e      	ldrh	r6, [r3, #0]
 8003522:	2f6f      	cmp	r7, #111	; 0x6f
 8003524:	bf0c      	ite	eq
 8003526:	2308      	moveq	r3, #8
 8003528:	230a      	movne	r3, #10
 800352a:	4852      	ldr	r0, [pc, #328]	; (8003674 <_printf_i+0x244>)
 800352c:	2100      	movs	r1, #0
 800352e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003532:	6865      	ldr	r5, [r4, #4]
 8003534:	2d00      	cmp	r5, #0
 8003536:	bfa8      	it	ge
 8003538:	6821      	ldrge	r1, [r4, #0]
 800353a:	60a5      	str	r5, [r4, #8]
 800353c:	bfa4      	itt	ge
 800353e:	f021 0104 	bicge.w	r1, r1, #4
 8003542:	6021      	strge	r1, [r4, #0]
 8003544:	b90e      	cbnz	r6, 800354a <_printf_i+0x11a>
 8003546:	2d00      	cmp	r5, #0
 8003548:	d04d      	beq.n	80035e6 <_printf_i+0x1b6>
 800354a:	4615      	mov	r5, r2
 800354c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003550:	fb03 6711 	mls	r7, r3, r1, r6
 8003554:	5dc7      	ldrb	r7, [r0, r7]
 8003556:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800355a:	4637      	mov	r7, r6
 800355c:	42bb      	cmp	r3, r7
 800355e:	460e      	mov	r6, r1
 8003560:	d9f4      	bls.n	800354c <_printf_i+0x11c>
 8003562:	2b08      	cmp	r3, #8
 8003564:	d10b      	bne.n	800357e <_printf_i+0x14e>
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	07de      	lsls	r6, r3, #31
 800356a:	d508      	bpl.n	800357e <_printf_i+0x14e>
 800356c:	6923      	ldr	r3, [r4, #16]
 800356e:	6861      	ldr	r1, [r4, #4]
 8003570:	4299      	cmp	r1, r3
 8003572:	bfde      	ittt	le
 8003574:	2330      	movle	r3, #48	; 0x30
 8003576:	f805 3c01 	strble.w	r3, [r5, #-1]
 800357a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800357e:	1b52      	subs	r2, r2, r5
 8003580:	6122      	str	r2, [r4, #16]
 8003582:	464b      	mov	r3, r9
 8003584:	4621      	mov	r1, r4
 8003586:	4640      	mov	r0, r8
 8003588:	f8cd a000 	str.w	sl, [sp]
 800358c:	aa03      	add	r2, sp, #12
 800358e:	f7ff fedf 	bl	8003350 <_printf_common>
 8003592:	3001      	adds	r0, #1
 8003594:	d14c      	bne.n	8003630 <_printf_i+0x200>
 8003596:	f04f 30ff 	mov.w	r0, #4294967295
 800359a:	b004      	add	sp, #16
 800359c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035a0:	4834      	ldr	r0, [pc, #208]	; (8003674 <_printf_i+0x244>)
 80035a2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80035a6:	6829      	ldr	r1, [r5, #0]
 80035a8:	6823      	ldr	r3, [r4, #0]
 80035aa:	f851 6b04 	ldr.w	r6, [r1], #4
 80035ae:	6029      	str	r1, [r5, #0]
 80035b0:	061d      	lsls	r5, r3, #24
 80035b2:	d514      	bpl.n	80035de <_printf_i+0x1ae>
 80035b4:	07df      	lsls	r7, r3, #31
 80035b6:	bf44      	itt	mi
 80035b8:	f043 0320 	orrmi.w	r3, r3, #32
 80035bc:	6023      	strmi	r3, [r4, #0]
 80035be:	b91e      	cbnz	r6, 80035c8 <_printf_i+0x198>
 80035c0:	6823      	ldr	r3, [r4, #0]
 80035c2:	f023 0320 	bic.w	r3, r3, #32
 80035c6:	6023      	str	r3, [r4, #0]
 80035c8:	2310      	movs	r3, #16
 80035ca:	e7af      	b.n	800352c <_printf_i+0xfc>
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	f043 0320 	orr.w	r3, r3, #32
 80035d2:	6023      	str	r3, [r4, #0]
 80035d4:	2378      	movs	r3, #120	; 0x78
 80035d6:	4828      	ldr	r0, [pc, #160]	; (8003678 <_printf_i+0x248>)
 80035d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80035dc:	e7e3      	b.n	80035a6 <_printf_i+0x176>
 80035de:	0659      	lsls	r1, r3, #25
 80035e0:	bf48      	it	mi
 80035e2:	b2b6      	uxthmi	r6, r6
 80035e4:	e7e6      	b.n	80035b4 <_printf_i+0x184>
 80035e6:	4615      	mov	r5, r2
 80035e8:	e7bb      	b.n	8003562 <_printf_i+0x132>
 80035ea:	682b      	ldr	r3, [r5, #0]
 80035ec:	6826      	ldr	r6, [r4, #0]
 80035ee:	1d18      	adds	r0, r3, #4
 80035f0:	6961      	ldr	r1, [r4, #20]
 80035f2:	6028      	str	r0, [r5, #0]
 80035f4:	0635      	lsls	r5, r6, #24
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	d501      	bpl.n	80035fe <_printf_i+0x1ce>
 80035fa:	6019      	str	r1, [r3, #0]
 80035fc:	e002      	b.n	8003604 <_printf_i+0x1d4>
 80035fe:	0670      	lsls	r0, r6, #25
 8003600:	d5fb      	bpl.n	80035fa <_printf_i+0x1ca>
 8003602:	8019      	strh	r1, [r3, #0]
 8003604:	2300      	movs	r3, #0
 8003606:	4615      	mov	r5, r2
 8003608:	6123      	str	r3, [r4, #16]
 800360a:	e7ba      	b.n	8003582 <_printf_i+0x152>
 800360c:	682b      	ldr	r3, [r5, #0]
 800360e:	2100      	movs	r1, #0
 8003610:	1d1a      	adds	r2, r3, #4
 8003612:	602a      	str	r2, [r5, #0]
 8003614:	681d      	ldr	r5, [r3, #0]
 8003616:	6862      	ldr	r2, [r4, #4]
 8003618:	4628      	mov	r0, r5
 800361a:	f000 f8c9 	bl	80037b0 <memchr>
 800361e:	b108      	cbz	r0, 8003624 <_printf_i+0x1f4>
 8003620:	1b40      	subs	r0, r0, r5
 8003622:	6060      	str	r0, [r4, #4]
 8003624:	6863      	ldr	r3, [r4, #4]
 8003626:	6123      	str	r3, [r4, #16]
 8003628:	2300      	movs	r3, #0
 800362a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800362e:	e7a8      	b.n	8003582 <_printf_i+0x152>
 8003630:	462a      	mov	r2, r5
 8003632:	4649      	mov	r1, r9
 8003634:	4640      	mov	r0, r8
 8003636:	6923      	ldr	r3, [r4, #16]
 8003638:	47d0      	blx	sl
 800363a:	3001      	adds	r0, #1
 800363c:	d0ab      	beq.n	8003596 <_printf_i+0x166>
 800363e:	6823      	ldr	r3, [r4, #0]
 8003640:	079b      	lsls	r3, r3, #30
 8003642:	d413      	bmi.n	800366c <_printf_i+0x23c>
 8003644:	68e0      	ldr	r0, [r4, #12]
 8003646:	9b03      	ldr	r3, [sp, #12]
 8003648:	4298      	cmp	r0, r3
 800364a:	bfb8      	it	lt
 800364c:	4618      	movlt	r0, r3
 800364e:	e7a4      	b.n	800359a <_printf_i+0x16a>
 8003650:	2301      	movs	r3, #1
 8003652:	4632      	mov	r2, r6
 8003654:	4649      	mov	r1, r9
 8003656:	4640      	mov	r0, r8
 8003658:	47d0      	blx	sl
 800365a:	3001      	adds	r0, #1
 800365c:	d09b      	beq.n	8003596 <_printf_i+0x166>
 800365e:	3501      	adds	r5, #1
 8003660:	68e3      	ldr	r3, [r4, #12]
 8003662:	9903      	ldr	r1, [sp, #12]
 8003664:	1a5b      	subs	r3, r3, r1
 8003666:	42ab      	cmp	r3, r5
 8003668:	dcf2      	bgt.n	8003650 <_printf_i+0x220>
 800366a:	e7eb      	b.n	8003644 <_printf_i+0x214>
 800366c:	2500      	movs	r5, #0
 800366e:	f104 0619 	add.w	r6, r4, #25
 8003672:	e7f5      	b.n	8003660 <_printf_i+0x230>
 8003674:	08003e89 	.word	0x08003e89
 8003678:	08003e9a 	.word	0x08003e9a

0800367c <__sread>:
 800367c:	b510      	push	{r4, lr}
 800367e:	460c      	mov	r4, r1
 8003680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003684:	f000 f8a2 	bl	80037cc <_read_r>
 8003688:	2800      	cmp	r0, #0
 800368a:	bfab      	itete	ge
 800368c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800368e:	89a3      	ldrhlt	r3, [r4, #12]
 8003690:	181b      	addge	r3, r3, r0
 8003692:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003696:	bfac      	ite	ge
 8003698:	6563      	strge	r3, [r4, #84]	; 0x54
 800369a:	81a3      	strhlt	r3, [r4, #12]
 800369c:	bd10      	pop	{r4, pc}

0800369e <__swrite>:
 800369e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036a2:	461f      	mov	r7, r3
 80036a4:	898b      	ldrh	r3, [r1, #12]
 80036a6:	4605      	mov	r5, r0
 80036a8:	05db      	lsls	r3, r3, #23
 80036aa:	460c      	mov	r4, r1
 80036ac:	4616      	mov	r6, r2
 80036ae:	d505      	bpl.n	80036bc <__swrite+0x1e>
 80036b0:	2302      	movs	r3, #2
 80036b2:	2200      	movs	r2, #0
 80036b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036b8:	f000 f868 	bl	800378c <_lseek_r>
 80036bc:	89a3      	ldrh	r3, [r4, #12]
 80036be:	4632      	mov	r2, r6
 80036c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036c4:	81a3      	strh	r3, [r4, #12]
 80036c6:	4628      	mov	r0, r5
 80036c8:	463b      	mov	r3, r7
 80036ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036d2:	f000 b817 	b.w	8003704 <_write_r>

080036d6 <__sseek>:
 80036d6:	b510      	push	{r4, lr}
 80036d8:	460c      	mov	r4, r1
 80036da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036de:	f000 f855 	bl	800378c <_lseek_r>
 80036e2:	1c43      	adds	r3, r0, #1
 80036e4:	89a3      	ldrh	r3, [r4, #12]
 80036e6:	bf15      	itete	ne
 80036e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80036ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80036ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80036f2:	81a3      	strheq	r3, [r4, #12]
 80036f4:	bf18      	it	ne
 80036f6:	81a3      	strhne	r3, [r4, #12]
 80036f8:	bd10      	pop	{r4, pc}

080036fa <__sclose>:
 80036fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036fe:	f000 b813 	b.w	8003728 <_close_r>
	...

08003704 <_write_r>:
 8003704:	b538      	push	{r3, r4, r5, lr}
 8003706:	4604      	mov	r4, r0
 8003708:	4608      	mov	r0, r1
 800370a:	4611      	mov	r1, r2
 800370c:	2200      	movs	r2, #0
 800370e:	4d05      	ldr	r5, [pc, #20]	; (8003724 <_write_r+0x20>)
 8003710:	602a      	str	r2, [r5, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	f7fd f842 	bl	800079c <_write>
 8003718:	1c43      	adds	r3, r0, #1
 800371a:	d102      	bne.n	8003722 <_write_r+0x1e>
 800371c:	682b      	ldr	r3, [r5, #0]
 800371e:	b103      	cbz	r3, 8003722 <_write_r+0x1e>
 8003720:	6023      	str	r3, [r4, #0]
 8003722:	bd38      	pop	{r3, r4, r5, pc}
 8003724:	20000174 	.word	0x20000174

08003728 <_close_r>:
 8003728:	b538      	push	{r3, r4, r5, lr}
 800372a:	2300      	movs	r3, #0
 800372c:	4d05      	ldr	r5, [pc, #20]	; (8003744 <_close_r+0x1c>)
 800372e:	4604      	mov	r4, r0
 8003730:	4608      	mov	r0, r1
 8003732:	602b      	str	r3, [r5, #0]
 8003734:	f7fd f97d 	bl	8000a32 <_close>
 8003738:	1c43      	adds	r3, r0, #1
 800373a:	d102      	bne.n	8003742 <_close_r+0x1a>
 800373c:	682b      	ldr	r3, [r5, #0]
 800373e:	b103      	cbz	r3, 8003742 <_close_r+0x1a>
 8003740:	6023      	str	r3, [r4, #0]
 8003742:	bd38      	pop	{r3, r4, r5, pc}
 8003744:	20000174 	.word	0x20000174

08003748 <_fstat_r>:
 8003748:	b538      	push	{r3, r4, r5, lr}
 800374a:	2300      	movs	r3, #0
 800374c:	4d06      	ldr	r5, [pc, #24]	; (8003768 <_fstat_r+0x20>)
 800374e:	4604      	mov	r4, r0
 8003750:	4608      	mov	r0, r1
 8003752:	4611      	mov	r1, r2
 8003754:	602b      	str	r3, [r5, #0]
 8003756:	f7fd f977 	bl	8000a48 <_fstat>
 800375a:	1c43      	adds	r3, r0, #1
 800375c:	d102      	bne.n	8003764 <_fstat_r+0x1c>
 800375e:	682b      	ldr	r3, [r5, #0]
 8003760:	b103      	cbz	r3, 8003764 <_fstat_r+0x1c>
 8003762:	6023      	str	r3, [r4, #0]
 8003764:	bd38      	pop	{r3, r4, r5, pc}
 8003766:	bf00      	nop
 8003768:	20000174 	.word	0x20000174

0800376c <_isatty_r>:
 800376c:	b538      	push	{r3, r4, r5, lr}
 800376e:	2300      	movs	r3, #0
 8003770:	4d05      	ldr	r5, [pc, #20]	; (8003788 <_isatty_r+0x1c>)
 8003772:	4604      	mov	r4, r0
 8003774:	4608      	mov	r0, r1
 8003776:	602b      	str	r3, [r5, #0]
 8003778:	f7fd f975 	bl	8000a66 <_isatty>
 800377c:	1c43      	adds	r3, r0, #1
 800377e:	d102      	bne.n	8003786 <_isatty_r+0x1a>
 8003780:	682b      	ldr	r3, [r5, #0]
 8003782:	b103      	cbz	r3, 8003786 <_isatty_r+0x1a>
 8003784:	6023      	str	r3, [r4, #0]
 8003786:	bd38      	pop	{r3, r4, r5, pc}
 8003788:	20000174 	.word	0x20000174

0800378c <_lseek_r>:
 800378c:	b538      	push	{r3, r4, r5, lr}
 800378e:	4604      	mov	r4, r0
 8003790:	4608      	mov	r0, r1
 8003792:	4611      	mov	r1, r2
 8003794:	2200      	movs	r2, #0
 8003796:	4d05      	ldr	r5, [pc, #20]	; (80037ac <_lseek_r+0x20>)
 8003798:	602a      	str	r2, [r5, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	f7fd f96d 	bl	8000a7a <_lseek>
 80037a0:	1c43      	adds	r3, r0, #1
 80037a2:	d102      	bne.n	80037aa <_lseek_r+0x1e>
 80037a4:	682b      	ldr	r3, [r5, #0]
 80037a6:	b103      	cbz	r3, 80037aa <_lseek_r+0x1e>
 80037a8:	6023      	str	r3, [r4, #0]
 80037aa:	bd38      	pop	{r3, r4, r5, pc}
 80037ac:	20000174 	.word	0x20000174

080037b0 <memchr>:
 80037b0:	4603      	mov	r3, r0
 80037b2:	b510      	push	{r4, lr}
 80037b4:	b2c9      	uxtb	r1, r1
 80037b6:	4402      	add	r2, r0
 80037b8:	4293      	cmp	r3, r2
 80037ba:	4618      	mov	r0, r3
 80037bc:	d101      	bne.n	80037c2 <memchr+0x12>
 80037be:	2000      	movs	r0, #0
 80037c0:	e003      	b.n	80037ca <memchr+0x1a>
 80037c2:	7804      	ldrb	r4, [r0, #0]
 80037c4:	3301      	adds	r3, #1
 80037c6:	428c      	cmp	r4, r1
 80037c8:	d1f6      	bne.n	80037b8 <memchr+0x8>
 80037ca:	bd10      	pop	{r4, pc}

080037cc <_read_r>:
 80037cc:	b538      	push	{r3, r4, r5, lr}
 80037ce:	4604      	mov	r4, r0
 80037d0:	4608      	mov	r0, r1
 80037d2:	4611      	mov	r1, r2
 80037d4:	2200      	movs	r2, #0
 80037d6:	4d05      	ldr	r5, [pc, #20]	; (80037ec <_read_r+0x20>)
 80037d8:	602a      	str	r2, [r5, #0]
 80037da:	461a      	mov	r2, r3
 80037dc:	f7fd f90c 	bl	80009f8 <_read>
 80037e0:	1c43      	adds	r3, r0, #1
 80037e2:	d102      	bne.n	80037ea <_read_r+0x1e>
 80037e4:	682b      	ldr	r3, [r5, #0]
 80037e6:	b103      	cbz	r3, 80037ea <_read_r+0x1e>
 80037e8:	6023      	str	r3, [r4, #0]
 80037ea:	bd38      	pop	{r3, r4, r5, pc}
 80037ec:	20000174 	.word	0x20000174

080037f0 <_init>:
 80037f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f2:	bf00      	nop
 80037f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037f6:	bc08      	pop	{r3}
 80037f8:	469e      	mov	lr, r3
 80037fa:	4770      	bx	lr

080037fc <_fini>:
 80037fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fe:	bf00      	nop
 8003800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003802:	bc08      	pop	{r3}
 8003804:	469e      	mov	lr, r3
 8003806:	4770      	bx	lr
